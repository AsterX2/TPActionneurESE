
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fd0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  080091b0  080091b0  0000a1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009440  08009440  0000b124  2**0
                  CONTENTS
  4 .ARM          00000008  08009440  08009440  0000a440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009448  08009448  0000b124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009448  08009448  0000a448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800944c  0800944c  0000a44c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000124  20000000  08009450  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  20000124  08009574  0000b124  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000630  08009574  0000b630  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b124  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a499  00000000  00000000  0000b154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003673  00000000  00000000  000255ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f8  00000000  00000000  00028c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010fc  00000000  00000000  0002a258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a20a  00000000  00000000  0002b354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b362  00000000  00000000  0005555e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001145dd  00000000  00000000  000708c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00184e9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068e4  00000000  00000000  00184ee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  0018b7c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000124 	.word	0x20000124
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009198 	.word	0x08009198

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000128 	.word	0x20000128
 800021c:	08009198 	.word	0x08009198

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08c      	sub	sp, #48	@ 0x30
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2220      	movs	r2, #32
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f007 fd20 	bl	800803e <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005fe:	4b32      	ldr	r3, [pc, #200]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000600:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000604:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000606:	4b30      	ldr	r3, [pc, #192]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000608:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800060c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060e:	4b2e      	ldr	r3, [pc, #184]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000614:	4b2c      	ldr	r3, [pc, #176]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800061a:	4b2b      	ldr	r3, [pc, #172]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000620:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000622:	2200      	movs	r2, #0
 8000624:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000626:	4b28      	ldr	r3, [pc, #160]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000628:	2204      	movs	r2, #4
 800062a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800062c:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800062e:	2200      	movs	r2, #0
 8000630:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000632:	4b25      	ldr	r3, [pc, #148]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000634:	2200      	movs	r2, #0
 8000636:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000638:	4b23      	ldr	r3, [pc, #140]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800063a:	2201      	movs	r2, #1
 800063c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063e:	4b22      	ldr	r3, [pc, #136]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000646:	4b20      	ldr	r3, [pc, #128]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000648:	2200      	movs	r2, #0
 800064a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800064c:	4b1e      	ldr	r3, [pc, #120]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800064e:	2200      	movs	r2, #0
 8000650:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000652:	4b1d      	ldr	r3, [pc, #116]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000654:	2200      	movs	r2, #0
 8000656:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800065a:	4b1b      	ldr	r3, [pc, #108]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800065c:	2200      	movs	r2, #0
 800065e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b19      	ldr	r3, [pc, #100]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4817      	ldr	r0, [pc, #92]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800066a:	f001 fb2b 	bl	8001cc4 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000674:	f000 faa4 	bl	8000bc0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000680:	4619      	mov	r1, r3
 8000682:	4811      	ldr	r0, [pc, #68]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000684:	f002 f946 	bl	8002914 <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800068e:	f000 fa97 	bl	8000bc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000692:	4b0e      	ldr	r3, [pc, #56]	@ (80006cc <MX_ADC1_Init+0xec>)
 8000694:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	237f      	movs	r3, #127	@ 0x7f
 80006a0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a2:	2304      	movs	r3, #4
 80006a4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	4619      	mov	r1, r3
 80006ae:	4806      	ldr	r0, [pc, #24]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 80006b0:	f001 fcca 	bl	8002048 <HAL_ADC_ConfigChannel>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006ba:	f000 fa81 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	3730      	adds	r7, #48	@ 0x30
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000140 	.word	0x20000140
 80006cc:	21800100 	.word	0x21800100

080006d0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006d6:	463b      	mov	r3, r7
 80006d8:	2220      	movs	r2, #32
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f007 fcae 	bl	800803e <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006e4:	4a2b      	ldr	r2, [pc, #172]	@ (8000794 <MX_ADC2_Init+0xc4>)
 80006e6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006e8:	4b29      	ldr	r3, [pc, #164]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006ea:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006ee:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006f0:	4b27      	ldr	r3, [pc, #156]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006f6:	4b26      	ldr	r3, [pc, #152]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80006fc:	4b24      	ldr	r3, [pc, #144]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000702:	4b23      	ldr	r3, [pc, #140]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000704:	2200      	movs	r2, #0
 8000706:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000708:	4b21      	ldr	r3, [pc, #132]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800070a:	2204      	movs	r2, #4
 800070c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800070e:	4b20      	ldr	r3, [pc, #128]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000710:	2200      	movs	r2, #0
 8000712:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000714:	4b1e      	ldr	r3, [pc, #120]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000716:	2200      	movs	r2, #0
 8000718:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800071a:	4b1d      	ldr	r3, [pc, #116]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800071c:	2201      	movs	r2, #1
 800071e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000720:	4b1b      	ldr	r3, [pc, #108]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000722:	2200      	movs	r2, #0
 8000724:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000728:	4b19      	ldr	r3, [pc, #100]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800072a:	2200      	movs	r2, #0
 800072c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800072e:	4b18      	ldr	r3, [pc, #96]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000730:	2200      	movs	r2, #0
 8000732:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000734:	4b16      	ldr	r3, [pc, #88]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000736:	2200      	movs	r2, #0
 8000738:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800073c:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800073e:	2200      	movs	r2, #0
 8000740:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000742:	4b13      	ldr	r3, [pc, #76]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000744:	2200      	movs	r2, #0
 8000746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800074a:	4811      	ldr	r0, [pc, #68]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800074c:	f001 faba 	bl	8001cc4 <HAL_ADC_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000756:	f000 fa33 	bl	8000bc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800075a:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <MX_ADC2_Init+0xc8>)
 800075c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800075e:	2306      	movs	r3, #6
 8000760:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000766:	237f      	movs	r3, #127	@ 0x7f
 8000768:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800076a:	2304      	movs	r3, #4
 800076c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000772:	463b      	mov	r3, r7
 8000774:	4619      	mov	r1, r3
 8000776:	4806      	ldr	r0, [pc, #24]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000778:	f001 fc66 	bl	8002048 <HAL_ADC_ConfigChannel>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000782:	f000 fa1d 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	3720      	adds	r7, #32
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200001ac 	.word	0x200001ac
 8000794:	50000100 	.word	0x50000100
 8000798:	19200040 	.word	0x19200040

0800079c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b0a4      	sub	sp, #144	@ 0x90
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007b8:	2254      	movs	r2, #84	@ 0x54
 80007ba:	2100      	movs	r1, #0
 80007bc:	4618      	mov	r0, r3
 80007be:	f007 fc3e 	bl	800803e <memset>
  if(adcHandle->Instance==ADC1)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80007ca:	d174      	bne.n	80008b6 <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80007cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007d2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80007d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007dc:	4618      	mov	r0, r3
 80007de:	f003 fb19 	bl	8003e14 <HAL_RCCEx_PeriphCLKConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80007e8:	f000 f9ea 	bl	8000bc0 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80007ec:	4b63      	ldr	r3, [pc, #396]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	3301      	adds	r3, #1
 80007f2:	4a62      	ldr	r2, [pc, #392]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80007f4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80007f6:	4b61      	ldr	r3, [pc, #388]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d10b      	bne.n	8000816 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80007fe:	4b60      	ldr	r3, [pc, #384]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	4a5f      	ldr	r2, [pc, #380]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000804:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080a:	4b5d      	ldr	r3, [pc, #372]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000812:	627b      	str	r3, [r7, #36]	@ 0x24
 8000814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	4b5a      	ldr	r3, [pc, #360]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	4a59      	ldr	r2, [pc, #356]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800081c:	f043 0304 	orr.w	r3, r3, #4
 8000820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000822:	4b57      	ldr	r3, [pc, #348]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	623b      	str	r3, [r7, #32]
 800082c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	4b54      	ldr	r3, [pc, #336]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	4a53      	ldr	r2, [pc, #332]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800083a:	4b51      	ldr	r3, [pc, #324]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	61fb      	str	r3, [r7, #28]
 8000844:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	4b4e      	ldr	r3, [pc, #312]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	4a4d      	ldr	r2, [pc, #308]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000852:	4b4b      	ldr	r3, [pc, #300]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	61bb      	str	r3, [r7, #24]
 800085c:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 800085e:	2304      	movs	r3, #4
 8000860:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000862:	2303      	movs	r3, #3
 8000864:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 800086e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000872:	4619      	mov	r1, r3
 8000874:	4843      	ldr	r0, [pc, #268]	@ (8000984 <HAL_ADC_MspInit+0x1e8>)
 8000876:	f002 faf5 	bl	8002e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 800087a:	2302      	movs	r3, #2
 800087c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800087e:	2303      	movs	r3, #3
 8000880:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800088e:	4619      	mov	r1, r3
 8000890:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000894:	f002 fae6 	bl	8002e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000898:	2303      	movs	r3, #3
 800089a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800089c:	2303      	movs	r3, #3
 800089e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80008ac:	4619      	mov	r1, r3
 80008ae:	4836      	ldr	r0, [pc, #216]	@ (8000988 <HAL_ADC_MspInit+0x1ec>)
 80008b0:	f002 fad8 	bl	8002e64 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80008b4:	e05e      	b.n	8000974 <HAL_ADC_MspInit+0x1d8>
  else if(adcHandle->Instance==ADC2)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a34      	ldr	r2, [pc, #208]	@ (800098c <HAL_ADC_MspInit+0x1f0>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d159      	bne.n	8000974 <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80008c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80008c6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80008ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008d0:	4618      	mov	r0, r3
 80008d2:	f003 fa9f 	bl	8003e14 <HAL_RCCEx_PeriphCLKConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <HAL_ADC_MspInit+0x144>
      Error_Handler();
 80008dc:	f000 f970 	bl	8000bc0 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80008e0:	4b26      	ldr	r3, [pc, #152]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	3301      	adds	r3, #1
 80008e6:	4a25      	ldr	r2, [pc, #148]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80008e8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80008ea:	4b24      	ldr	r3, [pc, #144]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d10b      	bne.n	800090a <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80008f2:	4b23      	ldr	r3, [pc, #140]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f6:	4a22      	ldr	r2, [pc, #136]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 80008f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80008fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008fe:	4b20      	ldr	r3, [pc, #128]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000902:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800090a:	4b1d      	ldr	r3, [pc, #116]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090e:	4a1c      	ldr	r2, [pc, #112]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000910:	f043 0304 	orr.w	r3, r3, #4
 8000914:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000916:	4b1a      	ldr	r3, [pc, #104]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091a:	f003 0304 	and.w	r3, r3, #4
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	4b17      	ldr	r3, [pc, #92]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000926:	4a16      	ldr	r2, [pc, #88]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800092e:	4b14      	ldr	r3, [pc, #80]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 800093a:	230b      	movs	r3, #11
 800093c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800093e:	2303      	movs	r3, #3
 8000940:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800094a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800094e:	4619      	mov	r1, r3
 8000950:	480c      	ldr	r0, [pc, #48]	@ (8000984 <HAL_ADC_MspInit+0x1e8>)
 8000952:	f002 fa87 	bl	8002e64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8000956:	2301      	movs	r3, #1
 8000958:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800095a:	2303      	movs	r3, #3
 800095c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800096a:	4619      	mov	r1, r3
 800096c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000970:	f002 fa78 	bl	8002e64 <HAL_GPIO_Init>
}
 8000974:	bf00      	nop
 8000976:	3790      	adds	r7, #144	@ 0x90
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000218 	.word	0x20000218
 8000980:	40021000 	.word	0x40021000
 8000984:	48000800 	.word	0x48000800
 8000988:	48000400 	.word	0x48000400
 800098c:	50000100 	.word	0x50000100

08000990 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	@ 0x28
 8000994:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a6:	4b3f      	ldr	r3, [pc, #252]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009aa:	4a3e      	ldr	r2, [pc, #248]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009ac:	f043 0304 	orr.w	r3, r3, #4
 80009b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009b2:	4b3c      	ldr	r3, [pc, #240]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b6:	f003 0304 	and.w	r3, r3, #4
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009be:	4b39      	ldr	r3, [pc, #228]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c2:	4a38      	ldr	r2, [pc, #224]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009c4:	f043 0320 	orr.w	r3, r3, #32
 80009c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ca:	4b36      	ldr	r3, [pc, #216]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ce:	f003 0320 	and.w	r3, r3, #32
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	4b33      	ldr	r3, [pc, #204]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009da:	4a32      	ldr	r2, [pc, #200]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e2:	4b30      	ldr	r3, [pc, #192]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ee:	4b2d      	ldr	r3, [pc, #180]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f2:	4a2c      	ldr	r2, [pc, #176]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009fa:	4b2a      	ldr	r3, [pc, #168]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a06:	4b27      	ldr	r3, [pc, #156]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0a:	4a26      	ldr	r2, [pc, #152]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 8000a0c:	f043 0308 	orr.w	r3, r3, #8
 8000a10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a12:	4b24      	ldr	r3, [pc, #144]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a16:	f003 0308 	and.w	r3, r3, #8
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2120      	movs	r1, #32
 8000a22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a26:	f002 fb9f 	bl	8003168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2104      	movs	r1, #4
 8000a2e:	481e      	ldr	r0, [pc, #120]	@ (8000aa8 <MX_GPIO_Init+0x118>)
 8000a30:	f002 fb9a 	bl	8003168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000a34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a3a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4818      	ldr	r0, [pc, #96]	@ (8000aac <MX_GPIO_Init+0x11c>)
 8000a4c:	f002 fa0a 	bl	8002e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000a50:	2320      	movs	r3, #32
 8000a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4619      	mov	r1, r3
 8000a66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a6a:	f002 f9fb 	bl	8002e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8000a6e:	2304      	movs	r3, #4
 8000a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	4808      	ldr	r0, [pc, #32]	@ (8000aa8 <MX_GPIO_Init+0x118>)
 8000a86:	f002 f9ed 	bl	8002e64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	2028      	movs	r0, #40	@ 0x28
 8000a90:	f002 f900 	bl	8002c94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a94:	2028      	movs	r0, #40	@ 0x28
 8000a96:	f002 f917 	bl	8002cc8 <HAL_NVIC_EnableIRQ>

}
 8000a9a:	bf00      	nop
 8000a9c:	3728      	adds	r7, #40	@ 0x28
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	48000c00 	.word	0x48000c00
 8000aac:	48000800 	.word	0x48000800

08000ab0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab4:	f000 fef5 	bl	80018a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab8:	f000 f826 	bl	8000b08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000abc:	f7ff ff68 	bl	8000990 <MX_GPIO_Init>
  MX_ADC2_Init();
 8000ac0:	f7ff fe06 	bl	80006d0 <MX_ADC2_Init>
  MX_ADC1_Init();
 8000ac4:	f7ff fd8c 	bl	80005e0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000ac8:	f000 fa3e 	bl	8000f48 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000acc:	f000 faee 	bl	80010ac <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000ad0:	f000 fc22 	bl	8001318 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000ad4:	f000 fc6c 	bl	80013b0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	Shell_Init();
 8000ad8:	f000 fd5e 	bl	8001598 <Shell_Init>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000adc:	2100      	movs	r1, #0
 8000ade:	4809      	ldr	r0, [pc, #36]	@ (8000b04 <main+0x54>)
 8000ae0:	f003 fd18 	bl	8004514 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4807      	ldr	r0, [pc, #28]	@ (8000b04 <main+0x54>)
 8000ae8:	f004 fdfc 	bl	80056e4 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000aec:	2104      	movs	r1, #4
 8000aee:	4805      	ldr	r0, [pc, #20]	@ (8000b04 <main+0x54>)
 8000af0:	f003 fd10 	bl	8004514 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000af4:	2104      	movs	r1, #4
 8000af6:	4803      	ldr	r0, [pc, #12]	@ (8000b04 <main+0x54>)
 8000af8:	f004 fdf4 	bl	80056e4 <HAL_TIMEx_PWMN_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		Shell_Loop();
 8000afc:	f000 fd8c 	bl	8001618 <Shell_Loop>
 8000b00:	e7fc      	b.n	8000afc <main+0x4c>
 8000b02:	bf00      	nop
 8000b04:	2000026c 	.word	0x2000026c

08000b08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b094      	sub	sp, #80	@ 0x50
 8000b0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b0e:	f107 0318 	add.w	r3, r7, #24
 8000b12:	2238      	movs	r2, #56	@ 0x38
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f007 fa91 	bl	800803e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	f002 fb58 	bl	80031e0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b30:	2301      	movs	r3, #1
 8000b32:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b34:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b38:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000b42:	2306      	movs	r3, #6
 8000b44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000b46:	2355      	movs	r3, #85	@ 0x55
 8000b48:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b52:	2302      	movs	r3, #2
 8000b54:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b56:	f107 0318 	add.w	r3, r7, #24
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f002 fbf4 	bl	8003348 <HAL_RCC_OscConfig>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000b66:	f000 f82b 	bl	8000bc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b6a:	230f      	movs	r3, #15
 8000b6c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	2104      	movs	r1, #4
 8000b82:	4618      	mov	r0, r3
 8000b84:	f002 fef8 	bl	8003978 <HAL_RCC_ClockConfig>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000b8e:	f000 f817 	bl	8000bc0 <Error_Handler>
  }
}
 8000b92:	bf00      	nop
 8000b94:	3750      	adds	r7, #80	@ 0x50
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a04      	ldr	r2, [pc, #16]	@ (8000bbc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d101      	bne.n	8000bb2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bae:	f000 fe91 	bl	80018d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40001000 	.word	0x40001000

08000bc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc4:	b672      	cpsid	i
}
 8000bc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <Error_Handler+0x8>

08000bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c10 <HAL_MspInit+0x44>)
 8000bd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bd6:	4a0e      	ldr	r2, [pc, #56]	@ (8000c10 <HAL_MspInit+0x44>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bde:	4b0c      	ldr	r3, [pc, #48]	@ (8000c10 <HAL_MspInit+0x44>)
 8000be0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bea:	4b09      	ldr	r3, [pc, #36]	@ (8000c10 <HAL_MspInit+0x44>)
 8000bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bee:	4a08      	ldr	r2, [pc, #32]	@ (8000c10 <HAL_MspInit+0x44>)
 8000bf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bf4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bf6:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <HAL_MspInit+0x44>)
 8000bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c02:	f002 fb91 	bl	8003328 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40021000 	.word	0x40021000

08000c14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08c      	sub	sp, #48	@ 0x30
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	@ (8000cd8 <HAL_InitTick+0xc4>)
 8000c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c28:	4a2b      	ldr	r2, [pc, #172]	@ (8000cd8 <HAL_InitTick+0xc4>)
 8000c2a:	f043 0310 	orr.w	r3, r3, #16
 8000c2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c30:	4b29      	ldr	r3, [pc, #164]	@ (8000cd8 <HAL_InitTick+0xc4>)
 8000c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c34:	f003 0310 	and.w	r3, r3, #16
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c3c:	f107 020c 	add.w	r2, r7, #12
 8000c40:	f107 0310 	add.w	r3, r7, #16
 8000c44:	4611      	mov	r1, r2
 8000c46:	4618      	mov	r0, r3
 8000c48:	f003 f86c 	bl	8003d24 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c4c:	f003 f83e 	bl	8003ccc <HAL_RCC_GetPCLK1Freq>
 8000c50:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c54:	4a21      	ldr	r2, [pc, #132]	@ (8000cdc <HAL_InitTick+0xc8>)
 8000c56:	fba2 2303 	umull	r2, r3, r2, r3
 8000c5a:	0c9b      	lsrs	r3, r3, #18
 8000c5c:	3b01      	subs	r3, #1
 8000c5e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce0 <HAL_InitTick+0xcc>)
 8000c62:	4a20      	ldr	r2, [pc, #128]	@ (8000ce4 <HAL_InitTick+0xd0>)
 8000c64:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce0 <HAL_InitTick+0xcc>)
 8000c68:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c6c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c6e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ce0 <HAL_InitTick+0xcc>)
 8000c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c72:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c74:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce0 <HAL_InitTick+0xcc>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	@ (8000ce0 <HAL_InitTick+0xcc>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000c80:	4817      	ldr	r0, [pc, #92]	@ (8000ce0 <HAL_InitTick+0xcc>)
 8000c82:	f003 fb15 	bl	80042b0 <HAL_TIM_Base_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000c8c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d11b      	bne.n	8000ccc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c94:	4812      	ldr	r0, [pc, #72]	@ (8000ce0 <HAL_InitTick+0xcc>)
 8000c96:	f003 fb6d 	bl	8004374 <HAL_TIM_Base_Start_IT>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000ca0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d111      	bne.n	8000ccc <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ca8:	2036      	movs	r0, #54	@ 0x36
 8000caa:	f002 f80d 	bl	8002cc8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2b0f      	cmp	r3, #15
 8000cb2:	d808      	bhi.n	8000cc6 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	6879      	ldr	r1, [r7, #4]
 8000cb8:	2036      	movs	r0, #54	@ 0x36
 8000cba:	f001 ffeb 	bl	8002c94 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce8 <HAL_InitTick+0xd4>)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6013      	str	r3, [r2, #0]
 8000cc4:	e002      	b.n	8000ccc <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ccc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3730      	adds	r7, #48	@ 0x30
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	431bde83 	.word	0x431bde83
 8000ce0:	2000021c 	.word	0x2000021c
 8000ce4:	40001000 	.word	0x40001000
 8000ce8:	200000c0 	.word	0x200000c0

08000cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <NMI_Handler+0x4>

08000cf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <HardFault_Handler+0x4>

08000cfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <MemManage_Handler+0x4>

08000d04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <BusFault_Handler+0x4>

08000d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d10:	bf00      	nop
 8000d12:	e7fd      	b.n	8000d10 <UsageFault_Handler+0x4>

08000d14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d50:	4802      	ldr	r0, [pc, #8]	@ (8000d5c <USART2_IRQHandler+0x10>)
 8000d52:	f005 f879 	bl	8005e48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000304 	.word	0x20000304

08000d60 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d64:	4802      	ldr	r0, [pc, #8]	@ (8000d70 <USART3_IRQHandler+0x10>)
 8000d66:	f005 f86f 	bl	8005e48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000394 	.word	0x20000394

08000d74 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8000d78:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000d7c:	f002 fa0c 	bl	8003198 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d88:	4802      	ldr	r0, [pc, #8]	@ (8000d94 <TIM6_DAC_IRQHandler+0x10>)
 8000d8a:	f003 fcd5 	bl	8004738 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	2000021c 	.word	0x2000021c

08000d98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return 1;
 8000d9c:	2301      	movs	r3, #1
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <_kill>:

int _kill(int pid, int sig)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000db2:	f007 f9ef 	bl	8008194 <__errno>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2216      	movs	r2, #22
 8000dba:	601a      	str	r2, [r3, #0]
  return -1;
 8000dbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <_exit>:

void _exit (int status)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f7ff ffe7 	bl	8000da8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000dda:	bf00      	nop
 8000ddc:	e7fd      	b.n	8000dda <_exit+0x12>

08000dde <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b086      	sub	sp, #24
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	60f8      	str	r0, [r7, #12]
 8000de6:	60b9      	str	r1, [r7, #8]
 8000de8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
 8000dee:	e00a      	b.n	8000e06 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000df0:	f3af 8000 	nop.w
 8000df4:	4601      	mov	r1, r0
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	1c5a      	adds	r2, r3, #1
 8000dfa:	60ba      	str	r2, [r7, #8]
 8000dfc:	b2ca      	uxtb	r2, r1
 8000dfe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	3301      	adds	r3, #1
 8000e04:	617b      	str	r3, [r7, #20]
 8000e06:	697a      	ldr	r2, [r7, #20]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	dbf0      	blt.n	8000df0 <_read+0x12>
  }

  return len;
 8000e0e:	687b      	ldr	r3, [r7, #4]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3718      	adds	r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
 8000e28:	e009      	b.n	8000e3e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	1c5a      	adds	r2, r3, #1
 8000e2e:	60ba      	str	r2, [r7, #8]
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	617b      	str	r3, [r7, #20]
 8000e3e:	697a      	ldr	r2, [r7, #20]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	dbf1      	blt.n	8000e2a <_write+0x12>
  }
  return len;
 8000e46:	687b      	ldr	r3, [r7, #4]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3718      	adds	r7, #24
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <_close>:

int _close(int file)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e78:	605a      	str	r2, [r3, #4]
  return 0;
 8000e7a:	2300      	movs	r3, #0
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <_isatty>:

int _isatty(int file)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e90:	2301      	movs	r3, #1
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	b085      	sub	sp, #20
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	60f8      	str	r0, [r7, #12]
 8000ea6:	60b9      	str	r1, [r7, #8]
 8000ea8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000eaa:	2300      	movs	r3, #0
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec0:	4a14      	ldr	r2, [pc, #80]	@ (8000f14 <_sbrk+0x5c>)
 8000ec2:	4b15      	ldr	r3, [pc, #84]	@ (8000f18 <_sbrk+0x60>)
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ecc:	4b13      	ldr	r3, [pc, #76]	@ (8000f1c <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d102      	bne.n	8000eda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed4:	4b11      	ldr	r3, [pc, #68]	@ (8000f1c <_sbrk+0x64>)
 8000ed6:	4a12      	ldr	r2, [pc, #72]	@ (8000f20 <_sbrk+0x68>)
 8000ed8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eda:	4b10      	ldr	r3, [pc, #64]	@ (8000f1c <_sbrk+0x64>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d207      	bcs.n	8000ef8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ee8:	f007 f954 	bl	8008194 <__errno>
 8000eec:	4603      	mov	r3, r0
 8000eee:	220c      	movs	r2, #12
 8000ef0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef6:	e009      	b.n	8000f0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef8:	4b08      	ldr	r3, [pc, #32]	@ (8000f1c <_sbrk+0x64>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000efe:	4b07      	ldr	r3, [pc, #28]	@ (8000f1c <_sbrk+0x64>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4413      	add	r3, r2
 8000f06:	4a05      	ldr	r2, [pc, #20]	@ (8000f1c <_sbrk+0x64>)
 8000f08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3718      	adds	r7, #24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20020000 	.word	0x20020000
 8000f18:	00000400 	.word	0x00000400
 8000f1c:	20000268 	.word	0x20000268
 8000f20:	20000630 	.word	0x20000630

08000f24 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <SystemInit+0x20>)
 8000f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f2e:	4a05      	ldr	r2, [pc, #20]	@ (8000f44 <SystemInit+0x20>)
 8000f30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b098      	sub	sp, #96	@ 0x60
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f4e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f5a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]
 8000f68:	611a      	str	r2, [r3, #16]
 8000f6a:	615a      	str	r2, [r3, #20]
 8000f6c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	2234      	movs	r2, #52	@ 0x34
 8000f72:	2100      	movs	r1, #0
 8000f74:	4618      	mov	r0, r3
 8000f76:	f007 f862 	bl	800803e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f7a:	4b4a      	ldr	r3, [pc, #296]	@ (80010a4 <MX_TIM1_Init+0x15c>)
 8000f7c:	4a4a      	ldr	r2, [pc, #296]	@ (80010a8 <MX_TIM1_Init+0x160>)
 8000f7e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8;
 8000f80:	4b48      	ldr	r3, [pc, #288]	@ (80010a4 <MX_TIM1_Init+0x15c>)
 8000f82:	2208      	movs	r2, #8
 8000f84:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000f86:	4b47      	ldr	r3, [pc, #284]	@ (80010a4 <MX_TIM1_Init+0x15c>)
 8000f88:	2220      	movs	r2, #32
 8000f8a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 945;
 8000f8c:	4b45      	ldr	r3, [pc, #276]	@ (80010a4 <MX_TIM1_Init+0x15c>)
 8000f8e:	f240 32b1 	movw	r2, #945	@ 0x3b1
 8000f92:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f94:	4b43      	ldr	r3, [pc, #268]	@ (80010a4 <MX_TIM1_Init+0x15c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f9a:	4b42      	ldr	r3, [pc, #264]	@ (80010a4 <MX_TIM1_Init+0x15c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa0:	4b40      	ldr	r3, [pc, #256]	@ (80010a4 <MX_TIM1_Init+0x15c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fa6:	483f      	ldr	r0, [pc, #252]	@ (80010a4 <MX_TIM1_Init+0x15c>)
 8000fa8:	f003 fa5c 	bl	8004464 <HAL_TIM_PWM_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000fb2:	f7ff fe05 	bl	8000bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fc2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4836      	ldr	r0, [pc, #216]	@ (80010a4 <MX_TIM1_Init+0x15c>)
 8000fca:	f004 fc4d 	bl	8005868 <HAL_TIMEx_MasterConfigSynchronization>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000fd4:	f7ff fdf4 	bl	8000bc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fd8:	2360      	movs	r3, #96	@ 0x60
 8000fda:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 615;
 8000fdc:	f240 2367 	movw	r3, #615	@ 0x267
 8000fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ff6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4829      	ldr	r0, [pc, #164]	@ (80010a4 <MX_TIM1_Init+0x15c>)
 8001000:	f003 fd1a 	bl	8004a38 <HAL_TIM_PWM_ConfigChannel>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800100a:	f7ff fdd9 	bl	8000bc0 <Error_Handler>
  }
  sConfigOC.Pulse = 330;
 800100e:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 8001012:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001014:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001018:	2204      	movs	r2, #4
 800101a:	4619      	mov	r1, r3
 800101c:	4821      	ldr	r0, [pc, #132]	@ (80010a4 <MX_TIM1_Init+0x15c>)
 800101e:	f003 fd0b 	bl	8004a38 <HAL_TIM_PWM_ConfigChannel>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8001028:	f7ff fdca 	bl	8000bc0 <Error_Handler>
  }
  sConfigOC.Pulse = 615;
 800102c:	f240 2367 	movw	r3, #615	@ 0x267
 8001030:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001032:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001036:	2208      	movs	r2, #8
 8001038:	4619      	mov	r1, r3
 800103a:	481a      	ldr	r0, [pc, #104]	@ (80010a4 <MX_TIM1_Init+0x15c>)
 800103c:	f003 fcfc 	bl	8004a38 <HAL_TIM_PWM_ConfigChannel>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8001046:	f7ff fdbb 	bl	8000bc0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800104a:	2300      	movs	r3, #0
 800104c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800104e:	2300      	movs	r3, #0
 8001050:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 34;
 8001056:	2322      	movs	r3, #34	@ 0x22
 8001058:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800105e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001062:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001068:	2300      	movs	r3, #0
 800106a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800106c:	2300      	movs	r3, #0
 800106e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001070:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001074:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800107a:	2300      	movs	r3, #0
 800107c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800107e:	2300      	movs	r3, #0
 8001080:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	4619      	mov	r1, r3
 8001086:	4807      	ldr	r0, [pc, #28]	@ (80010a4 <MX_TIM1_Init+0x15c>)
 8001088:	f004 fc84 	bl	8005994 <HAL_TIMEx_ConfigBreakDeadTime>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8001092:	f7ff fd95 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001096:	4803      	ldr	r0, [pc, #12]	@ (80010a4 <MX_TIM1_Init+0x15c>)
 8001098:	f000 f8d6 	bl	8001248 <HAL_TIM_MspPostInit>

}
 800109c:	bf00      	nop
 800109e:	3760      	adds	r7, #96	@ 0x60
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	2000026c 	.word	0x2000026c
 80010a8:	40012c00 	.word	0x40012c00

080010ac <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 80010b2:	f107 0310 	add.w	r3, r7, #16
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010ca:	4b1c      	ldr	r3, [pc, #112]	@ (800113c <MX_TIM3_Init+0x90>)
 80010cc:	4a1c      	ldr	r2, [pc, #112]	@ (8001140 <MX_TIM3_Init+0x94>)
 80010ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80010d0:	4b1a      	ldr	r3, [pc, #104]	@ (800113c <MX_TIM3_Init+0x90>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d6:	4b19      	ldr	r3, [pc, #100]	@ (800113c <MX_TIM3_Init+0x90>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80010dc:	4b17      	ldr	r3, [pc, #92]	@ (800113c <MX_TIM3_Init+0x90>)
 80010de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e4:	4b15      	ldr	r3, [pc, #84]	@ (800113c <MX_TIM3_Init+0x90>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ea:	4b14      	ldr	r3, [pc, #80]	@ (800113c <MX_TIM3_Init+0x90>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010f0:	2300      	movs	r3, #0
 80010f2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8001100:	f107 0310 	add.w	r3, r7, #16
 8001104:	4619      	mov	r1, r3
 8001106:	480d      	ldr	r0, [pc, #52]	@ (800113c <MX_TIM3_Init+0x90>)
 8001108:	f004 fa3d 	bl	8005586 <HAL_TIMEx_HallSensor_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001112:	f7ff fd55 	bl	8000bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001116:	2350      	movs	r3, #80	@ 0x50
 8001118:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	4619      	mov	r1, r3
 8001122:	4806      	ldr	r0, [pc, #24]	@ (800113c <MX_TIM3_Init+0x90>)
 8001124:	f004 fba0 	bl	8005868 <HAL_TIMEx_MasterConfigSynchronization>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800112e:	f7ff fd47 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	3720      	adds	r7, #32
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200002b8 	.word	0x200002b8
 8001140:	40000400 	.word	0x40000400

08001144 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a0a      	ldr	r2, [pc, #40]	@ (800117c <HAL_TIM_PWM_MspInit+0x38>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d10b      	bne.n	800116e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001156:	4b0a      	ldr	r3, [pc, #40]	@ (8001180 <HAL_TIM_PWM_MspInit+0x3c>)
 8001158:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800115a:	4a09      	ldr	r2, [pc, #36]	@ (8001180 <HAL_TIM_PWM_MspInit+0x3c>)
 800115c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001160:	6613      	str	r3, [r2, #96]	@ 0x60
 8001162:	4b07      	ldr	r3, [pc, #28]	@ (8001180 <HAL_TIM_PWM_MspInit+0x3c>)
 8001164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001166:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800116e:	bf00      	nop
 8001170:	3714      	adds	r7, #20
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	40012c00 	.word	0x40012c00
 8001180:	40021000 	.word	0x40021000

08001184 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08a      	sub	sp, #40	@ 0x28
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a26      	ldr	r2, [pc, #152]	@ (800123c <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d145      	bne.n	8001232 <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011a6:	4b26      	ldr	r3, [pc, #152]	@ (8001240 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011aa:	4a25      	ldr	r2, [pc, #148]	@ (8001240 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011ac:	f043 0302 	orr.w	r3, r3, #2
 80011b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80011b2:	4b23      	ldr	r3, [pc, #140]	@ (8001240 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011be:	4b20      	ldr	r3, [pc, #128]	@ (8001240 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c2:	4a1f      	ldr	r2, [pc, #124]	@ (8001240 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001240 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001240 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011da:	4a19      	ldr	r2, [pc, #100]	@ (8001240 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011dc:	f043 0304 	orr.w	r3, r3, #4
 80011e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e2:	4b17      	ldr	r3, [pc, #92]	@ (8001240 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e6:	f003 0304 	and.w	r3, r3, #4
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80011ee:	2350      	movs	r3, #80	@ 0x50
 80011f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fa:	2300      	movs	r3, #0
 80011fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011fe:	2302      	movs	r3, #2
 8001200:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	4619      	mov	r1, r3
 8001208:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800120c:	f001 fe2a 	bl	8002e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001210:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	2302      	movs	r3, #2
 8001218:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121e:	2300      	movs	r3, #0
 8001220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001222:	2302      	movs	r3, #2
 8001224:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4619      	mov	r1, r3
 800122c:	4805      	ldr	r0, [pc, #20]	@ (8001244 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 800122e:	f001 fe19 	bl	8002e64 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001232:	bf00      	nop
 8001234:	3728      	adds	r7, #40	@ 0x28
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40000400 	.word	0x40000400
 8001240:	40021000 	.word	0x40021000
 8001244:	48000800 	.word	0x48000800

08001248 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08a      	sub	sp, #40	@ 0x28
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a29      	ldr	r2, [pc, #164]	@ (800130c <HAL_TIM_MspPostInit+0xc4>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d14b      	bne.n	8001302 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800126a:	4b29      	ldr	r3, [pc, #164]	@ (8001310 <HAL_TIM_MspPostInit+0xc8>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126e:	4a28      	ldr	r2, [pc, #160]	@ (8001310 <HAL_TIM_MspPostInit+0xc8>)
 8001270:	f043 0302 	orr.w	r3, r3, #2
 8001274:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001276:	4b26      	ldr	r3, [pc, #152]	@ (8001310 <HAL_TIM_MspPostInit+0xc8>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001282:	4b23      	ldr	r3, [pc, #140]	@ (8001310 <HAL_TIM_MspPostInit+0xc8>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001286:	4a22      	ldr	r2, [pc, #136]	@ (8001310 <HAL_TIM_MspPostInit+0xc8>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800128e:	4b20      	ldr	r3, [pc, #128]	@ (8001310 <HAL_TIM_MspPostInit+0xc8>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 800129a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800129e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a0:	2302      	movs	r3, #2
 80012a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a8:	2300      	movs	r3, #0
 80012aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80012ac:	2306      	movs	r3, #6
 80012ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	4619      	mov	r1, r3
 80012b6:	4817      	ldr	r0, [pc, #92]	@ (8001314 <HAL_TIM_MspPostInit+0xcc>)
 80012b8:	f001 fdd4 	bl	8002e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 80012bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c2:	2302      	movs	r3, #2
 80012c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	2300      	movs	r3, #0
 80012cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80012ce:	2304      	movs	r3, #4
 80012d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4619      	mov	r1, r3
 80012d8:	480e      	ldr	r0, [pc, #56]	@ (8001314 <HAL_TIM_MspPostInit+0xcc>)
 80012da:	f001 fdc3 	bl	8002e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 80012de:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80012e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	2302      	movs	r3, #2
 80012e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ec:	2300      	movs	r3, #0
 80012ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80012f0:	2306      	movs	r3, #6
 80012f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4619      	mov	r1, r3
 80012fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012fe:	f001 fdb1 	bl	8002e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001302:	bf00      	nop
 8001304:	3728      	adds	r7, #40	@ 0x28
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40012c00 	.word	0x40012c00
 8001310:	40021000 	.word	0x40021000
 8001314:	48000400 	.word	0x48000400

08001318 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800131c:	4b22      	ldr	r3, [pc, #136]	@ (80013a8 <MX_USART2_UART_Init+0x90>)
 800131e:	4a23      	ldr	r2, [pc, #140]	@ (80013ac <MX_USART2_UART_Init+0x94>)
 8001320:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001322:	4b21      	ldr	r3, [pc, #132]	@ (80013a8 <MX_USART2_UART_Init+0x90>)
 8001324:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001328:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800132a:	4b1f      	ldr	r3, [pc, #124]	@ (80013a8 <MX_USART2_UART_Init+0x90>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001330:	4b1d      	ldr	r3, [pc, #116]	@ (80013a8 <MX_USART2_UART_Init+0x90>)
 8001332:	2200      	movs	r2, #0
 8001334:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001336:	4b1c      	ldr	r3, [pc, #112]	@ (80013a8 <MX_USART2_UART_Init+0x90>)
 8001338:	2200      	movs	r2, #0
 800133a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800133c:	4b1a      	ldr	r3, [pc, #104]	@ (80013a8 <MX_USART2_UART_Init+0x90>)
 800133e:	220c      	movs	r2, #12
 8001340:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001342:	4b19      	ldr	r3, [pc, #100]	@ (80013a8 <MX_USART2_UART_Init+0x90>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001348:	4b17      	ldr	r3, [pc, #92]	@ (80013a8 <MX_USART2_UART_Init+0x90>)
 800134a:	2200      	movs	r2, #0
 800134c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800134e:	4b16      	ldr	r3, [pc, #88]	@ (80013a8 <MX_USART2_UART_Init+0x90>)
 8001350:	2200      	movs	r2, #0
 8001352:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001354:	4b14      	ldr	r3, [pc, #80]	@ (80013a8 <MX_USART2_UART_Init+0x90>)
 8001356:	2200      	movs	r2, #0
 8001358:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800135a:	4b13      	ldr	r3, [pc, #76]	@ (80013a8 <MX_USART2_UART_Init+0x90>)
 800135c:	2200      	movs	r2, #0
 800135e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001360:	4811      	ldr	r0, [pc, #68]	@ (80013a8 <MX_USART2_UART_Init+0x90>)
 8001362:	f004 fc34 	bl	8005bce <HAL_UART_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800136c:	f7ff fc28 	bl	8000bc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001370:	2100      	movs	r1, #0
 8001372:	480d      	ldr	r0, [pc, #52]	@ (80013a8 <MX_USART2_UART_Init+0x90>)
 8001374:	f006 fbd7 	bl	8007b26 <HAL_UARTEx_SetTxFifoThreshold>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800137e:	f7ff fc1f 	bl	8000bc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001382:	2100      	movs	r1, #0
 8001384:	4808      	ldr	r0, [pc, #32]	@ (80013a8 <MX_USART2_UART_Init+0x90>)
 8001386:	f006 fc0c 	bl	8007ba2 <HAL_UARTEx_SetRxFifoThreshold>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001390:	f7ff fc16 	bl	8000bc0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001394:	4804      	ldr	r0, [pc, #16]	@ (80013a8 <MX_USART2_UART_Init+0x90>)
 8001396:	f006 fb8d 	bl	8007ab4 <HAL_UARTEx_DisableFifoMode>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80013a0:	f7ff fc0e 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000304 	.word	0x20000304
 80013ac:	40004400 	.word	0x40004400

080013b0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013b4:	4b22      	ldr	r3, [pc, #136]	@ (8001440 <MX_USART3_UART_Init+0x90>)
 80013b6:	4a23      	ldr	r2, [pc, #140]	@ (8001444 <MX_USART3_UART_Init+0x94>)
 80013b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013ba:	4b21      	ldr	r3, [pc, #132]	@ (8001440 <MX_USART3_UART_Init+0x90>)
 80013bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001440 <MX_USART3_UART_Init+0x90>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001440 <MX_USART3_UART_Init+0x90>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001440 <MX_USART3_UART_Init+0x90>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001440 <MX_USART3_UART_Init+0x90>)
 80013d6:	220c      	movs	r2, #12
 80013d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013da:	4b19      	ldr	r3, [pc, #100]	@ (8001440 <MX_USART3_UART_Init+0x90>)
 80013dc:	2200      	movs	r2, #0
 80013de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e0:	4b17      	ldr	r3, [pc, #92]	@ (8001440 <MX_USART3_UART_Init+0x90>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013e6:	4b16      	ldr	r3, [pc, #88]	@ (8001440 <MX_USART3_UART_Init+0x90>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013ec:	4b14      	ldr	r3, [pc, #80]	@ (8001440 <MX_USART3_UART_Init+0x90>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013f2:	4b13      	ldr	r3, [pc, #76]	@ (8001440 <MX_USART3_UART_Init+0x90>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013f8:	4811      	ldr	r0, [pc, #68]	@ (8001440 <MX_USART3_UART_Init+0x90>)
 80013fa:	f004 fbe8 	bl	8005bce <HAL_UART_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001404:	f7ff fbdc 	bl	8000bc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001408:	2100      	movs	r1, #0
 800140a:	480d      	ldr	r0, [pc, #52]	@ (8001440 <MX_USART3_UART_Init+0x90>)
 800140c:	f006 fb8b 	bl	8007b26 <HAL_UARTEx_SetTxFifoThreshold>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001416:	f7ff fbd3 	bl	8000bc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800141a:	2100      	movs	r1, #0
 800141c:	4808      	ldr	r0, [pc, #32]	@ (8001440 <MX_USART3_UART_Init+0x90>)
 800141e:	f006 fbc0 	bl	8007ba2 <HAL_UARTEx_SetRxFifoThreshold>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001428:	f7ff fbca 	bl	8000bc0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800142c:	4804      	ldr	r0, [pc, #16]	@ (8001440 <MX_USART3_UART_Init+0x90>)
 800142e:	f006 fb41 	bl	8007ab4 <HAL_UARTEx_DisableFifoMode>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001438:	f7ff fbc2 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000394 	.word	0x20000394
 8001444:	40004800 	.word	0x40004800

08001448 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b0a0      	sub	sp, #128	@ 0x80
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001450:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001460:	f107 0318 	add.w	r3, r7, #24
 8001464:	2254      	movs	r2, #84	@ 0x54
 8001466:	2100      	movs	r1, #0
 8001468:	4618      	mov	r0, r3
 800146a:	f006 fde8 	bl	800803e <memset>
  if(uartHandle->Instance==USART2)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a45      	ldr	r2, [pc, #276]	@ (8001588 <HAL_UART_MspInit+0x140>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d13f      	bne.n	80014f8 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001478:	2302      	movs	r3, #2
 800147a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800147c:	2300      	movs	r3, #0
 800147e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001480:	f107 0318 	add.w	r3, r7, #24
 8001484:	4618      	mov	r0, r3
 8001486:	f002 fcc5 	bl	8003e14 <HAL_RCCEx_PeriphCLKConfig>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001490:	f7ff fb96 	bl	8000bc0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001494:	4b3d      	ldr	r3, [pc, #244]	@ (800158c <HAL_UART_MspInit+0x144>)
 8001496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001498:	4a3c      	ldr	r2, [pc, #240]	@ (800158c <HAL_UART_MspInit+0x144>)
 800149a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800149e:	6593      	str	r3, [r2, #88]	@ 0x58
 80014a0:	4b3a      	ldr	r3, [pc, #232]	@ (800158c <HAL_UART_MspInit+0x144>)
 80014a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014a8:	617b      	str	r3, [r7, #20]
 80014aa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ac:	4b37      	ldr	r3, [pc, #220]	@ (800158c <HAL_UART_MspInit+0x144>)
 80014ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b0:	4a36      	ldr	r2, [pc, #216]	@ (800158c <HAL_UART_MspInit+0x144>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014b8:	4b34      	ldr	r3, [pc, #208]	@ (800158c <HAL_UART_MspInit+0x144>)
 80014ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014c4:	230c      	movs	r3, #12
 80014c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c8:	2302      	movs	r3, #2
 80014ca:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014d4:	2307      	movs	r3, #7
 80014d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80014dc:	4619      	mov	r1, r3
 80014de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014e2:	f001 fcbf 	bl	8002e64 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2100      	movs	r1, #0
 80014ea:	2026      	movs	r0, #38	@ 0x26
 80014ec:	f001 fbd2 	bl	8002c94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014f0:	2026      	movs	r0, #38	@ 0x26
 80014f2:	f001 fbe9 	bl	8002cc8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80014f6:	e043      	b.n	8001580 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a24      	ldr	r2, [pc, #144]	@ (8001590 <HAL_UART_MspInit+0x148>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d13e      	bne.n	8001580 <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001502:	2304      	movs	r3, #4
 8001504:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001506:	2300      	movs	r3, #0
 8001508:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800150a:	f107 0318 	add.w	r3, r7, #24
 800150e:	4618      	mov	r0, r3
 8001510:	f002 fc80 	bl	8003e14 <HAL_RCCEx_PeriphCLKConfig>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <HAL_UART_MspInit+0xd6>
      Error_Handler();
 800151a:	f7ff fb51 	bl	8000bc0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800151e:	4b1b      	ldr	r3, [pc, #108]	@ (800158c <HAL_UART_MspInit+0x144>)
 8001520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001522:	4a1a      	ldr	r2, [pc, #104]	@ (800158c <HAL_UART_MspInit+0x144>)
 8001524:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001528:	6593      	str	r3, [r2, #88]	@ 0x58
 800152a:	4b18      	ldr	r3, [pc, #96]	@ (800158c <HAL_UART_MspInit+0x144>)
 800152c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800152e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001536:	4b15      	ldr	r3, [pc, #84]	@ (800158c <HAL_UART_MspInit+0x144>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153a:	4a14      	ldr	r2, [pc, #80]	@ (800158c <HAL_UART_MspInit+0x144>)
 800153c:	f043 0304 	orr.w	r3, r3, #4
 8001540:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001542:	4b12      	ldr	r3, [pc, #72]	@ (800158c <HAL_UART_MspInit+0x144>)
 8001544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001546:	f003 0304 	and.w	r3, r3, #4
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800154e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001552:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001554:	2302      	movs	r3, #2
 8001556:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155c:	2300      	movs	r3, #0
 800155e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001560:	2307      	movs	r3, #7
 8001562:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001564:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001568:	4619      	mov	r1, r3
 800156a:	480a      	ldr	r0, [pc, #40]	@ (8001594 <HAL_UART_MspInit+0x14c>)
 800156c:	f001 fc7a 	bl	8002e64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001570:	2200      	movs	r2, #0
 8001572:	2100      	movs	r1, #0
 8001574:	2027      	movs	r0, #39	@ 0x27
 8001576:	f001 fb8d 	bl	8002c94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800157a:	2027      	movs	r0, #39	@ 0x27
 800157c:	f001 fba4 	bl	8002cc8 <HAL_NVIC_EnableIRQ>
}
 8001580:	bf00      	nop
 8001582:	3780      	adds	r7, #128	@ 0x80
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40004400 	.word	0x40004400
 800158c:	40021000 	.word	0x40021000
 8001590:	40004800 	.word	0x40004800
 8001594:	48000800 	.word	0x48000800

08001598 <Shell_Init>:
char* 		argv[MAX_ARGS];
int		 	argc = 0;
char*		token;
int 		newCmdReady = 0;

void Shell_Init(void){
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
	memset(argv, NULL, MAX_ARGS*sizeof(char*));
 800159c:	2224      	movs	r2, #36	@ 0x24
 800159e:	2100      	movs	r1, #0
 80015a0:	4816      	ldr	r0, [pc, #88]	@ (80015fc <Shell_Init+0x64>)
 80015a2:	f006 fd4c 	bl	800803e <memset>
	memset(cmdBuffer, NULL, CMD_BUFFER_SIZE*sizeof(char));
 80015a6:	2240      	movs	r2, #64	@ 0x40
 80015a8:	2100      	movs	r1, #0
 80015aa:	4815      	ldr	r0, [pc, #84]	@ (8001600 <Shell_Init+0x68>)
 80015ac:	f006 fd47 	bl	800803e <memset>
	memset(uartRxBuffer, NULL, UART_RX_BUFFER_SIZE*sizeof(char));
 80015b0:	4b14      	ldr	r3, [pc, #80]	@ (8001604 <Shell_Init+0x6c>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	701a      	strb	r2, [r3, #0]
	memset(uartTxBuffer, NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 80015b6:	2240      	movs	r2, #64	@ 0x40
 80015b8:	2100      	movs	r1, #0
 80015ba:	4813      	ldr	r0, [pc, #76]	@ (8001608 <Shell_Init+0x70>)
 80015bc:	f006 fd3f 	bl	800803e <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80015c0:	2201      	movs	r2, #1
 80015c2:	4910      	ldr	r1, [pc, #64]	@ (8001604 <Shell_Init+0x6c>)
 80015c4:	4811      	ldr	r0, [pc, #68]	@ (800160c <Shell_Init+0x74>)
 80015c6:	f004 fbe9 	bl	8005d9c <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 80015ca:	4811      	ldr	r0, [pc, #68]	@ (8001610 <Shell_Init+0x78>)
 80015cc:	f7fe fe32 	bl	8000234 <strlen>
 80015d0:	4603      	mov	r3, r0
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	f04f 33ff 	mov.w	r3, #4294967295
 80015d8:	490d      	ldr	r1, [pc, #52]	@ (8001610 <Shell_Init+0x78>)
 80015da:	480c      	ldr	r0, [pc, #48]	@ (800160c <Shell_Init+0x74>)
 80015dc:	f004 fb47 	bl	8005c6e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 80015e0:	480c      	ldr	r0, [pc, #48]	@ (8001614 <Shell_Init+0x7c>)
 80015e2:	f7fe fe27 	bl	8000234 <strlen>
 80015e6:	4603      	mov	r3, r0
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	f04f 33ff 	mov.w	r3, #4294967295
 80015ee:	4909      	ldr	r1, [pc, #36]	@ (8001614 <Shell_Init+0x7c>)
 80015f0:	4806      	ldr	r0, [pc, #24]	@ (800160c <Shell_Init+0x74>)
 80015f2:	f004 fb3c 	bl	8005c6e <HAL_UART_Transmit>
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	200004b0 	.word	0x200004b0
 8001600:	2000046c 	.word	0x2000046c
 8001604:	20000428 	.word	0x20000428
 8001608:	2000042c 	.word	0x2000042c
 800160c:	20000304 	.word	0x20000304
 8001610:	20000020 	.word	0x20000020
 8001614:	20000004 	.word	0x20000004

08001618 <Shell_Loop>:

void Shell_Loop(void){
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
	if(uartRxReceived){
 800161e:	4b6b      	ldr	r3, [pc, #428]	@ (80017cc <Shell_Loop+0x1b4>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d05b      	beq.n	80016de <Shell_Loop+0xc6>
		switch(uartRxBuffer[0]){
 8001626:	4b6a      	ldr	r3, [pc, #424]	@ (80017d0 <Shell_Loop+0x1b8>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b08      	cmp	r3, #8
 800162c:	d034      	beq.n	8001698 <Shell_Loop+0x80>
 800162e:	2b0d      	cmp	r3, #13
 8001630:	d142      	bne.n	80016b8 <Shell_Loop+0xa0>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8001632:	f04f 33ff 	mov.w	r3, #4294967295
 8001636:	2203      	movs	r2, #3
 8001638:	4966      	ldr	r1, [pc, #408]	@ (80017d4 <Shell_Loop+0x1bc>)
 800163a:	4867      	ldr	r0, [pc, #412]	@ (80017d8 <Shell_Loop+0x1c0>)
 800163c:	f004 fb17 	bl	8005c6e <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 8001640:	4b66      	ldr	r3, [pc, #408]	@ (80017dc <Shell_Loop+0x1c4>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a66      	ldr	r2, [pc, #408]	@ (80017e0 <Shell_Loop+0x1c8>)
 8001646:	2100      	movs	r1, #0
 8001648:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 800164a:	4b66      	ldr	r3, [pc, #408]	@ (80017e4 <Shell_Loop+0x1cc>)
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 8001650:	4965      	ldr	r1, [pc, #404]	@ (80017e8 <Shell_Loop+0x1d0>)
 8001652:	4863      	ldr	r0, [pc, #396]	@ (80017e0 <Shell_Loop+0x1c8>)
 8001654:	f006 fcfc 	bl	8008050 <strtok>
 8001658:	4603      	mov	r3, r0
 800165a:	4a64      	ldr	r2, [pc, #400]	@ (80017ec <Shell_Loop+0x1d4>)
 800165c:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 800165e:	e010      	b.n	8001682 <Shell_Loop+0x6a>
				argv[argc++] = token;
 8001660:	4b60      	ldr	r3, [pc, #384]	@ (80017e4 <Shell_Loop+0x1cc>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	1c5a      	adds	r2, r3, #1
 8001666:	495f      	ldr	r1, [pc, #380]	@ (80017e4 <Shell_Loop+0x1cc>)
 8001668:	600a      	str	r2, [r1, #0]
 800166a:	4a60      	ldr	r2, [pc, #384]	@ (80017ec <Shell_Loop+0x1d4>)
 800166c:	6812      	ldr	r2, [r2, #0]
 800166e:	4960      	ldr	r1, [pc, #384]	@ (80017f0 <Shell_Loop+0x1d8>)
 8001670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 8001674:	495c      	ldr	r1, [pc, #368]	@ (80017e8 <Shell_Loop+0x1d0>)
 8001676:	2000      	movs	r0, #0
 8001678:	f006 fcea 	bl	8008050 <strtok>
 800167c:	4603      	mov	r3, r0
 800167e:	4a5b      	ldr	r2, [pc, #364]	@ (80017ec <Shell_Loop+0x1d4>)
 8001680:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 8001682:	4b5a      	ldr	r3, [pc, #360]	@ (80017ec <Shell_Loop+0x1d4>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1ea      	bne.n	8001660 <Shell_Loop+0x48>
			}
			idx_cmd = 0;
 800168a:	4b54      	ldr	r3, [pc, #336]	@ (80017dc <Shell_Loop+0x1c4>)
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 8001690:	4b58      	ldr	r3, [pc, #352]	@ (80017f4 <Shell_Loop+0x1dc>)
 8001692:	2201      	movs	r2, #1
 8001694:	601a      	str	r2, [r3, #0]
			break;
 8001696:	e01f      	b.n	80016d8 <Shell_Loop+0xc0>
		case ASCII_BACK: // Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 8001698:	4b50      	ldr	r3, [pc, #320]	@ (80017dc <Shell_Loop+0x1c4>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	1e5a      	subs	r2, r3, #1
 800169e:	494f      	ldr	r1, [pc, #316]	@ (80017dc <Shell_Loop+0x1c4>)
 80016a0:	600a      	str	r2, [r1, #0]
 80016a2:	4a4f      	ldr	r2, [pc, #316]	@ (80017e0 <Shell_Loop+0x1c8>)
 80016a4:	2100      	movs	r1, #0
 80016a6:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 80016a8:	f04f 33ff 	mov.w	r3, #4294967295
 80016ac:	2204      	movs	r2, #4
 80016ae:	4952      	ldr	r1, [pc, #328]	@ (80017f8 <Shell_Loop+0x1e0>)
 80016b0:	4849      	ldr	r0, [pc, #292]	@ (80017d8 <Shell_Loop+0x1c0>)
 80016b2:	f004 fadc 	bl	8005c6e <HAL_UART_Transmit>
			break;
 80016b6:	e00f      	b.n	80016d8 <Shell_Loop+0xc0>

		default: // Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 80016b8:	4b48      	ldr	r3, [pc, #288]	@ (80017dc <Shell_Loop+0x1c4>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	1c5a      	adds	r2, r3, #1
 80016be:	4947      	ldr	r1, [pc, #284]	@ (80017dc <Shell_Loop+0x1c4>)
 80016c0:	600a      	str	r2, [r1, #0]
 80016c2:	4a43      	ldr	r2, [pc, #268]	@ (80017d0 <Shell_Loop+0x1b8>)
 80016c4:	7811      	ldrb	r1, [r2, #0]
 80016c6:	4a46      	ldr	r2, [pc, #280]	@ (80017e0 <Shell_Loop+0x1c8>)
 80016c8:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80016ca:	f04f 33ff 	mov.w	r3, #4294967295
 80016ce:	2201      	movs	r2, #1
 80016d0:	493f      	ldr	r1, [pc, #252]	@ (80017d0 <Shell_Loop+0x1b8>)
 80016d2:	4841      	ldr	r0, [pc, #260]	@ (80017d8 <Shell_Loop+0x1c0>)
 80016d4:	f004 facb 	bl	8005c6e <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 80016d8:	4b3c      	ldr	r3, [pc, #240]	@ (80017cc <Shell_Loop+0x1b4>)
 80016da:	2200      	movs	r2, #0
 80016dc:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady){
 80016de:	4b45      	ldr	r3, [pc, #276]	@ (80017f4 <Shell_Loop+0x1dc>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d03a      	beq.n	800175c <Shell_Loop+0x144>
		if(strcmp(argv[0],"WhereisBrian?")==0){
 80016e6:	4b42      	ldr	r3, [pc, #264]	@ (80017f0 <Shell_Loop+0x1d8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4944      	ldr	r1, [pc, #272]	@ (80017fc <Shell_Loop+0x1e4>)
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7fe fd97 	bl	8000220 <strcmp>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d107      	bne.n	8001708 <Shell_Loop+0xf0>
			HAL_UART_Transmit(&huart2, brian, sizeof(brian), HAL_MAX_DELAY);
 80016f8:	f04f 33ff 	mov.w	r3, #4294967295
 80016fc:	221a      	movs	r2, #26
 80016fe:	4940      	ldr	r1, [pc, #256]	@ (8001800 <Shell_Loop+0x1e8>)
 8001700:	4835      	ldr	r0, [pc, #212]	@ (80017d8 <Shell_Loop+0x1c0>)
 8001702:	f004 fab4 	bl	8005c6e <HAL_UART_Transmit>
 8001706:	e01e      	b.n	8001746 <Shell_Loop+0x12e>
		}
		else if(strcmp(argv[0],"help")==0){
 8001708:	4b39      	ldr	r3, [pc, #228]	@ (80017f0 <Shell_Loop+0x1d8>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	493d      	ldr	r1, [pc, #244]	@ (8001804 <Shell_Loop+0x1ec>)
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe fd86 	bl	8000220 <strcmp>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d10e      	bne.n	8001738 <Shell_Loop+0x120>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Print all available functions here\r\n");
 800171a:	4a3b      	ldr	r2, [pc, #236]	@ (8001808 <Shell_Loop+0x1f0>)
 800171c:	2140      	movs	r1, #64	@ 0x40
 800171e:	483b      	ldr	r0, [pc, #236]	@ (800180c <Shell_Loop+0x1f4>)
 8001720:	f006 fc16 	bl	8007f50 <sniprintf>
 8001724:	6038      	str	r0, [r7, #0]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	b29a      	uxth	r2, r3
 800172a:	f04f 33ff 	mov.w	r3, #4294967295
 800172e:	4937      	ldr	r1, [pc, #220]	@ (800180c <Shell_Loop+0x1f4>)
 8001730:	4829      	ldr	r0, [pc, #164]	@ (80017d8 <Shell_Loop+0x1c0>)
 8001732:	f004 fa9c 	bl	8005c6e <HAL_UART_Transmit>
 8001736:	e006      	b.n	8001746 <Shell_Loop+0x12e>
		}
		else{
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8001738:	f04f 33ff 	mov.w	r3, #4294967295
 800173c:	2214      	movs	r2, #20
 800173e:	4934      	ldr	r1, [pc, #208]	@ (8001810 <Shell_Loop+0x1f8>)
 8001740:	4825      	ldr	r0, [pc, #148]	@ (80017d8 <Shell_Loop+0x1c0>)
 8001742:	f004 fa94 	bl	8005c6e <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8001746:	f04f 33ff 	mov.w	r3, #4294967295
 800174a:	221c      	movs	r2, #28
 800174c:	4931      	ldr	r1, [pc, #196]	@ (8001814 <Shell_Loop+0x1fc>)
 800174e:	4822      	ldr	r0, [pc, #136]	@ (80017d8 <Shell_Loop+0x1c0>)
 8001750:	f004 fa8d 	bl	8005c6e <HAL_UART_Transmit>
		newCmdReady = 0;
 8001754:	4b27      	ldr	r3, [pc, #156]	@ (80017f4 <Shell_Loop+0x1dc>)
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]

	    } else {
	        HAL_UART_Transmit(&huart2, (uint8_t *)"Please provide a speed value\r\n", 30, HAL_MAX_DELAY);
	    }
	}
}
 800175a:	e032      	b.n	80017c2 <Shell_Loop+0x1aa>
	else if(strcmp(argv[0], "speed") == 0) {
 800175c:	4b24      	ldr	r3, [pc, #144]	@ (80017f0 <Shell_Loop+0x1d8>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	492d      	ldr	r1, [pc, #180]	@ (8001818 <Shell_Loop+0x200>)
 8001762:	4618      	mov	r0, r3
 8001764:	f7fe fd5c 	bl	8000220 <strcmp>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d129      	bne.n	80017c2 <Shell_Loop+0x1aa>
	    if(argc > 1) {  // Assurez-vous qu'il y a un argument après "speed"
 800176e:	4b1d      	ldr	r3, [pc, #116]	@ (80017e4 <Shell_Loop+0x1cc>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b01      	cmp	r3, #1
 8001774:	dd1e      	ble.n	80017b4 <Shell_Loop+0x19c>
	        int speedValue = atoi(argv[1]);  // Convertir l'argument en entier
 8001776:	4b1e      	ldr	r3, [pc, #120]	@ (80017f0 <Shell_Loop+0x1d8>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	4618      	mov	r0, r3
 800177c:	f006 fa9e 	bl	8007cbc <atoi>
 8001780:	6078      	str	r0, [r7, #4]
	        if (speedValue < 0) speedValue = 0;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	da01      	bge.n	800178c <Shell_Loop+0x174>
 8001788:	2300      	movs	r3, #0
 800178a:	607b      	str	r3, [r7, #4]
	           if (speedValue > 945) speedValue = 900;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f240 32b1 	movw	r2, #945	@ 0x3b1
 8001792:	4293      	cmp	r3, r2
 8001794:	dd02      	ble.n	800179c <Shell_Loop+0x184>
 8001796:	f44f 7361 	mov.w	r3, #900	@ 0x384
 800179a:	607b      	str	r3, [r7, #4]
	           __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speedValue);//alpha PWM channel 1 changé (U_High).Le complémentaire se change de lui-même par définition
 800179c:	4b1f      	ldr	r3, [pc, #124]	@ (800181c <Shell_Loop+0x204>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	635a      	str	r2, [r3, #52]	@ 0x34
	           HAL_UART_Transmit(&huart2, speedValue, 30, HAL_MAX_DELAY);
 80017a4:	6879      	ldr	r1, [r7, #4]
 80017a6:	f04f 33ff 	mov.w	r3, #4294967295
 80017aa:	221e      	movs	r2, #30
 80017ac:	480a      	ldr	r0, [pc, #40]	@ (80017d8 <Shell_Loop+0x1c0>)
 80017ae:	f004 fa5e 	bl	8005c6e <HAL_UART_Transmit>
}
 80017b2:	e006      	b.n	80017c2 <Shell_Loop+0x1aa>
	        HAL_UART_Transmit(&huart2, (uint8_t *)"Please provide a speed value\r\n", 30, HAL_MAX_DELAY);
 80017b4:	f04f 33ff 	mov.w	r3, #4294967295
 80017b8:	221e      	movs	r2, #30
 80017ba:	4919      	ldr	r1, [pc, #100]	@ (8001820 <Shell_Loop+0x208>)
 80017bc:	4806      	ldr	r0, [pc, #24]	@ (80017d8 <Shell_Loop+0x1c0>)
 80017be:	f004 fa56 	bl	8005c6e <HAL_UART_Transmit>
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000424 	.word	0x20000424
 80017d0:	20000428 	.word	0x20000428
 80017d4:	20000088 	.word	0x20000088
 80017d8:	20000304 	.word	0x20000304
 80017dc:	200004ac 	.word	0x200004ac
 80017e0:	2000046c 	.word	0x2000046c
 80017e4:	200004d4 	.word	0x200004d4
 80017e8:	080091b0 	.word	0x080091b0
 80017ec:	200004d8 	.word	0x200004d8
 80017f0:	200004b0 	.word	0x200004b0
 80017f4:	200004dc 	.word	0x200004dc
 80017f8:	2000008c 	.word	0x2000008c
 80017fc:	080091b4 	.word	0x080091b4
 8001800:	200000a4 	.word	0x200000a4
 8001804:	080091c4 	.word	0x080091c4
 8001808:	080091cc 	.word	0x080091cc
 800180c:	2000042c 	.word	0x2000042c
 8001810:	20000090 	.word	0x20000090
 8001814:	20000004 	.word	0x20000004
 8001818:	080091f4 	.word	0x080091f4
 800181c:	2000026c 	.word	0x2000026c
 8001820:	080091fc 	.word	0x080091fc

08001824 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 800182c:	4b05      	ldr	r3, [pc, #20]	@ (8001844 <HAL_UART_RxCpltCallback+0x20>)
 800182e:	2201      	movs	r2, #1
 8001830:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001832:	2201      	movs	r2, #1
 8001834:	4904      	ldr	r1, [pc, #16]	@ (8001848 <HAL_UART_RxCpltCallback+0x24>)
 8001836:	4805      	ldr	r0, [pc, #20]	@ (800184c <HAL_UART_RxCpltCallback+0x28>)
 8001838:	f004 fab0 	bl	8005d9c <HAL_UART_Receive_IT>
}
 800183c:	bf00      	nop
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20000424 	.word	0x20000424
 8001848:	20000428 	.word	0x20000428
 800184c:	20000304 	.word	0x20000304

08001850 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001850:	480d      	ldr	r0, [pc, #52]	@ (8001888 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001852:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001854:	480d      	ldr	r0, [pc, #52]	@ (800188c <LoopForever+0x6>)
  ldr r1, =_edata
 8001856:	490e      	ldr	r1, [pc, #56]	@ (8001890 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001858:	4a0e      	ldr	r2, [pc, #56]	@ (8001894 <LoopForever+0xe>)
  movs r3, #0
 800185a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800185c:	e002      	b.n	8001864 <LoopCopyDataInit>

0800185e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800185e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001862:	3304      	adds	r3, #4

08001864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001868:	d3f9      	bcc.n	800185e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800186a:	4a0b      	ldr	r2, [pc, #44]	@ (8001898 <LoopForever+0x12>)
  ldr r4, =_ebss
 800186c:	4c0b      	ldr	r4, [pc, #44]	@ (800189c <LoopForever+0x16>)
  movs r3, #0
 800186e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001870:	e001      	b.n	8001876 <LoopFillZerobss>

08001872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001874:	3204      	adds	r2, #4

08001876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001878:	d3fb      	bcc.n	8001872 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800187a:	f7ff fb53 	bl	8000f24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800187e:	f006 fc8f 	bl	80081a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001882:	f7ff f915 	bl	8000ab0 <main>

08001886 <LoopForever>:

LoopForever:
    b LoopForever
 8001886:	e7fe      	b.n	8001886 <LoopForever>
  ldr   r0, =_estack
 8001888:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800188c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001890:	20000124 	.word	0x20000124
  ldr r2, =_sidata
 8001894:	08009450 	.word	0x08009450
  ldr r2, =_sbss
 8001898:	20000124 	.word	0x20000124
  ldr r4, =_ebss
 800189c:	20000630 	.word	0x20000630

080018a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018a0:	e7fe      	b.n	80018a0 <ADC1_2_IRQHandler>

080018a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018a8:	2300      	movs	r3, #0
 80018aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ac:	2003      	movs	r0, #3
 80018ae:	f001 f9e6 	bl	8002c7e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018b2:	200f      	movs	r0, #15
 80018b4:	f7ff f9ae 	bl	8000c14 <HAL_InitTick>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d002      	beq.n	80018c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	71fb      	strb	r3, [r7, #7]
 80018c2:	e001      	b.n	80018c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018c4:	f7ff f982 	bl	8000bcc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018c8:	79fb      	ldrb	r3, [r7, #7]

}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018d8:	4b05      	ldr	r3, [pc, #20]	@ (80018f0 <HAL_IncTick+0x1c>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	4b05      	ldr	r3, [pc, #20]	@ (80018f4 <HAL_IncTick+0x20>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4413      	add	r3, r2
 80018e2:	4a03      	ldr	r2, [pc, #12]	@ (80018f0 <HAL_IncTick+0x1c>)
 80018e4:	6013      	str	r3, [r2, #0]
}
 80018e6:	bf00      	nop
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	200004e0 	.word	0x200004e0
 80018f4:	200000c4 	.word	0x200000c4

080018f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return uwTick;
 80018fc:	4b03      	ldr	r3, [pc, #12]	@ (800190c <HAL_GetTick+0x14>)
 80018fe:	681b      	ldr	r3, [r3, #0]
}
 8001900:	4618      	mov	r0, r3
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	200004e0 	.word	0x200004e0

08001910 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	431a      	orrs	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	609a      	str	r2, [r3, #8]
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
 800193e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	431a      	orrs	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	609a      	str	r2, [r3, #8]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800196c:	4618      	mov	r0, r3
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001978:	b480      	push	{r7}
 800197a:	b087      	sub	sp, #28
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
 8001984:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	3360      	adds	r3, #96	@ 0x60
 800198a:	461a      	mov	r2, r3
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	4b08      	ldr	r3, [pc, #32]	@ (80019bc <LL_ADC_SetOffset+0x44>)
 800199a:	4013      	ands	r3, r2
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	430a      	orrs	r2, r1
 80019a6:	4313      	orrs	r3, r2
 80019a8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80019b0:	bf00      	nop
 80019b2:	371c      	adds	r7, #28
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	03fff000 	.word	0x03fff000

080019c0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	3360      	adds	r3, #96	@ 0x60
 80019ce:	461a      	mov	r2, r3
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b087      	sub	sp, #28
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	3360      	adds	r3, #96	@ 0x60
 80019fc:	461a      	mov	r2, r3
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	431a      	orrs	r2, r3
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a16:	bf00      	nop
 8001a18:	371c      	adds	r7, #28
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b087      	sub	sp, #28
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	60f8      	str	r0, [r7, #12]
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	3360      	adds	r3, #96	@ 0x60
 8001a32:	461a      	mov	r2, r3
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	431a      	orrs	r2, r3
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001a4c:	bf00      	nop
 8001a4e:	371c      	adds	r7, #28
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b087      	sub	sp, #28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	3360      	adds	r3, #96	@ 0x60
 8001a68:	461a      	mov	r2, r3
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	4413      	add	r3, r2
 8001a70:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001a82:	bf00      	nop
 8001a84:	371c      	adds	r7, #28
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
 8001a96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	615a      	str	r2, [r3, #20]
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b087      	sub	sp, #28
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	3330      	adds	r3, #48	@ 0x30
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	0a1b      	lsrs	r3, r3, #8
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	f003 030c 	and.w	r3, r3, #12
 8001ad0:	4413      	add	r3, r2
 8001ad2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	f003 031f 	and.w	r3, r3, #31
 8001ade:	211f      	movs	r1, #31
 8001ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	401a      	ands	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	0e9b      	lsrs	r3, r3, #26
 8001aec:	f003 011f 	and.w	r1, r3, #31
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	f003 031f 	and.w	r3, r3, #31
 8001af6:	fa01 f303 	lsl.w	r3, r1, r3
 8001afa:	431a      	orrs	r2, r3
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b00:	bf00      	nop
 8001b02:	371c      	adds	r7, #28
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b087      	sub	sp, #28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	3314      	adds	r3, #20
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	0e5b      	lsrs	r3, r3, #25
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	4413      	add	r3, r2
 8001b2a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	0d1b      	lsrs	r3, r3, #20
 8001b34:	f003 031f 	and.w	r3, r3, #31
 8001b38:	2107      	movs	r1, #7
 8001b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	401a      	ands	r2, r3
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	0d1b      	lsrs	r3, r3, #20
 8001b46:	f003 031f 	and.w	r3, r3, #31
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b50:	431a      	orrs	r2, r3
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b56:	bf00      	nop
 8001b58:	371c      	adds	r7, #28
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
	...

08001b64 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a0f      	ldr	r2, [pc, #60]	@ (8001bb0 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d10a      	bne.n	8001b8e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b84:	431a      	orrs	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001b8c:	e00a      	b.n	8001ba4 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	401a      	ands	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8001ba4:	bf00      	nop
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	407f0000 	.word	0x407f0000

08001bb4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001bc4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6093      	str	r3, [r2, #8]
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001be8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001bec:	d101      	bne.n	8001bf2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e000      	b.n	8001bf4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001c10:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c14:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001c3c:	d101      	bne.n	8001c42 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d101      	bne.n	8001c68 <LL_ADC_IsEnabled+0x18>
 8001c64:	2301      	movs	r3, #1
 8001c66:	e000      	b.n	8001c6a <LL_ADC_IsEnabled+0x1a>
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 0304 	and.w	r3, r3, #4
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	d101      	bne.n	8001c8e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e000      	b.n	8001c90 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f003 0308 	and.w	r3, r3, #8
 8001cac:	2b08      	cmp	r3, #8
 8001cae:	d101      	bne.n	8001cb4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e000      	b.n	8001cb6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
	...

08001cc4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001cc4:	b590      	push	{r4, r7, lr}
 8001cc6:	b089      	sub	sp, #36	@ 0x24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e1af      	b.n	800203e <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d109      	bne.n	8001d00 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7fe fd55 	bl	800079c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff ff67 	bl	8001bd8 <LL_ADC_IsDeepPowerDownEnabled>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d004      	beq.n	8001d1a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ff4d 	bl	8001bb4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff ff82 	bl	8001c28 <LL_ADC_IsInternalRegulatorEnabled>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d115      	bne.n	8001d56 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff ff66 	bl	8001c00 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d34:	4b9f      	ldr	r3, [pc, #636]	@ (8001fb4 <HAL_ADC_Init+0x2f0>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	099b      	lsrs	r3, r3, #6
 8001d3a:	4a9f      	ldr	r2, [pc, #636]	@ (8001fb8 <HAL_ADC_Init+0x2f4>)
 8001d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d40:	099b      	lsrs	r3, r3, #6
 8001d42:	3301      	adds	r3, #1
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d48:	e002      	b.n	8001d50 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f9      	bne.n	8001d4a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff ff64 	bl	8001c28 <LL_ADC_IsInternalRegulatorEnabled>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d10d      	bne.n	8001d82 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d6a:	f043 0210 	orr.w	r2, r3, #16
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d76:	f043 0201 	orr.w	r2, r3, #1
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff ff75 	bl	8001c76 <LL_ADC_REG_IsConversionOngoing>
 8001d8c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d92:	f003 0310 	and.w	r3, r3, #16
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f040 8148 	bne.w	800202c <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f040 8144 	bne.w	800202c <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001da8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001dac:	f043 0202 	orr.w	r2, r3, #2
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff ff49 	bl	8001c50 <LL_ADC_IsEnabled>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d141      	bne.n	8001e48 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001dcc:	d004      	beq.n	8001dd8 <HAL_ADC_Init+0x114>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a7a      	ldr	r2, [pc, #488]	@ (8001fbc <HAL_ADC_Init+0x2f8>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d10f      	bne.n	8001df8 <HAL_ADC_Init+0x134>
 8001dd8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001ddc:	f7ff ff38 	bl	8001c50 <LL_ADC_IsEnabled>
 8001de0:	4604      	mov	r4, r0
 8001de2:	4876      	ldr	r0, [pc, #472]	@ (8001fbc <HAL_ADC_Init+0x2f8>)
 8001de4:	f7ff ff34 	bl	8001c50 <LL_ADC_IsEnabled>
 8001de8:	4603      	mov	r3, r0
 8001dea:	4323      	orrs	r3, r4
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	bf0c      	ite	eq
 8001df0:	2301      	moveq	r3, #1
 8001df2:	2300      	movne	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	e012      	b.n	8001e1e <HAL_ADC_Init+0x15a>
 8001df8:	4871      	ldr	r0, [pc, #452]	@ (8001fc0 <HAL_ADC_Init+0x2fc>)
 8001dfa:	f7ff ff29 	bl	8001c50 <LL_ADC_IsEnabled>
 8001dfe:	4604      	mov	r4, r0
 8001e00:	4870      	ldr	r0, [pc, #448]	@ (8001fc4 <HAL_ADC_Init+0x300>)
 8001e02:	f7ff ff25 	bl	8001c50 <LL_ADC_IsEnabled>
 8001e06:	4603      	mov	r3, r0
 8001e08:	431c      	orrs	r4, r3
 8001e0a:	486f      	ldr	r0, [pc, #444]	@ (8001fc8 <HAL_ADC_Init+0x304>)
 8001e0c:	f7ff ff20 	bl	8001c50 <LL_ADC_IsEnabled>
 8001e10:	4603      	mov	r3, r0
 8001e12:	4323      	orrs	r3, r4
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	bf0c      	ite	eq
 8001e18:	2301      	moveq	r3, #1
 8001e1a:	2300      	movne	r3, #0
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d012      	beq.n	8001e48 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e2a:	d004      	beq.n	8001e36 <HAL_ADC_Init+0x172>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a62      	ldr	r2, [pc, #392]	@ (8001fbc <HAL_ADC_Init+0x2f8>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d101      	bne.n	8001e3a <HAL_ADC_Init+0x176>
 8001e36:	4a65      	ldr	r2, [pc, #404]	@ (8001fcc <HAL_ADC_Init+0x308>)
 8001e38:	e000      	b.n	8001e3c <HAL_ADC_Init+0x178>
 8001e3a:	4a65      	ldr	r2, [pc, #404]	@ (8001fd0 <HAL_ADC_Init+0x30c>)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	4619      	mov	r1, r3
 8001e42:	4610      	mov	r0, r2
 8001e44:	f7ff fd64 	bl	8001910 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	7f5b      	ldrb	r3, [r3, #29]
 8001e4c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e52:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001e58:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001e5e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e66:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d106      	bne.n	8001e84 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	045b      	lsls	r3, r3, #17
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d009      	beq.n	8001ea0 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e90:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e98:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	4b4b      	ldr	r3, [pc, #300]	@ (8001fd4 <HAL_ADC_Init+0x310>)
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6812      	ldr	r2, [r2, #0]
 8001eae:	69b9      	ldr	r1, [r7, #24]
 8001eb0:	430b      	orrs	r3, r1
 8001eb2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff fed1 	bl	8001c76 <LL_ADC_REG_IsConversionOngoing>
 8001ed4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff fede 	bl	8001c9c <LL_ADC_INJ_IsConversionOngoing>
 8001ee0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d17f      	bne.n	8001fe8 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d17c      	bne.n	8001fe8 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ef2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001efa:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f0a:	f023 0302 	bic.w	r3, r3, #2
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6812      	ldr	r2, [r2, #0]
 8001f12:	69b9      	ldr	r1, [r7, #24]
 8001f14:	430b      	orrs	r3, r1
 8001f16:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d017      	beq.n	8001f50 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	691a      	ldr	r2, [r3, #16]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001f2e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001f38:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001f3c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	6911      	ldr	r1, [r2, #16]
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6812      	ldr	r2, [r2, #0]
 8001f48:	430b      	orrs	r3, r1
 8001f4a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001f4e:	e013      	b.n	8001f78 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	691a      	ldr	r2, [r3, #16]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001f5e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	6812      	ldr	r2, [r2, #0]
 8001f6c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001f70:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f74:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d12a      	bne.n	8001fd8 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001f8c:	f023 0304 	bic.w	r3, r3, #4
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f98:	4311      	orrs	r1, r2
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001f9e:	4311      	orrs	r1, r2
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f042 0201 	orr.w	r2, r2, #1
 8001fb0:	611a      	str	r2, [r3, #16]
 8001fb2:	e019      	b.n	8001fe8 <HAL_ADC_Init+0x324>
 8001fb4:	20000000 	.word	0x20000000
 8001fb8:	053e2d63 	.word	0x053e2d63
 8001fbc:	50000100 	.word	0x50000100
 8001fc0:	50000400 	.word	0x50000400
 8001fc4:	50000500 	.word	0x50000500
 8001fc8:	50000600 	.word	0x50000600
 8001fcc:	50000300 	.word	0x50000300
 8001fd0:	50000700 	.word	0x50000700
 8001fd4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	691a      	ldr	r2, [r3, #16]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f022 0201 	bic.w	r2, r2, #1
 8001fe6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d10c      	bne.n	800200a <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff6:	f023 010f 	bic.w	r1, r3, #15
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	1e5a      	subs	r2, r3, #1
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	430a      	orrs	r2, r1
 8002006:	631a      	str	r2, [r3, #48]	@ 0x30
 8002008:	e007      	b.n	800201a <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 020f 	bic.w	r2, r2, #15
 8002018:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800201e:	f023 0303 	bic.w	r3, r3, #3
 8002022:	f043 0201 	orr.w	r2, r3, #1
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	65da      	str	r2, [r3, #92]	@ 0x5c
 800202a:	e007      	b.n	800203c <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002030:	f043 0210 	orr.w	r2, r3, #16
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800203c:	7ffb      	ldrb	r3, [r7, #31]
}
 800203e:	4618      	mov	r0, r3
 8002040:	3724      	adds	r7, #36	@ 0x24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd90      	pop	{r4, r7, pc}
 8002046:	bf00      	nop

08002048 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b0b6      	sub	sp, #216	@ 0xd8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002052:	2300      	movs	r3, #0
 8002054:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002058:	2300      	movs	r3, #0
 800205a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002062:	2b01      	cmp	r3, #1
 8002064:	d102      	bne.n	800206c <HAL_ADC_ConfigChannel+0x24>
 8002066:	2302      	movs	r3, #2
 8002068:	f000 bc13 	b.w	8002892 <HAL_ADC_ConfigChannel+0x84a>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff fdfc 	bl	8001c76 <LL_ADC_REG_IsConversionOngoing>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	f040 83f3 	bne.w	800286c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6818      	ldr	r0, [r3, #0]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	6859      	ldr	r1, [r3, #4]
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	461a      	mov	r2, r3
 8002094:	f7ff fd0e 	bl	8001ab4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff fdea 	bl	8001c76 <LL_ADC_REG_IsConversionOngoing>
 80020a2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff fdf6 	bl	8001c9c <LL_ADC_INJ_IsConversionOngoing>
 80020b0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020b4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f040 81d9 	bne.w	8002470 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f040 81d4 	bne.w	8002470 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80020d0:	d10f      	bne.n	80020f2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6818      	ldr	r0, [r3, #0]
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2200      	movs	r2, #0
 80020dc:	4619      	mov	r1, r3
 80020de:	f7ff fd15 	bl	8001b0c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff fccf 	bl	8001a8e <LL_ADC_SetSamplingTimeCommonConfig>
 80020f0:	e00e      	b.n	8002110 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6818      	ldr	r0, [r3, #0]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	6819      	ldr	r1, [r3, #0]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	461a      	mov	r2, r3
 8002100:	f7ff fd04 	bl	8001b0c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2100      	movs	r1, #0
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff fcbf 	bl	8001a8e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	695a      	ldr	r2, [r3, #20]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	08db      	lsrs	r3, r3, #3
 800211c:	f003 0303 	and.w	r3, r3, #3
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	2b04      	cmp	r3, #4
 8002130:	d022      	beq.n	8002178 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6818      	ldr	r0, [r3, #0]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	6919      	ldr	r1, [r3, #16]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002142:	f7ff fc19 	bl	8001978 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6818      	ldr	r0, [r3, #0]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	6919      	ldr	r1, [r3, #16]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	461a      	mov	r2, r3
 8002154:	f7ff fc65 	bl	8001a22 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6818      	ldr	r0, [r3, #0]
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	6919      	ldr	r1, [r3, #16]
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	7f1b      	ldrb	r3, [r3, #28]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d102      	bne.n	800216e <HAL_ADC_ConfigChannel+0x126>
 8002168:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800216c:	e000      	b.n	8002170 <HAL_ADC_ConfigChannel+0x128>
 800216e:	2300      	movs	r3, #0
 8002170:	461a      	mov	r2, r3
 8002172:	f7ff fc71 	bl	8001a58 <LL_ADC_SetOffsetSaturation>
 8002176:	e17b      	b.n	8002470 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2100      	movs	r1, #0
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff fc1e 	bl	80019c0 <LL_ADC_GetOffsetChannel>
 8002184:	4603      	mov	r3, r0
 8002186:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10a      	bne.n	80021a4 <HAL_ADC_ConfigChannel+0x15c>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2100      	movs	r1, #0
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff fc13 	bl	80019c0 <LL_ADC_GetOffsetChannel>
 800219a:	4603      	mov	r3, r0
 800219c:	0e9b      	lsrs	r3, r3, #26
 800219e:	f003 021f 	and.w	r2, r3, #31
 80021a2:	e01e      	b.n	80021e2 <HAL_ADC_ConfigChannel+0x19a>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2100      	movs	r1, #0
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff fc08 	bl	80019c0 <LL_ADC_GetOffsetChannel>
 80021b0:	4603      	mov	r3, r0
 80021b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80021ba:	fa93 f3a3 	rbit	r3, r3
 80021be:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80021c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80021d2:	2320      	movs	r3, #32
 80021d4:	e004      	b.n	80021e0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80021d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80021da:	fab3 f383 	clz	r3, r3
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d105      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x1b2>
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	0e9b      	lsrs	r3, r3, #26
 80021f4:	f003 031f 	and.w	r3, r3, #31
 80021f8:	e018      	b.n	800222c <HAL_ADC_ConfigChannel+0x1e4>
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002202:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002206:	fa93 f3a3 	rbit	r3, r3
 800220a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800220e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002212:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002216:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800221e:	2320      	movs	r3, #32
 8002220:	e004      	b.n	800222c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002222:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002226:	fab3 f383 	clz	r3, r3
 800222a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800222c:	429a      	cmp	r2, r3
 800222e:	d106      	bne.n	800223e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2200      	movs	r2, #0
 8002236:	2100      	movs	r1, #0
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff fbd7 	bl	80019ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2101      	movs	r1, #1
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff fbbb 	bl	80019c0 <LL_ADC_GetOffsetChannel>
 800224a:	4603      	mov	r3, r0
 800224c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10a      	bne.n	800226a <HAL_ADC_ConfigChannel+0x222>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2101      	movs	r1, #1
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff fbb0 	bl	80019c0 <LL_ADC_GetOffsetChannel>
 8002260:	4603      	mov	r3, r0
 8002262:	0e9b      	lsrs	r3, r3, #26
 8002264:	f003 021f 	and.w	r2, r3, #31
 8002268:	e01e      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x260>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2101      	movs	r1, #1
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fba5 	bl	80019c0 <LL_ADC_GetOffsetChannel>
 8002276:	4603      	mov	r3, r0
 8002278:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002280:	fa93 f3a3 	rbit	r3, r3
 8002284:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002288:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800228c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002290:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002294:	2b00      	cmp	r3, #0
 8002296:	d101      	bne.n	800229c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002298:	2320      	movs	r3, #32
 800229a:	e004      	b.n	80022a6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800229c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80022a0:	fab3 f383 	clz	r3, r3
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d105      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x278>
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	0e9b      	lsrs	r3, r3, #26
 80022ba:	f003 031f 	and.w	r3, r3, #31
 80022be:	e018      	b.n	80022f2 <HAL_ADC_ConfigChannel+0x2aa>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80022cc:	fa93 f3a3 	rbit	r3, r3
 80022d0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80022d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80022d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80022dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80022e4:	2320      	movs	r3, #32
 80022e6:	e004      	b.n	80022f2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80022e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80022ec:	fab3 f383 	clz	r3, r3
 80022f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d106      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2200      	movs	r2, #0
 80022fc:	2101      	movs	r1, #1
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff fb74 	bl	80019ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2102      	movs	r1, #2
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff fb58 	bl	80019c0 <LL_ADC_GetOffsetChannel>
 8002310:	4603      	mov	r3, r0
 8002312:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10a      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x2e8>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2102      	movs	r1, #2
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff fb4d 	bl	80019c0 <LL_ADC_GetOffsetChannel>
 8002326:	4603      	mov	r3, r0
 8002328:	0e9b      	lsrs	r3, r3, #26
 800232a:	f003 021f 	and.w	r2, r3, #31
 800232e:	e01e      	b.n	800236e <HAL_ADC_ConfigChannel+0x326>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2102      	movs	r1, #2
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff fb42 	bl	80019c0 <LL_ADC_GetOffsetChannel>
 800233c:	4603      	mov	r3, r0
 800233e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002342:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002346:	fa93 f3a3 	rbit	r3, r3
 800234a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800234e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002352:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002356:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800235e:	2320      	movs	r3, #32
 8002360:	e004      	b.n	800236c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002362:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002366:	fab3 f383 	clz	r3, r3
 800236a:	b2db      	uxtb	r3, r3
 800236c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002376:	2b00      	cmp	r3, #0
 8002378:	d105      	bne.n	8002386 <HAL_ADC_ConfigChannel+0x33e>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	0e9b      	lsrs	r3, r3, #26
 8002380:	f003 031f 	and.w	r3, r3, #31
 8002384:	e016      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x36c>
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002392:	fa93 f3a3 	rbit	r3, r3
 8002396:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002398:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800239a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800239e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80023a6:	2320      	movs	r3, #32
 80023a8:	e004      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80023aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80023ae:	fab3 f383 	clz	r3, r3
 80023b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d106      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2200      	movs	r2, #0
 80023be:	2102      	movs	r1, #2
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff fb13 	bl	80019ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2103      	movs	r1, #3
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff faf7 	bl	80019c0 <LL_ADC_GetOffsetChannel>
 80023d2:	4603      	mov	r3, r0
 80023d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10a      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x3aa>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2103      	movs	r1, #3
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff faec 	bl	80019c0 <LL_ADC_GetOffsetChannel>
 80023e8:	4603      	mov	r3, r0
 80023ea:	0e9b      	lsrs	r3, r3, #26
 80023ec:	f003 021f 	and.w	r2, r3, #31
 80023f0:	e017      	b.n	8002422 <HAL_ADC_ConfigChannel+0x3da>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2103      	movs	r1, #3
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff fae1 	bl	80019c0 <LL_ADC_GetOffsetChannel>
 80023fe:	4603      	mov	r3, r0
 8002400:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002402:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002404:	fa93 f3a3 	rbit	r3, r3
 8002408:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800240a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800240c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800240e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002414:	2320      	movs	r3, #32
 8002416:	e003      	b.n	8002420 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002418:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800241a:	fab3 f383 	clz	r3, r3
 800241e:	b2db      	uxtb	r3, r3
 8002420:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800242a:	2b00      	cmp	r3, #0
 800242c:	d105      	bne.n	800243a <HAL_ADC_ConfigChannel+0x3f2>
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	0e9b      	lsrs	r3, r3, #26
 8002434:	f003 031f 	and.w	r3, r3, #31
 8002438:	e011      	b.n	800245e <HAL_ADC_ConfigChannel+0x416>
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002440:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002442:	fa93 f3a3 	rbit	r3, r3
 8002446:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002448:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800244a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800244c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002452:	2320      	movs	r3, #32
 8002454:	e003      	b.n	800245e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002456:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002458:	fab3 f383 	clz	r3, r3
 800245c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800245e:	429a      	cmp	r2, r3
 8002460:	d106      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2200      	movs	r2, #0
 8002468:	2103      	movs	r1, #3
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff fabe 	bl	80019ec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff fbeb 	bl	8001c50 <LL_ADC_IsEnabled>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	f040 813d 	bne.w	80026fc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6818      	ldr	r0, [r3, #0]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	6819      	ldr	r1, [r3, #0]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	461a      	mov	r2, r3
 8002490:	f7ff fb68 	bl	8001b64 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	4aa2      	ldr	r2, [pc, #648]	@ (8002724 <HAL_ADC_ConfigChannel+0x6dc>)
 800249a:	4293      	cmp	r3, r2
 800249c:	f040 812e 	bne.w	80026fc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10b      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x480>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	0e9b      	lsrs	r3, r3, #26
 80024b6:	3301      	adds	r3, #1
 80024b8:	f003 031f 	and.w	r3, r3, #31
 80024bc:	2b09      	cmp	r3, #9
 80024be:	bf94      	ite	ls
 80024c0:	2301      	movls	r3, #1
 80024c2:	2300      	movhi	r3, #0
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	e019      	b.n	80024fc <HAL_ADC_ConfigChannel+0x4b4>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024d0:	fa93 f3a3 	rbit	r3, r3
 80024d4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80024d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024d8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80024da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80024e0:	2320      	movs	r3, #32
 80024e2:	e003      	b.n	80024ec <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80024e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024e6:	fab3 f383 	clz	r3, r3
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	3301      	adds	r3, #1
 80024ee:	f003 031f 	and.w	r3, r3, #31
 80024f2:	2b09      	cmp	r3, #9
 80024f4:	bf94      	ite	ls
 80024f6:	2301      	movls	r3, #1
 80024f8:	2300      	movhi	r3, #0
 80024fa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d079      	beq.n	80025f4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002508:	2b00      	cmp	r3, #0
 800250a:	d107      	bne.n	800251c <HAL_ADC_ConfigChannel+0x4d4>
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	0e9b      	lsrs	r3, r3, #26
 8002512:	3301      	adds	r3, #1
 8002514:	069b      	lsls	r3, r3, #26
 8002516:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800251a:	e015      	b.n	8002548 <HAL_ADC_ConfigChannel+0x500>
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002522:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002524:	fa93 f3a3 	rbit	r3, r3
 8002528:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800252a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800252c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800252e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002534:	2320      	movs	r3, #32
 8002536:	e003      	b.n	8002540 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002538:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800253a:	fab3 f383 	clz	r3, r3
 800253e:	b2db      	uxtb	r3, r3
 8002540:	3301      	adds	r3, #1
 8002542:	069b      	lsls	r3, r3, #26
 8002544:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002550:	2b00      	cmp	r3, #0
 8002552:	d109      	bne.n	8002568 <HAL_ADC_ConfigChannel+0x520>
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	0e9b      	lsrs	r3, r3, #26
 800255a:	3301      	adds	r3, #1
 800255c:	f003 031f 	and.w	r3, r3, #31
 8002560:	2101      	movs	r1, #1
 8002562:	fa01 f303 	lsl.w	r3, r1, r3
 8002566:	e017      	b.n	8002598 <HAL_ADC_ConfigChannel+0x550>
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002570:	fa93 f3a3 	rbit	r3, r3
 8002574:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002576:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002578:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800257a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002580:	2320      	movs	r3, #32
 8002582:	e003      	b.n	800258c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002584:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002586:	fab3 f383 	clz	r3, r3
 800258a:	b2db      	uxtb	r3, r3
 800258c:	3301      	adds	r3, #1
 800258e:	f003 031f 	and.w	r3, r3, #31
 8002592:	2101      	movs	r1, #1
 8002594:	fa01 f303 	lsl.w	r3, r1, r3
 8002598:	ea42 0103 	orr.w	r1, r2, r3
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10a      	bne.n	80025be <HAL_ADC_ConfigChannel+0x576>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	0e9b      	lsrs	r3, r3, #26
 80025ae:	3301      	adds	r3, #1
 80025b0:	f003 021f 	and.w	r2, r3, #31
 80025b4:	4613      	mov	r3, r2
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	4413      	add	r3, r2
 80025ba:	051b      	lsls	r3, r3, #20
 80025bc:	e018      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x5a8>
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025c6:	fa93 f3a3 	rbit	r3, r3
 80025ca:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80025cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80025d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80025d6:	2320      	movs	r3, #32
 80025d8:	e003      	b.n	80025e2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80025da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025dc:	fab3 f383 	clz	r3, r3
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	3301      	adds	r3, #1
 80025e4:	f003 021f 	and.w	r2, r3, #31
 80025e8:	4613      	mov	r3, r2
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	4413      	add	r3, r2
 80025ee:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025f0:	430b      	orrs	r3, r1
 80025f2:	e07e      	b.n	80026f2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d107      	bne.n	8002610 <HAL_ADC_ConfigChannel+0x5c8>
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	0e9b      	lsrs	r3, r3, #26
 8002606:	3301      	adds	r3, #1
 8002608:	069b      	lsls	r3, r3, #26
 800260a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800260e:	e015      	b.n	800263c <HAL_ADC_ConfigChannel+0x5f4>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002618:	fa93 f3a3 	rbit	r3, r3
 800261c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800261e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002620:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002628:	2320      	movs	r3, #32
 800262a:	e003      	b.n	8002634 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800262c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800262e:	fab3 f383 	clz	r3, r3
 8002632:	b2db      	uxtb	r3, r3
 8002634:	3301      	adds	r3, #1
 8002636:	069b      	lsls	r3, r3, #26
 8002638:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002644:	2b00      	cmp	r3, #0
 8002646:	d109      	bne.n	800265c <HAL_ADC_ConfigChannel+0x614>
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	0e9b      	lsrs	r3, r3, #26
 800264e:	3301      	adds	r3, #1
 8002650:	f003 031f 	and.w	r3, r3, #31
 8002654:	2101      	movs	r1, #1
 8002656:	fa01 f303 	lsl.w	r3, r1, r3
 800265a:	e017      	b.n	800268c <HAL_ADC_ConfigChannel+0x644>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002662:	6a3b      	ldr	r3, [r7, #32]
 8002664:	fa93 f3a3 	rbit	r3, r3
 8002668:	61fb      	str	r3, [r7, #28]
  return result;
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800266e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002674:	2320      	movs	r3, #32
 8002676:	e003      	b.n	8002680 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267a:	fab3 f383 	clz	r3, r3
 800267e:	b2db      	uxtb	r3, r3
 8002680:	3301      	adds	r3, #1
 8002682:	f003 031f 	and.w	r3, r3, #31
 8002686:	2101      	movs	r1, #1
 8002688:	fa01 f303 	lsl.w	r3, r1, r3
 800268c:	ea42 0103 	orr.w	r1, r2, r3
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002698:	2b00      	cmp	r3, #0
 800269a:	d10d      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x670>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	0e9b      	lsrs	r3, r3, #26
 80026a2:	3301      	adds	r3, #1
 80026a4:	f003 021f 	and.w	r2, r3, #31
 80026a8:	4613      	mov	r3, r2
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	4413      	add	r3, r2
 80026ae:	3b1e      	subs	r3, #30
 80026b0:	051b      	lsls	r3, r3, #20
 80026b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80026b6:	e01b      	b.n	80026f0 <HAL_ADC_ConfigChannel+0x6a8>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	fa93 f3a3 	rbit	r3, r3
 80026c4:	613b      	str	r3, [r7, #16]
  return result;
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80026d0:	2320      	movs	r3, #32
 80026d2:	e003      	b.n	80026dc <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	fab3 f383 	clz	r3, r3
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	3301      	adds	r3, #1
 80026de:	f003 021f 	and.w	r2, r3, #31
 80026e2:	4613      	mov	r3, r2
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	4413      	add	r3, r2
 80026e8:	3b1e      	subs	r3, #30
 80026ea:	051b      	lsls	r3, r3, #20
 80026ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026f0:	430b      	orrs	r3, r1
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	6892      	ldr	r2, [r2, #8]
 80026f6:	4619      	mov	r1, r3
 80026f8:	f7ff fa08 	bl	8001b0c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	4b09      	ldr	r3, [pc, #36]	@ (8002728 <HAL_ADC_ConfigChannel+0x6e0>)
 8002702:	4013      	ands	r3, r2
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 80be 	beq.w	8002886 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002712:	d004      	beq.n	800271e <HAL_ADC_ConfigChannel+0x6d6>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a04      	ldr	r2, [pc, #16]	@ (800272c <HAL_ADC_ConfigChannel+0x6e4>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d10a      	bne.n	8002734 <HAL_ADC_ConfigChannel+0x6ec>
 800271e:	4b04      	ldr	r3, [pc, #16]	@ (8002730 <HAL_ADC_ConfigChannel+0x6e8>)
 8002720:	e009      	b.n	8002736 <HAL_ADC_ConfigChannel+0x6ee>
 8002722:	bf00      	nop
 8002724:	407f0000 	.word	0x407f0000
 8002728:	80080000 	.word	0x80080000
 800272c:	50000100 	.word	0x50000100
 8002730:	50000300 	.word	0x50000300
 8002734:	4b59      	ldr	r3, [pc, #356]	@ (800289c <HAL_ADC_ConfigChannel+0x854>)
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff f910 	bl	800195c <LL_ADC_GetCommonPathInternalCh>
 800273c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a56      	ldr	r2, [pc, #344]	@ (80028a0 <HAL_ADC_ConfigChannel+0x858>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d004      	beq.n	8002754 <HAL_ADC_ConfigChannel+0x70c>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a55      	ldr	r2, [pc, #340]	@ (80028a4 <HAL_ADC_ConfigChannel+0x85c>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d13a      	bne.n	80027ca <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002754:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002758:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d134      	bne.n	80027ca <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002768:	d005      	beq.n	8002776 <HAL_ADC_ConfigChannel+0x72e>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a4e      	ldr	r2, [pc, #312]	@ (80028a8 <HAL_ADC_ConfigChannel+0x860>)
 8002770:	4293      	cmp	r3, r2
 8002772:	f040 8085 	bne.w	8002880 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800277e:	d004      	beq.n	800278a <HAL_ADC_ConfigChannel+0x742>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a49      	ldr	r2, [pc, #292]	@ (80028ac <HAL_ADC_ConfigChannel+0x864>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d101      	bne.n	800278e <HAL_ADC_ConfigChannel+0x746>
 800278a:	4a49      	ldr	r2, [pc, #292]	@ (80028b0 <HAL_ADC_ConfigChannel+0x868>)
 800278c:	e000      	b.n	8002790 <HAL_ADC_ConfigChannel+0x748>
 800278e:	4a43      	ldr	r2, [pc, #268]	@ (800289c <HAL_ADC_ConfigChannel+0x854>)
 8002790:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002794:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002798:	4619      	mov	r1, r3
 800279a:	4610      	mov	r0, r2
 800279c:	f7ff f8cb 	bl	8001936 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027a0:	4b44      	ldr	r3, [pc, #272]	@ (80028b4 <HAL_ADC_ConfigChannel+0x86c>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	099b      	lsrs	r3, r3, #6
 80027a6:	4a44      	ldr	r2, [pc, #272]	@ (80028b8 <HAL_ADC_ConfigChannel+0x870>)
 80027a8:	fba2 2303 	umull	r2, r3, r2, r3
 80027ac:	099b      	lsrs	r3, r3, #6
 80027ae:	1c5a      	adds	r2, r3, #1
 80027b0:	4613      	mov	r3, r2
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	4413      	add	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027ba:	e002      	b.n	80027c2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	3b01      	subs	r3, #1
 80027c0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1f9      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027c8:	e05a      	b.n	8002880 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a3b      	ldr	r2, [pc, #236]	@ (80028bc <HAL_ADC_ConfigChannel+0x874>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d125      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x7d8>
 80027d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80027d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d11f      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a31      	ldr	r2, [pc, #196]	@ (80028ac <HAL_ADC_ConfigChannel+0x864>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d104      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x7ac>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a34      	ldr	r2, [pc, #208]	@ (80028c0 <HAL_ADC_ConfigChannel+0x878>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d047      	beq.n	8002884 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027fc:	d004      	beq.n	8002808 <HAL_ADC_ConfigChannel+0x7c0>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a2a      	ldr	r2, [pc, #168]	@ (80028ac <HAL_ADC_ConfigChannel+0x864>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d101      	bne.n	800280c <HAL_ADC_ConfigChannel+0x7c4>
 8002808:	4a29      	ldr	r2, [pc, #164]	@ (80028b0 <HAL_ADC_ConfigChannel+0x868>)
 800280a:	e000      	b.n	800280e <HAL_ADC_ConfigChannel+0x7c6>
 800280c:	4a23      	ldr	r2, [pc, #140]	@ (800289c <HAL_ADC_ConfigChannel+0x854>)
 800280e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002812:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002816:	4619      	mov	r1, r3
 8002818:	4610      	mov	r0, r2
 800281a:	f7ff f88c 	bl	8001936 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800281e:	e031      	b.n	8002884 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a27      	ldr	r2, [pc, #156]	@ (80028c4 <HAL_ADC_ConfigChannel+0x87c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d12d      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800282a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800282e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d127      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a1c      	ldr	r2, [pc, #112]	@ (80028ac <HAL_ADC_ConfigChannel+0x864>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d022      	beq.n	8002886 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002848:	d004      	beq.n	8002854 <HAL_ADC_ConfigChannel+0x80c>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a17      	ldr	r2, [pc, #92]	@ (80028ac <HAL_ADC_ConfigChannel+0x864>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d101      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x810>
 8002854:	4a16      	ldr	r2, [pc, #88]	@ (80028b0 <HAL_ADC_ConfigChannel+0x868>)
 8002856:	e000      	b.n	800285a <HAL_ADC_ConfigChannel+0x812>
 8002858:	4a10      	ldr	r2, [pc, #64]	@ (800289c <HAL_ADC_ConfigChannel+0x854>)
 800285a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800285e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002862:	4619      	mov	r1, r3
 8002864:	4610      	mov	r0, r2
 8002866:	f7ff f866 	bl	8001936 <LL_ADC_SetCommonPathInternalCh>
 800286a:	e00c      	b.n	8002886 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002870:	f043 0220 	orr.w	r2, r3, #32
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800287e:	e002      	b.n	8002886 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002880:	bf00      	nop
 8002882:	e000      	b.n	8002886 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002884:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800288e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002892:	4618      	mov	r0, r3
 8002894:	37d8      	adds	r7, #216	@ 0xd8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	50000700 	.word	0x50000700
 80028a0:	c3210000 	.word	0xc3210000
 80028a4:	90c00010 	.word	0x90c00010
 80028a8:	50000600 	.word	0x50000600
 80028ac:	50000100 	.word	0x50000100
 80028b0:	50000300 	.word	0x50000300
 80028b4:	20000000 	.word	0x20000000
 80028b8:	053e2d63 	.word	0x053e2d63
 80028bc:	c7520000 	.word	0xc7520000
 80028c0:	50000500 	.word	0x50000500
 80028c4:	cb840000 	.word	0xcb840000

080028c8 <LL_ADC_IsEnabled>:
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d101      	bne.n	80028e0 <LL_ADC_IsEnabled+0x18>
 80028dc:	2301      	movs	r3, #1
 80028de:	e000      	b.n	80028e2 <LL_ADC_IsEnabled+0x1a>
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <LL_ADC_REG_IsConversionOngoing>:
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 0304 	and.w	r3, r3, #4
 80028fe:	2b04      	cmp	r3, #4
 8002900:	d101      	bne.n	8002906 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002902:	2301      	movs	r3, #1
 8002904:	e000      	b.n	8002908 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002914:	b590      	push	{r4, r7, lr}
 8002916:	b0a1      	sub	sp, #132	@ 0x84
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800291e:	2300      	movs	r3, #0
 8002920:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800292a:	2b01      	cmp	r3, #1
 800292c:	d101      	bne.n	8002932 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800292e:	2302      	movs	r3, #2
 8002930:	e0e7      	b.n	8002b02 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800293a:	2300      	movs	r3, #0
 800293c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800293e:	2300      	movs	r3, #0
 8002940:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800294a:	d102      	bne.n	8002952 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800294c:	4b6f      	ldr	r3, [pc, #444]	@ (8002b0c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800294e:	60bb      	str	r3, [r7, #8]
 8002950:	e009      	b.n	8002966 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a6e      	ldr	r2, [pc, #440]	@ (8002b10 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d102      	bne.n	8002962 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800295c:	4b6d      	ldr	r3, [pc, #436]	@ (8002b14 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800295e:	60bb      	str	r3, [r7, #8]
 8002960:	e001      	b.n	8002966 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002962:	2300      	movs	r3, #0
 8002964:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10b      	bne.n	8002984 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002970:	f043 0220 	orr.w	r2, r3, #32
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e0be      	b.n	8002b02 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff ffb1 	bl	80028ee <LL_ADC_REG_IsConversionOngoing>
 800298c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff ffab 	bl	80028ee <LL_ADC_REG_IsConversionOngoing>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	f040 80a0 	bne.w	8002ae0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80029a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f040 809c 	bne.w	8002ae0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029b0:	d004      	beq.n	80029bc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a55      	ldr	r2, [pc, #340]	@ (8002b0c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d101      	bne.n	80029c0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80029bc:	4b56      	ldr	r3, [pc, #344]	@ (8002b18 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80029be:	e000      	b.n	80029c2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80029c0:	4b56      	ldr	r3, [pc, #344]	@ (8002b1c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80029c2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d04b      	beq.n	8002a64 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80029cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	6859      	ldr	r1, [r3, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80029de:	035b      	lsls	r3, r3, #13
 80029e0:	430b      	orrs	r3, r1
 80029e2:	431a      	orrs	r2, r3
 80029e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029e6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029f0:	d004      	beq.n	80029fc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a45      	ldr	r2, [pc, #276]	@ (8002b0c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d10f      	bne.n	8002a1c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80029fc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002a00:	f7ff ff62 	bl	80028c8 <LL_ADC_IsEnabled>
 8002a04:	4604      	mov	r4, r0
 8002a06:	4841      	ldr	r0, [pc, #260]	@ (8002b0c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a08:	f7ff ff5e 	bl	80028c8 <LL_ADC_IsEnabled>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	4323      	orrs	r3, r4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	bf0c      	ite	eq
 8002a14:	2301      	moveq	r3, #1
 8002a16:	2300      	movne	r3, #0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	e012      	b.n	8002a42 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002a1c:	483c      	ldr	r0, [pc, #240]	@ (8002b10 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002a1e:	f7ff ff53 	bl	80028c8 <LL_ADC_IsEnabled>
 8002a22:	4604      	mov	r4, r0
 8002a24:	483b      	ldr	r0, [pc, #236]	@ (8002b14 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002a26:	f7ff ff4f 	bl	80028c8 <LL_ADC_IsEnabled>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	431c      	orrs	r4, r3
 8002a2e:	483c      	ldr	r0, [pc, #240]	@ (8002b20 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002a30:	f7ff ff4a 	bl	80028c8 <LL_ADC_IsEnabled>
 8002a34:	4603      	mov	r3, r0
 8002a36:	4323      	orrs	r3, r4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	bf0c      	ite	eq
 8002a3c:	2301      	moveq	r3, #1
 8002a3e:	2300      	movne	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d056      	beq.n	8002af4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002a4e:	f023 030f 	bic.w	r3, r3, #15
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	6811      	ldr	r1, [r2, #0]
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	6892      	ldr	r2, [r2, #8]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a60:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a62:	e047      	b.n	8002af4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a6e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a78:	d004      	beq.n	8002a84 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a23      	ldr	r2, [pc, #140]	@ (8002b0c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d10f      	bne.n	8002aa4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002a84:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002a88:	f7ff ff1e 	bl	80028c8 <LL_ADC_IsEnabled>
 8002a8c:	4604      	mov	r4, r0
 8002a8e:	481f      	ldr	r0, [pc, #124]	@ (8002b0c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a90:	f7ff ff1a 	bl	80028c8 <LL_ADC_IsEnabled>
 8002a94:	4603      	mov	r3, r0
 8002a96:	4323      	orrs	r3, r4
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	bf0c      	ite	eq
 8002a9c:	2301      	moveq	r3, #1
 8002a9e:	2300      	movne	r3, #0
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	e012      	b.n	8002aca <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002aa4:	481a      	ldr	r0, [pc, #104]	@ (8002b10 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002aa6:	f7ff ff0f 	bl	80028c8 <LL_ADC_IsEnabled>
 8002aaa:	4604      	mov	r4, r0
 8002aac:	4819      	ldr	r0, [pc, #100]	@ (8002b14 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002aae:	f7ff ff0b 	bl	80028c8 <LL_ADC_IsEnabled>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	431c      	orrs	r4, r3
 8002ab6:	481a      	ldr	r0, [pc, #104]	@ (8002b20 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002ab8:	f7ff ff06 	bl	80028c8 <LL_ADC_IsEnabled>
 8002abc:	4603      	mov	r3, r0
 8002abe:	4323      	orrs	r3, r4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	bf0c      	ite	eq
 8002ac4:	2301      	moveq	r3, #1
 8002ac6:	2300      	movne	r3, #0
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d012      	beq.n	8002af4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002ace:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002ad6:	f023 030f 	bic.w	r3, r3, #15
 8002ada:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002adc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ade:	e009      	b.n	8002af4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae4:	f043 0220 	orr.w	r2, r3, #32
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002af2:	e000      	b.n	8002af6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002af4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002afe:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3784      	adds	r7, #132	@ 0x84
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd90      	pop	{r4, r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	50000100 	.word	0x50000100
 8002b10:	50000400 	.word	0x50000400
 8002b14:	50000500 	.word	0x50000500
 8002b18:	50000300 	.word	0x50000300
 8002b1c:	50000700 	.word	0x50000700
 8002b20:	50000600 	.word	0x50000600

08002b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b34:	4b0c      	ldr	r3, [pc, #48]	@ (8002b68 <__NVIC_SetPriorityGrouping+0x44>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b40:	4013      	ands	r3, r2
 8002b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b56:	4a04      	ldr	r2, [pc, #16]	@ (8002b68 <__NVIC_SetPriorityGrouping+0x44>)
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	60d3      	str	r3, [r2, #12]
}
 8002b5c:	bf00      	nop
 8002b5e:	3714      	adds	r7, #20
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	e000ed00 	.word	0xe000ed00

08002b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b70:	4b04      	ldr	r3, [pc, #16]	@ (8002b84 <__NVIC_GetPriorityGrouping+0x18>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	0a1b      	lsrs	r3, r3, #8
 8002b76:	f003 0307 	and.w	r3, r3, #7
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	e000ed00 	.word	0xe000ed00

08002b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	db0b      	blt.n	8002bb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b9a:	79fb      	ldrb	r3, [r7, #7]
 8002b9c:	f003 021f 	and.w	r2, r3, #31
 8002ba0:	4907      	ldr	r1, [pc, #28]	@ (8002bc0 <__NVIC_EnableIRQ+0x38>)
 8002ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba6:	095b      	lsrs	r3, r3, #5
 8002ba8:	2001      	movs	r0, #1
 8002baa:	fa00 f202 	lsl.w	r2, r0, r2
 8002bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	e000e100 	.word	0xe000e100

08002bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	4603      	mov	r3, r0
 8002bcc:	6039      	str	r1, [r7, #0]
 8002bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	db0a      	blt.n	8002bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	490c      	ldr	r1, [pc, #48]	@ (8002c10 <__NVIC_SetPriority+0x4c>)
 8002bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be2:	0112      	lsls	r2, r2, #4
 8002be4:	b2d2      	uxtb	r2, r2
 8002be6:	440b      	add	r3, r1
 8002be8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bec:	e00a      	b.n	8002c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	4908      	ldr	r1, [pc, #32]	@ (8002c14 <__NVIC_SetPriority+0x50>)
 8002bf4:	79fb      	ldrb	r3, [r7, #7]
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	3b04      	subs	r3, #4
 8002bfc:	0112      	lsls	r2, r2, #4
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	440b      	add	r3, r1
 8002c02:	761a      	strb	r2, [r3, #24]
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	e000e100 	.word	0xe000e100
 8002c14:	e000ed00 	.word	0xe000ed00

08002c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b089      	sub	sp, #36	@ 0x24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	f1c3 0307 	rsb	r3, r3, #7
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	bf28      	it	cs
 8002c36:	2304      	movcs	r3, #4
 8002c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	2b06      	cmp	r3, #6
 8002c40:	d902      	bls.n	8002c48 <NVIC_EncodePriority+0x30>
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	3b03      	subs	r3, #3
 8002c46:	e000      	b.n	8002c4a <NVIC_EncodePriority+0x32>
 8002c48:	2300      	movs	r3, #0
 8002c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	43da      	mvns	r2, r3
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	401a      	ands	r2, r3
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c60:	f04f 31ff 	mov.w	r1, #4294967295
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6a:	43d9      	mvns	r1, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c70:	4313      	orrs	r3, r2
         );
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3724      	adds	r7, #36	@ 0x24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b082      	sub	sp, #8
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7ff ff4c 	bl	8002b24 <__NVIC_SetPriorityGrouping>
}
 8002c8c:	bf00      	nop
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
 8002ca0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ca2:	f7ff ff63 	bl	8002b6c <__NVIC_GetPriorityGrouping>
 8002ca6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	68b9      	ldr	r1, [r7, #8]
 8002cac:	6978      	ldr	r0, [r7, #20]
 8002cae:	f7ff ffb3 	bl	8002c18 <NVIC_EncodePriority>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cb8:	4611      	mov	r1, r2
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff ff82 	bl	8002bc4 <__NVIC_SetPriority>
}
 8002cc0:	bf00      	nop
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	4603      	mov	r3, r0
 8002cd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff ff56 	bl	8002b88 <__NVIC_EnableIRQ>
}
 8002cdc:	bf00      	nop
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cec:	2300      	movs	r3, #0
 8002cee:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d005      	beq.n	8002d08 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2204      	movs	r2, #4
 8002d00:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	73fb      	strb	r3, [r7, #15]
 8002d06:	e037      	b.n	8002d78 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 020e 	bic.w	r2, r2, #14
 8002d16:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d22:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d26:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 0201 	bic.w	r2, r2, #1
 8002d36:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d3c:	f003 021f 	and.w	r2, r3, #31
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d44:	2101      	movs	r1, #1
 8002d46:	fa01 f202 	lsl.w	r2, r1, r2
 8002d4a:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002d54:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00c      	beq.n	8002d78 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d6c:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002d76:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3714      	adds	r7, #20
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b084      	sub	sp, #16
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d00d      	beq.n	8002dca <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2204      	movs	r2, #4
 8002db2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	73fb      	strb	r3, [r7, #15]
 8002dc8:	e047      	b.n	8002e5a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 020e 	bic.w	r2, r2, #14
 8002dd8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0201 	bic.w	r2, r2, #1
 8002de8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002df4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002df8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dfe:	f003 021f 	and.w	r2, r3, #31
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e06:	2101      	movs	r1, #1
 8002e08:	fa01 f202 	lsl.w	r2, r1, r2
 8002e0c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002e16:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00c      	beq.n	8002e3a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e2a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e2e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002e38:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	4798      	blx	r3
    }
  }
  return status;
 8002e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b087      	sub	sp, #28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002e72:	e15a      	b.n	800312a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	2101      	movs	r1, #1
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e80:	4013      	ands	r3, r2
 8002e82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f000 814c 	beq.w	8003124 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f003 0303 	and.w	r3, r3, #3
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d005      	beq.n	8002ea4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d130      	bne.n	8002f06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	2203      	movs	r2, #3
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	68da      	ldr	r2, [r3, #12]
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002eda:	2201      	movs	r2, #1
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	091b      	lsrs	r3, r3, #4
 8002ef0:	f003 0201 	and.w	r2, r3, #1
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f003 0303 	and.w	r3, r3, #3
 8002f0e:	2b03      	cmp	r3, #3
 8002f10:	d017      	beq.n	8002f42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	2203      	movs	r2, #3
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43db      	mvns	r3, r3
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	4013      	ands	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	689a      	ldr	r2, [r3, #8]
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d123      	bne.n	8002f96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	08da      	lsrs	r2, r3, #3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3208      	adds	r2, #8
 8002f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	220f      	movs	r2, #15
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	691a      	ldr	r2, [r3, #16]
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	08da      	lsrs	r2, r3, #3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3208      	adds	r2, #8
 8002f90:	6939      	ldr	r1, [r7, #16]
 8002f92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	2203      	movs	r2, #3
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	4013      	ands	r3, r2
 8002fac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f003 0203 	and.w	r2, r3, #3
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f000 80a6 	beq.w	8003124 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fd8:	4b5b      	ldr	r3, [pc, #364]	@ (8003148 <HAL_GPIO_Init+0x2e4>)
 8002fda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fdc:	4a5a      	ldr	r2, [pc, #360]	@ (8003148 <HAL_GPIO_Init+0x2e4>)
 8002fde:	f043 0301 	orr.w	r3, r3, #1
 8002fe2:	6613      	str	r3, [r2, #96]	@ 0x60
 8002fe4:	4b58      	ldr	r3, [pc, #352]	@ (8003148 <HAL_GPIO_Init+0x2e4>)
 8002fe6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	60bb      	str	r3, [r7, #8]
 8002fee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ff0:	4a56      	ldr	r2, [pc, #344]	@ (800314c <HAL_GPIO_Init+0x2e8>)
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	089b      	lsrs	r3, r3, #2
 8002ff6:	3302      	adds	r3, #2
 8002ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	f003 0303 	and.w	r3, r3, #3
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	220f      	movs	r2, #15
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	43db      	mvns	r3, r3
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	4013      	ands	r3, r2
 8003012:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800301a:	d01f      	beq.n	800305c <HAL_GPIO_Init+0x1f8>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a4c      	ldr	r2, [pc, #304]	@ (8003150 <HAL_GPIO_Init+0x2ec>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d019      	beq.n	8003058 <HAL_GPIO_Init+0x1f4>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a4b      	ldr	r2, [pc, #300]	@ (8003154 <HAL_GPIO_Init+0x2f0>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d013      	beq.n	8003054 <HAL_GPIO_Init+0x1f0>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a4a      	ldr	r2, [pc, #296]	@ (8003158 <HAL_GPIO_Init+0x2f4>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d00d      	beq.n	8003050 <HAL_GPIO_Init+0x1ec>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a49      	ldr	r2, [pc, #292]	@ (800315c <HAL_GPIO_Init+0x2f8>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d007      	beq.n	800304c <HAL_GPIO_Init+0x1e8>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a48      	ldr	r2, [pc, #288]	@ (8003160 <HAL_GPIO_Init+0x2fc>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d101      	bne.n	8003048 <HAL_GPIO_Init+0x1e4>
 8003044:	2305      	movs	r3, #5
 8003046:	e00a      	b.n	800305e <HAL_GPIO_Init+0x1fa>
 8003048:	2306      	movs	r3, #6
 800304a:	e008      	b.n	800305e <HAL_GPIO_Init+0x1fa>
 800304c:	2304      	movs	r3, #4
 800304e:	e006      	b.n	800305e <HAL_GPIO_Init+0x1fa>
 8003050:	2303      	movs	r3, #3
 8003052:	e004      	b.n	800305e <HAL_GPIO_Init+0x1fa>
 8003054:	2302      	movs	r3, #2
 8003056:	e002      	b.n	800305e <HAL_GPIO_Init+0x1fa>
 8003058:	2301      	movs	r3, #1
 800305a:	e000      	b.n	800305e <HAL_GPIO_Init+0x1fa>
 800305c:	2300      	movs	r3, #0
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	f002 0203 	and.w	r2, r2, #3
 8003064:	0092      	lsls	r2, r2, #2
 8003066:	4093      	lsls	r3, r2
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	4313      	orrs	r3, r2
 800306c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800306e:	4937      	ldr	r1, [pc, #220]	@ (800314c <HAL_GPIO_Init+0x2e8>)
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	089b      	lsrs	r3, r3, #2
 8003074:	3302      	adds	r3, #2
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800307c:	4b39      	ldr	r3, [pc, #228]	@ (8003164 <HAL_GPIO_Init+0x300>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	43db      	mvns	r3, r3
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	4013      	ands	r3, r2
 800308a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d003      	beq.n	80030a0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	4313      	orrs	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030a0:	4a30      	ldr	r2, [pc, #192]	@ (8003164 <HAL_GPIO_Init+0x300>)
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80030a6:	4b2f      	ldr	r3, [pc, #188]	@ (8003164 <HAL_GPIO_Init+0x300>)
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	43db      	mvns	r3, r3
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	4013      	ands	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030ca:	4a26      	ldr	r2, [pc, #152]	@ (8003164 <HAL_GPIO_Init+0x300>)
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80030d0:	4b24      	ldr	r3, [pc, #144]	@ (8003164 <HAL_GPIO_Init+0x300>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	43db      	mvns	r3, r3
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	4013      	ands	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d003      	beq.n	80030f4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030f4:	4a1b      	ldr	r2, [pc, #108]	@ (8003164 <HAL_GPIO_Init+0x300>)
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80030fa:	4b1a      	ldr	r3, [pc, #104]	@ (8003164 <HAL_GPIO_Init+0x300>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	43db      	mvns	r3, r3
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	4013      	ands	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4313      	orrs	r3, r2
 800311c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800311e:	4a11      	ldr	r2, [pc, #68]	@ (8003164 <HAL_GPIO_Init+0x300>)
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	3301      	adds	r3, #1
 8003128:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	fa22 f303 	lsr.w	r3, r2, r3
 8003134:	2b00      	cmp	r3, #0
 8003136:	f47f ae9d 	bne.w	8002e74 <HAL_GPIO_Init+0x10>
  }
}
 800313a:	bf00      	nop
 800313c:	bf00      	nop
 800313e:	371c      	adds	r7, #28
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	40021000 	.word	0x40021000
 800314c:	40010000 	.word	0x40010000
 8003150:	48000400 	.word	0x48000400
 8003154:	48000800 	.word	0x48000800
 8003158:	48000c00 	.word	0x48000c00
 800315c:	48001000 	.word	0x48001000
 8003160:	48001400 	.word	0x48001400
 8003164:	40010400 	.word	0x40010400

08003168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	460b      	mov	r3, r1
 8003172:	807b      	strh	r3, [r7, #2]
 8003174:	4613      	mov	r3, r2
 8003176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003178:	787b      	ldrb	r3, [r7, #1]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800317e:	887a      	ldrh	r2, [r7, #2]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003184:	e002      	b.n	800318c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003186:	887a      	ldrh	r2, [r7, #2]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	4603      	mov	r3, r0
 80031a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80031a2:	4b08      	ldr	r3, [pc, #32]	@ (80031c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031a4:	695a      	ldr	r2, [r3, #20]
 80031a6:	88fb      	ldrh	r3, [r7, #6]
 80031a8:	4013      	ands	r3, r2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d006      	beq.n	80031bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031ae:	4a05      	ldr	r2, [pc, #20]	@ (80031c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031b0:	88fb      	ldrh	r3, [r7, #6]
 80031b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031b4:	88fb      	ldrh	r3, [r7, #6]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 f806 	bl	80031c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80031bc:	bf00      	nop
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40010400 	.word	0x40010400

080031c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	4603      	mov	r3, r0
 80031d0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
	...

080031e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d141      	bne.n	8003272 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031ee:	4b4b      	ldr	r3, [pc, #300]	@ (800331c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80031f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031fa:	d131      	bne.n	8003260 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031fc:	4b47      	ldr	r3, [pc, #284]	@ (800331c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003202:	4a46      	ldr	r2, [pc, #280]	@ (800331c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003204:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003208:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800320c:	4b43      	ldr	r3, [pc, #268]	@ (800331c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003214:	4a41      	ldr	r2, [pc, #260]	@ (800331c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003216:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800321a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800321c:	4b40      	ldr	r3, [pc, #256]	@ (8003320 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2232      	movs	r2, #50	@ 0x32
 8003222:	fb02 f303 	mul.w	r3, r2, r3
 8003226:	4a3f      	ldr	r2, [pc, #252]	@ (8003324 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003228:	fba2 2303 	umull	r2, r3, r2, r3
 800322c:	0c9b      	lsrs	r3, r3, #18
 800322e:	3301      	adds	r3, #1
 8003230:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003232:	e002      	b.n	800323a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	3b01      	subs	r3, #1
 8003238:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800323a:	4b38      	ldr	r3, [pc, #224]	@ (800331c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003242:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003246:	d102      	bne.n	800324e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f2      	bne.n	8003234 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800324e:	4b33      	ldr	r3, [pc, #204]	@ (800331c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003256:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800325a:	d158      	bne.n	800330e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e057      	b.n	8003310 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003260:	4b2e      	ldr	r3, [pc, #184]	@ (800331c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003262:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003266:	4a2d      	ldr	r2, [pc, #180]	@ (800331c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003268:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800326c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003270:	e04d      	b.n	800330e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003278:	d141      	bne.n	80032fe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800327a:	4b28      	ldr	r3, [pc, #160]	@ (800331c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003282:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003286:	d131      	bne.n	80032ec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003288:	4b24      	ldr	r3, [pc, #144]	@ (800331c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800328a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800328e:	4a23      	ldr	r2, [pc, #140]	@ (800331c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003290:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003294:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003298:	4b20      	ldr	r3, [pc, #128]	@ (800331c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032a0:	4a1e      	ldr	r2, [pc, #120]	@ (800331c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003320 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2232      	movs	r2, #50	@ 0x32
 80032ae:	fb02 f303 	mul.w	r3, r2, r3
 80032b2:	4a1c      	ldr	r2, [pc, #112]	@ (8003324 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80032b4:	fba2 2303 	umull	r2, r3, r2, r3
 80032b8:	0c9b      	lsrs	r3, r3, #18
 80032ba:	3301      	adds	r3, #1
 80032bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032be:	e002      	b.n	80032c6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	3b01      	subs	r3, #1
 80032c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032c6:	4b15      	ldr	r3, [pc, #84]	@ (800331c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032d2:	d102      	bne.n	80032da <HAL_PWREx_ControlVoltageScaling+0xfa>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1f2      	bne.n	80032c0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032da:	4b10      	ldr	r3, [pc, #64]	@ (800331c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032e6:	d112      	bne.n	800330e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e011      	b.n	8003310 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032ec:	4b0b      	ldr	r3, [pc, #44]	@ (800331c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032f2:	4a0a      	ldr	r2, [pc, #40]	@ (800331c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80032fc:	e007      	b.n	800330e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032fe:	4b07      	ldr	r3, [pc, #28]	@ (800331c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003306:	4a05      	ldr	r2, [pc, #20]	@ (800331c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003308:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800330c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3714      	adds	r7, #20
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	40007000 	.word	0x40007000
 8003320:	20000000 	.word	0x20000000
 8003324:	431bde83 	.word	0x431bde83

08003328 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800332c:	4b05      	ldr	r3, [pc, #20]	@ (8003344 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	4a04      	ldr	r2, [pc, #16]	@ (8003344 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003332:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003336:	6093      	str	r3, [r2, #8]
}
 8003338:	bf00      	nop
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	40007000 	.word	0x40007000

08003348 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b088      	sub	sp, #32
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e306      	b.n	8003968 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d075      	beq.n	8003452 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003366:	4b97      	ldr	r3, [pc, #604]	@ (80035c4 <HAL_RCC_OscConfig+0x27c>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 030c 	and.w	r3, r3, #12
 800336e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003370:	4b94      	ldr	r3, [pc, #592]	@ (80035c4 <HAL_RCC_OscConfig+0x27c>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	f003 0303 	and.w	r3, r3, #3
 8003378:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	2b0c      	cmp	r3, #12
 800337e:	d102      	bne.n	8003386 <HAL_RCC_OscConfig+0x3e>
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	2b03      	cmp	r3, #3
 8003384:	d002      	beq.n	800338c <HAL_RCC_OscConfig+0x44>
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	2b08      	cmp	r3, #8
 800338a:	d10b      	bne.n	80033a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800338c:	4b8d      	ldr	r3, [pc, #564]	@ (80035c4 <HAL_RCC_OscConfig+0x27c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d05b      	beq.n	8003450 <HAL_RCC_OscConfig+0x108>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d157      	bne.n	8003450 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e2e1      	b.n	8003968 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033ac:	d106      	bne.n	80033bc <HAL_RCC_OscConfig+0x74>
 80033ae:	4b85      	ldr	r3, [pc, #532]	@ (80035c4 <HAL_RCC_OscConfig+0x27c>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a84      	ldr	r2, [pc, #528]	@ (80035c4 <HAL_RCC_OscConfig+0x27c>)
 80033b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	e01d      	b.n	80033f8 <HAL_RCC_OscConfig+0xb0>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033c4:	d10c      	bne.n	80033e0 <HAL_RCC_OscConfig+0x98>
 80033c6:	4b7f      	ldr	r3, [pc, #508]	@ (80035c4 <HAL_RCC_OscConfig+0x27c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a7e      	ldr	r2, [pc, #504]	@ (80035c4 <HAL_RCC_OscConfig+0x27c>)
 80033cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	4b7c      	ldr	r3, [pc, #496]	@ (80035c4 <HAL_RCC_OscConfig+0x27c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a7b      	ldr	r2, [pc, #492]	@ (80035c4 <HAL_RCC_OscConfig+0x27c>)
 80033d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	e00b      	b.n	80033f8 <HAL_RCC_OscConfig+0xb0>
 80033e0:	4b78      	ldr	r3, [pc, #480]	@ (80035c4 <HAL_RCC_OscConfig+0x27c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a77      	ldr	r2, [pc, #476]	@ (80035c4 <HAL_RCC_OscConfig+0x27c>)
 80033e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033ea:	6013      	str	r3, [r2, #0]
 80033ec:	4b75      	ldr	r3, [pc, #468]	@ (80035c4 <HAL_RCC_OscConfig+0x27c>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a74      	ldr	r2, [pc, #464]	@ (80035c4 <HAL_RCC_OscConfig+0x27c>)
 80033f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d013      	beq.n	8003428 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003400:	f7fe fa7a 	bl	80018f8 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003408:	f7fe fa76 	bl	80018f8 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b64      	cmp	r3, #100	@ 0x64
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e2a6      	b.n	8003968 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800341a:	4b6a      	ldr	r3, [pc, #424]	@ (80035c4 <HAL_RCC_OscConfig+0x27c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d0f0      	beq.n	8003408 <HAL_RCC_OscConfig+0xc0>
 8003426:	e014      	b.n	8003452 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003428:	f7fe fa66 	bl	80018f8 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003430:	f7fe fa62 	bl	80018f8 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b64      	cmp	r3, #100	@ 0x64
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e292      	b.n	8003968 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003442:	4b60      	ldr	r3, [pc, #384]	@ (80035c4 <HAL_RCC_OscConfig+0x27c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1f0      	bne.n	8003430 <HAL_RCC_OscConfig+0xe8>
 800344e:	e000      	b.n	8003452 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d075      	beq.n	800354a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800345e:	4b59      	ldr	r3, [pc, #356]	@ (80035c4 <HAL_RCC_OscConfig+0x27c>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 030c 	and.w	r3, r3, #12
 8003466:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003468:	4b56      	ldr	r3, [pc, #344]	@ (80035c4 <HAL_RCC_OscConfig+0x27c>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	f003 0303 	and.w	r3, r3, #3
 8003470:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	2b0c      	cmp	r3, #12
 8003476:	d102      	bne.n	800347e <HAL_RCC_OscConfig+0x136>
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	2b02      	cmp	r3, #2
 800347c:	d002      	beq.n	8003484 <HAL_RCC_OscConfig+0x13c>
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	2b04      	cmp	r3, #4
 8003482:	d11f      	bne.n	80034c4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003484:	4b4f      	ldr	r3, [pc, #316]	@ (80035c4 <HAL_RCC_OscConfig+0x27c>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800348c:	2b00      	cmp	r3, #0
 800348e:	d005      	beq.n	800349c <HAL_RCC_OscConfig+0x154>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e265      	b.n	8003968 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800349c:	4b49      	ldr	r3, [pc, #292]	@ (80035c4 <HAL_RCC_OscConfig+0x27c>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	061b      	lsls	r3, r3, #24
 80034aa:	4946      	ldr	r1, [pc, #280]	@ (80035c4 <HAL_RCC_OscConfig+0x27c>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80034b0:	4b45      	ldr	r3, [pc, #276]	@ (80035c8 <HAL_RCC_OscConfig+0x280>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7fd fbad 	bl	8000c14 <HAL_InitTick>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d043      	beq.n	8003548 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e251      	b.n	8003968 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d023      	beq.n	8003514 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034cc:	4b3d      	ldr	r3, [pc, #244]	@ (80035c4 <HAL_RCC_OscConfig+0x27c>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a3c      	ldr	r2, [pc, #240]	@ (80035c4 <HAL_RCC_OscConfig+0x27c>)
 80034d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d8:	f7fe fa0e 	bl	80018f8 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034e0:	f7fe fa0a 	bl	80018f8 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e23a      	b.n	8003968 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034f2:	4b34      	ldr	r3, [pc, #208]	@ (80035c4 <HAL_RCC_OscConfig+0x27c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d0f0      	beq.n	80034e0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034fe:	4b31      	ldr	r3, [pc, #196]	@ (80035c4 <HAL_RCC_OscConfig+0x27c>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	061b      	lsls	r3, r3, #24
 800350c:	492d      	ldr	r1, [pc, #180]	@ (80035c4 <HAL_RCC_OscConfig+0x27c>)
 800350e:	4313      	orrs	r3, r2
 8003510:	604b      	str	r3, [r1, #4]
 8003512:	e01a      	b.n	800354a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003514:	4b2b      	ldr	r3, [pc, #172]	@ (80035c4 <HAL_RCC_OscConfig+0x27c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a2a      	ldr	r2, [pc, #168]	@ (80035c4 <HAL_RCC_OscConfig+0x27c>)
 800351a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800351e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003520:	f7fe f9ea 	bl	80018f8 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003528:	f7fe f9e6 	bl	80018f8 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e216      	b.n	8003968 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800353a:	4b22      	ldr	r3, [pc, #136]	@ (80035c4 <HAL_RCC_OscConfig+0x27c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1f0      	bne.n	8003528 <HAL_RCC_OscConfig+0x1e0>
 8003546:	e000      	b.n	800354a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003548:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0308 	and.w	r3, r3, #8
 8003552:	2b00      	cmp	r3, #0
 8003554:	d041      	beq.n	80035da <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d01c      	beq.n	8003598 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800355e:	4b19      	ldr	r3, [pc, #100]	@ (80035c4 <HAL_RCC_OscConfig+0x27c>)
 8003560:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003564:	4a17      	ldr	r2, [pc, #92]	@ (80035c4 <HAL_RCC_OscConfig+0x27c>)
 8003566:	f043 0301 	orr.w	r3, r3, #1
 800356a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800356e:	f7fe f9c3 	bl	80018f8 <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003574:	e008      	b.n	8003588 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003576:	f7fe f9bf 	bl	80018f8 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e1ef      	b.n	8003968 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003588:	4b0e      	ldr	r3, [pc, #56]	@ (80035c4 <HAL_RCC_OscConfig+0x27c>)
 800358a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0ef      	beq.n	8003576 <HAL_RCC_OscConfig+0x22e>
 8003596:	e020      	b.n	80035da <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003598:	4b0a      	ldr	r3, [pc, #40]	@ (80035c4 <HAL_RCC_OscConfig+0x27c>)
 800359a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800359e:	4a09      	ldr	r2, [pc, #36]	@ (80035c4 <HAL_RCC_OscConfig+0x27c>)
 80035a0:	f023 0301 	bic.w	r3, r3, #1
 80035a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a8:	f7fe f9a6 	bl	80018f8 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035ae:	e00d      	b.n	80035cc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035b0:	f7fe f9a2 	bl	80018f8 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d906      	bls.n	80035cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e1d2      	b.n	8003968 <HAL_RCC_OscConfig+0x620>
 80035c2:	bf00      	nop
 80035c4:	40021000 	.word	0x40021000
 80035c8:	200000c0 	.word	0x200000c0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035cc:	4b8c      	ldr	r3, [pc, #560]	@ (8003800 <HAL_RCC_OscConfig+0x4b8>)
 80035ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1ea      	bne.n	80035b0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0304 	and.w	r3, r3, #4
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f000 80a6 	beq.w	8003734 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035e8:	2300      	movs	r3, #0
 80035ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035ec:	4b84      	ldr	r3, [pc, #528]	@ (8003800 <HAL_RCC_OscConfig+0x4b8>)
 80035ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <HAL_RCC_OscConfig+0x2b4>
 80035f8:	2301      	movs	r3, #1
 80035fa:	e000      	b.n	80035fe <HAL_RCC_OscConfig+0x2b6>
 80035fc:	2300      	movs	r3, #0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00d      	beq.n	800361e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003602:	4b7f      	ldr	r3, [pc, #508]	@ (8003800 <HAL_RCC_OscConfig+0x4b8>)
 8003604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003606:	4a7e      	ldr	r2, [pc, #504]	@ (8003800 <HAL_RCC_OscConfig+0x4b8>)
 8003608:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800360c:	6593      	str	r3, [r2, #88]	@ 0x58
 800360e:	4b7c      	ldr	r3, [pc, #496]	@ (8003800 <HAL_RCC_OscConfig+0x4b8>)
 8003610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003616:	60fb      	str	r3, [r7, #12]
 8003618:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800361a:	2301      	movs	r3, #1
 800361c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800361e:	4b79      	ldr	r3, [pc, #484]	@ (8003804 <HAL_RCC_OscConfig+0x4bc>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003626:	2b00      	cmp	r3, #0
 8003628:	d118      	bne.n	800365c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800362a:	4b76      	ldr	r3, [pc, #472]	@ (8003804 <HAL_RCC_OscConfig+0x4bc>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a75      	ldr	r2, [pc, #468]	@ (8003804 <HAL_RCC_OscConfig+0x4bc>)
 8003630:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003634:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003636:	f7fe f95f 	bl	80018f8 <HAL_GetTick>
 800363a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800363c:	e008      	b.n	8003650 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800363e:	f7fe f95b 	bl	80018f8 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d901      	bls.n	8003650 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e18b      	b.n	8003968 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003650:	4b6c      	ldr	r3, [pc, #432]	@ (8003804 <HAL_RCC_OscConfig+0x4bc>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003658:	2b00      	cmp	r3, #0
 800365a:	d0f0      	beq.n	800363e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d108      	bne.n	8003676 <HAL_RCC_OscConfig+0x32e>
 8003664:	4b66      	ldr	r3, [pc, #408]	@ (8003800 <HAL_RCC_OscConfig+0x4b8>)
 8003666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800366a:	4a65      	ldr	r2, [pc, #404]	@ (8003800 <HAL_RCC_OscConfig+0x4b8>)
 800366c:	f043 0301 	orr.w	r3, r3, #1
 8003670:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003674:	e024      	b.n	80036c0 <HAL_RCC_OscConfig+0x378>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	2b05      	cmp	r3, #5
 800367c:	d110      	bne.n	80036a0 <HAL_RCC_OscConfig+0x358>
 800367e:	4b60      	ldr	r3, [pc, #384]	@ (8003800 <HAL_RCC_OscConfig+0x4b8>)
 8003680:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003684:	4a5e      	ldr	r2, [pc, #376]	@ (8003800 <HAL_RCC_OscConfig+0x4b8>)
 8003686:	f043 0304 	orr.w	r3, r3, #4
 800368a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800368e:	4b5c      	ldr	r3, [pc, #368]	@ (8003800 <HAL_RCC_OscConfig+0x4b8>)
 8003690:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003694:	4a5a      	ldr	r2, [pc, #360]	@ (8003800 <HAL_RCC_OscConfig+0x4b8>)
 8003696:	f043 0301 	orr.w	r3, r3, #1
 800369a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800369e:	e00f      	b.n	80036c0 <HAL_RCC_OscConfig+0x378>
 80036a0:	4b57      	ldr	r3, [pc, #348]	@ (8003800 <HAL_RCC_OscConfig+0x4b8>)
 80036a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036a6:	4a56      	ldr	r2, [pc, #344]	@ (8003800 <HAL_RCC_OscConfig+0x4b8>)
 80036a8:	f023 0301 	bic.w	r3, r3, #1
 80036ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036b0:	4b53      	ldr	r3, [pc, #332]	@ (8003800 <HAL_RCC_OscConfig+0x4b8>)
 80036b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036b6:	4a52      	ldr	r2, [pc, #328]	@ (8003800 <HAL_RCC_OscConfig+0x4b8>)
 80036b8:	f023 0304 	bic.w	r3, r3, #4
 80036bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d016      	beq.n	80036f6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c8:	f7fe f916 	bl	80018f8 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036ce:	e00a      	b.n	80036e6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d0:	f7fe f912 	bl	80018f8 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036de:	4293      	cmp	r3, r2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e140      	b.n	8003968 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036e6:	4b46      	ldr	r3, [pc, #280]	@ (8003800 <HAL_RCC_OscConfig+0x4b8>)
 80036e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0ed      	beq.n	80036d0 <HAL_RCC_OscConfig+0x388>
 80036f4:	e015      	b.n	8003722 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f6:	f7fe f8ff 	bl	80018f8 <HAL_GetTick>
 80036fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036fc:	e00a      	b.n	8003714 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036fe:	f7fe f8fb 	bl	80018f8 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	f241 3288 	movw	r2, #5000	@ 0x1388
 800370c:	4293      	cmp	r3, r2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e129      	b.n	8003968 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003714:	4b3a      	ldr	r3, [pc, #232]	@ (8003800 <HAL_RCC_OscConfig+0x4b8>)
 8003716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1ed      	bne.n	80036fe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003722:	7ffb      	ldrb	r3, [r7, #31]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d105      	bne.n	8003734 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003728:	4b35      	ldr	r3, [pc, #212]	@ (8003800 <HAL_RCC_OscConfig+0x4b8>)
 800372a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800372c:	4a34      	ldr	r2, [pc, #208]	@ (8003800 <HAL_RCC_OscConfig+0x4b8>)
 800372e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003732:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0320 	and.w	r3, r3, #32
 800373c:	2b00      	cmp	r3, #0
 800373e:	d03c      	beq.n	80037ba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d01c      	beq.n	8003782 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003748:	4b2d      	ldr	r3, [pc, #180]	@ (8003800 <HAL_RCC_OscConfig+0x4b8>)
 800374a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800374e:	4a2c      	ldr	r2, [pc, #176]	@ (8003800 <HAL_RCC_OscConfig+0x4b8>)
 8003750:	f043 0301 	orr.w	r3, r3, #1
 8003754:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003758:	f7fe f8ce 	bl	80018f8 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003760:	f7fe f8ca 	bl	80018f8 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e0fa      	b.n	8003968 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003772:	4b23      	ldr	r3, [pc, #140]	@ (8003800 <HAL_RCC_OscConfig+0x4b8>)
 8003774:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0ef      	beq.n	8003760 <HAL_RCC_OscConfig+0x418>
 8003780:	e01b      	b.n	80037ba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003782:	4b1f      	ldr	r3, [pc, #124]	@ (8003800 <HAL_RCC_OscConfig+0x4b8>)
 8003784:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003788:	4a1d      	ldr	r2, [pc, #116]	@ (8003800 <HAL_RCC_OscConfig+0x4b8>)
 800378a:	f023 0301 	bic.w	r3, r3, #1
 800378e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003792:	f7fe f8b1 	bl	80018f8 <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003798:	e008      	b.n	80037ac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800379a:	f7fe f8ad 	bl	80018f8 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d901      	bls.n	80037ac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e0dd      	b.n	8003968 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037ac:	4b14      	ldr	r3, [pc, #80]	@ (8003800 <HAL_RCC_OscConfig+0x4b8>)
 80037ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1ef      	bne.n	800379a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f000 80d1 	beq.w	8003966 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037c4:	4b0e      	ldr	r3, [pc, #56]	@ (8003800 <HAL_RCC_OscConfig+0x4b8>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f003 030c 	and.w	r3, r3, #12
 80037cc:	2b0c      	cmp	r3, #12
 80037ce:	f000 808b 	beq.w	80038e8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d15e      	bne.n	8003898 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037da:	4b09      	ldr	r3, [pc, #36]	@ (8003800 <HAL_RCC_OscConfig+0x4b8>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a08      	ldr	r2, [pc, #32]	@ (8003800 <HAL_RCC_OscConfig+0x4b8>)
 80037e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e6:	f7fe f887 	bl	80018f8 <HAL_GetTick>
 80037ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037ec:	e00c      	b.n	8003808 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ee:	f7fe f883 	bl	80018f8 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d905      	bls.n	8003808 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e0b3      	b.n	8003968 <HAL_RCC_OscConfig+0x620>
 8003800:	40021000 	.word	0x40021000
 8003804:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003808:	4b59      	ldr	r3, [pc, #356]	@ (8003970 <HAL_RCC_OscConfig+0x628>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1ec      	bne.n	80037ee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003814:	4b56      	ldr	r3, [pc, #344]	@ (8003970 <HAL_RCC_OscConfig+0x628>)
 8003816:	68da      	ldr	r2, [r3, #12]
 8003818:	4b56      	ldr	r3, [pc, #344]	@ (8003974 <HAL_RCC_OscConfig+0x62c>)
 800381a:	4013      	ands	r3, r2
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6a11      	ldr	r1, [r2, #32]
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003824:	3a01      	subs	r2, #1
 8003826:	0112      	lsls	r2, r2, #4
 8003828:	4311      	orrs	r1, r2
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800382e:	0212      	lsls	r2, r2, #8
 8003830:	4311      	orrs	r1, r2
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003836:	0852      	lsrs	r2, r2, #1
 8003838:	3a01      	subs	r2, #1
 800383a:	0552      	lsls	r2, r2, #21
 800383c:	4311      	orrs	r1, r2
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003842:	0852      	lsrs	r2, r2, #1
 8003844:	3a01      	subs	r2, #1
 8003846:	0652      	lsls	r2, r2, #25
 8003848:	4311      	orrs	r1, r2
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800384e:	06d2      	lsls	r2, r2, #27
 8003850:	430a      	orrs	r2, r1
 8003852:	4947      	ldr	r1, [pc, #284]	@ (8003970 <HAL_RCC_OscConfig+0x628>)
 8003854:	4313      	orrs	r3, r2
 8003856:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003858:	4b45      	ldr	r3, [pc, #276]	@ (8003970 <HAL_RCC_OscConfig+0x628>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a44      	ldr	r2, [pc, #272]	@ (8003970 <HAL_RCC_OscConfig+0x628>)
 800385e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003862:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003864:	4b42      	ldr	r3, [pc, #264]	@ (8003970 <HAL_RCC_OscConfig+0x628>)
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	4a41      	ldr	r2, [pc, #260]	@ (8003970 <HAL_RCC_OscConfig+0x628>)
 800386a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800386e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003870:	f7fe f842 	bl	80018f8 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003878:	f7fe f83e 	bl	80018f8 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e06e      	b.n	8003968 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800388a:	4b39      	ldr	r3, [pc, #228]	@ (8003970 <HAL_RCC_OscConfig+0x628>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0f0      	beq.n	8003878 <HAL_RCC_OscConfig+0x530>
 8003896:	e066      	b.n	8003966 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003898:	4b35      	ldr	r3, [pc, #212]	@ (8003970 <HAL_RCC_OscConfig+0x628>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a34      	ldr	r2, [pc, #208]	@ (8003970 <HAL_RCC_OscConfig+0x628>)
 800389e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038a2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80038a4:	4b32      	ldr	r3, [pc, #200]	@ (8003970 <HAL_RCC_OscConfig+0x628>)
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	4a31      	ldr	r2, [pc, #196]	@ (8003970 <HAL_RCC_OscConfig+0x628>)
 80038aa:	f023 0303 	bic.w	r3, r3, #3
 80038ae:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80038b0:	4b2f      	ldr	r3, [pc, #188]	@ (8003970 <HAL_RCC_OscConfig+0x628>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	4a2e      	ldr	r2, [pc, #184]	@ (8003970 <HAL_RCC_OscConfig+0x628>)
 80038b6:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 80038ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c0:	f7fe f81a 	bl	80018f8 <HAL_GetTick>
 80038c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038c6:	e008      	b.n	80038da <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c8:	f7fe f816 	bl	80018f8 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e046      	b.n	8003968 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038da:	4b25      	ldr	r3, [pc, #148]	@ (8003970 <HAL_RCC_OscConfig+0x628>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1f0      	bne.n	80038c8 <HAL_RCC_OscConfig+0x580>
 80038e6:	e03e      	b.n	8003966 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	69db      	ldr	r3, [r3, #28]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d101      	bne.n	80038f4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e039      	b.n	8003968 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80038f4:	4b1e      	ldr	r3, [pc, #120]	@ (8003970 <HAL_RCC_OscConfig+0x628>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f003 0203 	and.w	r2, r3, #3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	429a      	cmp	r2, r3
 8003906:	d12c      	bne.n	8003962 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003912:	3b01      	subs	r3, #1
 8003914:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003916:	429a      	cmp	r2, r3
 8003918:	d123      	bne.n	8003962 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003924:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003926:	429a      	cmp	r2, r3
 8003928:	d11b      	bne.n	8003962 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003934:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003936:	429a      	cmp	r2, r3
 8003938:	d113      	bne.n	8003962 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003944:	085b      	lsrs	r3, r3, #1
 8003946:	3b01      	subs	r3, #1
 8003948:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800394a:	429a      	cmp	r2, r3
 800394c:	d109      	bne.n	8003962 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003958:	085b      	lsrs	r3, r3, #1
 800395a:	3b01      	subs	r3, #1
 800395c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800395e:	429a      	cmp	r2, r3
 8003960:	d001      	beq.n	8003966 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e000      	b.n	8003968 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3720      	adds	r7, #32
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	40021000 	.word	0x40021000
 8003974:	019f800c 	.word	0x019f800c

08003978 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003982:	2300      	movs	r3, #0
 8003984:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d101      	bne.n	8003990 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e11e      	b.n	8003bce <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003990:	4b91      	ldr	r3, [pc, #580]	@ (8003bd8 <HAL_RCC_ClockConfig+0x260>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 030f 	and.w	r3, r3, #15
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	429a      	cmp	r2, r3
 800399c:	d910      	bls.n	80039c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800399e:	4b8e      	ldr	r3, [pc, #568]	@ (8003bd8 <HAL_RCC_ClockConfig+0x260>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f023 020f 	bic.w	r2, r3, #15
 80039a6:	498c      	ldr	r1, [pc, #560]	@ (8003bd8 <HAL_RCC_ClockConfig+0x260>)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ae:	4b8a      	ldr	r3, [pc, #552]	@ (8003bd8 <HAL_RCC_ClockConfig+0x260>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	683a      	ldr	r2, [r7, #0]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d001      	beq.n	80039c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e106      	b.n	8003bce <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d073      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	2b03      	cmp	r3, #3
 80039d2:	d129      	bne.n	8003a28 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039d4:	4b81      	ldr	r3, [pc, #516]	@ (8003bdc <HAL_RCC_ClockConfig+0x264>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d101      	bne.n	80039e4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e0f4      	b.n	8003bce <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80039e4:	f000 f9d0 	bl	8003d88 <RCC_GetSysClockFreqFromPLLSource>
 80039e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	4a7c      	ldr	r2, [pc, #496]	@ (8003be0 <HAL_RCC_ClockConfig+0x268>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d93f      	bls.n	8003a72 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80039f2:	4b7a      	ldr	r3, [pc, #488]	@ (8003bdc <HAL_RCC_ClockConfig+0x264>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d009      	beq.n	8003a12 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d033      	beq.n	8003a72 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d12f      	bne.n	8003a72 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a12:	4b72      	ldr	r3, [pc, #456]	@ (8003bdc <HAL_RCC_ClockConfig+0x264>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a1a:	4a70      	ldr	r2, [pc, #448]	@ (8003bdc <HAL_RCC_ClockConfig+0x264>)
 8003a1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a20:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a22:	2380      	movs	r3, #128	@ 0x80
 8003a24:	617b      	str	r3, [r7, #20]
 8003a26:	e024      	b.n	8003a72 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d107      	bne.n	8003a40 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a30:	4b6a      	ldr	r3, [pc, #424]	@ (8003bdc <HAL_RCC_ClockConfig+0x264>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d109      	bne.n	8003a50 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e0c6      	b.n	8003bce <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a40:	4b66      	ldr	r3, [pc, #408]	@ (8003bdc <HAL_RCC_ClockConfig+0x264>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e0be      	b.n	8003bce <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003a50:	f000 f8ce 	bl	8003bf0 <HAL_RCC_GetSysClockFreq>
 8003a54:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	4a61      	ldr	r2, [pc, #388]	@ (8003be0 <HAL_RCC_ClockConfig+0x268>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d909      	bls.n	8003a72 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a5e:	4b5f      	ldr	r3, [pc, #380]	@ (8003bdc <HAL_RCC_ClockConfig+0x264>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a66:	4a5d      	ldr	r2, [pc, #372]	@ (8003bdc <HAL_RCC_ClockConfig+0x264>)
 8003a68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a6c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003a6e:	2380      	movs	r3, #128	@ 0x80
 8003a70:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a72:	4b5a      	ldr	r3, [pc, #360]	@ (8003bdc <HAL_RCC_ClockConfig+0x264>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f023 0203 	bic.w	r2, r3, #3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	4957      	ldr	r1, [pc, #348]	@ (8003bdc <HAL_RCC_ClockConfig+0x264>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a84:	f7fd ff38 	bl	80018f8 <HAL_GetTick>
 8003a88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a8a:	e00a      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a8c:	f7fd ff34 	bl	80018f8 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e095      	b.n	8003bce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aa2:	4b4e      	ldr	r3, [pc, #312]	@ (8003bdc <HAL_RCC_ClockConfig+0x264>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f003 020c 	and.w	r2, r3, #12
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d1eb      	bne.n	8003a8c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d023      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d005      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003acc:	4b43      	ldr	r3, [pc, #268]	@ (8003bdc <HAL_RCC_ClockConfig+0x264>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	4a42      	ldr	r2, [pc, #264]	@ (8003bdc <HAL_RCC_ClockConfig+0x264>)
 8003ad2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003ad6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0308 	and.w	r3, r3, #8
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d007      	beq.n	8003af4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003ae4:	4b3d      	ldr	r3, [pc, #244]	@ (8003bdc <HAL_RCC_ClockConfig+0x264>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003aec:	4a3b      	ldr	r2, [pc, #236]	@ (8003bdc <HAL_RCC_ClockConfig+0x264>)
 8003aee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003af2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003af4:	4b39      	ldr	r3, [pc, #228]	@ (8003bdc <HAL_RCC_ClockConfig+0x264>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	4936      	ldr	r1, [pc, #216]	@ (8003bdc <HAL_RCC_ClockConfig+0x264>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	608b      	str	r3, [r1, #8]
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	2b80      	cmp	r3, #128	@ 0x80
 8003b0c:	d105      	bne.n	8003b1a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003b0e:	4b33      	ldr	r3, [pc, #204]	@ (8003bdc <HAL_RCC_ClockConfig+0x264>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	4a32      	ldr	r2, [pc, #200]	@ (8003bdc <HAL_RCC_ClockConfig+0x264>)
 8003b14:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b18:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b1a:	4b2f      	ldr	r3, [pc, #188]	@ (8003bd8 <HAL_RCC_ClockConfig+0x260>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 030f 	and.w	r3, r3, #15
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d21d      	bcs.n	8003b64 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b28:	4b2b      	ldr	r3, [pc, #172]	@ (8003bd8 <HAL_RCC_ClockConfig+0x260>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f023 020f 	bic.w	r2, r3, #15
 8003b30:	4929      	ldr	r1, [pc, #164]	@ (8003bd8 <HAL_RCC_ClockConfig+0x260>)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b38:	f7fd fede 	bl	80018f8 <HAL_GetTick>
 8003b3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b3e:	e00a      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b40:	f7fd feda 	bl	80018f8 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e03b      	b.n	8003bce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b56:	4b20      	ldr	r3, [pc, #128]	@ (8003bd8 <HAL_RCC_ClockConfig+0x260>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 030f 	and.w	r3, r3, #15
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d1ed      	bne.n	8003b40 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d008      	beq.n	8003b82 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b70:	4b1a      	ldr	r3, [pc, #104]	@ (8003bdc <HAL_RCC_ClockConfig+0x264>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	4917      	ldr	r1, [pc, #92]	@ (8003bdc <HAL_RCC_ClockConfig+0x264>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d009      	beq.n	8003ba2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b8e:	4b13      	ldr	r3, [pc, #76]	@ (8003bdc <HAL_RCC_ClockConfig+0x264>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	490f      	ldr	r1, [pc, #60]	@ (8003bdc <HAL_RCC_ClockConfig+0x264>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ba2:	f000 f825 	bl	8003bf0 <HAL_RCC_GetSysClockFreq>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8003bdc <HAL_RCC_ClockConfig+0x264>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	091b      	lsrs	r3, r3, #4
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	490c      	ldr	r1, [pc, #48]	@ (8003be4 <HAL_RCC_ClockConfig+0x26c>)
 8003bb4:	5ccb      	ldrb	r3, [r1, r3]
 8003bb6:	f003 031f 	and.w	r3, r3, #31
 8003bba:	fa22 f303 	lsr.w	r3, r2, r3
 8003bbe:	4a0a      	ldr	r2, [pc, #40]	@ (8003be8 <HAL_RCC_ClockConfig+0x270>)
 8003bc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8003bec <HAL_RCC_ClockConfig+0x274>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fd f824 	bl	8000c14 <HAL_InitTick>
 8003bcc:	4603      	mov	r3, r0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3718      	adds	r7, #24
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40022000 	.word	0x40022000
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	04c4b400 	.word	0x04c4b400
 8003be4:	0800921c 	.word	0x0800921c
 8003be8:	20000000 	.word	0x20000000
 8003bec:	200000c0 	.word	0x200000c0

08003bf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b087      	sub	sp, #28
 8003bf4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003bf6:	4b2c      	ldr	r3, [pc, #176]	@ (8003ca8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f003 030c 	and.w	r3, r3, #12
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	d102      	bne.n	8003c08 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c02:	4b2a      	ldr	r3, [pc, #168]	@ (8003cac <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c04:	613b      	str	r3, [r7, #16]
 8003c06:	e047      	b.n	8003c98 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003c08:	4b27      	ldr	r3, [pc, #156]	@ (8003ca8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f003 030c 	and.w	r3, r3, #12
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d102      	bne.n	8003c1a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c14:	4b26      	ldr	r3, [pc, #152]	@ (8003cb0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c16:	613b      	str	r3, [r7, #16]
 8003c18:	e03e      	b.n	8003c98 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003c1a:	4b23      	ldr	r3, [pc, #140]	@ (8003ca8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 030c 	and.w	r3, r3, #12
 8003c22:	2b0c      	cmp	r3, #12
 8003c24:	d136      	bne.n	8003c94 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c26:	4b20      	ldr	r3, [pc, #128]	@ (8003ca8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	f003 0303 	and.w	r3, r3, #3
 8003c2e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c30:	4b1d      	ldr	r3, [pc, #116]	@ (8003ca8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	091b      	lsrs	r3, r3, #4
 8003c36:	f003 030f 	and.w	r3, r3, #15
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2b03      	cmp	r3, #3
 8003c42:	d10c      	bne.n	8003c5e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c44:	4a1a      	ldr	r2, [pc, #104]	@ (8003cb0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c4c:	4a16      	ldr	r2, [pc, #88]	@ (8003ca8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c4e:	68d2      	ldr	r2, [r2, #12]
 8003c50:	0a12      	lsrs	r2, r2, #8
 8003c52:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c56:	fb02 f303 	mul.w	r3, r2, r3
 8003c5a:	617b      	str	r3, [r7, #20]
      break;
 8003c5c:	e00c      	b.n	8003c78 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c5e:	4a13      	ldr	r2, [pc, #76]	@ (8003cac <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c66:	4a10      	ldr	r2, [pc, #64]	@ (8003ca8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c68:	68d2      	ldr	r2, [r2, #12]
 8003c6a:	0a12      	lsrs	r2, r2, #8
 8003c6c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c70:	fb02 f303 	mul.w	r3, r2, r3
 8003c74:	617b      	str	r3, [r7, #20]
      break;
 8003c76:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c78:	4b0b      	ldr	r3, [pc, #44]	@ (8003ca8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	0e5b      	lsrs	r3, r3, #25
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	3301      	adds	r3, #1
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c90:	613b      	str	r3, [r7, #16]
 8003c92:	e001      	b.n	8003c98 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003c98:	693b      	ldr	r3, [r7, #16]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	371c      	adds	r7, #28
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	40021000 	.word	0x40021000
 8003cac:	00f42400 	.word	0x00f42400
 8003cb0:	016e3600 	.word	0x016e3600

08003cb4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cb8:	4b03      	ldr	r3, [pc, #12]	@ (8003cc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cba:	681b      	ldr	r3, [r3, #0]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	20000000 	.word	0x20000000

08003ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003cd0:	f7ff fff0 	bl	8003cb4 <HAL_RCC_GetHCLKFreq>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	4b06      	ldr	r3, [pc, #24]	@ (8003cf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	0a1b      	lsrs	r3, r3, #8
 8003cdc:	f003 0307 	and.w	r3, r3, #7
 8003ce0:	4904      	ldr	r1, [pc, #16]	@ (8003cf4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ce2:	5ccb      	ldrb	r3, [r1, r3]
 8003ce4:	f003 031f 	and.w	r3, r3, #31
 8003ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	0800922c 	.word	0x0800922c

08003cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003cfc:	f7ff ffda 	bl	8003cb4 <HAL_RCC_GetHCLKFreq>
 8003d00:	4602      	mov	r2, r0
 8003d02:	4b06      	ldr	r3, [pc, #24]	@ (8003d1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	0adb      	lsrs	r3, r3, #11
 8003d08:	f003 0307 	and.w	r3, r3, #7
 8003d0c:	4904      	ldr	r1, [pc, #16]	@ (8003d20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d0e:	5ccb      	ldrb	r3, [r1, r3]
 8003d10:	f003 031f 	and.w	r3, r3, #31
 8003d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	0800922c 	.word	0x0800922c

08003d24 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	220f      	movs	r2, #15
 8003d32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003d34:	4b12      	ldr	r3, [pc, #72]	@ (8003d80 <HAL_RCC_GetClockConfig+0x5c>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f003 0203 	and.w	r2, r3, #3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003d40:	4b0f      	ldr	r3, [pc, #60]	@ (8003d80 <HAL_RCC_GetClockConfig+0x5c>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8003d80 <HAL_RCC_GetClockConfig+0x5c>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003d58:	4b09      	ldr	r3, [pc, #36]	@ (8003d80 <HAL_RCC_GetClockConfig+0x5c>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	08db      	lsrs	r3, r3, #3
 8003d5e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003d66:	4b07      	ldr	r3, [pc, #28]	@ (8003d84 <HAL_RCC_GetClockConfig+0x60>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 020f 	and.w	r2, r3, #15
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	601a      	str	r2, [r3, #0]
}
 8003d72:	bf00      	nop
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	40021000 	.word	0x40021000
 8003d84:	40022000 	.word	0x40022000

08003d88 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b087      	sub	sp, #28
 8003d8c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d8e:	4b1e      	ldr	r3, [pc, #120]	@ (8003e08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f003 0303 	and.w	r3, r3, #3
 8003d96:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d98:	4b1b      	ldr	r3, [pc, #108]	@ (8003e08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	091b      	lsrs	r3, r3, #4
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	3301      	adds	r3, #1
 8003da4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	2b03      	cmp	r3, #3
 8003daa:	d10c      	bne.n	8003dc6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003dac:	4a17      	ldr	r2, [pc, #92]	@ (8003e0c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db4:	4a14      	ldr	r2, [pc, #80]	@ (8003e08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003db6:	68d2      	ldr	r2, [r2, #12]
 8003db8:	0a12      	lsrs	r2, r2, #8
 8003dba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003dbe:	fb02 f303 	mul.w	r3, r2, r3
 8003dc2:	617b      	str	r3, [r7, #20]
    break;
 8003dc4:	e00c      	b.n	8003de0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003dc6:	4a12      	ldr	r2, [pc, #72]	@ (8003e10 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dce:	4a0e      	ldr	r2, [pc, #56]	@ (8003e08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003dd0:	68d2      	ldr	r2, [r2, #12]
 8003dd2:	0a12      	lsrs	r2, r2, #8
 8003dd4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003dd8:	fb02 f303 	mul.w	r3, r2, r3
 8003ddc:	617b      	str	r3, [r7, #20]
    break;
 8003dde:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003de0:	4b09      	ldr	r3, [pc, #36]	@ (8003e08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	0e5b      	lsrs	r3, r3, #25
 8003de6:	f003 0303 	and.w	r3, r3, #3
 8003dea:	3301      	adds	r3, #1
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003dfa:	687b      	ldr	r3, [r7, #4]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	371c      	adds	r7, #28
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	016e3600 	.word	0x016e3600
 8003e10:	00f42400 	.word	0x00f42400

08003e14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e20:	2300      	movs	r3, #0
 8003e22:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 8098 	beq.w	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e32:	2300      	movs	r3, #0
 8003e34:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e36:	4b43      	ldr	r3, [pc, #268]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10d      	bne.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e42:	4b40      	ldr	r3, [pc, #256]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e46:	4a3f      	ldr	r2, [pc, #252]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e4e:	4b3d      	ldr	r3, [pc, #244]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e56:	60bb      	str	r3, [r7, #8]
 8003e58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e5e:	4b3a      	ldr	r3, [pc, #232]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a39      	ldr	r2, [pc, #228]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e68:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e6a:	f7fd fd45 	bl	80018f8 <HAL_GetTick>
 8003e6e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e70:	e009      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e72:	f7fd fd41 	bl	80018f8 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d902      	bls.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	74fb      	strb	r3, [r7, #19]
        break;
 8003e84:	e005      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e86:	4b30      	ldr	r3, [pc, #192]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0ef      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003e92:	7cfb      	ldrb	r3, [r7, #19]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d159      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e98:	4b2a      	ldr	r3, [pc, #168]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ea2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d01e      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d019      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003eb4:	4b23      	ldr	r3, [pc, #140]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ebe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ec0:	4b20      	ldr	r3, [pc, #128]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ec6:	4a1f      	ldr	r2, [pc, #124]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ec8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ecc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ed0:	4b1c      	ldr	r3, [pc, #112]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ed6:	4a1b      	ldr	r2, [pc, #108]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ed8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003edc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ee0:	4a18      	ldr	r2, [pc, #96]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d016      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef2:	f7fd fd01 	bl	80018f8 <HAL_GetTick>
 8003ef6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ef8:	e00b      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003efa:	f7fd fcfd 	bl	80018f8 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d902      	bls.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	74fb      	strb	r3, [r7, #19]
            break;
 8003f10:	e006      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f12:	4b0c      	ldr	r3, [pc, #48]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d0ec      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003f20:	7cfb      	ldrb	r3, [r7, #19]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10b      	bne.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f26:	4b07      	ldr	r3, [pc, #28]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f34:	4903      	ldr	r1, [pc, #12]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003f3c:	e008      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f3e:	7cfb      	ldrb	r3, [r7, #19]
 8003f40:	74bb      	strb	r3, [r7, #18]
 8003f42:	e005      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003f44:	40021000 	.word	0x40021000
 8003f48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f4c:	7cfb      	ldrb	r3, [r7, #19]
 8003f4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f50:	7c7b      	ldrb	r3, [r7, #17]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d105      	bne.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f56:	4ba7      	ldr	r3, [pc, #668]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f5a:	4aa6      	ldr	r2, [pc, #664]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f60:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00a      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f6e:	4ba1      	ldr	r3, [pc, #644]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f74:	f023 0203 	bic.w	r2, r3, #3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	499d      	ldr	r1, [pc, #628]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00a      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f90:	4b98      	ldr	r3, [pc, #608]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f96:	f023 020c 	bic.w	r2, r3, #12
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	4995      	ldr	r1, [pc, #596]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0304 	and.w	r3, r3, #4
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00a      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fb2:	4b90      	ldr	r3, [pc, #576]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	498c      	ldr	r1, [pc, #560]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0308 	and.w	r3, r3, #8
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00a      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fd4:	4b87      	ldr	r3, [pc, #540]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fda:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	4984      	ldr	r1, [pc, #528]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0310 	and.w	r3, r3, #16
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00a      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ff6:	4b7f      	ldr	r3, [pc, #508]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ffc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	497b      	ldr	r1, [pc, #492]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004006:	4313      	orrs	r3, r2
 8004008:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0320 	and.w	r3, r3, #32
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00a      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004018:	4b76      	ldr	r3, [pc, #472]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800401a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800401e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	4973      	ldr	r1, [pc, #460]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004028:	4313      	orrs	r3, r2
 800402a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00a      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800403a:	4b6e      	ldr	r3, [pc, #440]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800403c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004040:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	69db      	ldr	r3, [r3, #28]
 8004048:	496a      	ldr	r1, [pc, #424]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800404a:	4313      	orrs	r3, r2
 800404c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00a      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800405c:	4b65      	ldr	r3, [pc, #404]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800405e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004062:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	4962      	ldr	r1, [pc, #392]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800406c:	4313      	orrs	r3, r2
 800406e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00a      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800407e:	4b5d      	ldr	r3, [pc, #372]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004080:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004084:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408c:	4959      	ldr	r1, [pc, #356]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800408e:	4313      	orrs	r3, r2
 8004090:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00a      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040a0:	4b54      	ldr	r3, [pc, #336]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040a6:	f023 0203 	bic.w	r2, r3, #3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ae:	4951      	ldr	r1, [pc, #324]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00a      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040c2:	4b4c      	ldr	r3, [pc, #304]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d0:	4948      	ldr	r1, [pc, #288]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d015      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040e4:	4b43      	ldr	r3, [pc, #268]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f2:	4940      	ldr	r1, [pc, #256]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004102:	d105      	bne.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004104:	4b3b      	ldr	r3, [pc, #236]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	4a3a      	ldr	r2, [pc, #232]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800410a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800410e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004118:	2b00      	cmp	r3, #0
 800411a:	d015      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800411c:	4b35      	ldr	r3, [pc, #212]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800411e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004122:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800412a:	4932      	ldr	r1, [pc, #200]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800412c:	4313      	orrs	r3, r2
 800412e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004136:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800413a:	d105      	bne.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800413c:	4b2d      	ldr	r3, [pc, #180]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	4a2c      	ldr	r2, [pc, #176]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004142:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004146:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d015      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004154:	4b27      	ldr	r3, [pc, #156]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800415a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004162:	4924      	ldr	r1, [pc, #144]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004164:	4313      	orrs	r3, r2
 8004166:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800416e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004172:	d105      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004174:	4b1f      	ldr	r3, [pc, #124]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	4a1e      	ldr	r2, [pc, #120]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800417a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800417e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d015      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800418c:	4b19      	ldr	r3, [pc, #100]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800418e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004192:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800419a:	4916      	ldr	r1, [pc, #88]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800419c:	4313      	orrs	r3, r2
 800419e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041aa:	d105      	bne.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041ac:	4b11      	ldr	r3, [pc, #68]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	4a10      	ldr	r2, [pc, #64]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041b6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d019      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041c4:	4b0b      	ldr	r3, [pc, #44]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d2:	4908      	ldr	r1, [pc, #32]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041e2:	d109      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041e4:	4b03      	ldr	r3, [pc, #12]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	4a02      	ldr	r2, [pc, #8]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041ee:	60d3      	str	r3, [r2, #12]
 80041f0:	e002      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80041f2:	bf00      	nop
 80041f4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d015      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004204:	4b29      	ldr	r3, [pc, #164]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800420a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004212:	4926      	ldr	r1, [pc, #152]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800421e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004222:	d105      	bne.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004224:	4b21      	ldr	r3, [pc, #132]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	4a20      	ldr	r2, [pc, #128]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800422a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800422e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d015      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800423c:	4b1b      	ldr	r3, [pc, #108]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800423e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004242:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800424a:	4918      	ldr	r1, [pc, #96]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800424c:	4313      	orrs	r3, r2
 800424e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004256:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800425a:	d105      	bne.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800425c:	4b13      	ldr	r3, [pc, #76]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	4a12      	ldr	r2, [pc, #72]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004262:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004266:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d015      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004274:	4b0d      	ldr	r3, [pc, #52]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004276:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800427a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004282:	490a      	ldr	r1, [pc, #40]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004284:	4313      	orrs	r3, r2
 8004286:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800428e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004292:	d105      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004294:	4b05      	ldr	r3, [pc, #20]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	4a04      	ldr	r2, [pc, #16]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800429a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800429e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80042a0:	7cbb      	ldrb	r3, [r7, #18]
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3718      	adds	r7, #24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	40021000 	.word	0x40021000

080042b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d101      	bne.n	80042c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e049      	b.n	8004356 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d106      	bne.n	80042dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f841 	bl	800435e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2202      	movs	r2, #2
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3304      	adds	r3, #4
 80042ec:	4619      	mov	r1, r3
 80042ee:	4610      	mov	r0, r2
 80042f0:	f000 fcde 	bl	8004cb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800435e:	b480      	push	{r7}
 8004360:	b083      	sub	sp, #12
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004366:	bf00      	nop
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
	...

08004374 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004382:	b2db      	uxtb	r3, r3
 8004384:	2b01      	cmp	r3, #1
 8004386:	d001      	beq.n	800438c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e054      	b.n	8004436 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2202      	movs	r2, #2
 8004390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68da      	ldr	r2, [r3, #12]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f042 0201 	orr.w	r2, r2, #1
 80043a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a26      	ldr	r2, [pc, #152]	@ (8004444 <HAL_TIM_Base_Start_IT+0xd0>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d022      	beq.n	80043f4 <HAL_TIM_Base_Start_IT+0x80>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043b6:	d01d      	beq.n	80043f4 <HAL_TIM_Base_Start_IT+0x80>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a22      	ldr	r2, [pc, #136]	@ (8004448 <HAL_TIM_Base_Start_IT+0xd4>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d018      	beq.n	80043f4 <HAL_TIM_Base_Start_IT+0x80>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a21      	ldr	r2, [pc, #132]	@ (800444c <HAL_TIM_Base_Start_IT+0xd8>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d013      	beq.n	80043f4 <HAL_TIM_Base_Start_IT+0x80>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a1f      	ldr	r2, [pc, #124]	@ (8004450 <HAL_TIM_Base_Start_IT+0xdc>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d00e      	beq.n	80043f4 <HAL_TIM_Base_Start_IT+0x80>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a1e      	ldr	r2, [pc, #120]	@ (8004454 <HAL_TIM_Base_Start_IT+0xe0>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d009      	beq.n	80043f4 <HAL_TIM_Base_Start_IT+0x80>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a1c      	ldr	r2, [pc, #112]	@ (8004458 <HAL_TIM_Base_Start_IT+0xe4>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d004      	beq.n	80043f4 <HAL_TIM_Base_Start_IT+0x80>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a1b      	ldr	r2, [pc, #108]	@ (800445c <HAL_TIM_Base_Start_IT+0xe8>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d115      	bne.n	8004420 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689a      	ldr	r2, [r3, #8]
 80043fa:	4b19      	ldr	r3, [pc, #100]	@ (8004460 <HAL_TIM_Base_Start_IT+0xec>)
 80043fc:	4013      	ands	r3, r2
 80043fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2b06      	cmp	r3, #6
 8004404:	d015      	beq.n	8004432 <HAL_TIM_Base_Start_IT+0xbe>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800440c:	d011      	beq.n	8004432 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f042 0201 	orr.w	r2, r2, #1
 800441c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800441e:	e008      	b.n	8004432 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f042 0201 	orr.w	r2, r2, #1
 800442e:	601a      	str	r2, [r3, #0]
 8004430:	e000      	b.n	8004434 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004432:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	40012c00 	.word	0x40012c00
 8004448:	40000400 	.word	0x40000400
 800444c:	40000800 	.word	0x40000800
 8004450:	40000c00 	.word	0x40000c00
 8004454:	40013400 	.word	0x40013400
 8004458:	40014000 	.word	0x40014000
 800445c:	40015000 	.word	0x40015000
 8004460:	00010007 	.word	0x00010007

08004464 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e049      	b.n	800450a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d106      	bne.n	8004490 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7fc fe5a 	bl	8001144 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2202      	movs	r2, #2
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	3304      	adds	r3, #4
 80044a0:	4619      	mov	r1, r3
 80044a2:	4610      	mov	r0, r2
 80044a4:	f000 fc04 	bl	8004cb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3708      	adds	r7, #8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
	...

08004514 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d109      	bne.n	8004538 <HAL_TIM_PWM_Start+0x24>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b01      	cmp	r3, #1
 800452e:	bf14      	ite	ne
 8004530:	2301      	movne	r3, #1
 8004532:	2300      	moveq	r3, #0
 8004534:	b2db      	uxtb	r3, r3
 8004536:	e03c      	b.n	80045b2 <HAL_TIM_PWM_Start+0x9e>
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	2b04      	cmp	r3, #4
 800453c:	d109      	bne.n	8004552 <HAL_TIM_PWM_Start+0x3e>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b01      	cmp	r3, #1
 8004548:	bf14      	ite	ne
 800454a:	2301      	movne	r3, #1
 800454c:	2300      	moveq	r3, #0
 800454e:	b2db      	uxtb	r3, r3
 8004550:	e02f      	b.n	80045b2 <HAL_TIM_PWM_Start+0x9e>
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	2b08      	cmp	r3, #8
 8004556:	d109      	bne.n	800456c <HAL_TIM_PWM_Start+0x58>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2b01      	cmp	r3, #1
 8004562:	bf14      	ite	ne
 8004564:	2301      	movne	r3, #1
 8004566:	2300      	moveq	r3, #0
 8004568:	b2db      	uxtb	r3, r3
 800456a:	e022      	b.n	80045b2 <HAL_TIM_PWM_Start+0x9e>
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	2b0c      	cmp	r3, #12
 8004570:	d109      	bne.n	8004586 <HAL_TIM_PWM_Start+0x72>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b01      	cmp	r3, #1
 800457c:	bf14      	ite	ne
 800457e:	2301      	movne	r3, #1
 8004580:	2300      	moveq	r3, #0
 8004582:	b2db      	uxtb	r3, r3
 8004584:	e015      	b.n	80045b2 <HAL_TIM_PWM_Start+0x9e>
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	2b10      	cmp	r3, #16
 800458a:	d109      	bne.n	80045a0 <HAL_TIM_PWM_Start+0x8c>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004592:	b2db      	uxtb	r3, r3
 8004594:	2b01      	cmp	r3, #1
 8004596:	bf14      	ite	ne
 8004598:	2301      	movne	r3, #1
 800459a:	2300      	moveq	r3, #0
 800459c:	b2db      	uxtb	r3, r3
 800459e:	e008      	b.n	80045b2 <HAL_TIM_PWM_Start+0x9e>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	bf14      	ite	ne
 80045ac:	2301      	movne	r3, #1
 80045ae:	2300      	moveq	r3, #0
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e0a6      	b.n	8004708 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d104      	bne.n	80045ca <HAL_TIM_PWM_Start+0xb6>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2202      	movs	r2, #2
 80045c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045c8:	e023      	b.n	8004612 <HAL_TIM_PWM_Start+0xfe>
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	2b04      	cmp	r3, #4
 80045ce:	d104      	bne.n	80045da <HAL_TIM_PWM_Start+0xc6>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2202      	movs	r2, #2
 80045d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045d8:	e01b      	b.n	8004612 <HAL_TIM_PWM_Start+0xfe>
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	2b08      	cmp	r3, #8
 80045de:	d104      	bne.n	80045ea <HAL_TIM_PWM_Start+0xd6>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2202      	movs	r2, #2
 80045e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045e8:	e013      	b.n	8004612 <HAL_TIM_PWM_Start+0xfe>
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	2b0c      	cmp	r3, #12
 80045ee:	d104      	bne.n	80045fa <HAL_TIM_PWM_Start+0xe6>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80045f8:	e00b      	b.n	8004612 <HAL_TIM_PWM_Start+0xfe>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b10      	cmp	r3, #16
 80045fe:	d104      	bne.n	800460a <HAL_TIM_PWM_Start+0xf6>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2202      	movs	r2, #2
 8004604:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004608:	e003      	b.n	8004612 <HAL_TIM_PWM_Start+0xfe>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2202      	movs	r2, #2
 800460e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2201      	movs	r2, #1
 8004618:	6839      	ldr	r1, [r7, #0]
 800461a:	4618      	mov	r0, r3
 800461c:	f000 ff8e 	bl	800553c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a3a      	ldr	r2, [pc, #232]	@ (8004710 <HAL_TIM_PWM_Start+0x1fc>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d018      	beq.n	800465c <HAL_TIM_PWM_Start+0x148>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a39      	ldr	r2, [pc, #228]	@ (8004714 <HAL_TIM_PWM_Start+0x200>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d013      	beq.n	800465c <HAL_TIM_PWM_Start+0x148>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a37      	ldr	r2, [pc, #220]	@ (8004718 <HAL_TIM_PWM_Start+0x204>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d00e      	beq.n	800465c <HAL_TIM_PWM_Start+0x148>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a36      	ldr	r2, [pc, #216]	@ (800471c <HAL_TIM_PWM_Start+0x208>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d009      	beq.n	800465c <HAL_TIM_PWM_Start+0x148>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a34      	ldr	r2, [pc, #208]	@ (8004720 <HAL_TIM_PWM_Start+0x20c>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d004      	beq.n	800465c <HAL_TIM_PWM_Start+0x148>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a33      	ldr	r2, [pc, #204]	@ (8004724 <HAL_TIM_PWM_Start+0x210>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d101      	bne.n	8004660 <HAL_TIM_PWM_Start+0x14c>
 800465c:	2301      	movs	r3, #1
 800465e:	e000      	b.n	8004662 <HAL_TIM_PWM_Start+0x14e>
 8004660:	2300      	movs	r3, #0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d007      	beq.n	8004676 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004674:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a25      	ldr	r2, [pc, #148]	@ (8004710 <HAL_TIM_PWM_Start+0x1fc>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d022      	beq.n	80046c6 <HAL_TIM_PWM_Start+0x1b2>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004688:	d01d      	beq.n	80046c6 <HAL_TIM_PWM_Start+0x1b2>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a26      	ldr	r2, [pc, #152]	@ (8004728 <HAL_TIM_PWM_Start+0x214>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d018      	beq.n	80046c6 <HAL_TIM_PWM_Start+0x1b2>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a24      	ldr	r2, [pc, #144]	@ (800472c <HAL_TIM_PWM_Start+0x218>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d013      	beq.n	80046c6 <HAL_TIM_PWM_Start+0x1b2>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a23      	ldr	r2, [pc, #140]	@ (8004730 <HAL_TIM_PWM_Start+0x21c>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d00e      	beq.n	80046c6 <HAL_TIM_PWM_Start+0x1b2>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a19      	ldr	r2, [pc, #100]	@ (8004714 <HAL_TIM_PWM_Start+0x200>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d009      	beq.n	80046c6 <HAL_TIM_PWM_Start+0x1b2>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a18      	ldr	r2, [pc, #96]	@ (8004718 <HAL_TIM_PWM_Start+0x204>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d004      	beq.n	80046c6 <HAL_TIM_PWM_Start+0x1b2>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a18      	ldr	r2, [pc, #96]	@ (8004724 <HAL_TIM_PWM_Start+0x210>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d115      	bne.n	80046f2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	689a      	ldr	r2, [r3, #8]
 80046cc:	4b19      	ldr	r3, [pc, #100]	@ (8004734 <HAL_TIM_PWM_Start+0x220>)
 80046ce:	4013      	ands	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2b06      	cmp	r3, #6
 80046d6:	d015      	beq.n	8004704 <HAL_TIM_PWM_Start+0x1f0>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046de:	d011      	beq.n	8004704 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f042 0201 	orr.w	r2, r2, #1
 80046ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046f0:	e008      	b.n	8004704 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f042 0201 	orr.w	r2, r2, #1
 8004700:	601a      	str	r2, [r3, #0]
 8004702:	e000      	b.n	8004706 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004704:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	40012c00 	.word	0x40012c00
 8004714:	40013400 	.word	0x40013400
 8004718:	40014000 	.word	0x40014000
 800471c:	40014400 	.word	0x40014400
 8004720:	40014800 	.word	0x40014800
 8004724:	40015000 	.word	0x40015000
 8004728:	40000400 	.word	0x40000400
 800472c:	40000800 	.word	0x40000800
 8004730:	40000c00 	.word	0x40000c00
 8004734:	00010007 	.word	0x00010007

08004738 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b02      	cmp	r3, #2
 800474c:	d122      	bne.n	8004794 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b02      	cmp	r3, #2
 800475a:	d11b      	bne.n	8004794 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f06f 0202 	mvn.w	r2, #2
 8004764:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2201      	movs	r2, #1
 800476a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	f003 0303 	and.w	r3, r3, #3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d003      	beq.n	8004782 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 fa7a 	bl	8004c74 <HAL_TIM_IC_CaptureCallback>
 8004780:	e005      	b.n	800478e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 fa6c 	bl	8004c60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 fa7d 	bl	8004c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	f003 0304 	and.w	r3, r3, #4
 800479e:	2b04      	cmp	r3, #4
 80047a0:	d122      	bne.n	80047e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	f003 0304 	and.w	r3, r3, #4
 80047ac:	2b04      	cmp	r3, #4
 80047ae:	d11b      	bne.n	80047e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f06f 0204 	mvn.w	r2, #4
 80047b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2202      	movs	r2, #2
 80047be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d003      	beq.n	80047d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 fa50 	bl	8004c74 <HAL_TIM_IC_CaptureCallback>
 80047d4:	e005      	b.n	80047e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 fa42 	bl	8004c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 fa53 	bl	8004c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	f003 0308 	and.w	r3, r3, #8
 80047f2:	2b08      	cmp	r3, #8
 80047f4:	d122      	bne.n	800483c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	f003 0308 	and.w	r3, r3, #8
 8004800:	2b08      	cmp	r3, #8
 8004802:	d11b      	bne.n	800483c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f06f 0208 	mvn.w	r2, #8
 800480c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2204      	movs	r2, #4
 8004812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	f003 0303 	and.w	r3, r3, #3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d003      	beq.n	800482a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 fa26 	bl	8004c74 <HAL_TIM_IC_CaptureCallback>
 8004828:	e005      	b.n	8004836 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 fa18 	bl	8004c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 fa29 	bl	8004c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	f003 0310 	and.w	r3, r3, #16
 8004846:	2b10      	cmp	r3, #16
 8004848:	d122      	bne.n	8004890 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	f003 0310 	and.w	r3, r3, #16
 8004854:	2b10      	cmp	r3, #16
 8004856:	d11b      	bne.n	8004890 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f06f 0210 	mvn.w	r2, #16
 8004860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2208      	movs	r2, #8
 8004866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	69db      	ldr	r3, [r3, #28]
 800486e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f9fc 	bl	8004c74 <HAL_TIM_IC_CaptureCallback>
 800487c:	e005      	b.n	800488a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 f9ee 	bl	8004c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f9ff 	bl	8004c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b01      	cmp	r3, #1
 800489c:	d10e      	bne.n	80048bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d107      	bne.n	80048bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f06f 0201 	mvn.w	r2, #1
 80048b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7fc f970 	bl	8000b9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048c6:	2b80      	cmp	r3, #128	@ 0x80
 80048c8:	d10e      	bne.n	80048e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048d4:	2b80      	cmp	r3, #128	@ 0x80
 80048d6:	d107      	bne.n	80048e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80048e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f001 f912 	bl	8005b0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048f6:	d10e      	bne.n	8004916 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004902:	2b80      	cmp	r3, #128	@ 0x80
 8004904:	d107      	bne.n	8004916 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800490e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f001 f905 	bl	8005b20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004920:	2b40      	cmp	r3, #64	@ 0x40
 8004922:	d10e      	bne.n	8004942 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800492e:	2b40      	cmp	r3, #64	@ 0x40
 8004930:	d107      	bne.n	8004942 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800493a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 f9ad 	bl	8004c9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	f003 0320 	and.w	r3, r3, #32
 800494c:	2b20      	cmp	r3, #32
 800494e:	d10e      	bne.n	800496e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	f003 0320 	and.w	r3, r3, #32
 800495a:	2b20      	cmp	r3, #32
 800495c:	d107      	bne.n	800496e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f06f 0220 	mvn.w	r2, #32
 8004966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f001 f8c5 	bl	8005af8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004978:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800497c:	d10f      	bne.n	800499e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004988:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800498c:	d107      	bne.n	800499e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f001 f8cb 	bl	8005b34 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80049ac:	d10f      	bne.n	80049ce <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80049bc:	d107      	bne.n	80049ce <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80049c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f001 f8bd 	bl	8005b48 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049dc:	d10f      	bne.n	80049fe <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049ec:	d107      	bne.n	80049fe <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80049f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f001 f8af 	bl	8005b5c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a08:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004a0c:	d10f      	bne.n	8004a2e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a18:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004a1c:	d107      	bne.n	8004a2e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004a26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f001 f8a1 	bl	8005b70 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a2e:	bf00      	nop
 8004a30:	3708      	adds	r7, #8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
	...

08004a38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a44:	2300      	movs	r3, #0
 8004a46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d101      	bne.n	8004a56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a52:	2302      	movs	r3, #2
 8004a54:	e0ff      	b.n	8004c56 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2b14      	cmp	r3, #20
 8004a62:	f200 80f0 	bhi.w	8004c46 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004a66:	a201      	add	r2, pc, #4	@ (adr r2, 8004a6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a6c:	08004ac1 	.word	0x08004ac1
 8004a70:	08004c47 	.word	0x08004c47
 8004a74:	08004c47 	.word	0x08004c47
 8004a78:	08004c47 	.word	0x08004c47
 8004a7c:	08004b01 	.word	0x08004b01
 8004a80:	08004c47 	.word	0x08004c47
 8004a84:	08004c47 	.word	0x08004c47
 8004a88:	08004c47 	.word	0x08004c47
 8004a8c:	08004b43 	.word	0x08004b43
 8004a90:	08004c47 	.word	0x08004c47
 8004a94:	08004c47 	.word	0x08004c47
 8004a98:	08004c47 	.word	0x08004c47
 8004a9c:	08004b83 	.word	0x08004b83
 8004aa0:	08004c47 	.word	0x08004c47
 8004aa4:	08004c47 	.word	0x08004c47
 8004aa8:	08004c47 	.word	0x08004c47
 8004aac:	08004bc5 	.word	0x08004bc5
 8004ab0:	08004c47 	.word	0x08004c47
 8004ab4:	08004c47 	.word	0x08004c47
 8004ab8:	08004c47 	.word	0x08004c47
 8004abc:	08004c05 	.word	0x08004c05
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68b9      	ldr	r1, [r7, #8]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 f99a 	bl	8004e00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	699a      	ldr	r2, [r3, #24]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f042 0208 	orr.w	r2, r2, #8
 8004ada:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	699a      	ldr	r2, [r3, #24]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 0204 	bic.w	r2, r2, #4
 8004aea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6999      	ldr	r1, [r3, #24]
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	691a      	ldr	r2, [r3, #16]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	619a      	str	r2, [r3, #24]
      break;
 8004afe:	e0a5      	b.n	8004c4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68b9      	ldr	r1, [r7, #8]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 fa14 	bl	8004f34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	699a      	ldr	r2, [r3, #24]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	699a      	ldr	r2, [r3, #24]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6999      	ldr	r1, [r3, #24]
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	021a      	lsls	r2, r3, #8
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	619a      	str	r2, [r3, #24]
      break;
 8004b40:	e084      	b.n	8004c4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68b9      	ldr	r1, [r7, #8]
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f000 fa87 	bl	800505c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	69da      	ldr	r2, [r3, #28]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f042 0208 	orr.w	r2, r2, #8
 8004b5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	69da      	ldr	r2, [r3, #28]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f022 0204 	bic.w	r2, r2, #4
 8004b6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	69d9      	ldr	r1, [r3, #28]
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	691a      	ldr	r2, [r3, #16]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	61da      	str	r2, [r3, #28]
      break;
 8004b80:	e064      	b.n	8004c4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68b9      	ldr	r1, [r7, #8]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 faf9 	bl	8005180 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	69da      	ldr	r2, [r3, #28]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	69da      	ldr	r2, [r3, #28]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	69d9      	ldr	r1, [r3, #28]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	021a      	lsls	r2, r3, #8
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	61da      	str	r2, [r3, #28]
      break;
 8004bc2:	e043      	b.n	8004c4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68b9      	ldr	r1, [r7, #8]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f000 fb6c 	bl	80052a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f042 0208 	orr.w	r2, r2, #8
 8004bde:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f022 0204 	bic.w	r2, r2, #4
 8004bee:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	691a      	ldr	r2, [r3, #16]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004c02:	e023      	b.n	8004c4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68b9      	ldr	r1, [r7, #8]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 fbb6 	bl	800537c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c1e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c2e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	021a      	lsls	r2, r3, #8
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	430a      	orrs	r2, r1
 8004c42:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004c44:	e002      	b.n	8004c4c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	75fb      	strb	r3, [r7, #23]
      break;
 8004c4a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c54:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3718      	adds	r7, #24
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop

08004c60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a46      	ldr	r2, [pc, #280]	@ (8004ddc <TIM_Base_SetConfig+0x12c>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d017      	beq.n	8004cf8 <TIM_Base_SetConfig+0x48>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cce:	d013      	beq.n	8004cf8 <TIM_Base_SetConfig+0x48>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a43      	ldr	r2, [pc, #268]	@ (8004de0 <TIM_Base_SetConfig+0x130>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d00f      	beq.n	8004cf8 <TIM_Base_SetConfig+0x48>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a42      	ldr	r2, [pc, #264]	@ (8004de4 <TIM_Base_SetConfig+0x134>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d00b      	beq.n	8004cf8 <TIM_Base_SetConfig+0x48>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a41      	ldr	r2, [pc, #260]	@ (8004de8 <TIM_Base_SetConfig+0x138>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d007      	beq.n	8004cf8 <TIM_Base_SetConfig+0x48>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a40      	ldr	r2, [pc, #256]	@ (8004dec <TIM_Base_SetConfig+0x13c>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d003      	beq.n	8004cf8 <TIM_Base_SetConfig+0x48>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a3f      	ldr	r2, [pc, #252]	@ (8004df0 <TIM_Base_SetConfig+0x140>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d108      	bne.n	8004d0a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a33      	ldr	r2, [pc, #204]	@ (8004ddc <TIM_Base_SetConfig+0x12c>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d023      	beq.n	8004d5a <TIM_Base_SetConfig+0xaa>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d18:	d01f      	beq.n	8004d5a <TIM_Base_SetConfig+0xaa>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a30      	ldr	r2, [pc, #192]	@ (8004de0 <TIM_Base_SetConfig+0x130>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d01b      	beq.n	8004d5a <TIM_Base_SetConfig+0xaa>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a2f      	ldr	r2, [pc, #188]	@ (8004de4 <TIM_Base_SetConfig+0x134>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d017      	beq.n	8004d5a <TIM_Base_SetConfig+0xaa>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a2e      	ldr	r2, [pc, #184]	@ (8004de8 <TIM_Base_SetConfig+0x138>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d013      	beq.n	8004d5a <TIM_Base_SetConfig+0xaa>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a2d      	ldr	r2, [pc, #180]	@ (8004dec <TIM_Base_SetConfig+0x13c>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d00f      	beq.n	8004d5a <TIM_Base_SetConfig+0xaa>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a2d      	ldr	r2, [pc, #180]	@ (8004df4 <TIM_Base_SetConfig+0x144>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d00b      	beq.n	8004d5a <TIM_Base_SetConfig+0xaa>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a2c      	ldr	r2, [pc, #176]	@ (8004df8 <TIM_Base_SetConfig+0x148>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d007      	beq.n	8004d5a <TIM_Base_SetConfig+0xaa>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a2b      	ldr	r2, [pc, #172]	@ (8004dfc <TIM_Base_SetConfig+0x14c>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d003      	beq.n	8004d5a <TIM_Base_SetConfig+0xaa>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a26      	ldr	r2, [pc, #152]	@ (8004df0 <TIM_Base_SetConfig+0x140>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d108      	bne.n	8004d6c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a12      	ldr	r2, [pc, #72]	@ (8004ddc <TIM_Base_SetConfig+0x12c>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d013      	beq.n	8004dc0 <TIM_Base_SetConfig+0x110>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a14      	ldr	r2, [pc, #80]	@ (8004dec <TIM_Base_SetConfig+0x13c>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d00f      	beq.n	8004dc0 <TIM_Base_SetConfig+0x110>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a14      	ldr	r2, [pc, #80]	@ (8004df4 <TIM_Base_SetConfig+0x144>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d00b      	beq.n	8004dc0 <TIM_Base_SetConfig+0x110>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a13      	ldr	r2, [pc, #76]	@ (8004df8 <TIM_Base_SetConfig+0x148>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d007      	beq.n	8004dc0 <TIM_Base_SetConfig+0x110>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a12      	ldr	r2, [pc, #72]	@ (8004dfc <TIM_Base_SetConfig+0x14c>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d003      	beq.n	8004dc0 <TIM_Base_SetConfig+0x110>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a0d      	ldr	r2, [pc, #52]	@ (8004df0 <TIM_Base_SetConfig+0x140>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d103      	bne.n	8004dc8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	691a      	ldr	r2, [r3, #16]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	615a      	str	r2, [r3, #20]
}
 8004dce:	bf00      	nop
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	40012c00 	.word	0x40012c00
 8004de0:	40000400 	.word	0x40000400
 8004de4:	40000800 	.word	0x40000800
 8004de8:	40000c00 	.word	0x40000c00
 8004dec:	40013400 	.word	0x40013400
 8004df0:	40015000 	.word	0x40015000
 8004df4:	40014000 	.word	0x40014000
 8004df8:	40014400 	.word	0x40014400
 8004dfc:	40014800 	.word	0x40014800

08004e00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b087      	sub	sp, #28
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	f023 0201 	bic.w	r2, r3, #1
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f023 0303 	bic.w	r3, r3, #3
 8004e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	f023 0302 	bic.w	r3, r3, #2
 8004e4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a30      	ldr	r2, [pc, #192]	@ (8004f1c <TIM_OC1_SetConfig+0x11c>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d013      	beq.n	8004e88 <TIM_OC1_SetConfig+0x88>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a2f      	ldr	r2, [pc, #188]	@ (8004f20 <TIM_OC1_SetConfig+0x120>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d00f      	beq.n	8004e88 <TIM_OC1_SetConfig+0x88>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a2e      	ldr	r2, [pc, #184]	@ (8004f24 <TIM_OC1_SetConfig+0x124>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d00b      	beq.n	8004e88 <TIM_OC1_SetConfig+0x88>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a2d      	ldr	r2, [pc, #180]	@ (8004f28 <TIM_OC1_SetConfig+0x128>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d007      	beq.n	8004e88 <TIM_OC1_SetConfig+0x88>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a2c      	ldr	r2, [pc, #176]	@ (8004f2c <TIM_OC1_SetConfig+0x12c>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d003      	beq.n	8004e88 <TIM_OC1_SetConfig+0x88>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a2b      	ldr	r2, [pc, #172]	@ (8004f30 <TIM_OC1_SetConfig+0x130>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d10c      	bne.n	8004ea2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	f023 0308 	bic.w	r3, r3, #8
 8004e8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f023 0304 	bic.w	r3, r3, #4
 8004ea0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a1d      	ldr	r2, [pc, #116]	@ (8004f1c <TIM_OC1_SetConfig+0x11c>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d013      	beq.n	8004ed2 <TIM_OC1_SetConfig+0xd2>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a1c      	ldr	r2, [pc, #112]	@ (8004f20 <TIM_OC1_SetConfig+0x120>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d00f      	beq.n	8004ed2 <TIM_OC1_SetConfig+0xd2>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a1b      	ldr	r2, [pc, #108]	@ (8004f24 <TIM_OC1_SetConfig+0x124>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d00b      	beq.n	8004ed2 <TIM_OC1_SetConfig+0xd2>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a1a      	ldr	r2, [pc, #104]	@ (8004f28 <TIM_OC1_SetConfig+0x128>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d007      	beq.n	8004ed2 <TIM_OC1_SetConfig+0xd2>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a19      	ldr	r2, [pc, #100]	@ (8004f2c <TIM_OC1_SetConfig+0x12c>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d003      	beq.n	8004ed2 <TIM_OC1_SetConfig+0xd2>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a18      	ldr	r2, [pc, #96]	@ (8004f30 <TIM_OC1_SetConfig+0x130>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d111      	bne.n	8004ef6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ed8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	685a      	ldr	r2, [r3, #4]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	621a      	str	r2, [r3, #32]
}
 8004f10:	bf00      	nop
 8004f12:	371c      	adds	r7, #28
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr
 8004f1c:	40012c00 	.word	0x40012c00
 8004f20:	40013400 	.word	0x40013400
 8004f24:	40014000 	.word	0x40014000
 8004f28:	40014400 	.word	0x40014400
 8004f2c:	40014800 	.word	0x40014800
 8004f30:	40015000 	.word	0x40015000

08004f34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b087      	sub	sp, #28
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	f023 0210 	bic.w	r2, r3, #16
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a1b      	ldr	r3, [r3, #32]
 8004f4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	021b      	lsls	r3, r3, #8
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	f023 0320 	bic.w	r3, r3, #32
 8004f82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	011b      	lsls	r3, r3, #4
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a2c      	ldr	r2, [pc, #176]	@ (8005044 <TIM_OC2_SetConfig+0x110>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d007      	beq.n	8004fa8 <TIM_OC2_SetConfig+0x74>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a2b      	ldr	r2, [pc, #172]	@ (8005048 <TIM_OC2_SetConfig+0x114>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d003      	beq.n	8004fa8 <TIM_OC2_SetConfig+0x74>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a2a      	ldr	r2, [pc, #168]	@ (800504c <TIM_OC2_SetConfig+0x118>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d10d      	bne.n	8004fc4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	011b      	lsls	r3, r3, #4
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fc2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a1f      	ldr	r2, [pc, #124]	@ (8005044 <TIM_OC2_SetConfig+0x110>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d013      	beq.n	8004ff4 <TIM_OC2_SetConfig+0xc0>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a1e      	ldr	r2, [pc, #120]	@ (8005048 <TIM_OC2_SetConfig+0x114>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d00f      	beq.n	8004ff4 <TIM_OC2_SetConfig+0xc0>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a1e      	ldr	r2, [pc, #120]	@ (8005050 <TIM_OC2_SetConfig+0x11c>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d00b      	beq.n	8004ff4 <TIM_OC2_SetConfig+0xc0>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a1d      	ldr	r2, [pc, #116]	@ (8005054 <TIM_OC2_SetConfig+0x120>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d007      	beq.n	8004ff4 <TIM_OC2_SetConfig+0xc0>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a1c      	ldr	r2, [pc, #112]	@ (8005058 <TIM_OC2_SetConfig+0x124>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d003      	beq.n	8004ff4 <TIM_OC2_SetConfig+0xc0>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a17      	ldr	r2, [pc, #92]	@ (800504c <TIM_OC2_SetConfig+0x118>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d113      	bne.n	800501c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ffa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005002:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	4313      	orrs	r3, r2
 800500e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	4313      	orrs	r3, r2
 800501a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	621a      	str	r2, [r3, #32]
}
 8005036:	bf00      	nop
 8005038:	371c      	adds	r7, #28
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	40012c00 	.word	0x40012c00
 8005048:	40013400 	.word	0x40013400
 800504c:	40015000 	.word	0x40015000
 8005050:	40014000 	.word	0x40014000
 8005054:	40014400 	.word	0x40014400
 8005058:	40014800 	.word	0x40014800

0800505c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800505c:	b480      	push	{r7}
 800505e:	b087      	sub	sp, #28
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800508a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800508e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f023 0303 	bic.w	r3, r3, #3
 8005096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	4313      	orrs	r3, r2
 80050a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80050a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	021b      	lsls	r3, r3, #8
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a2b      	ldr	r2, [pc, #172]	@ (8005168 <TIM_OC3_SetConfig+0x10c>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d007      	beq.n	80050ce <TIM_OC3_SetConfig+0x72>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a2a      	ldr	r2, [pc, #168]	@ (800516c <TIM_OC3_SetConfig+0x110>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d003      	beq.n	80050ce <TIM_OC3_SetConfig+0x72>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a29      	ldr	r2, [pc, #164]	@ (8005170 <TIM_OC3_SetConfig+0x114>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d10d      	bne.n	80050ea <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	021b      	lsls	r3, r3, #8
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	4313      	orrs	r3, r2
 80050e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a1e      	ldr	r2, [pc, #120]	@ (8005168 <TIM_OC3_SetConfig+0x10c>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d013      	beq.n	800511a <TIM_OC3_SetConfig+0xbe>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a1d      	ldr	r2, [pc, #116]	@ (800516c <TIM_OC3_SetConfig+0x110>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d00f      	beq.n	800511a <TIM_OC3_SetConfig+0xbe>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a1d      	ldr	r2, [pc, #116]	@ (8005174 <TIM_OC3_SetConfig+0x118>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d00b      	beq.n	800511a <TIM_OC3_SetConfig+0xbe>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a1c      	ldr	r2, [pc, #112]	@ (8005178 <TIM_OC3_SetConfig+0x11c>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d007      	beq.n	800511a <TIM_OC3_SetConfig+0xbe>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a1b      	ldr	r2, [pc, #108]	@ (800517c <TIM_OC3_SetConfig+0x120>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d003      	beq.n	800511a <TIM_OC3_SetConfig+0xbe>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a16      	ldr	r2, [pc, #88]	@ (8005170 <TIM_OC3_SetConfig+0x114>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d113      	bne.n	8005142 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005120:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005128:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	011b      	lsls	r3, r3, #4
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	4313      	orrs	r3, r2
 8005134:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	011b      	lsls	r3, r3, #4
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	4313      	orrs	r3, r2
 8005140:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	693a      	ldr	r2, [r7, #16]
 8005146:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	685a      	ldr	r2, [r3, #4]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	621a      	str	r2, [r3, #32]
}
 800515c:	bf00      	nop
 800515e:	371c      	adds	r7, #28
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr
 8005168:	40012c00 	.word	0x40012c00
 800516c:	40013400 	.word	0x40013400
 8005170:	40015000 	.word	0x40015000
 8005174:	40014000 	.word	0x40014000
 8005178:	40014400 	.word	0x40014400
 800517c:	40014800 	.word	0x40014800

08005180 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005180:	b480      	push	{r7}
 8005182:	b087      	sub	sp, #28
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	69db      	ldr	r3, [r3, #28]
 80051a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	021b      	lsls	r3, r3, #8
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80051ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	031b      	lsls	r3, r3, #12
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	4313      	orrs	r3, r2
 80051da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a2c      	ldr	r2, [pc, #176]	@ (8005290 <TIM_OC4_SetConfig+0x110>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d007      	beq.n	80051f4 <TIM_OC4_SetConfig+0x74>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a2b      	ldr	r2, [pc, #172]	@ (8005294 <TIM_OC4_SetConfig+0x114>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d003      	beq.n	80051f4 <TIM_OC4_SetConfig+0x74>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a2a      	ldr	r2, [pc, #168]	@ (8005298 <TIM_OC4_SetConfig+0x118>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d10d      	bne.n	8005210 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80051fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	031b      	lsls	r3, r3, #12
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	4313      	orrs	r3, r2
 8005206:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800520e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a1f      	ldr	r2, [pc, #124]	@ (8005290 <TIM_OC4_SetConfig+0x110>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d013      	beq.n	8005240 <TIM_OC4_SetConfig+0xc0>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a1e      	ldr	r2, [pc, #120]	@ (8005294 <TIM_OC4_SetConfig+0x114>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d00f      	beq.n	8005240 <TIM_OC4_SetConfig+0xc0>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a1e      	ldr	r2, [pc, #120]	@ (800529c <TIM_OC4_SetConfig+0x11c>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d00b      	beq.n	8005240 <TIM_OC4_SetConfig+0xc0>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a1d      	ldr	r2, [pc, #116]	@ (80052a0 <TIM_OC4_SetConfig+0x120>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d007      	beq.n	8005240 <TIM_OC4_SetConfig+0xc0>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a1c      	ldr	r2, [pc, #112]	@ (80052a4 <TIM_OC4_SetConfig+0x124>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d003      	beq.n	8005240 <TIM_OC4_SetConfig+0xc0>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a17      	ldr	r2, [pc, #92]	@ (8005298 <TIM_OC4_SetConfig+0x118>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d113      	bne.n	8005268 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005246:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800524e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	019b      	lsls	r3, r3, #6
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	4313      	orrs	r3, r2
 800525a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	019b      	lsls	r3, r3, #6
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	4313      	orrs	r3, r2
 8005266:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685a      	ldr	r2, [r3, #4]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	621a      	str	r2, [r3, #32]
}
 8005282:	bf00      	nop
 8005284:	371c      	adds	r7, #28
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	40012c00 	.word	0x40012c00
 8005294:	40013400 	.word	0x40013400
 8005298:	40015000 	.word	0x40015000
 800529c:	40014000 	.word	0x40014000
 80052a0:	40014400 	.word	0x40014400
 80052a4:	40014800 	.word	0x40014800

080052a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b087      	sub	sp, #28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80052ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	041b      	lsls	r3, r3, #16
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a19      	ldr	r2, [pc, #100]	@ (8005364 <TIM_OC5_SetConfig+0xbc>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d013      	beq.n	800532a <TIM_OC5_SetConfig+0x82>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a18      	ldr	r2, [pc, #96]	@ (8005368 <TIM_OC5_SetConfig+0xc0>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d00f      	beq.n	800532a <TIM_OC5_SetConfig+0x82>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a17      	ldr	r2, [pc, #92]	@ (800536c <TIM_OC5_SetConfig+0xc4>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d00b      	beq.n	800532a <TIM_OC5_SetConfig+0x82>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a16      	ldr	r2, [pc, #88]	@ (8005370 <TIM_OC5_SetConfig+0xc8>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d007      	beq.n	800532a <TIM_OC5_SetConfig+0x82>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a15      	ldr	r2, [pc, #84]	@ (8005374 <TIM_OC5_SetConfig+0xcc>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d003      	beq.n	800532a <TIM_OC5_SetConfig+0x82>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a14      	ldr	r2, [pc, #80]	@ (8005378 <TIM_OC5_SetConfig+0xd0>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d109      	bne.n	800533e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005330:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	021b      	lsls	r3, r3, #8
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	4313      	orrs	r3, r2
 800533c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	685a      	ldr	r2, [r3, #4]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	621a      	str	r2, [r3, #32]
}
 8005358:	bf00      	nop
 800535a:	371c      	adds	r7, #28
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr
 8005364:	40012c00 	.word	0x40012c00
 8005368:	40013400 	.word	0x40013400
 800536c:	40014000 	.word	0x40014000
 8005370:	40014400 	.word	0x40014400
 8005374:	40014800 	.word	0x40014800
 8005378:	40015000 	.word	0x40015000

0800537c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800537c:	b480      	push	{r7}
 800537e:	b087      	sub	sp, #28
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	021b      	lsls	r3, r3, #8
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80053c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	051b      	lsls	r3, r3, #20
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a1a      	ldr	r2, [pc, #104]	@ (800543c <TIM_OC6_SetConfig+0xc0>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d013      	beq.n	8005400 <TIM_OC6_SetConfig+0x84>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a19      	ldr	r2, [pc, #100]	@ (8005440 <TIM_OC6_SetConfig+0xc4>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d00f      	beq.n	8005400 <TIM_OC6_SetConfig+0x84>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a18      	ldr	r2, [pc, #96]	@ (8005444 <TIM_OC6_SetConfig+0xc8>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d00b      	beq.n	8005400 <TIM_OC6_SetConfig+0x84>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a17      	ldr	r2, [pc, #92]	@ (8005448 <TIM_OC6_SetConfig+0xcc>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d007      	beq.n	8005400 <TIM_OC6_SetConfig+0x84>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a16      	ldr	r2, [pc, #88]	@ (800544c <TIM_OC6_SetConfig+0xd0>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d003      	beq.n	8005400 <TIM_OC6_SetConfig+0x84>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a15      	ldr	r2, [pc, #84]	@ (8005450 <TIM_OC6_SetConfig+0xd4>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d109      	bne.n	8005414 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005406:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	029b      	lsls	r3, r3, #10
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	4313      	orrs	r3, r2
 8005412:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	685a      	ldr	r2, [r3, #4]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	693a      	ldr	r2, [r7, #16]
 800542c:	621a      	str	r2, [r3, #32]
}
 800542e:	bf00      	nop
 8005430:	371c      	adds	r7, #28
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	40012c00 	.word	0x40012c00
 8005440:	40013400 	.word	0x40013400
 8005444:	40014000 	.word	0x40014000
 8005448:	40014400 	.word	0x40014400
 800544c:	40014800 	.word	0x40014800
 8005450:	40015000 	.word	0x40015000

08005454 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005454:	b480      	push	{r7}
 8005456:	b087      	sub	sp, #28
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
 8005460:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	f023 0201 	bic.w	r2, r3, #1
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6a1b      	ldr	r3, [r3, #32]
 8005478:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	4a28      	ldr	r2, [pc, #160]	@ (8005520 <TIM_TI1_SetConfig+0xcc>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d01b      	beq.n	80054ba <TIM_TI1_SetConfig+0x66>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005488:	d017      	beq.n	80054ba <TIM_TI1_SetConfig+0x66>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	4a25      	ldr	r2, [pc, #148]	@ (8005524 <TIM_TI1_SetConfig+0xd0>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d013      	beq.n	80054ba <TIM_TI1_SetConfig+0x66>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	4a24      	ldr	r2, [pc, #144]	@ (8005528 <TIM_TI1_SetConfig+0xd4>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d00f      	beq.n	80054ba <TIM_TI1_SetConfig+0x66>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	4a23      	ldr	r2, [pc, #140]	@ (800552c <TIM_TI1_SetConfig+0xd8>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d00b      	beq.n	80054ba <TIM_TI1_SetConfig+0x66>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	4a22      	ldr	r2, [pc, #136]	@ (8005530 <TIM_TI1_SetConfig+0xdc>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d007      	beq.n	80054ba <TIM_TI1_SetConfig+0x66>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	4a21      	ldr	r2, [pc, #132]	@ (8005534 <TIM_TI1_SetConfig+0xe0>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d003      	beq.n	80054ba <TIM_TI1_SetConfig+0x66>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	4a20      	ldr	r2, [pc, #128]	@ (8005538 <TIM_TI1_SetConfig+0xe4>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d101      	bne.n	80054be <TIM_TI1_SetConfig+0x6a>
 80054ba:	2301      	movs	r3, #1
 80054bc:	e000      	b.n	80054c0 <TIM_TI1_SetConfig+0x6c>
 80054be:	2300      	movs	r3, #0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d008      	beq.n	80054d6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	f023 0303 	bic.w	r3, r3, #3
 80054ca:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	617b      	str	r3, [r7, #20]
 80054d4:	e003      	b.n	80054de <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f043 0301 	orr.w	r3, r3, #1
 80054dc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	011b      	lsls	r3, r3, #4
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	f023 030a 	bic.w	r3, r3, #10
 80054f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	f003 030a 	and.w	r3, r3, #10
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	4313      	orrs	r3, r2
 8005504:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	621a      	str	r2, [r3, #32]
}
 8005512:	bf00      	nop
 8005514:	371c      	adds	r7, #28
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	40012c00 	.word	0x40012c00
 8005524:	40000400 	.word	0x40000400
 8005528:	40000800 	.word	0x40000800
 800552c:	40000c00 	.word	0x40000c00
 8005530:	40013400 	.word	0x40013400
 8005534:	40014000 	.word	0x40014000
 8005538:	40015000 	.word	0x40015000

0800553c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800553c:	b480      	push	{r7}
 800553e:	b087      	sub	sp, #28
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	f003 031f 	and.w	r3, r3, #31
 800554e:	2201      	movs	r2, #1
 8005550:	fa02 f303 	lsl.w	r3, r2, r3
 8005554:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6a1a      	ldr	r2, [r3, #32]
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	43db      	mvns	r3, r3
 800555e:	401a      	ands	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6a1a      	ldr	r2, [r3, #32]
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	f003 031f 	and.w	r3, r3, #31
 800556e:	6879      	ldr	r1, [r7, #4]
 8005570:	fa01 f303 	lsl.w	r3, r1, r3
 8005574:	431a      	orrs	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	621a      	str	r2, [r3, #32]
}
 800557a:	bf00      	nop
 800557c:	371c      	adds	r7, #28
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b08a      	sub	sp, #40	@ 0x28
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
 800558e:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e0a0      	b.n	80056dc <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d106      	bne.n	80055b4 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7fb fde8 	bl	8001184 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2202      	movs	r2, #2
 80055b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	3304      	adds	r3, #4
 80055c4:	4619      	mov	r1, r3
 80055c6:	4610      	mov	r0, r2
 80055c8:	f7ff fb72 	bl	8004cb0 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6818      	ldr	r0, [r3, #0]
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	6819      	ldr	r1, [r3, #0]
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	2203      	movs	r2, #3
 80055da:	f7ff ff3b 	bl	8005454 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	699a      	ldr	r2, [r3, #24]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f022 020c 	bic.w	r2, r2, #12
 80055ec:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	6999      	ldr	r1, [r3, #24]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	685a      	ldr	r2, [r3, #4]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	430a      	orrs	r2, r1
 80055fe:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	685a      	ldr	r2, [r3, #4]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800560e:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	6812      	ldr	r2, [r2, #0]
 800561a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800561e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005622:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	689a      	ldr	r2, [r3, #8]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005632:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	6812      	ldr	r2, [r2, #0]
 800563e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005642:	f023 0307 	bic.w	r3, r3, #7
 8005646:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689a      	ldr	r2, [r3, #8]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f042 0204 	orr.w	r2, r2, #4
 8005656:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8005658:	2300      	movs	r3, #0
 800565a:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 800565c:	2300      	movs	r3, #0
 800565e:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8005660:	2370      	movs	r3, #112	@ 0x70
 8005662:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005664:	2300      	movs	r3, #0
 8005666:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005668:	2300      	movs	r3, #0
 800566a:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800566c:	2300      	movs	r3, #0
 800566e:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f107 020c 	add.w	r2, r7, #12
 800567e:	4611      	mov	r1, r2
 8005680:	4618      	mov	r0, r3
 8005682:	f7ff fc57 	bl	8004f34 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	6812      	ldr	r2, [r2, #0]
 8005690:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005694:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005698:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	685a      	ldr	r2, [r3, #4]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 80056a8:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3728      	adds	r7, #40	@ 0x28
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d109      	bne.n	8005708 <HAL_TIMEx_PWMN_Start+0x24>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	bf14      	ite	ne
 8005700:	2301      	movne	r3, #1
 8005702:	2300      	moveq	r3, #0
 8005704:	b2db      	uxtb	r3, r3
 8005706:	e022      	b.n	800574e <HAL_TIMEx_PWMN_Start+0x6a>
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	2b04      	cmp	r3, #4
 800570c:	d109      	bne.n	8005722 <HAL_TIMEx_PWMN_Start+0x3e>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b01      	cmp	r3, #1
 8005718:	bf14      	ite	ne
 800571a:	2301      	movne	r3, #1
 800571c:	2300      	moveq	r3, #0
 800571e:	b2db      	uxtb	r3, r3
 8005720:	e015      	b.n	800574e <HAL_TIMEx_PWMN_Start+0x6a>
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	2b08      	cmp	r3, #8
 8005726:	d109      	bne.n	800573c <HAL_TIMEx_PWMN_Start+0x58>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800572e:	b2db      	uxtb	r3, r3
 8005730:	2b01      	cmp	r3, #1
 8005732:	bf14      	ite	ne
 8005734:	2301      	movne	r3, #1
 8005736:	2300      	moveq	r3, #0
 8005738:	b2db      	uxtb	r3, r3
 800573a:	e008      	b.n	800574e <HAL_TIMEx_PWMN_Start+0x6a>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005742:	b2db      	uxtb	r3, r3
 8005744:	2b01      	cmp	r3, #1
 8005746:	bf14      	ite	ne
 8005748:	2301      	movne	r3, #1
 800574a:	2300      	moveq	r3, #0
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e073      	b.n	800583e <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d104      	bne.n	8005766 <HAL_TIMEx_PWMN_Start+0x82>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2202      	movs	r2, #2
 8005760:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005764:	e013      	b.n	800578e <HAL_TIMEx_PWMN_Start+0xaa>
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	2b04      	cmp	r3, #4
 800576a:	d104      	bne.n	8005776 <HAL_TIMEx_PWMN_Start+0x92>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2202      	movs	r2, #2
 8005770:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005774:	e00b      	b.n	800578e <HAL_TIMEx_PWMN_Start+0xaa>
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	2b08      	cmp	r3, #8
 800577a:	d104      	bne.n	8005786 <HAL_TIMEx_PWMN_Start+0xa2>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2202      	movs	r2, #2
 8005780:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005784:	e003      	b.n	800578e <HAL_TIMEx_PWMN_Start+0xaa>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2202      	movs	r2, #2
 800578a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2204      	movs	r2, #4
 8005794:	6839      	ldr	r1, [r7, #0]
 8005796:	4618      	mov	r0, r3
 8005798:	f000 f9f4 	bl	8005b84 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80057aa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a25      	ldr	r2, [pc, #148]	@ (8005848 <HAL_TIMEx_PWMN_Start+0x164>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d022      	beq.n	80057fc <HAL_TIMEx_PWMN_Start+0x118>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057be:	d01d      	beq.n	80057fc <HAL_TIMEx_PWMN_Start+0x118>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a21      	ldr	r2, [pc, #132]	@ (800584c <HAL_TIMEx_PWMN_Start+0x168>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d018      	beq.n	80057fc <HAL_TIMEx_PWMN_Start+0x118>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a20      	ldr	r2, [pc, #128]	@ (8005850 <HAL_TIMEx_PWMN_Start+0x16c>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d013      	beq.n	80057fc <HAL_TIMEx_PWMN_Start+0x118>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a1e      	ldr	r2, [pc, #120]	@ (8005854 <HAL_TIMEx_PWMN_Start+0x170>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d00e      	beq.n	80057fc <HAL_TIMEx_PWMN_Start+0x118>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a1d      	ldr	r2, [pc, #116]	@ (8005858 <HAL_TIMEx_PWMN_Start+0x174>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d009      	beq.n	80057fc <HAL_TIMEx_PWMN_Start+0x118>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a1b      	ldr	r2, [pc, #108]	@ (800585c <HAL_TIMEx_PWMN_Start+0x178>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d004      	beq.n	80057fc <HAL_TIMEx_PWMN_Start+0x118>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a1a      	ldr	r2, [pc, #104]	@ (8005860 <HAL_TIMEx_PWMN_Start+0x17c>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d115      	bne.n	8005828 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	689a      	ldr	r2, [r3, #8]
 8005802:	4b18      	ldr	r3, [pc, #96]	@ (8005864 <HAL_TIMEx_PWMN_Start+0x180>)
 8005804:	4013      	ands	r3, r2
 8005806:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2b06      	cmp	r3, #6
 800580c:	d015      	beq.n	800583a <HAL_TIMEx_PWMN_Start+0x156>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005814:	d011      	beq.n	800583a <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f042 0201 	orr.w	r2, r2, #1
 8005824:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005826:	e008      	b.n	800583a <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f042 0201 	orr.w	r2, r2, #1
 8005836:	601a      	str	r2, [r3, #0]
 8005838:	e000      	b.n	800583c <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800583a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	40012c00 	.word	0x40012c00
 800584c:	40000400 	.word	0x40000400
 8005850:	40000800 	.word	0x40000800
 8005854:	40000c00 	.word	0x40000c00
 8005858:	40013400 	.word	0x40013400
 800585c:	40014000 	.word	0x40014000
 8005860:	40015000 	.word	0x40015000
 8005864:	00010007 	.word	0x00010007

08005868 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005878:	2b01      	cmp	r3, #1
 800587a:	d101      	bne.n	8005880 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800587c:	2302      	movs	r3, #2
 800587e:	e074      	b.n	800596a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2202      	movs	r2, #2
 800588c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a34      	ldr	r2, [pc, #208]	@ (8005978 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d009      	beq.n	80058be <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a33      	ldr	r2, [pc, #204]	@ (800597c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d004      	beq.n	80058be <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a31      	ldr	r2, [pc, #196]	@ (8005980 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d108      	bne.n	80058d0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80058c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80058d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a21      	ldr	r2, [pc, #132]	@ (8005978 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d022      	beq.n	800593e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005900:	d01d      	beq.n	800593e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a1f      	ldr	r2, [pc, #124]	@ (8005984 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d018      	beq.n	800593e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a1d      	ldr	r2, [pc, #116]	@ (8005988 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d013      	beq.n	800593e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a1c      	ldr	r2, [pc, #112]	@ (800598c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d00e      	beq.n	800593e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a15      	ldr	r2, [pc, #84]	@ (800597c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d009      	beq.n	800593e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a18      	ldr	r2, [pc, #96]	@ (8005990 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d004      	beq.n	800593e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a11      	ldr	r2, [pc, #68]	@ (8005980 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d10c      	bne.n	8005958 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005944:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	68ba      	ldr	r2, [r7, #8]
 800594c:	4313      	orrs	r3, r2
 800594e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3714      	adds	r7, #20
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	40012c00 	.word	0x40012c00
 800597c:	40013400 	.word	0x40013400
 8005980:	40015000 	.word	0x40015000
 8005984:	40000400 	.word	0x40000400
 8005988:	40000800 	.word	0x40000800
 800598c:	40000c00 	.word	0x40000c00
 8005990:	40014000 	.word	0x40014000

08005994 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800599e:	2300      	movs	r3, #0
 80059a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d101      	bne.n	80059b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80059ac:	2302      	movs	r3, #2
 80059ae:	e096      	b.n	8005ade <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	4313      	orrs	r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a16:	4313      	orrs	r3, r2
 8005a18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	041b      	lsls	r3, r3, #16
 8005a26:	4313      	orrs	r3, r2
 8005a28:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a2f      	ldr	r2, [pc, #188]	@ (8005aec <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d009      	beq.n	8005a48 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a2d      	ldr	r2, [pc, #180]	@ (8005af0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d004      	beq.n	8005a48 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a2c      	ldr	r2, [pc, #176]	@ (8005af4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d106      	bne.n	8005a56 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	69db      	ldr	r3, [r3, #28]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a24      	ldr	r2, [pc, #144]	@ (8005aec <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d009      	beq.n	8005a74 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a22      	ldr	r2, [pc, #136]	@ (8005af0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d004      	beq.n	8005a74 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a21      	ldr	r2, [pc, #132]	@ (8005af4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d12b      	bne.n	8005acc <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a7e:	051b      	lsls	r3, r3, #20
 8005a80:	4313      	orrs	r3, r2
 8005a82:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a11      	ldr	r2, [pc, #68]	@ (8005aec <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d009      	beq.n	8005abe <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a10      	ldr	r2, [pc, #64]	@ (8005af0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d004      	beq.n	8005abe <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a0e      	ldr	r2, [pc, #56]	@ (8005af4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d106      	bne.n	8005acc <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3714      	adds	r7, #20
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	40012c00 	.word	0x40012c00
 8005af0:	40013400 	.word	0x40013400
 8005af4:	40015000 	.word	0x40015000

08005af8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005b64:	bf00      	nop
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b087      	sub	sp, #28
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	f003 031f 	and.w	r3, r3, #31
 8005b96:	2204      	movs	r2, #4
 8005b98:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6a1a      	ldr	r2, [r3, #32]
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	43db      	mvns	r3, r3
 8005ba6:	401a      	ands	r2, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6a1a      	ldr	r2, [r3, #32]
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	f003 031f 	and.w	r3, r3, #31
 8005bb6:	6879      	ldr	r1, [r7, #4]
 8005bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8005bbc:	431a      	orrs	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	621a      	str	r2, [r3, #32]
}
 8005bc2:	bf00      	nop
 8005bc4:	371c      	adds	r7, #28
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b082      	sub	sp, #8
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d101      	bne.n	8005be0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e042      	b.n	8005c66 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d106      	bne.n	8005bf8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f7fb fc28 	bl	8001448 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2224      	movs	r2, #36	@ 0x24
 8005bfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f022 0201 	bic.w	r2, r2, #1
 8005c0e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 fc51 	bl	80064b8 <UART_SetConfig>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d101      	bne.n	8005c20 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e022      	b.n	8005c66 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d002      	beq.n	8005c2e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 ff41 	bl	8006ab0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c3c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	689a      	ldr	r2, [r3, #8]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c4c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f042 0201 	orr.w	r2, r2, #1
 8005c5c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 ffc8 	bl	8006bf4 <UART_CheckIdleState>
 8005c64:	4603      	mov	r3, r0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3708      	adds	r7, #8
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b08a      	sub	sp, #40	@ 0x28
 8005c72:	af02      	add	r7, sp, #8
 8005c74:	60f8      	str	r0, [r7, #12]
 8005c76:	60b9      	str	r1, [r7, #8]
 8005c78:	603b      	str	r3, [r7, #0]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c84:	2b20      	cmp	r3, #32
 8005c86:	f040 8083 	bne.w	8005d90 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d002      	beq.n	8005c96 <HAL_UART_Transmit+0x28>
 8005c90:	88fb      	ldrh	r3, [r7, #6]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d101      	bne.n	8005c9a <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e07b      	b.n	8005d92 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d101      	bne.n	8005ca8 <HAL_UART_Transmit+0x3a>
 8005ca4:	2302      	movs	r3, #2
 8005ca6:	e074      	b.n	8005d92 <HAL_UART_Transmit+0x124>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2221      	movs	r2, #33	@ 0x21
 8005cbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cc0:	f7fb fe1a 	bl	80018f8 <HAL_GetTick>
 8005cc4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	88fa      	ldrh	r2, [r7, #6]
 8005cca:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	88fa      	ldrh	r2, [r7, #6]
 8005cd2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cde:	d108      	bne.n	8005cf2 <HAL_UART_Transmit+0x84>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d104      	bne.n	8005cf2 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	61bb      	str	r3, [r7, #24]
 8005cf0:	e003      	b.n	8005cfa <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    while (huart->TxXferCount > 0U)
 8005d02:	e02c      	b.n	8005d5e <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	9300      	str	r3, [sp, #0]
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	2180      	movs	r1, #128	@ 0x80
 8005d0e:	68f8      	ldr	r0, [r7, #12]
 8005d10:	f000 ffbb 	bl	8006c8a <UART_WaitOnFlagUntilTimeout>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d001      	beq.n	8005d1e <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e039      	b.n	8005d92 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d10b      	bne.n	8005d3c <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	881b      	ldrh	r3, [r3, #0]
 8005d28:	461a      	mov	r2, r3
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d32:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	3302      	adds	r3, #2
 8005d38:	61bb      	str	r3, [r7, #24]
 8005d3a:	e007      	b.n	8005d4c <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	781a      	ldrb	r2, [r3, #0]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	3301      	adds	r3, #1
 8005d4a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	3b01      	subs	r3, #1
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1cc      	bne.n	8005d04 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	9300      	str	r3, [sp, #0]
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	2200      	movs	r2, #0
 8005d72:	2140      	movs	r1, #64	@ 0x40
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f000 ff88 	bl	8006c8a <UART_WaitOnFlagUntilTimeout>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d001      	beq.n	8005d84 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e006      	b.n	8005d92 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2220      	movs	r2, #32
 8005d88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	e000      	b.n	8005d92 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005d90:	2302      	movs	r3, #2
  }
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3720      	adds	r7, #32
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
	...

08005d9c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b08a      	sub	sp, #40	@ 0x28
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	4613      	mov	r3, r2
 8005da8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005db0:	2b20      	cmp	r3, #32
 8005db2:	d142      	bne.n	8005e3a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d002      	beq.n	8005dc0 <HAL_UART_Receive_IT+0x24>
 8005dba:	88fb      	ldrh	r3, [r7, #6]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d101      	bne.n	8005dc4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e03b      	b.n	8005e3c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d101      	bne.n	8005dd2 <HAL_UART_Receive_IT+0x36>
 8005dce:	2302      	movs	r3, #2
 8005dd0:	e034      	b.n	8005e3c <HAL_UART_Receive_IT+0xa0>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a17      	ldr	r2, [pc, #92]	@ (8005e44 <HAL_UART_Receive_IT+0xa8>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d01f      	beq.n	8005e2a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d018      	beq.n	8005e2a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	e853 3f00 	ldrex	r3, [r3]
 8005e04:	613b      	str	r3, [r7, #16]
   return(result);
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005e0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	461a      	mov	r2, r3
 8005e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e16:	623b      	str	r3, [r7, #32]
 8005e18:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1a:	69f9      	ldr	r1, [r7, #28]
 8005e1c:	6a3a      	ldr	r2, [r7, #32]
 8005e1e:	e841 2300 	strex	r3, r2, [r1]
 8005e22:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1e6      	bne.n	8005df8 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005e2a:	88fb      	ldrh	r3, [r7, #6]
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	68b9      	ldr	r1, [r7, #8]
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	f000 fff3 	bl	8006e1c <UART_Start_Receive_IT>
 8005e36:	4603      	mov	r3, r0
 8005e38:	e000      	b.n	8005e3c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005e3a:	2302      	movs	r3, #2
  }
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3728      	adds	r7, #40	@ 0x28
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	40008000 	.word	0x40008000

08005e48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b0ba      	sub	sp, #232	@ 0xe8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	69db      	ldr	r3, [r3, #28]
 8005e56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e6e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005e72:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005e76:	4013      	ands	r3, r2
 8005e78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005e7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d11b      	bne.n	8005ebc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e88:	f003 0320 	and.w	r3, r3, #32
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d015      	beq.n	8005ebc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e94:	f003 0320 	and.w	r3, r3, #32
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d105      	bne.n	8005ea8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005e9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ea0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d009      	beq.n	8005ebc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f000 82d6 	beq.w	800645e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	4798      	blx	r3
      }
      return;
 8005eba:	e2d0      	b.n	800645e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005ebc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f000 811f 	beq.w	8006104 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005ec6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005eca:	4b8b      	ldr	r3, [pc, #556]	@ (80060f8 <HAL_UART_IRQHandler+0x2b0>)
 8005ecc:	4013      	ands	r3, r2
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d106      	bne.n	8005ee0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005ed2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005ed6:	4b89      	ldr	r3, [pc, #548]	@ (80060fc <HAL_UART_IRQHandler+0x2b4>)
 8005ed8:	4013      	ands	r3, r2
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	f000 8112 	beq.w	8006104 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ee4:	f003 0301 	and.w	r3, r3, #1
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d011      	beq.n	8005f10 <HAL_UART_IRQHandler+0xc8>
 8005eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ef0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00b      	beq.n	8005f10 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2201      	movs	r2, #1
 8005efe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f06:	f043 0201 	orr.w	r2, r3, #1
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f14:	f003 0302 	and.w	r3, r3, #2
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d011      	beq.n	8005f40 <HAL_UART_IRQHandler+0xf8>
 8005f1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f20:	f003 0301 	and.w	r3, r3, #1
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00b      	beq.n	8005f40 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2202      	movs	r2, #2
 8005f2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f36:	f043 0204 	orr.w	r2, r3, #4
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f44:	f003 0304 	and.w	r3, r3, #4
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d011      	beq.n	8005f70 <HAL_UART_IRQHandler+0x128>
 8005f4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f50:	f003 0301 	and.w	r3, r3, #1
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00b      	beq.n	8005f70 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2204      	movs	r2, #4
 8005f5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f66:	f043 0202 	orr.w	r2, r3, #2
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f74:	f003 0308 	and.w	r3, r3, #8
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d017      	beq.n	8005fac <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f80:	f003 0320 	and.w	r3, r3, #32
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d105      	bne.n	8005f94 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005f88:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005f8c:	4b5a      	ldr	r3, [pc, #360]	@ (80060f8 <HAL_UART_IRQHandler+0x2b0>)
 8005f8e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d00b      	beq.n	8005fac <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2208      	movs	r2, #8
 8005f9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005fa2:	f043 0208 	orr.w	r2, r3, #8
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d012      	beq.n	8005fde <HAL_UART_IRQHandler+0x196>
 8005fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fbc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00c      	beq.n	8005fde <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005fcc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005fd4:	f043 0220 	orr.w	r2, r3, #32
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f000 823c 	beq.w	8006462 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fee:	f003 0320 	and.w	r3, r3, #32
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d013      	beq.n	800601e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005ff6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ffa:	f003 0320 	and.w	r3, r3, #32
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d105      	bne.n	800600e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006002:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006006:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d007      	beq.n	800601e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006012:	2b00      	cmp	r3, #0
 8006014:	d003      	beq.n	800601e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006024:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006032:	2b40      	cmp	r3, #64	@ 0x40
 8006034:	d005      	beq.n	8006042 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006036:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800603a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800603e:	2b00      	cmp	r3, #0
 8006040:	d04f      	beq.n	80060e2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f001 f814 	bl	8007070 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006052:	2b40      	cmp	r3, #64	@ 0x40
 8006054:	d141      	bne.n	80060da <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	3308      	adds	r3, #8
 800605c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006060:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006064:	e853 3f00 	ldrex	r3, [r3]
 8006068:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800606c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006070:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006074:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	3308      	adds	r3, #8
 800607e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006082:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006086:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800608e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006092:	e841 2300 	strex	r3, r2, [r1]
 8006096:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800609a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1d9      	bne.n	8006056 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d013      	beq.n	80060d2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060ae:	4a14      	ldr	r2, [pc, #80]	@ (8006100 <HAL_UART_IRQHandler+0x2b8>)
 80060b0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7fc fe6d 	bl	8002d96 <HAL_DMA_Abort_IT>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d017      	beq.n	80060f2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 80060cc:	4610      	mov	r0, r2
 80060ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d0:	e00f      	b.n	80060f2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f9da 	bl	800648c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d8:	e00b      	b.n	80060f2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 f9d6 	bl	800648c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060e0:	e007      	b.n	80060f2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 f9d2 	bl	800648c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      }
    }
    return;
 80060f0:	e1b7      	b.n	8006462 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060f2:	bf00      	nop
    return;
 80060f4:	e1b5      	b.n	8006462 <HAL_UART_IRQHandler+0x61a>
 80060f6:	bf00      	nop
 80060f8:	10000001 	.word	0x10000001
 80060fc:	04000120 	.word	0x04000120
 8006100:	0800713d 	.word	0x0800713d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006108:	2b01      	cmp	r3, #1
 800610a:	f040 814a 	bne.w	80063a2 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800610e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006112:	f003 0310 	and.w	r3, r3, #16
 8006116:	2b00      	cmp	r3, #0
 8006118:	f000 8143 	beq.w	80063a2 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800611c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006120:	f003 0310 	and.w	r3, r3, #16
 8006124:	2b00      	cmp	r3, #0
 8006126:	f000 813c 	beq.w	80063a2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2210      	movs	r2, #16
 8006130:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800613c:	2b40      	cmp	r3, #64	@ 0x40
 800613e:	f040 80b5 	bne.w	80062ac <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800614e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006152:	2b00      	cmp	r3, #0
 8006154:	f000 8187 	beq.w	8006466 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800615e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006162:	429a      	cmp	r2, r3
 8006164:	f080 817f 	bcs.w	8006466 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800616e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0320 	and.w	r3, r3, #32
 800617e:	2b00      	cmp	r3, #0
 8006180:	f040 8086 	bne.w	8006290 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006190:	e853 3f00 	ldrex	r3, [r3]
 8006194:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006198:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800619c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	461a      	mov	r2, r3
 80061aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80061ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80061b2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80061ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80061be:	e841 2300 	strex	r3, r2, [r1]
 80061c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80061c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1da      	bne.n	8006184 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	3308      	adds	r3, #8
 80061d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80061d8:	e853 3f00 	ldrex	r3, [r3]
 80061dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80061de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80061e0:	f023 0301 	bic.w	r3, r3, #1
 80061e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	3308      	adds	r3, #8
 80061ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80061f2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80061f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80061fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80061fe:	e841 2300 	strex	r3, r2, [r1]
 8006202:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006204:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1e1      	bne.n	80061ce <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	3308      	adds	r3, #8
 8006210:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006212:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006214:	e853 3f00 	ldrex	r3, [r3]
 8006218:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800621a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800621c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006220:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	3308      	adds	r3, #8
 800622a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800622e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006230:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006232:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006234:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006236:	e841 2300 	strex	r3, r2, [r1]
 800623a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800623c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1e3      	bne.n	800620a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2220      	movs	r2, #32
 8006246:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006256:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006258:	e853 3f00 	ldrex	r3, [r3]
 800625c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800625e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006260:	f023 0310 	bic.w	r3, r3, #16
 8006264:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	461a      	mov	r2, r3
 800626e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006272:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006274:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006276:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006278:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800627a:	e841 2300 	strex	r3, r2, [r1]
 800627e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006280:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1e4      	bne.n	8006250 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800628a:	4618      	mov	r0, r3
 800628c:	f7fc fd2a 	bl	8002ce4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800629c:	b29b      	uxth	r3, r3
 800629e:	1ad3      	subs	r3, r2, r3
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	4619      	mov	r1, r3
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 f8fb 	bl	80064a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80062aa:	e0dc      	b.n	8006466 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f000 80ce 	beq.w	800646a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80062ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	f000 80c9 	beq.w	800646a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e0:	e853 3f00 	ldrex	r3, [r3]
 80062e4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80062e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	461a      	mov	r2, r3
 80062f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80062fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80062fc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006300:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006302:	e841 2300 	strex	r3, r2, [r1]
 8006306:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006308:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1e4      	bne.n	80062d8 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	3308      	adds	r3, #8
 8006314:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006318:	e853 3f00 	ldrex	r3, [r3]
 800631c:	623b      	str	r3, [r7, #32]
   return(result);
 800631e:	6a3b      	ldr	r3, [r7, #32]
 8006320:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006324:	f023 0301 	bic.w	r3, r3, #1
 8006328:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	3308      	adds	r3, #8
 8006332:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006336:	633a      	str	r2, [r7, #48]	@ 0x30
 8006338:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800633c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800633e:	e841 2300 	strex	r3, r2, [r1]
 8006342:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006346:	2b00      	cmp	r3, #0
 8006348:	d1e1      	bne.n	800630e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2220      	movs	r2, #32
 800634e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	671a      	str	r2, [r3, #112]	@ 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	e853 3f00 	ldrex	r3, [r3]
 800636a:	60fb      	str	r3, [r7, #12]
   return(result);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f023 0310 	bic.w	r3, r3, #16
 8006372:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	461a      	mov	r2, r3
 800637c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006380:	61fb      	str	r3, [r7, #28]
 8006382:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006384:	69b9      	ldr	r1, [r7, #24]
 8006386:	69fa      	ldr	r2, [r7, #28]
 8006388:	e841 2300 	strex	r3, r2, [r1]
 800638c:	617b      	str	r3, [r7, #20]
   return(result);
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1e4      	bne.n	800635e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006394:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006398:	4619      	mov	r1, r3
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 f880 	bl	80064a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80063a0:	e063      	b.n	800646a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80063a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00e      	beq.n	80063cc <HAL_UART_IRQHandler+0x584>
 80063ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d008      	beq.n	80063cc <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80063c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f001 fb57 	bl	8007a78 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063ca:	e051      	b.n	8006470 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80063cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d014      	beq.n	8006402 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80063d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d105      	bne.n	80063f0 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80063e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d008      	beq.n	8006402 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d03a      	beq.n	800646e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	4798      	blx	r3
    }
    return;
 8006400:	e035      	b.n	800646e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800640a:	2b00      	cmp	r3, #0
 800640c:	d009      	beq.n	8006422 <HAL_UART_IRQHandler+0x5da>
 800640e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006412:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006416:	2b00      	cmp	r3, #0
 8006418:	d003      	beq.n	8006422 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 fea4 	bl	8007168 <UART_EndTransmit_IT>
    return;
 8006420:	e026      	b.n	8006470 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006426:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d009      	beq.n	8006442 <HAL_UART_IRQHandler+0x5fa>
 800642e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006432:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006436:	2b00      	cmp	r3, #0
 8006438:	d003      	beq.n	8006442 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f001 fb30 	bl	8007aa0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006440:	e016      	b.n	8006470 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006446:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d010      	beq.n	8006470 <HAL_UART_IRQHandler+0x628>
 800644e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006452:	2b00      	cmp	r3, #0
 8006454:	da0c      	bge.n	8006470 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f001 fb18 	bl	8007a8c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800645c:	e008      	b.n	8006470 <HAL_UART_IRQHandler+0x628>
      return;
 800645e:	bf00      	nop
 8006460:	e006      	b.n	8006470 <HAL_UART_IRQHandler+0x628>
    return;
 8006462:	bf00      	nop
 8006464:	e004      	b.n	8006470 <HAL_UART_IRQHandler+0x628>
      return;
 8006466:	bf00      	nop
 8006468:	e002      	b.n	8006470 <HAL_UART_IRQHandler+0x628>
      return;
 800646a:	bf00      	nop
 800646c:	e000      	b.n	8006470 <HAL_UART_IRQHandler+0x628>
    return;
 800646e:	bf00      	nop
  }
}
 8006470:	37e8      	adds	r7, #232	@ 0xe8
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop

08006478 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006480:	bf00      	nop
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006494:	bf00      	nop
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	460b      	mov	r3, r1
 80064aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80064ac:	bf00      	nop
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064bc:	b08c      	sub	sp, #48	@ 0x30
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	689a      	ldr	r2, [r3, #8]
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	431a      	orrs	r2, r3
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	431a      	orrs	r2, r3
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	69db      	ldr	r3, [r3, #28]
 80064dc:	4313      	orrs	r3, r2
 80064de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	4baa      	ldr	r3, [pc, #680]	@ (8006790 <UART_SetConfig+0x2d8>)
 80064e8:	4013      	ands	r3, r2
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	6812      	ldr	r2, [r2, #0]
 80064ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064f0:	430b      	orrs	r3, r1
 80064f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	68da      	ldr	r2, [r3, #12]
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	430a      	orrs	r2, r1
 8006508:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a9f      	ldr	r2, [pc, #636]	@ (8006794 <UART_SetConfig+0x2dc>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d004      	beq.n	8006524 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006520:	4313      	orrs	r3, r2
 8006522:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800652e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	6812      	ldr	r2, [r2, #0]
 8006536:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006538:	430b      	orrs	r3, r1
 800653a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006542:	f023 010f 	bic.w	r1, r3, #15
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	430a      	orrs	r2, r1
 8006550:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a90      	ldr	r2, [pc, #576]	@ (8006798 <UART_SetConfig+0x2e0>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d125      	bne.n	80065a8 <UART_SetConfig+0xf0>
 800655c:	4b8f      	ldr	r3, [pc, #572]	@ (800679c <UART_SetConfig+0x2e4>)
 800655e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006562:	f003 0303 	and.w	r3, r3, #3
 8006566:	2b03      	cmp	r3, #3
 8006568:	d81a      	bhi.n	80065a0 <UART_SetConfig+0xe8>
 800656a:	a201      	add	r2, pc, #4	@ (adr r2, 8006570 <UART_SetConfig+0xb8>)
 800656c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006570:	08006581 	.word	0x08006581
 8006574:	08006591 	.word	0x08006591
 8006578:	08006589 	.word	0x08006589
 800657c:	08006599 	.word	0x08006599
 8006580:	2301      	movs	r3, #1
 8006582:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006586:	e116      	b.n	80067b6 <UART_SetConfig+0x2fe>
 8006588:	2302      	movs	r3, #2
 800658a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800658e:	e112      	b.n	80067b6 <UART_SetConfig+0x2fe>
 8006590:	2304      	movs	r3, #4
 8006592:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006596:	e10e      	b.n	80067b6 <UART_SetConfig+0x2fe>
 8006598:	2308      	movs	r3, #8
 800659a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800659e:	e10a      	b.n	80067b6 <UART_SetConfig+0x2fe>
 80065a0:	2310      	movs	r3, #16
 80065a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065a6:	e106      	b.n	80067b6 <UART_SetConfig+0x2fe>
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a7c      	ldr	r2, [pc, #496]	@ (80067a0 <UART_SetConfig+0x2e8>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d138      	bne.n	8006624 <UART_SetConfig+0x16c>
 80065b2:	4b7a      	ldr	r3, [pc, #488]	@ (800679c <UART_SetConfig+0x2e4>)
 80065b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065b8:	f003 030c 	and.w	r3, r3, #12
 80065bc:	2b0c      	cmp	r3, #12
 80065be:	d82d      	bhi.n	800661c <UART_SetConfig+0x164>
 80065c0:	a201      	add	r2, pc, #4	@ (adr r2, 80065c8 <UART_SetConfig+0x110>)
 80065c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c6:	bf00      	nop
 80065c8:	080065fd 	.word	0x080065fd
 80065cc:	0800661d 	.word	0x0800661d
 80065d0:	0800661d 	.word	0x0800661d
 80065d4:	0800661d 	.word	0x0800661d
 80065d8:	0800660d 	.word	0x0800660d
 80065dc:	0800661d 	.word	0x0800661d
 80065e0:	0800661d 	.word	0x0800661d
 80065e4:	0800661d 	.word	0x0800661d
 80065e8:	08006605 	.word	0x08006605
 80065ec:	0800661d 	.word	0x0800661d
 80065f0:	0800661d 	.word	0x0800661d
 80065f4:	0800661d 	.word	0x0800661d
 80065f8:	08006615 	.word	0x08006615
 80065fc:	2300      	movs	r3, #0
 80065fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006602:	e0d8      	b.n	80067b6 <UART_SetConfig+0x2fe>
 8006604:	2302      	movs	r3, #2
 8006606:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800660a:	e0d4      	b.n	80067b6 <UART_SetConfig+0x2fe>
 800660c:	2304      	movs	r3, #4
 800660e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006612:	e0d0      	b.n	80067b6 <UART_SetConfig+0x2fe>
 8006614:	2308      	movs	r3, #8
 8006616:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800661a:	e0cc      	b.n	80067b6 <UART_SetConfig+0x2fe>
 800661c:	2310      	movs	r3, #16
 800661e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006622:	e0c8      	b.n	80067b6 <UART_SetConfig+0x2fe>
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a5e      	ldr	r2, [pc, #376]	@ (80067a4 <UART_SetConfig+0x2ec>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d125      	bne.n	800667a <UART_SetConfig+0x1c2>
 800662e:	4b5b      	ldr	r3, [pc, #364]	@ (800679c <UART_SetConfig+0x2e4>)
 8006630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006634:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006638:	2b30      	cmp	r3, #48	@ 0x30
 800663a:	d016      	beq.n	800666a <UART_SetConfig+0x1b2>
 800663c:	2b30      	cmp	r3, #48	@ 0x30
 800663e:	d818      	bhi.n	8006672 <UART_SetConfig+0x1ba>
 8006640:	2b20      	cmp	r3, #32
 8006642:	d00a      	beq.n	800665a <UART_SetConfig+0x1a2>
 8006644:	2b20      	cmp	r3, #32
 8006646:	d814      	bhi.n	8006672 <UART_SetConfig+0x1ba>
 8006648:	2b00      	cmp	r3, #0
 800664a:	d002      	beq.n	8006652 <UART_SetConfig+0x19a>
 800664c:	2b10      	cmp	r3, #16
 800664e:	d008      	beq.n	8006662 <UART_SetConfig+0x1aa>
 8006650:	e00f      	b.n	8006672 <UART_SetConfig+0x1ba>
 8006652:	2300      	movs	r3, #0
 8006654:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006658:	e0ad      	b.n	80067b6 <UART_SetConfig+0x2fe>
 800665a:	2302      	movs	r3, #2
 800665c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006660:	e0a9      	b.n	80067b6 <UART_SetConfig+0x2fe>
 8006662:	2304      	movs	r3, #4
 8006664:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006668:	e0a5      	b.n	80067b6 <UART_SetConfig+0x2fe>
 800666a:	2308      	movs	r3, #8
 800666c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006670:	e0a1      	b.n	80067b6 <UART_SetConfig+0x2fe>
 8006672:	2310      	movs	r3, #16
 8006674:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006678:	e09d      	b.n	80067b6 <UART_SetConfig+0x2fe>
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a4a      	ldr	r2, [pc, #296]	@ (80067a8 <UART_SetConfig+0x2f0>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d125      	bne.n	80066d0 <UART_SetConfig+0x218>
 8006684:	4b45      	ldr	r3, [pc, #276]	@ (800679c <UART_SetConfig+0x2e4>)
 8006686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800668a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800668e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006690:	d016      	beq.n	80066c0 <UART_SetConfig+0x208>
 8006692:	2bc0      	cmp	r3, #192	@ 0xc0
 8006694:	d818      	bhi.n	80066c8 <UART_SetConfig+0x210>
 8006696:	2b80      	cmp	r3, #128	@ 0x80
 8006698:	d00a      	beq.n	80066b0 <UART_SetConfig+0x1f8>
 800669a:	2b80      	cmp	r3, #128	@ 0x80
 800669c:	d814      	bhi.n	80066c8 <UART_SetConfig+0x210>
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d002      	beq.n	80066a8 <UART_SetConfig+0x1f0>
 80066a2:	2b40      	cmp	r3, #64	@ 0x40
 80066a4:	d008      	beq.n	80066b8 <UART_SetConfig+0x200>
 80066a6:	e00f      	b.n	80066c8 <UART_SetConfig+0x210>
 80066a8:	2300      	movs	r3, #0
 80066aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066ae:	e082      	b.n	80067b6 <UART_SetConfig+0x2fe>
 80066b0:	2302      	movs	r3, #2
 80066b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066b6:	e07e      	b.n	80067b6 <UART_SetConfig+0x2fe>
 80066b8:	2304      	movs	r3, #4
 80066ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066be:	e07a      	b.n	80067b6 <UART_SetConfig+0x2fe>
 80066c0:	2308      	movs	r3, #8
 80066c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066c6:	e076      	b.n	80067b6 <UART_SetConfig+0x2fe>
 80066c8:	2310      	movs	r3, #16
 80066ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066ce:	e072      	b.n	80067b6 <UART_SetConfig+0x2fe>
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a35      	ldr	r2, [pc, #212]	@ (80067ac <UART_SetConfig+0x2f4>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d12a      	bne.n	8006730 <UART_SetConfig+0x278>
 80066da:	4b30      	ldr	r3, [pc, #192]	@ (800679c <UART_SetConfig+0x2e4>)
 80066dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066e8:	d01a      	beq.n	8006720 <UART_SetConfig+0x268>
 80066ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066ee:	d81b      	bhi.n	8006728 <UART_SetConfig+0x270>
 80066f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066f4:	d00c      	beq.n	8006710 <UART_SetConfig+0x258>
 80066f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066fa:	d815      	bhi.n	8006728 <UART_SetConfig+0x270>
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d003      	beq.n	8006708 <UART_SetConfig+0x250>
 8006700:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006704:	d008      	beq.n	8006718 <UART_SetConfig+0x260>
 8006706:	e00f      	b.n	8006728 <UART_SetConfig+0x270>
 8006708:	2300      	movs	r3, #0
 800670a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800670e:	e052      	b.n	80067b6 <UART_SetConfig+0x2fe>
 8006710:	2302      	movs	r3, #2
 8006712:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006716:	e04e      	b.n	80067b6 <UART_SetConfig+0x2fe>
 8006718:	2304      	movs	r3, #4
 800671a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800671e:	e04a      	b.n	80067b6 <UART_SetConfig+0x2fe>
 8006720:	2308      	movs	r3, #8
 8006722:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006726:	e046      	b.n	80067b6 <UART_SetConfig+0x2fe>
 8006728:	2310      	movs	r3, #16
 800672a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800672e:	e042      	b.n	80067b6 <UART_SetConfig+0x2fe>
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a17      	ldr	r2, [pc, #92]	@ (8006794 <UART_SetConfig+0x2dc>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d13a      	bne.n	80067b0 <UART_SetConfig+0x2f8>
 800673a:	4b18      	ldr	r3, [pc, #96]	@ (800679c <UART_SetConfig+0x2e4>)
 800673c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006740:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006744:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006748:	d01a      	beq.n	8006780 <UART_SetConfig+0x2c8>
 800674a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800674e:	d81b      	bhi.n	8006788 <UART_SetConfig+0x2d0>
 8006750:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006754:	d00c      	beq.n	8006770 <UART_SetConfig+0x2b8>
 8006756:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800675a:	d815      	bhi.n	8006788 <UART_SetConfig+0x2d0>
 800675c:	2b00      	cmp	r3, #0
 800675e:	d003      	beq.n	8006768 <UART_SetConfig+0x2b0>
 8006760:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006764:	d008      	beq.n	8006778 <UART_SetConfig+0x2c0>
 8006766:	e00f      	b.n	8006788 <UART_SetConfig+0x2d0>
 8006768:	2300      	movs	r3, #0
 800676a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800676e:	e022      	b.n	80067b6 <UART_SetConfig+0x2fe>
 8006770:	2302      	movs	r3, #2
 8006772:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006776:	e01e      	b.n	80067b6 <UART_SetConfig+0x2fe>
 8006778:	2304      	movs	r3, #4
 800677a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800677e:	e01a      	b.n	80067b6 <UART_SetConfig+0x2fe>
 8006780:	2308      	movs	r3, #8
 8006782:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006786:	e016      	b.n	80067b6 <UART_SetConfig+0x2fe>
 8006788:	2310      	movs	r3, #16
 800678a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800678e:	e012      	b.n	80067b6 <UART_SetConfig+0x2fe>
 8006790:	cfff69f3 	.word	0xcfff69f3
 8006794:	40008000 	.word	0x40008000
 8006798:	40013800 	.word	0x40013800
 800679c:	40021000 	.word	0x40021000
 80067a0:	40004400 	.word	0x40004400
 80067a4:	40004800 	.word	0x40004800
 80067a8:	40004c00 	.word	0x40004c00
 80067ac:	40005000 	.word	0x40005000
 80067b0:	2310      	movs	r3, #16
 80067b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4aae      	ldr	r2, [pc, #696]	@ (8006a74 <UART_SetConfig+0x5bc>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	f040 8097 	bne.w	80068f0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80067c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80067c6:	2b08      	cmp	r3, #8
 80067c8:	d823      	bhi.n	8006812 <UART_SetConfig+0x35a>
 80067ca:	a201      	add	r2, pc, #4	@ (adr r2, 80067d0 <UART_SetConfig+0x318>)
 80067cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d0:	080067f5 	.word	0x080067f5
 80067d4:	08006813 	.word	0x08006813
 80067d8:	080067fd 	.word	0x080067fd
 80067dc:	08006813 	.word	0x08006813
 80067e0:	08006803 	.word	0x08006803
 80067e4:	08006813 	.word	0x08006813
 80067e8:	08006813 	.word	0x08006813
 80067ec:	08006813 	.word	0x08006813
 80067f0:	0800680b 	.word	0x0800680b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067f4:	f7fd fa6a 	bl	8003ccc <HAL_RCC_GetPCLK1Freq>
 80067f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80067fa:	e010      	b.n	800681e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067fc:	4b9e      	ldr	r3, [pc, #632]	@ (8006a78 <UART_SetConfig+0x5c0>)
 80067fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006800:	e00d      	b.n	800681e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006802:	f7fd f9f5 	bl	8003bf0 <HAL_RCC_GetSysClockFreq>
 8006806:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006808:	e009      	b.n	800681e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800680a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800680e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006810:	e005      	b.n	800681e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006812:	2300      	movs	r3, #0
 8006814:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800681c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800681e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006820:	2b00      	cmp	r3, #0
 8006822:	f000 8130 	beq.w	8006a86 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800682a:	4a94      	ldr	r2, [pc, #592]	@ (8006a7c <UART_SetConfig+0x5c4>)
 800682c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006830:	461a      	mov	r2, r3
 8006832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006834:	fbb3 f3f2 	udiv	r3, r3, r2
 8006838:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	685a      	ldr	r2, [r3, #4]
 800683e:	4613      	mov	r3, r2
 8006840:	005b      	lsls	r3, r3, #1
 8006842:	4413      	add	r3, r2
 8006844:	69ba      	ldr	r2, [r7, #24]
 8006846:	429a      	cmp	r2, r3
 8006848:	d305      	bcc.n	8006856 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006850:	69ba      	ldr	r2, [r7, #24]
 8006852:	429a      	cmp	r2, r3
 8006854:	d903      	bls.n	800685e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800685c:	e113      	b.n	8006a86 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800685e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006860:	2200      	movs	r2, #0
 8006862:	60bb      	str	r3, [r7, #8]
 8006864:	60fa      	str	r2, [r7, #12]
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800686a:	4a84      	ldr	r2, [pc, #528]	@ (8006a7c <UART_SetConfig+0x5c4>)
 800686c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006870:	b29b      	uxth	r3, r3
 8006872:	2200      	movs	r2, #0
 8006874:	603b      	str	r3, [r7, #0]
 8006876:	607a      	str	r2, [r7, #4]
 8006878:	e9d7 2300 	ldrd	r2, r3, [r7]
 800687c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006880:	f7f9 fd36 	bl	80002f0 <__aeabi_uldivmod>
 8006884:	4602      	mov	r2, r0
 8006886:	460b      	mov	r3, r1
 8006888:	4610      	mov	r0, r2
 800688a:	4619      	mov	r1, r3
 800688c:	f04f 0200 	mov.w	r2, #0
 8006890:	f04f 0300 	mov.w	r3, #0
 8006894:	020b      	lsls	r3, r1, #8
 8006896:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800689a:	0202      	lsls	r2, r0, #8
 800689c:	6979      	ldr	r1, [r7, #20]
 800689e:	6849      	ldr	r1, [r1, #4]
 80068a0:	0849      	lsrs	r1, r1, #1
 80068a2:	2000      	movs	r0, #0
 80068a4:	460c      	mov	r4, r1
 80068a6:	4605      	mov	r5, r0
 80068a8:	eb12 0804 	adds.w	r8, r2, r4
 80068ac:	eb43 0905 	adc.w	r9, r3, r5
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	469a      	mov	sl, r3
 80068b8:	4693      	mov	fp, r2
 80068ba:	4652      	mov	r2, sl
 80068bc:	465b      	mov	r3, fp
 80068be:	4640      	mov	r0, r8
 80068c0:	4649      	mov	r1, r9
 80068c2:	f7f9 fd15 	bl	80002f0 <__aeabi_uldivmod>
 80068c6:	4602      	mov	r2, r0
 80068c8:	460b      	mov	r3, r1
 80068ca:	4613      	mov	r3, r2
 80068cc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80068ce:	6a3b      	ldr	r3, [r7, #32]
 80068d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068d4:	d308      	bcc.n	80068e8 <UART_SetConfig+0x430>
 80068d6:	6a3b      	ldr	r3, [r7, #32]
 80068d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068dc:	d204      	bcs.n	80068e8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	6a3a      	ldr	r2, [r7, #32]
 80068e4:	60da      	str	r2, [r3, #12]
 80068e6:	e0ce      	b.n	8006a86 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80068ee:	e0ca      	b.n	8006a86 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	69db      	ldr	r3, [r3, #28]
 80068f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068f8:	d166      	bne.n	80069c8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80068fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80068fe:	2b08      	cmp	r3, #8
 8006900:	d827      	bhi.n	8006952 <UART_SetConfig+0x49a>
 8006902:	a201      	add	r2, pc, #4	@ (adr r2, 8006908 <UART_SetConfig+0x450>)
 8006904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006908:	0800692d 	.word	0x0800692d
 800690c:	08006935 	.word	0x08006935
 8006910:	0800693d 	.word	0x0800693d
 8006914:	08006953 	.word	0x08006953
 8006918:	08006943 	.word	0x08006943
 800691c:	08006953 	.word	0x08006953
 8006920:	08006953 	.word	0x08006953
 8006924:	08006953 	.word	0x08006953
 8006928:	0800694b 	.word	0x0800694b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800692c:	f7fd f9ce 	bl	8003ccc <HAL_RCC_GetPCLK1Freq>
 8006930:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006932:	e014      	b.n	800695e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006934:	f7fd f9e0 	bl	8003cf8 <HAL_RCC_GetPCLK2Freq>
 8006938:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800693a:	e010      	b.n	800695e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800693c:	4b4e      	ldr	r3, [pc, #312]	@ (8006a78 <UART_SetConfig+0x5c0>)
 800693e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006940:	e00d      	b.n	800695e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006942:	f7fd f955 	bl	8003bf0 <HAL_RCC_GetSysClockFreq>
 8006946:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006948:	e009      	b.n	800695e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800694a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800694e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006950:	e005      	b.n	800695e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006952:	2300      	movs	r3, #0
 8006954:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800695c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800695e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006960:	2b00      	cmp	r3, #0
 8006962:	f000 8090 	beq.w	8006a86 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800696a:	4a44      	ldr	r2, [pc, #272]	@ (8006a7c <UART_SetConfig+0x5c4>)
 800696c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006970:	461a      	mov	r2, r3
 8006972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006974:	fbb3 f3f2 	udiv	r3, r3, r2
 8006978:	005a      	lsls	r2, r3, #1
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	085b      	lsrs	r3, r3, #1
 8006980:	441a      	add	r2, r3
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	fbb2 f3f3 	udiv	r3, r2, r3
 800698a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800698c:	6a3b      	ldr	r3, [r7, #32]
 800698e:	2b0f      	cmp	r3, #15
 8006990:	d916      	bls.n	80069c0 <UART_SetConfig+0x508>
 8006992:	6a3b      	ldr	r3, [r7, #32]
 8006994:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006998:	d212      	bcs.n	80069c0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800699a:	6a3b      	ldr	r3, [r7, #32]
 800699c:	b29b      	uxth	r3, r3
 800699e:	f023 030f 	bic.w	r3, r3, #15
 80069a2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069a4:	6a3b      	ldr	r3, [r7, #32]
 80069a6:	085b      	lsrs	r3, r3, #1
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	f003 0307 	and.w	r3, r3, #7
 80069ae:	b29a      	uxth	r2, r3
 80069b0:	8bfb      	ldrh	r3, [r7, #30]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	8bfa      	ldrh	r2, [r7, #30]
 80069bc:	60da      	str	r2, [r3, #12]
 80069be:	e062      	b.n	8006a86 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80069c6:	e05e      	b.n	8006a86 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80069c8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80069cc:	2b08      	cmp	r3, #8
 80069ce:	d828      	bhi.n	8006a22 <UART_SetConfig+0x56a>
 80069d0:	a201      	add	r2, pc, #4	@ (adr r2, 80069d8 <UART_SetConfig+0x520>)
 80069d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d6:	bf00      	nop
 80069d8:	080069fd 	.word	0x080069fd
 80069dc:	08006a05 	.word	0x08006a05
 80069e0:	08006a0d 	.word	0x08006a0d
 80069e4:	08006a23 	.word	0x08006a23
 80069e8:	08006a13 	.word	0x08006a13
 80069ec:	08006a23 	.word	0x08006a23
 80069f0:	08006a23 	.word	0x08006a23
 80069f4:	08006a23 	.word	0x08006a23
 80069f8:	08006a1b 	.word	0x08006a1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069fc:	f7fd f966 	bl	8003ccc <HAL_RCC_GetPCLK1Freq>
 8006a00:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a02:	e014      	b.n	8006a2e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a04:	f7fd f978 	bl	8003cf8 <HAL_RCC_GetPCLK2Freq>
 8006a08:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a0a:	e010      	b.n	8006a2e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8006a78 <UART_SetConfig+0x5c0>)
 8006a0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a10:	e00d      	b.n	8006a2e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a12:	f7fd f8ed 	bl	8003bf0 <HAL_RCC_GetSysClockFreq>
 8006a16:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a18:	e009      	b.n	8006a2e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a20:	e005      	b.n	8006a2e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006a22:	2300      	movs	r3, #0
 8006a24:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006a2c:	bf00      	nop
    }

    if (pclk != 0U)
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d028      	beq.n	8006a86 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a38:	4a10      	ldr	r2, [pc, #64]	@ (8006a7c <UART_SetConfig+0x5c4>)
 8006a3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a3e:	461a      	mov	r2, r3
 8006a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a42:	fbb3 f2f2 	udiv	r2, r3, r2
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	085b      	lsrs	r3, r3, #1
 8006a4c:	441a      	add	r2, r3
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a56:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a58:	6a3b      	ldr	r3, [r7, #32]
 8006a5a:	2b0f      	cmp	r3, #15
 8006a5c:	d910      	bls.n	8006a80 <UART_SetConfig+0x5c8>
 8006a5e:	6a3b      	ldr	r3, [r7, #32]
 8006a60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a64:	d20c      	bcs.n	8006a80 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a66:	6a3b      	ldr	r3, [r7, #32]
 8006a68:	b29a      	uxth	r2, r3
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	60da      	str	r2, [r3, #12]
 8006a70:	e009      	b.n	8006a86 <UART_SetConfig+0x5ce>
 8006a72:	bf00      	nop
 8006a74:	40008000 	.word	0x40008000
 8006a78:	00f42400 	.word	0x00f42400
 8006a7c:	08009234 	.word	0x08009234
      }
      else
      {
        ret = HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	2201      	movs	r2, #1
 8006a8a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	2201      	movs	r2, #1
 8006a92:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 8006aa2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3730      	adds	r7, #48	@ 0x30
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006ab0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006abc:	f003 0301 	and.w	r3, r3, #1
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00a      	beq.n	8006ada <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	430a      	orrs	r2, r1
 8006ad8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ade:	f003 0302 	and.w	r3, r3, #2
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00a      	beq.n	8006afc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	430a      	orrs	r2, r1
 8006afa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b00:	f003 0304 	and.w	r3, r3, #4
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00a      	beq.n	8006b1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	430a      	orrs	r2, r1
 8006b1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b22:	f003 0308 	and.w	r3, r3, #8
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00a      	beq.n	8006b40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	430a      	orrs	r2, r1
 8006b3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b44:	f003 0310 	and.w	r3, r3, #16
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00a      	beq.n	8006b62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	430a      	orrs	r2, r1
 8006b60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b66:	f003 0320 	and.w	r3, r3, #32
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00a      	beq.n	8006b84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	430a      	orrs	r2, r1
 8006b82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d01a      	beq.n	8006bc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	430a      	orrs	r2, r1
 8006ba4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006baa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bae:	d10a      	bne.n	8006bc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d00a      	beq.n	8006be8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	430a      	orrs	r2, r1
 8006be6:	605a      	str	r2, [r3, #4]
  }
}
 8006be8:	bf00      	nop
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b086      	sub	sp, #24
 8006bf8:	af02      	add	r7, sp, #8
 8006bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c04:	f7fa fe78 	bl	80018f8 <HAL_GetTick>
 8006c08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 0308 	and.w	r3, r3, #8
 8006c14:	2b08      	cmp	r3, #8
 8006c16:	d10e      	bne.n	8006c36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c18:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006c1c:	9300      	str	r3, [sp, #0]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 f82f 	bl	8006c8a <UART_WaitOnFlagUntilTimeout>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d001      	beq.n	8006c36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c32:	2303      	movs	r3, #3
 8006c34:	e025      	b.n	8006c82 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 0304 	and.w	r3, r3, #4
 8006c40:	2b04      	cmp	r3, #4
 8006c42:	d10e      	bne.n	8006c62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006c48:	9300      	str	r3, [sp, #0]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 f819 	bl	8006c8a <UART_WaitOnFlagUntilTimeout>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d001      	beq.n	8006c62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e00f      	b.n	8006c82 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2220      	movs	r2, #32
 8006c66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2220      	movs	r2, #32
 8006c6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3710      	adds	r7, #16
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b09c      	sub	sp, #112	@ 0x70
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	60f8      	str	r0, [r7, #12]
 8006c92:	60b9      	str	r1, [r7, #8]
 8006c94:	603b      	str	r3, [r7, #0]
 8006c96:	4613      	mov	r3, r2
 8006c98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c9a:	e0a9      	b.n	8006df0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca2:	f000 80a5 	beq.w	8006df0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ca6:	f7fa fe27 	bl	80018f8 <HAL_GetTick>
 8006caa:	4602      	mov	r2, r0
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d302      	bcc.n	8006cbc <UART_WaitOnFlagUntilTimeout+0x32>
 8006cb6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d140      	bne.n	8006d3e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cc4:	e853 3f00 	ldrex	r3, [r3]
 8006cc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006cca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ccc:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006cd0:	667b      	str	r3, [r7, #100]	@ 0x64
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006cda:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006cdc:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cde:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006ce0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006ce2:	e841 2300 	strex	r3, r2, [r1]
 8006ce6:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006ce8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1e6      	bne.n	8006cbc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	3308      	adds	r3, #8
 8006cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cf8:	e853 3f00 	ldrex	r3, [r3]
 8006cfc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d00:	f023 0301 	bic.w	r3, r3, #1
 8006d04:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	3308      	adds	r3, #8
 8006d0c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006d0e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006d10:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d12:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006d14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d16:	e841 2300 	strex	r3, r2, [r1]
 8006d1a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006d1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1e5      	bne.n	8006cee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2220      	movs	r2, #32
 8006d26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2220      	movs	r2, #32
 8006d2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e069      	b.n	8006e12 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0304 	and.w	r3, r3, #4
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d051      	beq.n	8006df0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	69db      	ldr	r3, [r3, #28]
 8006d52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d5a:	d149      	bne.n	8006df0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006d64:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d6e:	e853 3f00 	ldrex	r3, [r3]
 8006d72:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d76:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006d7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	461a      	mov	r2, r3
 8006d82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d84:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d86:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d88:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006d8a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006d8c:	e841 2300 	strex	r3, r2, [r1]
 8006d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d1e6      	bne.n	8006d66 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	3308      	adds	r3, #8
 8006d9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	e853 3f00 	ldrex	r3, [r3]
 8006da6:	613b      	str	r3, [r7, #16]
   return(result);
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	f023 0301 	bic.w	r3, r3, #1
 8006dae:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	3308      	adds	r3, #8
 8006db6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006db8:	623a      	str	r2, [r7, #32]
 8006dba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dbc:	69f9      	ldr	r1, [r7, #28]
 8006dbe:	6a3a      	ldr	r2, [r7, #32]
 8006dc0:	e841 2300 	strex	r3, r2, [r1]
 8006dc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1e5      	bne.n	8006d98 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2220      	movs	r2, #32
 8006dd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2220      	movs	r2, #32
 8006dd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2220      	movs	r2, #32
 8006de0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e010      	b.n	8006e12 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	69da      	ldr	r2, [r3, #28]
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	4013      	ands	r3, r2
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	bf0c      	ite	eq
 8006e00:	2301      	moveq	r3, #1
 8006e02:	2300      	movne	r3, #0
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	461a      	mov	r2, r3
 8006e08:	79fb      	ldrb	r3, [r7, #7]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	f43f af46 	beq.w	8006c9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3770      	adds	r7, #112	@ 0x70
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
	...

08006e1c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b0a3      	sub	sp, #140	@ 0x8c
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	4613      	mov	r3, r2
 8006e28:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	68ba      	ldr	r2, [r7, #8]
 8006e2e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	88fa      	ldrh	r2, [r7, #6]
 8006e34:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	88fa      	ldrh	r2, [r7, #6]
 8006e3c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e4e:	d10e      	bne.n	8006e6e <UART_Start_Receive_IT+0x52>
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d105      	bne.n	8006e64 <UART_Start_Receive_IT+0x48>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006e5e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006e62:	e02d      	b.n	8006ec0 <UART_Start_Receive_IT+0xa4>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	22ff      	movs	r2, #255	@ 0xff
 8006e68:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006e6c:	e028      	b.n	8006ec0 <UART_Start_Receive_IT+0xa4>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d10d      	bne.n	8006e92 <UART_Start_Receive_IT+0x76>
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d104      	bne.n	8006e88 <UART_Start_Receive_IT+0x6c>
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	22ff      	movs	r2, #255	@ 0xff
 8006e82:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006e86:	e01b      	b.n	8006ec0 <UART_Start_Receive_IT+0xa4>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	227f      	movs	r2, #127	@ 0x7f
 8006e8c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006e90:	e016      	b.n	8006ec0 <UART_Start_Receive_IT+0xa4>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e9a:	d10d      	bne.n	8006eb8 <UART_Start_Receive_IT+0x9c>
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d104      	bne.n	8006eae <UART_Start_Receive_IT+0x92>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	227f      	movs	r2, #127	@ 0x7f
 8006ea8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006eac:	e008      	b.n	8006ec0 <UART_Start_Receive_IT+0xa4>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	223f      	movs	r2, #63	@ 0x3f
 8006eb2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006eb6:	e003      	b.n	8006ec0 <UART_Start_Receive_IT+0xa4>
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2222      	movs	r2, #34	@ 0x22
 8006ecc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	3308      	adds	r3, #8
 8006ed6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006eda:	e853 3f00 	ldrex	r3, [r3]
 8006ede:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006ee0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ee2:	f043 0301 	orr.w	r3, r3, #1
 8006ee6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	3308      	adds	r3, #8
 8006ef0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006ef4:	673a      	str	r2, [r7, #112]	@ 0x70
 8006ef6:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8006efa:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006efc:	e841 2300 	strex	r3, r2, [r1]
 8006f00:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8006f02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d1e3      	bne.n	8006ed0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f10:	d153      	bne.n	8006fba <UART_Start_Receive_IT+0x19e>
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006f18:	88fa      	ldrh	r2, [r7, #6]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d34d      	bcc.n	8006fba <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f26:	d107      	bne.n	8006f38 <UART_Start_Receive_IT+0x11c>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d103      	bne.n	8006f38 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	4a4b      	ldr	r2, [pc, #300]	@ (8007060 <UART_Start_Receive_IT+0x244>)
 8006f34:	671a      	str	r2, [r3, #112]	@ 0x70
 8006f36:	e002      	b.n	8006f3e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	4a4a      	ldr	r2, [pc, #296]	@ (8007064 <UART_Start_Receive_IT+0x248>)
 8006f3c:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	691b      	ldr	r3, [r3, #16]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d01a      	beq.n	8006f84 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f56:	e853 3f00 	ldrex	r3, [r3]
 8006f5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006f5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f62:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006f70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f72:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f74:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006f76:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006f78:	e841 2300 	strex	r3, r2, [r1]
 8006f7c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006f7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d1e4      	bne.n	8006f4e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	3308      	adds	r3, #8
 8006f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f8e:	e853 3f00 	ldrex	r3, [r3]
 8006f92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	3308      	adds	r3, #8
 8006fa2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006fa4:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006fa6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006faa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fac:	e841 2300 	strex	r3, r2, [r1]
 8006fb0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006fb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1e5      	bne.n	8006f84 <UART_Start_Receive_IT+0x168>
 8006fb8:	e04a      	b.n	8007050 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fc2:	d107      	bne.n	8006fd4 <UART_Start_Receive_IT+0x1b8>
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d103      	bne.n	8006fd4 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	4a26      	ldr	r2, [pc, #152]	@ (8007068 <UART_Start_Receive_IT+0x24c>)
 8006fd0:	671a      	str	r2, [r3, #112]	@ 0x70
 8006fd2:	e002      	b.n	8006fda <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	4a25      	ldr	r2, [pc, #148]	@ (800706c <UART_Start_Receive_IT+0x250>)
 8006fd8:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d019      	beq.n	800701e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff2:	e853 3f00 	ldrex	r3, [r3]
 8006ff6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ffa:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006ffe:	677b      	str	r3, [r7, #116]	@ 0x74
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	461a      	mov	r2, r3
 8007006:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007008:	637b      	str	r3, [r7, #52]	@ 0x34
 800700a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800700e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007010:	e841 2300 	strex	r3, r2, [r1]
 8007014:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007018:	2b00      	cmp	r3, #0
 800701a:	d1e6      	bne.n	8006fea <UART_Start_Receive_IT+0x1ce>
 800701c:	e018      	b.n	8007050 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	e853 3f00 	ldrex	r3, [r3]
 800702a:	613b      	str	r3, [r7, #16]
   return(result);
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	f043 0320 	orr.w	r3, r3, #32
 8007032:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	461a      	mov	r2, r3
 800703a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800703c:	623b      	str	r3, [r7, #32]
 800703e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007040:	69f9      	ldr	r1, [r7, #28]
 8007042:	6a3a      	ldr	r2, [r7, #32]
 8007044:	e841 2300 	strex	r3, r2, [r1]
 8007048:	61bb      	str	r3, [r7, #24]
   return(result);
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d1e6      	bne.n	800701e <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	378c      	adds	r7, #140	@ 0x8c
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	08007779 	.word	0x08007779
 8007064:	08007481 	.word	0x08007481
 8007068:	0800731f 	.word	0x0800731f
 800706c:	080071bf 	.word	0x080071bf

08007070 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007070:	b480      	push	{r7}
 8007072:	b095      	sub	sp, #84	@ 0x54
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007080:	e853 3f00 	ldrex	r3, [r3]
 8007084:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007088:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800708c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	461a      	mov	r2, r3
 8007094:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007096:	643b      	str	r3, [r7, #64]	@ 0x40
 8007098:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800709c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800709e:	e841 2300 	strex	r3, r2, [r1]
 80070a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80070a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d1e6      	bne.n	8007078 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	3308      	adds	r3, #8
 80070b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b2:	6a3b      	ldr	r3, [r7, #32]
 80070b4:	e853 3f00 	ldrex	r3, [r3]
 80070b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070c0:	f023 0301 	bic.w	r3, r3, #1
 80070c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	3308      	adds	r3, #8
 80070cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070d6:	e841 2300 	strex	r3, r2, [r1]
 80070da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80070dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d1e3      	bne.n	80070aa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d118      	bne.n	800711c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	e853 3f00 	ldrex	r3, [r3]
 80070f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	f023 0310 	bic.w	r3, r3, #16
 80070fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	461a      	mov	r2, r3
 8007106:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007108:	61bb      	str	r3, [r7, #24]
 800710a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710c:	6979      	ldr	r1, [r7, #20]
 800710e:	69ba      	ldr	r2, [r7, #24]
 8007110:	e841 2300 	strex	r3, r2, [r1]
 8007114:	613b      	str	r3, [r7, #16]
   return(result);
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d1e6      	bne.n	80070ea <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2220      	movs	r2, #32
 8007120:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8007130:	bf00      	nop
 8007132:	3754      	adds	r7, #84	@ 0x54
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007148:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2200      	movs	r2, #0
 800714e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2200      	movs	r2, #0
 8007156:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f7ff f996 	bl	800648c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007160:	bf00      	nop
 8007162:	3710      	adds	r7, #16
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b088      	sub	sp, #32
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	e853 3f00 	ldrex	r3, [r3]
 800717c:	60bb      	str	r3, [r7, #8]
   return(result);
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007184:	61fb      	str	r3, [r7, #28]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	461a      	mov	r2, r3
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	61bb      	str	r3, [r7, #24]
 8007190:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007192:	6979      	ldr	r1, [r7, #20]
 8007194:	69ba      	ldr	r2, [r7, #24]
 8007196:	e841 2300 	strex	r3, r2, [r1]
 800719a:	613b      	str	r3, [r7, #16]
   return(result);
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1e6      	bne.n	8007170 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2220      	movs	r2, #32
 80071a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	675a      	str	r2, [r3, #116]	@ 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f7ff f961 	bl	8006478 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071b6:	bf00      	nop
 80071b8:	3720      	adds	r7, #32
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b096      	sub	sp, #88	@ 0x58
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80071cc:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071d6:	2b22      	cmp	r3, #34	@ 0x22
 80071d8:	f040 8095 	bne.w	8007306 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071e2:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80071e6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 80071ea:	b2d9      	uxtb	r1, r3
 80071ec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80071f0:	b2da      	uxtb	r2, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071f6:	400a      	ands	r2, r1
 80071f8:	b2d2      	uxtb	r2, r2
 80071fa:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007200:	1c5a      	adds	r2, r3, #1
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800720c:	b29b      	uxth	r3, r3
 800720e:	3b01      	subs	r3, #1
 8007210:	b29a      	uxth	r2, r3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800721e:	b29b      	uxth	r3, r3
 8007220:	2b00      	cmp	r3, #0
 8007222:	d178      	bne.n	8007316 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800722c:	e853 3f00 	ldrex	r3, [r3]
 8007230:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007234:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007238:	653b      	str	r3, [r7, #80]	@ 0x50
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	461a      	mov	r2, r3
 8007240:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007242:	647b      	str	r3, [r7, #68]	@ 0x44
 8007244:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007246:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007248:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800724a:	e841 2300 	strex	r3, r2, [r1]
 800724e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007250:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007252:	2b00      	cmp	r3, #0
 8007254:	d1e6      	bne.n	8007224 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	3308      	adds	r3, #8
 800725c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800725e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007260:	e853 3f00 	ldrex	r3, [r3]
 8007264:	623b      	str	r3, [r7, #32]
   return(result);
 8007266:	6a3b      	ldr	r3, [r7, #32]
 8007268:	f023 0301 	bic.w	r3, r3, #1
 800726c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	3308      	adds	r3, #8
 8007274:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007276:	633a      	str	r2, [r7, #48]	@ 0x30
 8007278:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800727c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800727e:	e841 2300 	strex	r3, r2, [r1]
 8007282:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007286:	2b00      	cmp	r3, #0
 8007288:	d1e5      	bne.n	8007256 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2220      	movs	r2, #32
 800728e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800729c:	2b01      	cmp	r3, #1
 800729e:	d12e      	bne.n	80072fe <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	e853 3f00 	ldrex	r3, [r3]
 80072b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f023 0310 	bic.w	r3, r3, #16
 80072ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	461a      	mov	r2, r3
 80072c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072c4:	61fb      	str	r3, [r7, #28]
 80072c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c8:	69b9      	ldr	r1, [r7, #24]
 80072ca:	69fa      	ldr	r2, [r7, #28]
 80072cc:	e841 2300 	strex	r3, r2, [r1]
 80072d0:	617b      	str	r3, [r7, #20]
   return(result);
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d1e6      	bne.n	80072a6 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	69db      	ldr	r3, [r3, #28]
 80072de:	f003 0310 	and.w	r3, r3, #16
 80072e2:	2b10      	cmp	r3, #16
 80072e4:	d103      	bne.n	80072ee <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	2210      	movs	r2, #16
 80072ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80072f4:	4619      	mov	r1, r3
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f7ff f8d2 	bl	80064a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80072fc:	e00b      	b.n	8007316 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f7fa fa90 	bl	8001824 <HAL_UART_RxCpltCallback>
}
 8007304:	e007      	b.n	8007316 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	699a      	ldr	r2, [r3, #24]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f042 0208 	orr.w	r2, r2, #8
 8007314:	619a      	str	r2, [r3, #24]
}
 8007316:	bf00      	nop
 8007318:	3758      	adds	r7, #88	@ 0x58
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b096      	sub	sp, #88	@ 0x58
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800732c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007336:	2b22      	cmp	r3, #34	@ 0x22
 8007338:	f040 8095 	bne.w	8007466 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007342:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800734a:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800734c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8007350:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007354:	4013      	ands	r3, r2
 8007356:	b29a      	uxth	r2, r3
 8007358:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800735a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007360:	1c9a      	adds	r2, r3, #2
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800736c:	b29b      	uxth	r3, r3
 800736e:	3b01      	subs	r3, #1
 8007370:	b29a      	uxth	r2, r3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800737e:	b29b      	uxth	r3, r3
 8007380:	2b00      	cmp	r3, #0
 8007382:	d178      	bne.n	8007476 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800738c:	e853 3f00 	ldrex	r3, [r3]
 8007390:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007394:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007398:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	461a      	mov	r2, r3
 80073a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80073a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80073a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80073aa:	e841 2300 	strex	r3, r2, [r1]
 80073ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80073b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d1e6      	bne.n	8007384 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	3308      	adds	r3, #8
 80073bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073be:	6a3b      	ldr	r3, [r7, #32]
 80073c0:	e853 3f00 	ldrex	r3, [r3]
 80073c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	f023 0301 	bic.w	r3, r3, #1
 80073cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	3308      	adds	r3, #8
 80073d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80073d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80073dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073de:	e841 2300 	strex	r3, r2, [r1]
 80073e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80073e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d1e5      	bne.n	80073b6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2220      	movs	r2, #32
 80073ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d12e      	bne.n	800745e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	e853 3f00 	ldrex	r3, [r3]
 8007412:	60bb      	str	r3, [r7, #8]
   return(result);
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	f023 0310 	bic.w	r3, r3, #16
 800741a:	647b      	str	r3, [r7, #68]	@ 0x44
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	461a      	mov	r2, r3
 8007422:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007424:	61bb      	str	r3, [r7, #24]
 8007426:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007428:	6979      	ldr	r1, [r7, #20]
 800742a:	69ba      	ldr	r2, [r7, #24]
 800742c:	e841 2300 	strex	r3, r2, [r1]
 8007430:	613b      	str	r3, [r7, #16]
   return(result);
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d1e6      	bne.n	8007406 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	69db      	ldr	r3, [r3, #28]
 800743e:	f003 0310 	and.w	r3, r3, #16
 8007442:	2b10      	cmp	r3, #16
 8007444:	d103      	bne.n	800744e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2210      	movs	r2, #16
 800744c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007454:	4619      	mov	r1, r3
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f7ff f822 	bl	80064a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800745c:	e00b      	b.n	8007476 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f7fa f9e0 	bl	8001824 <HAL_UART_RxCpltCallback>
}
 8007464:	e007      	b.n	8007476 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	699a      	ldr	r2, [r3, #24]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f042 0208 	orr.w	r2, r2, #8
 8007474:	619a      	str	r2, [r3, #24]
}
 8007476:	bf00      	nop
 8007478:	3758      	adds	r7, #88	@ 0x58
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
	...

08007480 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b0a6      	sub	sp, #152	@ 0x98
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800748e:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	69db      	ldr	r3, [r3, #28]
 8007498:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074b6:	2b22      	cmp	r3, #34	@ 0x22
 80074b8:	f040 814f 	bne.w	800775a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80074c2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80074c6:	e0f6      	b.n	80076b6 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ce:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80074d2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 80074d6:	b2d9      	uxtb	r1, r3
 80074d8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80074dc:	b2da      	uxtb	r2, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074e2:	400a      	ands	r2, r1
 80074e4:	b2d2      	uxtb	r2, r2
 80074e6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074ec:	1c5a      	adds	r2, r3, #1
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	3b01      	subs	r3, #1
 80074fc:	b29a      	uxth	r2, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	69db      	ldr	r3, [r3, #28]
 800750a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800750e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007512:	f003 0307 	and.w	r3, r3, #7
 8007516:	2b00      	cmp	r3, #0
 8007518:	d053      	beq.n	80075c2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800751a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800751e:	f003 0301 	and.w	r3, r3, #1
 8007522:	2b00      	cmp	r3, #0
 8007524:	d011      	beq.n	800754a <UART_RxISR_8BIT_FIFOEN+0xca>
 8007526:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800752a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00b      	beq.n	800754a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	2201      	movs	r2, #1
 8007538:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007540:	f043 0201 	orr.w	r2, r3, #1
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800754a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800754e:	f003 0302 	and.w	r3, r3, #2
 8007552:	2b00      	cmp	r3, #0
 8007554:	d011      	beq.n	800757a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007556:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800755a:	f003 0301 	and.w	r3, r3, #1
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00b      	beq.n	800757a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2202      	movs	r2, #2
 8007568:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007570:	f043 0204 	orr.w	r2, r3, #4
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800757a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800757e:	f003 0304 	and.w	r3, r3, #4
 8007582:	2b00      	cmp	r3, #0
 8007584:	d011      	beq.n	80075aa <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007586:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800758a:	f003 0301 	and.w	r3, r3, #1
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00b      	beq.n	80075aa <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2204      	movs	r2, #4
 8007598:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80075a0:	f043 0202 	orr.w	r2, r3, #2
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d006      	beq.n	80075c2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f7fe ff69 	bl	800648c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d173      	bne.n	80076b6 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80075d6:	e853 3f00 	ldrex	r3, [r3]
 80075da:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80075dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80075de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	461a      	mov	r2, r3
 80075ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80075f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80075f2:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f4:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80075f6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80075f8:	e841 2300 	strex	r3, r2, [r1]
 80075fc:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80075fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007600:	2b00      	cmp	r3, #0
 8007602:	d1e4      	bne.n	80075ce <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	3308      	adds	r3, #8
 800760a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800760c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800760e:	e853 3f00 	ldrex	r3, [r3]
 8007612:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007614:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007616:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800761a:	f023 0301 	bic.w	r3, r3, #1
 800761e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	3308      	adds	r3, #8
 8007626:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007628:	657a      	str	r2, [r7, #84]	@ 0x54
 800762a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800762c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800762e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007630:	e841 2300 	strex	r3, r2, [r1]
 8007634:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007636:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007638:	2b00      	cmp	r3, #0
 800763a:	d1e3      	bne.n	8007604 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2220      	movs	r2, #32
 8007640:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800764e:	2b01      	cmp	r3, #1
 8007650:	d12e      	bne.n	80076b0 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007660:	e853 3f00 	ldrex	r3, [r3]
 8007664:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007668:	f023 0310 	bic.w	r3, r3, #16
 800766c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	461a      	mov	r2, r3
 8007674:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007676:	643b      	str	r3, [r7, #64]	@ 0x40
 8007678:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800767c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800767e:	e841 2300 	strex	r3, r2, [r1]
 8007682:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1e6      	bne.n	8007658 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	69db      	ldr	r3, [r3, #28]
 8007690:	f003 0310 	and.w	r3, r3, #16
 8007694:	2b10      	cmp	r3, #16
 8007696:	d103      	bne.n	80076a0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	2210      	movs	r2, #16
 800769e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80076a6:	4619      	mov	r1, r3
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f7fe fef9 	bl	80064a0 <HAL_UARTEx_RxEventCallback>
 80076ae:	e002      	b.n	80076b6 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f7fa f8b7 	bl	8001824 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80076b6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d006      	beq.n	80076cc <UART_RxISR_8BIT_FIFOEN+0x24c>
 80076be:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80076c2:	f003 0320 	and.w	r3, r3, #32
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	f47f aefe 	bne.w	80074c8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80076d2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80076d6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d045      	beq.n	800776a <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80076e4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d23e      	bcs.n	800776a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	3308      	adds	r3, #8
 80076f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f4:	6a3b      	ldr	r3, [r7, #32]
 80076f6:	e853 3f00 	ldrex	r3, [r3]
 80076fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007702:	673b      	str	r3, [r7, #112]	@ 0x70
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	3308      	adds	r3, #8
 800770a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800770c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800770e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007710:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007712:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007714:	e841 2300 	strex	r3, r2, [r1]
 8007718:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800771a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800771c:	2b00      	cmp	r3, #0
 800771e:	d1e5      	bne.n	80076ec <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4a14      	ldr	r2, [pc, #80]	@ (8007774 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8007724:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	e853 3f00 	ldrex	r3, [r3]
 8007732:	60bb      	str	r3, [r7, #8]
   return(result);
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	f043 0320 	orr.w	r3, r3, #32
 800773a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	461a      	mov	r2, r3
 8007742:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007744:	61bb      	str	r3, [r7, #24]
 8007746:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007748:	6979      	ldr	r1, [r7, #20]
 800774a:	69ba      	ldr	r2, [r7, #24]
 800774c:	e841 2300 	strex	r3, r2, [r1]
 8007750:	613b      	str	r3, [r7, #16]
   return(result);
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d1e6      	bne.n	8007726 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007758:	e007      	b.n	800776a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	699a      	ldr	r2, [r3, #24]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f042 0208 	orr.w	r2, r2, #8
 8007768:	619a      	str	r2, [r3, #24]
}
 800776a:	bf00      	nop
 800776c:	3798      	adds	r7, #152	@ 0x98
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop
 8007774:	080071bf 	.word	0x080071bf

08007778 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b0a8      	sub	sp, #160	@ 0xa0
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007786:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	69db      	ldr	r3, [r3, #28]
 8007790:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077ae:	2b22      	cmp	r3, #34	@ 0x22
 80077b0:	f040 8153 	bne.w	8007a5a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80077ba:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80077be:	e0fa      	b.n	80079b6 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077c6:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80077d2:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 80077d6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 80077da:	4013      	ands	r3, r2
 80077dc:	b29a      	uxth	r2, r3
 80077de:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80077e2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077e8:	1c9a      	adds	r2, r3, #2
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	3b01      	subs	r3, #1
 80077f8:	b29a      	uxth	r2, r3
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	69db      	ldr	r3, [r3, #28]
 8007806:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800780a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800780e:	f003 0307 	and.w	r3, r3, #7
 8007812:	2b00      	cmp	r3, #0
 8007814:	d053      	beq.n	80078be <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007816:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800781a:	f003 0301 	and.w	r3, r3, #1
 800781e:	2b00      	cmp	r3, #0
 8007820:	d011      	beq.n	8007846 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007822:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007826:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00b      	beq.n	8007846 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2201      	movs	r2, #1
 8007834:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800783c:	f043 0201 	orr.w	r2, r3, #1
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007846:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800784a:	f003 0302 	and.w	r3, r3, #2
 800784e:	2b00      	cmp	r3, #0
 8007850:	d011      	beq.n	8007876 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007852:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007856:	f003 0301 	and.w	r3, r3, #1
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00b      	beq.n	8007876 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2202      	movs	r2, #2
 8007864:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800786c:	f043 0204 	orr.w	r2, r3, #4
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007876:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800787a:	f003 0304 	and.w	r3, r3, #4
 800787e:	2b00      	cmp	r3, #0
 8007880:	d011      	beq.n	80078a6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007882:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007886:	f003 0301 	and.w	r3, r3, #1
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00b      	beq.n	80078a6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	2204      	movs	r2, #4
 8007894:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800789c:	f043 0202 	orr.w	r2, r3, #2
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d006      	beq.n	80078be <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f7fe fdeb 	bl	800648c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d175      	bne.n	80079b6 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80078d2:	e853 3f00 	ldrex	r3, [r3]
 80078d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80078d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80078de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	461a      	mov	r2, r3
 80078e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80078ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80078ee:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80078f2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80078f4:	e841 2300 	strex	r3, r2, [r1]
 80078f8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80078fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d1e4      	bne.n	80078ca <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	3308      	adds	r3, #8
 8007906:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007908:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800790a:	e853 3f00 	ldrex	r3, [r3]
 800790e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007910:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007912:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007916:	f023 0301 	bic.w	r3, r3, #1
 800791a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	3308      	adds	r3, #8
 8007924:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007928:	65ba      	str	r2, [r7, #88]	@ 0x58
 800792a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800792c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800792e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007930:	e841 2300 	strex	r3, r2, [r1]
 8007934:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007936:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007938:	2b00      	cmp	r3, #0
 800793a:	d1e1      	bne.n	8007900 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2220      	movs	r2, #32
 8007940:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800794e:	2b01      	cmp	r3, #1
 8007950:	d12e      	bne.n	80079b0 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007960:	e853 3f00 	ldrex	r3, [r3]
 8007964:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007968:	f023 0310 	bic.w	r3, r3, #16
 800796c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	461a      	mov	r2, r3
 8007974:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007976:	647b      	str	r3, [r7, #68]	@ 0x44
 8007978:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800797c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800797e:	e841 2300 	strex	r3, r2, [r1]
 8007982:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007984:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007986:	2b00      	cmp	r3, #0
 8007988:	d1e6      	bne.n	8007958 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	69db      	ldr	r3, [r3, #28]
 8007990:	f003 0310 	and.w	r3, r3, #16
 8007994:	2b10      	cmp	r3, #16
 8007996:	d103      	bne.n	80079a0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2210      	movs	r2, #16
 800799e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80079a6:	4619      	mov	r1, r3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f7fe fd79 	bl	80064a0 <HAL_UARTEx_RxEventCallback>
 80079ae:	e002      	b.n	80079b6 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f7f9 ff37 	bl	8001824 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80079b6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d006      	beq.n	80079cc <UART_RxISR_16BIT_FIFOEN+0x254>
 80079be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80079c2:	f003 0320 	and.w	r3, r3, #32
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	f47f aefa 	bne.w	80077c0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80079d2:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80079d6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d045      	beq.n	8007a6a <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80079e4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d23e      	bcs.n	8007a6a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	3308      	adds	r3, #8
 80079f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f6:	e853 3f00 	ldrex	r3, [r3]
 80079fa:	623b      	str	r3, [r7, #32]
   return(result);
 80079fc:	6a3b      	ldr	r3, [r7, #32]
 80079fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a02:	677b      	str	r3, [r7, #116]	@ 0x74
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	3308      	adds	r3, #8
 8007a0a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007a0c:	633a      	str	r2, [r7, #48]	@ 0x30
 8007a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a10:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a14:	e841 2300 	strex	r3, r2, [r1]
 8007a18:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d1e5      	bne.n	80079ec <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4a14      	ldr	r2, [pc, #80]	@ (8007a74 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8007a24:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	e853 3f00 	ldrex	r3, [r3]
 8007a32:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f043 0320 	orr.w	r3, r3, #32
 8007a3a:	673b      	str	r3, [r7, #112]	@ 0x70
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	461a      	mov	r2, r3
 8007a42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a44:	61fb      	str	r3, [r7, #28]
 8007a46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a48:	69b9      	ldr	r1, [r7, #24]
 8007a4a:	69fa      	ldr	r2, [r7, #28]
 8007a4c:	e841 2300 	strex	r3, r2, [r1]
 8007a50:	617b      	str	r3, [r7, #20]
   return(result);
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d1e6      	bne.n	8007a26 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a58:	e007      	b.n	8007a6a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	699a      	ldr	r2, [r3, #24]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f042 0208 	orr.w	r2, r2, #8
 8007a68:	619a      	str	r2, [r3, #24]
}
 8007a6a:	bf00      	nop
 8007a6c:	37a0      	adds	r7, #160	@ 0xa0
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	0800731f 	.word	0x0800731f

08007a78 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b083      	sub	sp, #12
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007a80:	bf00      	nop
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007a94:	bf00      	nop
 8007a96:	370c      	adds	r7, #12
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b083      	sub	sp, #12
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007aa8:	bf00      	nop
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b085      	sub	sp, #20
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d101      	bne.n	8007aca <HAL_UARTEx_DisableFifoMode+0x16>
 8007ac6:	2302      	movs	r3, #2
 8007ac8:	e027      	b.n	8007b1a <HAL_UARTEx_DisableFifoMode+0x66>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2224      	movs	r2, #36	@ 0x24
 8007ad6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f022 0201 	bic.w	r2, r2, #1
 8007af0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007af8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	68fa      	ldr	r2, [r7, #12]
 8007b06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2220      	movs	r2, #32
 8007b0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8007b18:	2300      	movs	r3, #0
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3714      	adds	r7, #20
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr

08007b26 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b26:	b580      	push	{r7, lr}
 8007b28:	b084      	sub	sp, #16
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
 8007b2e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d101      	bne.n	8007b3e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007b3a:	2302      	movs	r3, #2
 8007b3c:	e02d      	b.n	8007b9a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2201      	movs	r2, #1
 8007b42:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2224      	movs	r2, #36	@ 0x24
 8007b4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f022 0201 	bic.w	r2, r2, #1
 8007b64:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	683a      	ldr	r2, [r7, #0]
 8007b76:	430a      	orrs	r2, r1
 8007b78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 f850 	bl	8007c20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2220      	movs	r2, #32
 8007b8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3710      	adds	r7, #16
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b084      	sub	sp, #16
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
 8007baa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d101      	bne.n	8007bba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007bb6:	2302      	movs	r3, #2
 8007bb8:	e02d      	b.n	8007c16 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2224      	movs	r2, #36	@ 0x24
 8007bc6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f022 0201 	bic.w	r2, r2, #1
 8007be0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	683a      	ldr	r2, [r7, #0]
 8007bf2:	430a      	orrs	r2, r1
 8007bf4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 f812 	bl	8007c20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2220      	movs	r2, #32
 8007c08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
	...

08007c20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b085      	sub	sp, #20
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d108      	bne.n	8007c42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007c40:	e031      	b.n	8007ca6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007c42:	2308      	movs	r3, #8
 8007c44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007c46:	2308      	movs	r3, #8
 8007c48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	0e5b      	lsrs	r3, r3, #25
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	f003 0307 	and.w	r3, r3, #7
 8007c58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	0f5b      	lsrs	r3, r3, #29
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	f003 0307 	and.w	r3, r3, #7
 8007c68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c6a:	7bbb      	ldrb	r3, [r7, #14]
 8007c6c:	7b3a      	ldrb	r2, [r7, #12]
 8007c6e:	4911      	ldr	r1, [pc, #68]	@ (8007cb4 <UARTEx_SetNbDataToProcess+0x94>)
 8007c70:	5c8a      	ldrb	r2, [r1, r2]
 8007c72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007c76:	7b3a      	ldrb	r2, [r7, #12]
 8007c78:	490f      	ldr	r1, [pc, #60]	@ (8007cb8 <UARTEx_SetNbDataToProcess+0x98>)
 8007c7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c88:	7bfb      	ldrb	r3, [r7, #15]
 8007c8a:	7b7a      	ldrb	r2, [r7, #13]
 8007c8c:	4909      	ldr	r1, [pc, #36]	@ (8007cb4 <UARTEx_SetNbDataToProcess+0x94>)
 8007c8e:	5c8a      	ldrb	r2, [r1, r2]
 8007c90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007c94:	7b7a      	ldrb	r2, [r7, #13]
 8007c96:	4908      	ldr	r1, [pc, #32]	@ (8007cb8 <UARTEx_SetNbDataToProcess+0x98>)
 8007c98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c9e:	b29a      	uxth	r2, r3
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007ca6:	bf00      	nop
 8007ca8:	3714      	adds	r7, #20
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr
 8007cb2:	bf00      	nop
 8007cb4:	0800924c 	.word	0x0800924c
 8007cb8:	08009254 	.word	0x08009254

08007cbc <atoi>:
 8007cbc:	220a      	movs	r2, #10
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	f000 b87a 	b.w	8007db8 <strtol>

08007cc4 <_strtol_l.constprop.0>:
 8007cc4:	2b24      	cmp	r3, #36	@ 0x24
 8007cc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cca:	4686      	mov	lr, r0
 8007ccc:	4690      	mov	r8, r2
 8007cce:	d801      	bhi.n	8007cd4 <_strtol_l.constprop.0+0x10>
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d106      	bne.n	8007ce2 <_strtol_l.constprop.0+0x1e>
 8007cd4:	f000 fa5e 	bl	8008194 <__errno>
 8007cd8:	2316      	movs	r3, #22
 8007cda:	6003      	str	r3, [r0, #0]
 8007cdc:	2000      	movs	r0, #0
 8007cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ce2:	4834      	ldr	r0, [pc, #208]	@ (8007db4 <_strtol_l.constprop.0+0xf0>)
 8007ce4:	460d      	mov	r5, r1
 8007ce6:	462a      	mov	r2, r5
 8007ce8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007cec:	5d06      	ldrb	r6, [r0, r4]
 8007cee:	f016 0608 	ands.w	r6, r6, #8
 8007cf2:	d1f8      	bne.n	8007ce6 <_strtol_l.constprop.0+0x22>
 8007cf4:	2c2d      	cmp	r4, #45	@ 0x2d
 8007cf6:	d12d      	bne.n	8007d54 <_strtol_l.constprop.0+0x90>
 8007cf8:	782c      	ldrb	r4, [r5, #0]
 8007cfa:	2601      	movs	r6, #1
 8007cfc:	1c95      	adds	r5, r2, #2
 8007cfe:	f033 0210 	bics.w	r2, r3, #16
 8007d02:	d109      	bne.n	8007d18 <_strtol_l.constprop.0+0x54>
 8007d04:	2c30      	cmp	r4, #48	@ 0x30
 8007d06:	d12a      	bne.n	8007d5e <_strtol_l.constprop.0+0x9a>
 8007d08:	782a      	ldrb	r2, [r5, #0]
 8007d0a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007d0e:	2a58      	cmp	r2, #88	@ 0x58
 8007d10:	d125      	bne.n	8007d5e <_strtol_l.constprop.0+0x9a>
 8007d12:	786c      	ldrb	r4, [r5, #1]
 8007d14:	2310      	movs	r3, #16
 8007d16:	3502      	adds	r5, #2
 8007d18:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007d1c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007d20:	2200      	movs	r2, #0
 8007d22:	fbbc f9f3 	udiv	r9, ip, r3
 8007d26:	4610      	mov	r0, r2
 8007d28:	fb03 ca19 	mls	sl, r3, r9, ip
 8007d2c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007d30:	2f09      	cmp	r7, #9
 8007d32:	d81b      	bhi.n	8007d6c <_strtol_l.constprop.0+0xa8>
 8007d34:	463c      	mov	r4, r7
 8007d36:	42a3      	cmp	r3, r4
 8007d38:	dd27      	ble.n	8007d8a <_strtol_l.constprop.0+0xc6>
 8007d3a:	1c57      	adds	r7, r2, #1
 8007d3c:	d007      	beq.n	8007d4e <_strtol_l.constprop.0+0x8a>
 8007d3e:	4581      	cmp	r9, r0
 8007d40:	d320      	bcc.n	8007d84 <_strtol_l.constprop.0+0xc0>
 8007d42:	d101      	bne.n	8007d48 <_strtol_l.constprop.0+0x84>
 8007d44:	45a2      	cmp	sl, r4
 8007d46:	db1d      	blt.n	8007d84 <_strtol_l.constprop.0+0xc0>
 8007d48:	fb00 4003 	mla	r0, r0, r3, r4
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d52:	e7eb      	b.n	8007d2c <_strtol_l.constprop.0+0x68>
 8007d54:	2c2b      	cmp	r4, #43	@ 0x2b
 8007d56:	bf04      	itt	eq
 8007d58:	782c      	ldrbeq	r4, [r5, #0]
 8007d5a:	1c95      	addeq	r5, r2, #2
 8007d5c:	e7cf      	b.n	8007cfe <_strtol_l.constprop.0+0x3a>
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d1da      	bne.n	8007d18 <_strtol_l.constprop.0+0x54>
 8007d62:	2c30      	cmp	r4, #48	@ 0x30
 8007d64:	bf0c      	ite	eq
 8007d66:	2308      	moveq	r3, #8
 8007d68:	230a      	movne	r3, #10
 8007d6a:	e7d5      	b.n	8007d18 <_strtol_l.constprop.0+0x54>
 8007d6c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007d70:	2f19      	cmp	r7, #25
 8007d72:	d801      	bhi.n	8007d78 <_strtol_l.constprop.0+0xb4>
 8007d74:	3c37      	subs	r4, #55	@ 0x37
 8007d76:	e7de      	b.n	8007d36 <_strtol_l.constprop.0+0x72>
 8007d78:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007d7c:	2f19      	cmp	r7, #25
 8007d7e:	d804      	bhi.n	8007d8a <_strtol_l.constprop.0+0xc6>
 8007d80:	3c57      	subs	r4, #87	@ 0x57
 8007d82:	e7d8      	b.n	8007d36 <_strtol_l.constprop.0+0x72>
 8007d84:	f04f 32ff 	mov.w	r2, #4294967295
 8007d88:	e7e1      	b.n	8007d4e <_strtol_l.constprop.0+0x8a>
 8007d8a:	1c53      	adds	r3, r2, #1
 8007d8c:	d108      	bne.n	8007da0 <_strtol_l.constprop.0+0xdc>
 8007d8e:	2322      	movs	r3, #34	@ 0x22
 8007d90:	f8ce 3000 	str.w	r3, [lr]
 8007d94:	4660      	mov	r0, ip
 8007d96:	f1b8 0f00 	cmp.w	r8, #0
 8007d9a:	d0a0      	beq.n	8007cde <_strtol_l.constprop.0+0x1a>
 8007d9c:	1e69      	subs	r1, r5, #1
 8007d9e:	e006      	b.n	8007dae <_strtol_l.constprop.0+0xea>
 8007da0:	b106      	cbz	r6, 8007da4 <_strtol_l.constprop.0+0xe0>
 8007da2:	4240      	negs	r0, r0
 8007da4:	f1b8 0f00 	cmp.w	r8, #0
 8007da8:	d099      	beq.n	8007cde <_strtol_l.constprop.0+0x1a>
 8007daa:	2a00      	cmp	r2, #0
 8007dac:	d1f6      	bne.n	8007d9c <_strtol_l.constprop.0+0xd8>
 8007dae:	f8c8 1000 	str.w	r1, [r8]
 8007db2:	e794      	b.n	8007cde <_strtol_l.constprop.0+0x1a>
 8007db4:	0800925d 	.word	0x0800925d

08007db8 <strtol>:
 8007db8:	4613      	mov	r3, r2
 8007dba:	460a      	mov	r2, r1
 8007dbc:	4601      	mov	r1, r0
 8007dbe:	4802      	ldr	r0, [pc, #8]	@ (8007dc8 <strtol+0x10>)
 8007dc0:	6800      	ldr	r0, [r0, #0]
 8007dc2:	f7ff bf7f 	b.w	8007cc4 <_strtol_l.constprop.0>
 8007dc6:	bf00      	nop
 8007dc8:	200000d4 	.word	0x200000d4

08007dcc <std>:
 8007dcc:	2300      	movs	r3, #0
 8007dce:	b510      	push	{r4, lr}
 8007dd0:	4604      	mov	r4, r0
 8007dd2:	e9c0 3300 	strd	r3, r3, [r0]
 8007dd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007dda:	6083      	str	r3, [r0, #8]
 8007ddc:	8181      	strh	r1, [r0, #12]
 8007dde:	6643      	str	r3, [r0, #100]	@ 0x64
 8007de0:	81c2      	strh	r2, [r0, #14]
 8007de2:	6183      	str	r3, [r0, #24]
 8007de4:	4619      	mov	r1, r3
 8007de6:	2208      	movs	r2, #8
 8007de8:	305c      	adds	r0, #92	@ 0x5c
 8007dea:	f000 f928 	bl	800803e <memset>
 8007dee:	4b0d      	ldr	r3, [pc, #52]	@ (8007e24 <std+0x58>)
 8007df0:	6263      	str	r3, [r4, #36]	@ 0x24
 8007df2:	4b0d      	ldr	r3, [pc, #52]	@ (8007e28 <std+0x5c>)
 8007df4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007df6:	4b0d      	ldr	r3, [pc, #52]	@ (8007e2c <std+0x60>)
 8007df8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8007e30 <std+0x64>)
 8007dfc:	6323      	str	r3, [r4, #48]	@ 0x30
 8007dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8007e34 <std+0x68>)
 8007e00:	6224      	str	r4, [r4, #32]
 8007e02:	429c      	cmp	r4, r3
 8007e04:	d006      	beq.n	8007e14 <std+0x48>
 8007e06:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007e0a:	4294      	cmp	r4, r2
 8007e0c:	d002      	beq.n	8007e14 <std+0x48>
 8007e0e:	33d0      	adds	r3, #208	@ 0xd0
 8007e10:	429c      	cmp	r4, r3
 8007e12:	d105      	bne.n	8007e20 <std+0x54>
 8007e14:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e1c:	f000 b9e4 	b.w	80081e8 <__retarget_lock_init_recursive>
 8007e20:	bd10      	pop	{r4, pc}
 8007e22:	bf00      	nop
 8007e24:	08007fb9 	.word	0x08007fb9
 8007e28:	08007fdb 	.word	0x08007fdb
 8007e2c:	08008013 	.word	0x08008013
 8007e30:	08008037 	.word	0x08008037
 8007e34:	200004e4 	.word	0x200004e4

08007e38 <stdio_exit_handler>:
 8007e38:	4a02      	ldr	r2, [pc, #8]	@ (8007e44 <stdio_exit_handler+0xc>)
 8007e3a:	4903      	ldr	r1, [pc, #12]	@ (8007e48 <stdio_exit_handler+0x10>)
 8007e3c:	4803      	ldr	r0, [pc, #12]	@ (8007e4c <stdio_exit_handler+0x14>)
 8007e3e:	f000 b869 	b.w	8007f14 <_fwalk_sglue>
 8007e42:	bf00      	nop
 8007e44:	200000c8 	.word	0x200000c8
 8007e48:	08008b01 	.word	0x08008b01
 8007e4c:	200000d8 	.word	0x200000d8

08007e50 <cleanup_stdio>:
 8007e50:	6841      	ldr	r1, [r0, #4]
 8007e52:	4b0c      	ldr	r3, [pc, #48]	@ (8007e84 <cleanup_stdio+0x34>)
 8007e54:	4299      	cmp	r1, r3
 8007e56:	b510      	push	{r4, lr}
 8007e58:	4604      	mov	r4, r0
 8007e5a:	d001      	beq.n	8007e60 <cleanup_stdio+0x10>
 8007e5c:	f000 fe50 	bl	8008b00 <_fflush_r>
 8007e60:	68a1      	ldr	r1, [r4, #8]
 8007e62:	4b09      	ldr	r3, [pc, #36]	@ (8007e88 <cleanup_stdio+0x38>)
 8007e64:	4299      	cmp	r1, r3
 8007e66:	d002      	beq.n	8007e6e <cleanup_stdio+0x1e>
 8007e68:	4620      	mov	r0, r4
 8007e6a:	f000 fe49 	bl	8008b00 <_fflush_r>
 8007e6e:	68e1      	ldr	r1, [r4, #12]
 8007e70:	4b06      	ldr	r3, [pc, #24]	@ (8007e8c <cleanup_stdio+0x3c>)
 8007e72:	4299      	cmp	r1, r3
 8007e74:	d004      	beq.n	8007e80 <cleanup_stdio+0x30>
 8007e76:	4620      	mov	r0, r4
 8007e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e7c:	f000 be40 	b.w	8008b00 <_fflush_r>
 8007e80:	bd10      	pop	{r4, pc}
 8007e82:	bf00      	nop
 8007e84:	200004e4 	.word	0x200004e4
 8007e88:	2000054c 	.word	0x2000054c
 8007e8c:	200005b4 	.word	0x200005b4

08007e90 <global_stdio_init.part.0>:
 8007e90:	b510      	push	{r4, lr}
 8007e92:	4b0b      	ldr	r3, [pc, #44]	@ (8007ec0 <global_stdio_init.part.0+0x30>)
 8007e94:	4c0b      	ldr	r4, [pc, #44]	@ (8007ec4 <global_stdio_init.part.0+0x34>)
 8007e96:	4a0c      	ldr	r2, [pc, #48]	@ (8007ec8 <global_stdio_init.part.0+0x38>)
 8007e98:	601a      	str	r2, [r3, #0]
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	2104      	movs	r1, #4
 8007ea0:	f7ff ff94 	bl	8007dcc <std>
 8007ea4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	2109      	movs	r1, #9
 8007eac:	f7ff ff8e 	bl	8007dcc <std>
 8007eb0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007eb4:	2202      	movs	r2, #2
 8007eb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007eba:	2112      	movs	r1, #18
 8007ebc:	f7ff bf86 	b.w	8007dcc <std>
 8007ec0:	2000061c 	.word	0x2000061c
 8007ec4:	200004e4 	.word	0x200004e4
 8007ec8:	08007e39 	.word	0x08007e39

08007ecc <__sfp_lock_acquire>:
 8007ecc:	4801      	ldr	r0, [pc, #4]	@ (8007ed4 <__sfp_lock_acquire+0x8>)
 8007ece:	f000 b98c 	b.w	80081ea <__retarget_lock_acquire_recursive>
 8007ed2:	bf00      	nop
 8007ed4:	20000625 	.word	0x20000625

08007ed8 <__sfp_lock_release>:
 8007ed8:	4801      	ldr	r0, [pc, #4]	@ (8007ee0 <__sfp_lock_release+0x8>)
 8007eda:	f000 b987 	b.w	80081ec <__retarget_lock_release_recursive>
 8007ede:	bf00      	nop
 8007ee0:	20000625 	.word	0x20000625

08007ee4 <__sinit>:
 8007ee4:	b510      	push	{r4, lr}
 8007ee6:	4604      	mov	r4, r0
 8007ee8:	f7ff fff0 	bl	8007ecc <__sfp_lock_acquire>
 8007eec:	6a23      	ldr	r3, [r4, #32]
 8007eee:	b11b      	cbz	r3, 8007ef8 <__sinit+0x14>
 8007ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ef4:	f7ff bff0 	b.w	8007ed8 <__sfp_lock_release>
 8007ef8:	4b04      	ldr	r3, [pc, #16]	@ (8007f0c <__sinit+0x28>)
 8007efa:	6223      	str	r3, [r4, #32]
 8007efc:	4b04      	ldr	r3, [pc, #16]	@ (8007f10 <__sinit+0x2c>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d1f5      	bne.n	8007ef0 <__sinit+0xc>
 8007f04:	f7ff ffc4 	bl	8007e90 <global_stdio_init.part.0>
 8007f08:	e7f2      	b.n	8007ef0 <__sinit+0xc>
 8007f0a:	bf00      	nop
 8007f0c:	08007e51 	.word	0x08007e51
 8007f10:	2000061c 	.word	0x2000061c

08007f14 <_fwalk_sglue>:
 8007f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f18:	4607      	mov	r7, r0
 8007f1a:	4688      	mov	r8, r1
 8007f1c:	4614      	mov	r4, r2
 8007f1e:	2600      	movs	r6, #0
 8007f20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f24:	f1b9 0901 	subs.w	r9, r9, #1
 8007f28:	d505      	bpl.n	8007f36 <_fwalk_sglue+0x22>
 8007f2a:	6824      	ldr	r4, [r4, #0]
 8007f2c:	2c00      	cmp	r4, #0
 8007f2e:	d1f7      	bne.n	8007f20 <_fwalk_sglue+0xc>
 8007f30:	4630      	mov	r0, r6
 8007f32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f36:	89ab      	ldrh	r3, [r5, #12]
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d907      	bls.n	8007f4c <_fwalk_sglue+0x38>
 8007f3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f40:	3301      	adds	r3, #1
 8007f42:	d003      	beq.n	8007f4c <_fwalk_sglue+0x38>
 8007f44:	4629      	mov	r1, r5
 8007f46:	4638      	mov	r0, r7
 8007f48:	47c0      	blx	r8
 8007f4a:	4306      	orrs	r6, r0
 8007f4c:	3568      	adds	r5, #104	@ 0x68
 8007f4e:	e7e9      	b.n	8007f24 <_fwalk_sglue+0x10>

08007f50 <sniprintf>:
 8007f50:	b40c      	push	{r2, r3}
 8007f52:	b530      	push	{r4, r5, lr}
 8007f54:	4b17      	ldr	r3, [pc, #92]	@ (8007fb4 <sniprintf+0x64>)
 8007f56:	1e0c      	subs	r4, r1, #0
 8007f58:	681d      	ldr	r5, [r3, #0]
 8007f5a:	b09d      	sub	sp, #116	@ 0x74
 8007f5c:	da08      	bge.n	8007f70 <sniprintf+0x20>
 8007f5e:	238b      	movs	r3, #139	@ 0x8b
 8007f60:	602b      	str	r3, [r5, #0]
 8007f62:	f04f 30ff 	mov.w	r0, #4294967295
 8007f66:	b01d      	add	sp, #116	@ 0x74
 8007f68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f6c:	b002      	add	sp, #8
 8007f6e:	4770      	bx	lr
 8007f70:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007f74:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007f78:	bf14      	ite	ne
 8007f7a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007f7e:	4623      	moveq	r3, r4
 8007f80:	9304      	str	r3, [sp, #16]
 8007f82:	9307      	str	r3, [sp, #28]
 8007f84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007f88:	9002      	str	r0, [sp, #8]
 8007f8a:	9006      	str	r0, [sp, #24]
 8007f8c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007f90:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007f92:	ab21      	add	r3, sp, #132	@ 0x84
 8007f94:	a902      	add	r1, sp, #8
 8007f96:	4628      	mov	r0, r5
 8007f98:	9301      	str	r3, [sp, #4]
 8007f9a:	f000 faa3 	bl	80084e4 <_svfiprintf_r>
 8007f9e:	1c43      	adds	r3, r0, #1
 8007fa0:	bfbc      	itt	lt
 8007fa2:	238b      	movlt	r3, #139	@ 0x8b
 8007fa4:	602b      	strlt	r3, [r5, #0]
 8007fa6:	2c00      	cmp	r4, #0
 8007fa8:	d0dd      	beq.n	8007f66 <sniprintf+0x16>
 8007faa:	9b02      	ldr	r3, [sp, #8]
 8007fac:	2200      	movs	r2, #0
 8007fae:	701a      	strb	r2, [r3, #0]
 8007fb0:	e7d9      	b.n	8007f66 <sniprintf+0x16>
 8007fb2:	bf00      	nop
 8007fb4:	200000d4 	.word	0x200000d4

08007fb8 <__sread>:
 8007fb8:	b510      	push	{r4, lr}
 8007fba:	460c      	mov	r4, r1
 8007fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fc0:	f000 f8c4 	bl	800814c <_read_r>
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	bfab      	itete	ge
 8007fc8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007fca:	89a3      	ldrhlt	r3, [r4, #12]
 8007fcc:	181b      	addge	r3, r3, r0
 8007fce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007fd2:	bfac      	ite	ge
 8007fd4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007fd6:	81a3      	strhlt	r3, [r4, #12]
 8007fd8:	bd10      	pop	{r4, pc}

08007fda <__swrite>:
 8007fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fde:	461f      	mov	r7, r3
 8007fe0:	898b      	ldrh	r3, [r1, #12]
 8007fe2:	05db      	lsls	r3, r3, #23
 8007fe4:	4605      	mov	r5, r0
 8007fe6:	460c      	mov	r4, r1
 8007fe8:	4616      	mov	r6, r2
 8007fea:	d505      	bpl.n	8007ff8 <__swrite+0x1e>
 8007fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ff0:	2302      	movs	r3, #2
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f000 f898 	bl	8008128 <_lseek_r>
 8007ff8:	89a3      	ldrh	r3, [r4, #12]
 8007ffa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ffe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008002:	81a3      	strh	r3, [r4, #12]
 8008004:	4632      	mov	r2, r6
 8008006:	463b      	mov	r3, r7
 8008008:	4628      	mov	r0, r5
 800800a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800800e:	f000 b8af 	b.w	8008170 <_write_r>

08008012 <__sseek>:
 8008012:	b510      	push	{r4, lr}
 8008014:	460c      	mov	r4, r1
 8008016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800801a:	f000 f885 	bl	8008128 <_lseek_r>
 800801e:	1c43      	adds	r3, r0, #1
 8008020:	89a3      	ldrh	r3, [r4, #12]
 8008022:	bf15      	itete	ne
 8008024:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008026:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800802a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800802e:	81a3      	strheq	r3, [r4, #12]
 8008030:	bf18      	it	ne
 8008032:	81a3      	strhne	r3, [r4, #12]
 8008034:	bd10      	pop	{r4, pc}

08008036 <__sclose>:
 8008036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800803a:	f000 b865 	b.w	8008108 <_close_r>

0800803e <memset>:
 800803e:	4402      	add	r2, r0
 8008040:	4603      	mov	r3, r0
 8008042:	4293      	cmp	r3, r2
 8008044:	d100      	bne.n	8008048 <memset+0xa>
 8008046:	4770      	bx	lr
 8008048:	f803 1b01 	strb.w	r1, [r3], #1
 800804c:	e7f9      	b.n	8008042 <memset+0x4>
	...

08008050 <strtok>:
 8008050:	4b16      	ldr	r3, [pc, #88]	@ (80080ac <strtok+0x5c>)
 8008052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008056:	681f      	ldr	r7, [r3, #0]
 8008058:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800805a:	4605      	mov	r5, r0
 800805c:	460e      	mov	r6, r1
 800805e:	b9ec      	cbnz	r4, 800809c <strtok+0x4c>
 8008060:	2050      	movs	r0, #80	@ 0x50
 8008062:	f000 f92d 	bl	80082c0 <malloc>
 8008066:	4602      	mov	r2, r0
 8008068:	6478      	str	r0, [r7, #68]	@ 0x44
 800806a:	b920      	cbnz	r0, 8008076 <strtok+0x26>
 800806c:	4b10      	ldr	r3, [pc, #64]	@ (80080b0 <strtok+0x60>)
 800806e:	4811      	ldr	r0, [pc, #68]	@ (80080b4 <strtok+0x64>)
 8008070:	215b      	movs	r1, #91	@ 0x5b
 8008072:	f000 f8bd 	bl	80081f0 <__assert_func>
 8008076:	e9c0 4400 	strd	r4, r4, [r0]
 800807a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800807e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008082:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8008086:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800808a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800808e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8008092:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8008096:	6184      	str	r4, [r0, #24]
 8008098:	7704      	strb	r4, [r0, #28]
 800809a:	6244      	str	r4, [r0, #36]	@ 0x24
 800809c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800809e:	4631      	mov	r1, r6
 80080a0:	4628      	mov	r0, r5
 80080a2:	2301      	movs	r3, #1
 80080a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080a8:	f000 b806 	b.w	80080b8 <__strtok_r>
 80080ac:	200000d4 	.word	0x200000d4
 80080b0:	0800935d 	.word	0x0800935d
 80080b4:	08009374 	.word	0x08009374

080080b8 <__strtok_r>:
 80080b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080ba:	4604      	mov	r4, r0
 80080bc:	b908      	cbnz	r0, 80080c2 <__strtok_r+0xa>
 80080be:	6814      	ldr	r4, [r2, #0]
 80080c0:	b144      	cbz	r4, 80080d4 <__strtok_r+0x1c>
 80080c2:	4620      	mov	r0, r4
 80080c4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80080c8:	460f      	mov	r7, r1
 80080ca:	f817 6b01 	ldrb.w	r6, [r7], #1
 80080ce:	b91e      	cbnz	r6, 80080d8 <__strtok_r+0x20>
 80080d0:	b965      	cbnz	r5, 80080ec <__strtok_r+0x34>
 80080d2:	6015      	str	r5, [r2, #0]
 80080d4:	2000      	movs	r0, #0
 80080d6:	e005      	b.n	80080e4 <__strtok_r+0x2c>
 80080d8:	42b5      	cmp	r5, r6
 80080da:	d1f6      	bne.n	80080ca <__strtok_r+0x12>
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d1f0      	bne.n	80080c2 <__strtok_r+0xa>
 80080e0:	6014      	str	r4, [r2, #0]
 80080e2:	7003      	strb	r3, [r0, #0]
 80080e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080e6:	461c      	mov	r4, r3
 80080e8:	e00c      	b.n	8008104 <__strtok_r+0x4c>
 80080ea:	b915      	cbnz	r5, 80080f2 <__strtok_r+0x3a>
 80080ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 80080f0:	460e      	mov	r6, r1
 80080f2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80080f6:	42ab      	cmp	r3, r5
 80080f8:	d1f7      	bne.n	80080ea <__strtok_r+0x32>
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d0f3      	beq.n	80080e6 <__strtok_r+0x2e>
 80080fe:	2300      	movs	r3, #0
 8008100:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008104:	6014      	str	r4, [r2, #0]
 8008106:	e7ed      	b.n	80080e4 <__strtok_r+0x2c>

08008108 <_close_r>:
 8008108:	b538      	push	{r3, r4, r5, lr}
 800810a:	4d06      	ldr	r5, [pc, #24]	@ (8008124 <_close_r+0x1c>)
 800810c:	2300      	movs	r3, #0
 800810e:	4604      	mov	r4, r0
 8008110:	4608      	mov	r0, r1
 8008112:	602b      	str	r3, [r5, #0]
 8008114:	f7f8 fe9c 	bl	8000e50 <_close>
 8008118:	1c43      	adds	r3, r0, #1
 800811a:	d102      	bne.n	8008122 <_close_r+0x1a>
 800811c:	682b      	ldr	r3, [r5, #0]
 800811e:	b103      	cbz	r3, 8008122 <_close_r+0x1a>
 8008120:	6023      	str	r3, [r4, #0]
 8008122:	bd38      	pop	{r3, r4, r5, pc}
 8008124:	20000620 	.word	0x20000620

08008128 <_lseek_r>:
 8008128:	b538      	push	{r3, r4, r5, lr}
 800812a:	4d07      	ldr	r5, [pc, #28]	@ (8008148 <_lseek_r+0x20>)
 800812c:	4604      	mov	r4, r0
 800812e:	4608      	mov	r0, r1
 8008130:	4611      	mov	r1, r2
 8008132:	2200      	movs	r2, #0
 8008134:	602a      	str	r2, [r5, #0]
 8008136:	461a      	mov	r2, r3
 8008138:	f7f8 feb1 	bl	8000e9e <_lseek>
 800813c:	1c43      	adds	r3, r0, #1
 800813e:	d102      	bne.n	8008146 <_lseek_r+0x1e>
 8008140:	682b      	ldr	r3, [r5, #0]
 8008142:	b103      	cbz	r3, 8008146 <_lseek_r+0x1e>
 8008144:	6023      	str	r3, [r4, #0]
 8008146:	bd38      	pop	{r3, r4, r5, pc}
 8008148:	20000620 	.word	0x20000620

0800814c <_read_r>:
 800814c:	b538      	push	{r3, r4, r5, lr}
 800814e:	4d07      	ldr	r5, [pc, #28]	@ (800816c <_read_r+0x20>)
 8008150:	4604      	mov	r4, r0
 8008152:	4608      	mov	r0, r1
 8008154:	4611      	mov	r1, r2
 8008156:	2200      	movs	r2, #0
 8008158:	602a      	str	r2, [r5, #0]
 800815a:	461a      	mov	r2, r3
 800815c:	f7f8 fe3f 	bl	8000dde <_read>
 8008160:	1c43      	adds	r3, r0, #1
 8008162:	d102      	bne.n	800816a <_read_r+0x1e>
 8008164:	682b      	ldr	r3, [r5, #0]
 8008166:	b103      	cbz	r3, 800816a <_read_r+0x1e>
 8008168:	6023      	str	r3, [r4, #0]
 800816a:	bd38      	pop	{r3, r4, r5, pc}
 800816c:	20000620 	.word	0x20000620

08008170 <_write_r>:
 8008170:	b538      	push	{r3, r4, r5, lr}
 8008172:	4d07      	ldr	r5, [pc, #28]	@ (8008190 <_write_r+0x20>)
 8008174:	4604      	mov	r4, r0
 8008176:	4608      	mov	r0, r1
 8008178:	4611      	mov	r1, r2
 800817a:	2200      	movs	r2, #0
 800817c:	602a      	str	r2, [r5, #0]
 800817e:	461a      	mov	r2, r3
 8008180:	f7f8 fe4a 	bl	8000e18 <_write>
 8008184:	1c43      	adds	r3, r0, #1
 8008186:	d102      	bne.n	800818e <_write_r+0x1e>
 8008188:	682b      	ldr	r3, [r5, #0]
 800818a:	b103      	cbz	r3, 800818e <_write_r+0x1e>
 800818c:	6023      	str	r3, [r4, #0]
 800818e:	bd38      	pop	{r3, r4, r5, pc}
 8008190:	20000620 	.word	0x20000620

08008194 <__errno>:
 8008194:	4b01      	ldr	r3, [pc, #4]	@ (800819c <__errno+0x8>)
 8008196:	6818      	ldr	r0, [r3, #0]
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	200000d4 	.word	0x200000d4

080081a0 <__libc_init_array>:
 80081a0:	b570      	push	{r4, r5, r6, lr}
 80081a2:	4d0d      	ldr	r5, [pc, #52]	@ (80081d8 <__libc_init_array+0x38>)
 80081a4:	4c0d      	ldr	r4, [pc, #52]	@ (80081dc <__libc_init_array+0x3c>)
 80081a6:	1b64      	subs	r4, r4, r5
 80081a8:	10a4      	asrs	r4, r4, #2
 80081aa:	2600      	movs	r6, #0
 80081ac:	42a6      	cmp	r6, r4
 80081ae:	d109      	bne.n	80081c4 <__libc_init_array+0x24>
 80081b0:	4d0b      	ldr	r5, [pc, #44]	@ (80081e0 <__libc_init_array+0x40>)
 80081b2:	4c0c      	ldr	r4, [pc, #48]	@ (80081e4 <__libc_init_array+0x44>)
 80081b4:	f000 fff0 	bl	8009198 <_init>
 80081b8:	1b64      	subs	r4, r4, r5
 80081ba:	10a4      	asrs	r4, r4, #2
 80081bc:	2600      	movs	r6, #0
 80081be:	42a6      	cmp	r6, r4
 80081c0:	d105      	bne.n	80081ce <__libc_init_array+0x2e>
 80081c2:	bd70      	pop	{r4, r5, r6, pc}
 80081c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80081c8:	4798      	blx	r3
 80081ca:	3601      	adds	r6, #1
 80081cc:	e7ee      	b.n	80081ac <__libc_init_array+0xc>
 80081ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80081d2:	4798      	blx	r3
 80081d4:	3601      	adds	r6, #1
 80081d6:	e7f2      	b.n	80081be <__libc_init_array+0x1e>
 80081d8:	08009448 	.word	0x08009448
 80081dc:	08009448 	.word	0x08009448
 80081e0:	08009448 	.word	0x08009448
 80081e4:	0800944c 	.word	0x0800944c

080081e8 <__retarget_lock_init_recursive>:
 80081e8:	4770      	bx	lr

080081ea <__retarget_lock_acquire_recursive>:
 80081ea:	4770      	bx	lr

080081ec <__retarget_lock_release_recursive>:
 80081ec:	4770      	bx	lr
	...

080081f0 <__assert_func>:
 80081f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80081f2:	4614      	mov	r4, r2
 80081f4:	461a      	mov	r2, r3
 80081f6:	4b09      	ldr	r3, [pc, #36]	@ (800821c <__assert_func+0x2c>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4605      	mov	r5, r0
 80081fc:	68d8      	ldr	r0, [r3, #12]
 80081fe:	b954      	cbnz	r4, 8008216 <__assert_func+0x26>
 8008200:	4b07      	ldr	r3, [pc, #28]	@ (8008220 <__assert_func+0x30>)
 8008202:	461c      	mov	r4, r3
 8008204:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008208:	9100      	str	r1, [sp, #0]
 800820a:	462b      	mov	r3, r5
 800820c:	4905      	ldr	r1, [pc, #20]	@ (8008224 <__assert_func+0x34>)
 800820e:	f000 fc9f 	bl	8008b50 <fiprintf>
 8008212:	f000 fce7 	bl	8008be4 <abort>
 8008216:	4b04      	ldr	r3, [pc, #16]	@ (8008228 <__assert_func+0x38>)
 8008218:	e7f4      	b.n	8008204 <__assert_func+0x14>
 800821a:	bf00      	nop
 800821c:	200000d4 	.word	0x200000d4
 8008220:	08009409 	.word	0x08009409
 8008224:	080093db 	.word	0x080093db
 8008228:	080093ce 	.word	0x080093ce

0800822c <_free_r>:
 800822c:	b538      	push	{r3, r4, r5, lr}
 800822e:	4605      	mov	r5, r0
 8008230:	2900      	cmp	r1, #0
 8008232:	d041      	beq.n	80082b8 <_free_r+0x8c>
 8008234:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008238:	1f0c      	subs	r4, r1, #4
 800823a:	2b00      	cmp	r3, #0
 800823c:	bfb8      	it	lt
 800823e:	18e4      	addlt	r4, r4, r3
 8008240:	f000 f8e8 	bl	8008414 <__malloc_lock>
 8008244:	4a1d      	ldr	r2, [pc, #116]	@ (80082bc <_free_r+0x90>)
 8008246:	6813      	ldr	r3, [r2, #0]
 8008248:	b933      	cbnz	r3, 8008258 <_free_r+0x2c>
 800824a:	6063      	str	r3, [r4, #4]
 800824c:	6014      	str	r4, [r2, #0]
 800824e:	4628      	mov	r0, r5
 8008250:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008254:	f000 b8e4 	b.w	8008420 <__malloc_unlock>
 8008258:	42a3      	cmp	r3, r4
 800825a:	d908      	bls.n	800826e <_free_r+0x42>
 800825c:	6820      	ldr	r0, [r4, #0]
 800825e:	1821      	adds	r1, r4, r0
 8008260:	428b      	cmp	r3, r1
 8008262:	bf01      	itttt	eq
 8008264:	6819      	ldreq	r1, [r3, #0]
 8008266:	685b      	ldreq	r3, [r3, #4]
 8008268:	1809      	addeq	r1, r1, r0
 800826a:	6021      	streq	r1, [r4, #0]
 800826c:	e7ed      	b.n	800824a <_free_r+0x1e>
 800826e:	461a      	mov	r2, r3
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	b10b      	cbz	r3, 8008278 <_free_r+0x4c>
 8008274:	42a3      	cmp	r3, r4
 8008276:	d9fa      	bls.n	800826e <_free_r+0x42>
 8008278:	6811      	ldr	r1, [r2, #0]
 800827a:	1850      	adds	r0, r2, r1
 800827c:	42a0      	cmp	r0, r4
 800827e:	d10b      	bne.n	8008298 <_free_r+0x6c>
 8008280:	6820      	ldr	r0, [r4, #0]
 8008282:	4401      	add	r1, r0
 8008284:	1850      	adds	r0, r2, r1
 8008286:	4283      	cmp	r3, r0
 8008288:	6011      	str	r1, [r2, #0]
 800828a:	d1e0      	bne.n	800824e <_free_r+0x22>
 800828c:	6818      	ldr	r0, [r3, #0]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	6053      	str	r3, [r2, #4]
 8008292:	4408      	add	r0, r1
 8008294:	6010      	str	r0, [r2, #0]
 8008296:	e7da      	b.n	800824e <_free_r+0x22>
 8008298:	d902      	bls.n	80082a0 <_free_r+0x74>
 800829a:	230c      	movs	r3, #12
 800829c:	602b      	str	r3, [r5, #0]
 800829e:	e7d6      	b.n	800824e <_free_r+0x22>
 80082a0:	6820      	ldr	r0, [r4, #0]
 80082a2:	1821      	adds	r1, r4, r0
 80082a4:	428b      	cmp	r3, r1
 80082a6:	bf04      	itt	eq
 80082a8:	6819      	ldreq	r1, [r3, #0]
 80082aa:	685b      	ldreq	r3, [r3, #4]
 80082ac:	6063      	str	r3, [r4, #4]
 80082ae:	bf04      	itt	eq
 80082b0:	1809      	addeq	r1, r1, r0
 80082b2:	6021      	streq	r1, [r4, #0]
 80082b4:	6054      	str	r4, [r2, #4]
 80082b6:	e7ca      	b.n	800824e <_free_r+0x22>
 80082b8:	bd38      	pop	{r3, r4, r5, pc}
 80082ba:	bf00      	nop
 80082bc:	2000062c 	.word	0x2000062c

080082c0 <malloc>:
 80082c0:	4b02      	ldr	r3, [pc, #8]	@ (80082cc <malloc+0xc>)
 80082c2:	4601      	mov	r1, r0
 80082c4:	6818      	ldr	r0, [r3, #0]
 80082c6:	f000 b825 	b.w	8008314 <_malloc_r>
 80082ca:	bf00      	nop
 80082cc:	200000d4 	.word	0x200000d4

080082d0 <sbrk_aligned>:
 80082d0:	b570      	push	{r4, r5, r6, lr}
 80082d2:	4e0f      	ldr	r6, [pc, #60]	@ (8008310 <sbrk_aligned+0x40>)
 80082d4:	460c      	mov	r4, r1
 80082d6:	6831      	ldr	r1, [r6, #0]
 80082d8:	4605      	mov	r5, r0
 80082da:	b911      	cbnz	r1, 80082e2 <sbrk_aligned+0x12>
 80082dc:	f000 fc64 	bl	8008ba8 <_sbrk_r>
 80082e0:	6030      	str	r0, [r6, #0]
 80082e2:	4621      	mov	r1, r4
 80082e4:	4628      	mov	r0, r5
 80082e6:	f000 fc5f 	bl	8008ba8 <_sbrk_r>
 80082ea:	1c43      	adds	r3, r0, #1
 80082ec:	d103      	bne.n	80082f6 <sbrk_aligned+0x26>
 80082ee:	f04f 34ff 	mov.w	r4, #4294967295
 80082f2:	4620      	mov	r0, r4
 80082f4:	bd70      	pop	{r4, r5, r6, pc}
 80082f6:	1cc4      	adds	r4, r0, #3
 80082f8:	f024 0403 	bic.w	r4, r4, #3
 80082fc:	42a0      	cmp	r0, r4
 80082fe:	d0f8      	beq.n	80082f2 <sbrk_aligned+0x22>
 8008300:	1a21      	subs	r1, r4, r0
 8008302:	4628      	mov	r0, r5
 8008304:	f000 fc50 	bl	8008ba8 <_sbrk_r>
 8008308:	3001      	adds	r0, #1
 800830a:	d1f2      	bne.n	80082f2 <sbrk_aligned+0x22>
 800830c:	e7ef      	b.n	80082ee <sbrk_aligned+0x1e>
 800830e:	bf00      	nop
 8008310:	20000628 	.word	0x20000628

08008314 <_malloc_r>:
 8008314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008318:	1ccd      	adds	r5, r1, #3
 800831a:	f025 0503 	bic.w	r5, r5, #3
 800831e:	3508      	adds	r5, #8
 8008320:	2d0c      	cmp	r5, #12
 8008322:	bf38      	it	cc
 8008324:	250c      	movcc	r5, #12
 8008326:	2d00      	cmp	r5, #0
 8008328:	4606      	mov	r6, r0
 800832a:	db01      	blt.n	8008330 <_malloc_r+0x1c>
 800832c:	42a9      	cmp	r1, r5
 800832e:	d904      	bls.n	800833a <_malloc_r+0x26>
 8008330:	230c      	movs	r3, #12
 8008332:	6033      	str	r3, [r6, #0]
 8008334:	2000      	movs	r0, #0
 8008336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800833a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008410 <_malloc_r+0xfc>
 800833e:	f000 f869 	bl	8008414 <__malloc_lock>
 8008342:	f8d8 3000 	ldr.w	r3, [r8]
 8008346:	461c      	mov	r4, r3
 8008348:	bb44      	cbnz	r4, 800839c <_malloc_r+0x88>
 800834a:	4629      	mov	r1, r5
 800834c:	4630      	mov	r0, r6
 800834e:	f7ff ffbf 	bl	80082d0 <sbrk_aligned>
 8008352:	1c43      	adds	r3, r0, #1
 8008354:	4604      	mov	r4, r0
 8008356:	d158      	bne.n	800840a <_malloc_r+0xf6>
 8008358:	f8d8 4000 	ldr.w	r4, [r8]
 800835c:	4627      	mov	r7, r4
 800835e:	2f00      	cmp	r7, #0
 8008360:	d143      	bne.n	80083ea <_malloc_r+0xd6>
 8008362:	2c00      	cmp	r4, #0
 8008364:	d04b      	beq.n	80083fe <_malloc_r+0xea>
 8008366:	6823      	ldr	r3, [r4, #0]
 8008368:	4639      	mov	r1, r7
 800836a:	4630      	mov	r0, r6
 800836c:	eb04 0903 	add.w	r9, r4, r3
 8008370:	f000 fc1a 	bl	8008ba8 <_sbrk_r>
 8008374:	4581      	cmp	r9, r0
 8008376:	d142      	bne.n	80083fe <_malloc_r+0xea>
 8008378:	6821      	ldr	r1, [r4, #0]
 800837a:	1a6d      	subs	r5, r5, r1
 800837c:	4629      	mov	r1, r5
 800837e:	4630      	mov	r0, r6
 8008380:	f7ff ffa6 	bl	80082d0 <sbrk_aligned>
 8008384:	3001      	adds	r0, #1
 8008386:	d03a      	beq.n	80083fe <_malloc_r+0xea>
 8008388:	6823      	ldr	r3, [r4, #0]
 800838a:	442b      	add	r3, r5
 800838c:	6023      	str	r3, [r4, #0]
 800838e:	f8d8 3000 	ldr.w	r3, [r8]
 8008392:	685a      	ldr	r2, [r3, #4]
 8008394:	bb62      	cbnz	r2, 80083f0 <_malloc_r+0xdc>
 8008396:	f8c8 7000 	str.w	r7, [r8]
 800839a:	e00f      	b.n	80083bc <_malloc_r+0xa8>
 800839c:	6822      	ldr	r2, [r4, #0]
 800839e:	1b52      	subs	r2, r2, r5
 80083a0:	d420      	bmi.n	80083e4 <_malloc_r+0xd0>
 80083a2:	2a0b      	cmp	r2, #11
 80083a4:	d917      	bls.n	80083d6 <_malloc_r+0xc2>
 80083a6:	1961      	adds	r1, r4, r5
 80083a8:	42a3      	cmp	r3, r4
 80083aa:	6025      	str	r5, [r4, #0]
 80083ac:	bf18      	it	ne
 80083ae:	6059      	strne	r1, [r3, #4]
 80083b0:	6863      	ldr	r3, [r4, #4]
 80083b2:	bf08      	it	eq
 80083b4:	f8c8 1000 	streq.w	r1, [r8]
 80083b8:	5162      	str	r2, [r4, r5]
 80083ba:	604b      	str	r3, [r1, #4]
 80083bc:	4630      	mov	r0, r6
 80083be:	f000 f82f 	bl	8008420 <__malloc_unlock>
 80083c2:	f104 000b 	add.w	r0, r4, #11
 80083c6:	1d23      	adds	r3, r4, #4
 80083c8:	f020 0007 	bic.w	r0, r0, #7
 80083cc:	1ac2      	subs	r2, r0, r3
 80083ce:	bf1c      	itt	ne
 80083d0:	1a1b      	subne	r3, r3, r0
 80083d2:	50a3      	strne	r3, [r4, r2]
 80083d4:	e7af      	b.n	8008336 <_malloc_r+0x22>
 80083d6:	6862      	ldr	r2, [r4, #4]
 80083d8:	42a3      	cmp	r3, r4
 80083da:	bf0c      	ite	eq
 80083dc:	f8c8 2000 	streq.w	r2, [r8]
 80083e0:	605a      	strne	r2, [r3, #4]
 80083e2:	e7eb      	b.n	80083bc <_malloc_r+0xa8>
 80083e4:	4623      	mov	r3, r4
 80083e6:	6864      	ldr	r4, [r4, #4]
 80083e8:	e7ae      	b.n	8008348 <_malloc_r+0x34>
 80083ea:	463c      	mov	r4, r7
 80083ec:	687f      	ldr	r7, [r7, #4]
 80083ee:	e7b6      	b.n	800835e <_malloc_r+0x4a>
 80083f0:	461a      	mov	r2, r3
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	42a3      	cmp	r3, r4
 80083f6:	d1fb      	bne.n	80083f0 <_malloc_r+0xdc>
 80083f8:	2300      	movs	r3, #0
 80083fa:	6053      	str	r3, [r2, #4]
 80083fc:	e7de      	b.n	80083bc <_malloc_r+0xa8>
 80083fe:	230c      	movs	r3, #12
 8008400:	6033      	str	r3, [r6, #0]
 8008402:	4630      	mov	r0, r6
 8008404:	f000 f80c 	bl	8008420 <__malloc_unlock>
 8008408:	e794      	b.n	8008334 <_malloc_r+0x20>
 800840a:	6005      	str	r5, [r0, #0]
 800840c:	e7d6      	b.n	80083bc <_malloc_r+0xa8>
 800840e:	bf00      	nop
 8008410:	2000062c 	.word	0x2000062c

08008414 <__malloc_lock>:
 8008414:	4801      	ldr	r0, [pc, #4]	@ (800841c <__malloc_lock+0x8>)
 8008416:	f7ff bee8 	b.w	80081ea <__retarget_lock_acquire_recursive>
 800841a:	bf00      	nop
 800841c:	20000624 	.word	0x20000624

08008420 <__malloc_unlock>:
 8008420:	4801      	ldr	r0, [pc, #4]	@ (8008428 <__malloc_unlock+0x8>)
 8008422:	f7ff bee3 	b.w	80081ec <__retarget_lock_release_recursive>
 8008426:	bf00      	nop
 8008428:	20000624 	.word	0x20000624

0800842c <__ssputs_r>:
 800842c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008430:	688e      	ldr	r6, [r1, #8]
 8008432:	461f      	mov	r7, r3
 8008434:	42be      	cmp	r6, r7
 8008436:	680b      	ldr	r3, [r1, #0]
 8008438:	4682      	mov	sl, r0
 800843a:	460c      	mov	r4, r1
 800843c:	4690      	mov	r8, r2
 800843e:	d82d      	bhi.n	800849c <__ssputs_r+0x70>
 8008440:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008444:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008448:	d026      	beq.n	8008498 <__ssputs_r+0x6c>
 800844a:	6965      	ldr	r5, [r4, #20]
 800844c:	6909      	ldr	r1, [r1, #16]
 800844e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008452:	eba3 0901 	sub.w	r9, r3, r1
 8008456:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800845a:	1c7b      	adds	r3, r7, #1
 800845c:	444b      	add	r3, r9
 800845e:	106d      	asrs	r5, r5, #1
 8008460:	429d      	cmp	r5, r3
 8008462:	bf38      	it	cc
 8008464:	461d      	movcc	r5, r3
 8008466:	0553      	lsls	r3, r2, #21
 8008468:	d527      	bpl.n	80084ba <__ssputs_r+0x8e>
 800846a:	4629      	mov	r1, r5
 800846c:	f7ff ff52 	bl	8008314 <_malloc_r>
 8008470:	4606      	mov	r6, r0
 8008472:	b360      	cbz	r0, 80084ce <__ssputs_r+0xa2>
 8008474:	6921      	ldr	r1, [r4, #16]
 8008476:	464a      	mov	r2, r9
 8008478:	f000 fba6 	bl	8008bc8 <memcpy>
 800847c:	89a3      	ldrh	r3, [r4, #12]
 800847e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008482:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008486:	81a3      	strh	r3, [r4, #12]
 8008488:	6126      	str	r6, [r4, #16]
 800848a:	6165      	str	r5, [r4, #20]
 800848c:	444e      	add	r6, r9
 800848e:	eba5 0509 	sub.w	r5, r5, r9
 8008492:	6026      	str	r6, [r4, #0]
 8008494:	60a5      	str	r5, [r4, #8]
 8008496:	463e      	mov	r6, r7
 8008498:	42be      	cmp	r6, r7
 800849a:	d900      	bls.n	800849e <__ssputs_r+0x72>
 800849c:	463e      	mov	r6, r7
 800849e:	6820      	ldr	r0, [r4, #0]
 80084a0:	4632      	mov	r2, r6
 80084a2:	4641      	mov	r1, r8
 80084a4:	f000 fb66 	bl	8008b74 <memmove>
 80084a8:	68a3      	ldr	r3, [r4, #8]
 80084aa:	1b9b      	subs	r3, r3, r6
 80084ac:	60a3      	str	r3, [r4, #8]
 80084ae:	6823      	ldr	r3, [r4, #0]
 80084b0:	4433      	add	r3, r6
 80084b2:	6023      	str	r3, [r4, #0]
 80084b4:	2000      	movs	r0, #0
 80084b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ba:	462a      	mov	r2, r5
 80084bc:	f000 fb99 	bl	8008bf2 <_realloc_r>
 80084c0:	4606      	mov	r6, r0
 80084c2:	2800      	cmp	r0, #0
 80084c4:	d1e0      	bne.n	8008488 <__ssputs_r+0x5c>
 80084c6:	6921      	ldr	r1, [r4, #16]
 80084c8:	4650      	mov	r0, sl
 80084ca:	f7ff feaf 	bl	800822c <_free_r>
 80084ce:	230c      	movs	r3, #12
 80084d0:	f8ca 3000 	str.w	r3, [sl]
 80084d4:	89a3      	ldrh	r3, [r4, #12]
 80084d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084da:	81a3      	strh	r3, [r4, #12]
 80084dc:	f04f 30ff 	mov.w	r0, #4294967295
 80084e0:	e7e9      	b.n	80084b6 <__ssputs_r+0x8a>
	...

080084e4 <_svfiprintf_r>:
 80084e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e8:	4698      	mov	r8, r3
 80084ea:	898b      	ldrh	r3, [r1, #12]
 80084ec:	061b      	lsls	r3, r3, #24
 80084ee:	b09d      	sub	sp, #116	@ 0x74
 80084f0:	4607      	mov	r7, r0
 80084f2:	460d      	mov	r5, r1
 80084f4:	4614      	mov	r4, r2
 80084f6:	d510      	bpl.n	800851a <_svfiprintf_r+0x36>
 80084f8:	690b      	ldr	r3, [r1, #16]
 80084fa:	b973      	cbnz	r3, 800851a <_svfiprintf_r+0x36>
 80084fc:	2140      	movs	r1, #64	@ 0x40
 80084fe:	f7ff ff09 	bl	8008314 <_malloc_r>
 8008502:	6028      	str	r0, [r5, #0]
 8008504:	6128      	str	r0, [r5, #16]
 8008506:	b930      	cbnz	r0, 8008516 <_svfiprintf_r+0x32>
 8008508:	230c      	movs	r3, #12
 800850a:	603b      	str	r3, [r7, #0]
 800850c:	f04f 30ff 	mov.w	r0, #4294967295
 8008510:	b01d      	add	sp, #116	@ 0x74
 8008512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008516:	2340      	movs	r3, #64	@ 0x40
 8008518:	616b      	str	r3, [r5, #20]
 800851a:	2300      	movs	r3, #0
 800851c:	9309      	str	r3, [sp, #36]	@ 0x24
 800851e:	2320      	movs	r3, #32
 8008520:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008524:	f8cd 800c 	str.w	r8, [sp, #12]
 8008528:	2330      	movs	r3, #48	@ 0x30
 800852a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80086c8 <_svfiprintf_r+0x1e4>
 800852e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008532:	f04f 0901 	mov.w	r9, #1
 8008536:	4623      	mov	r3, r4
 8008538:	469a      	mov	sl, r3
 800853a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800853e:	b10a      	cbz	r2, 8008544 <_svfiprintf_r+0x60>
 8008540:	2a25      	cmp	r2, #37	@ 0x25
 8008542:	d1f9      	bne.n	8008538 <_svfiprintf_r+0x54>
 8008544:	ebba 0b04 	subs.w	fp, sl, r4
 8008548:	d00b      	beq.n	8008562 <_svfiprintf_r+0x7e>
 800854a:	465b      	mov	r3, fp
 800854c:	4622      	mov	r2, r4
 800854e:	4629      	mov	r1, r5
 8008550:	4638      	mov	r0, r7
 8008552:	f7ff ff6b 	bl	800842c <__ssputs_r>
 8008556:	3001      	adds	r0, #1
 8008558:	f000 80a7 	beq.w	80086aa <_svfiprintf_r+0x1c6>
 800855c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800855e:	445a      	add	r2, fp
 8008560:	9209      	str	r2, [sp, #36]	@ 0x24
 8008562:	f89a 3000 	ldrb.w	r3, [sl]
 8008566:	2b00      	cmp	r3, #0
 8008568:	f000 809f 	beq.w	80086aa <_svfiprintf_r+0x1c6>
 800856c:	2300      	movs	r3, #0
 800856e:	f04f 32ff 	mov.w	r2, #4294967295
 8008572:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008576:	f10a 0a01 	add.w	sl, sl, #1
 800857a:	9304      	str	r3, [sp, #16]
 800857c:	9307      	str	r3, [sp, #28]
 800857e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008582:	931a      	str	r3, [sp, #104]	@ 0x68
 8008584:	4654      	mov	r4, sl
 8008586:	2205      	movs	r2, #5
 8008588:	f814 1b01 	ldrb.w	r1, [r4], #1
 800858c:	484e      	ldr	r0, [pc, #312]	@ (80086c8 <_svfiprintf_r+0x1e4>)
 800858e:	f7f7 fe5f 	bl	8000250 <memchr>
 8008592:	9a04      	ldr	r2, [sp, #16]
 8008594:	b9d8      	cbnz	r0, 80085ce <_svfiprintf_r+0xea>
 8008596:	06d0      	lsls	r0, r2, #27
 8008598:	bf44      	itt	mi
 800859a:	2320      	movmi	r3, #32
 800859c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085a0:	0711      	lsls	r1, r2, #28
 80085a2:	bf44      	itt	mi
 80085a4:	232b      	movmi	r3, #43	@ 0x2b
 80085a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085aa:	f89a 3000 	ldrb.w	r3, [sl]
 80085ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80085b0:	d015      	beq.n	80085de <_svfiprintf_r+0xfa>
 80085b2:	9a07      	ldr	r2, [sp, #28]
 80085b4:	4654      	mov	r4, sl
 80085b6:	2000      	movs	r0, #0
 80085b8:	f04f 0c0a 	mov.w	ip, #10
 80085bc:	4621      	mov	r1, r4
 80085be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085c2:	3b30      	subs	r3, #48	@ 0x30
 80085c4:	2b09      	cmp	r3, #9
 80085c6:	d94b      	bls.n	8008660 <_svfiprintf_r+0x17c>
 80085c8:	b1b0      	cbz	r0, 80085f8 <_svfiprintf_r+0x114>
 80085ca:	9207      	str	r2, [sp, #28]
 80085cc:	e014      	b.n	80085f8 <_svfiprintf_r+0x114>
 80085ce:	eba0 0308 	sub.w	r3, r0, r8
 80085d2:	fa09 f303 	lsl.w	r3, r9, r3
 80085d6:	4313      	orrs	r3, r2
 80085d8:	9304      	str	r3, [sp, #16]
 80085da:	46a2      	mov	sl, r4
 80085dc:	e7d2      	b.n	8008584 <_svfiprintf_r+0xa0>
 80085de:	9b03      	ldr	r3, [sp, #12]
 80085e0:	1d19      	adds	r1, r3, #4
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	9103      	str	r1, [sp, #12]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	bfbb      	ittet	lt
 80085ea:	425b      	neglt	r3, r3
 80085ec:	f042 0202 	orrlt.w	r2, r2, #2
 80085f0:	9307      	strge	r3, [sp, #28]
 80085f2:	9307      	strlt	r3, [sp, #28]
 80085f4:	bfb8      	it	lt
 80085f6:	9204      	strlt	r2, [sp, #16]
 80085f8:	7823      	ldrb	r3, [r4, #0]
 80085fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80085fc:	d10a      	bne.n	8008614 <_svfiprintf_r+0x130>
 80085fe:	7863      	ldrb	r3, [r4, #1]
 8008600:	2b2a      	cmp	r3, #42	@ 0x2a
 8008602:	d132      	bne.n	800866a <_svfiprintf_r+0x186>
 8008604:	9b03      	ldr	r3, [sp, #12]
 8008606:	1d1a      	adds	r2, r3, #4
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	9203      	str	r2, [sp, #12]
 800860c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008610:	3402      	adds	r4, #2
 8008612:	9305      	str	r3, [sp, #20]
 8008614:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80086d8 <_svfiprintf_r+0x1f4>
 8008618:	7821      	ldrb	r1, [r4, #0]
 800861a:	2203      	movs	r2, #3
 800861c:	4650      	mov	r0, sl
 800861e:	f7f7 fe17 	bl	8000250 <memchr>
 8008622:	b138      	cbz	r0, 8008634 <_svfiprintf_r+0x150>
 8008624:	9b04      	ldr	r3, [sp, #16]
 8008626:	eba0 000a 	sub.w	r0, r0, sl
 800862a:	2240      	movs	r2, #64	@ 0x40
 800862c:	4082      	lsls	r2, r0
 800862e:	4313      	orrs	r3, r2
 8008630:	3401      	adds	r4, #1
 8008632:	9304      	str	r3, [sp, #16]
 8008634:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008638:	4824      	ldr	r0, [pc, #144]	@ (80086cc <_svfiprintf_r+0x1e8>)
 800863a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800863e:	2206      	movs	r2, #6
 8008640:	f7f7 fe06 	bl	8000250 <memchr>
 8008644:	2800      	cmp	r0, #0
 8008646:	d036      	beq.n	80086b6 <_svfiprintf_r+0x1d2>
 8008648:	4b21      	ldr	r3, [pc, #132]	@ (80086d0 <_svfiprintf_r+0x1ec>)
 800864a:	bb1b      	cbnz	r3, 8008694 <_svfiprintf_r+0x1b0>
 800864c:	9b03      	ldr	r3, [sp, #12]
 800864e:	3307      	adds	r3, #7
 8008650:	f023 0307 	bic.w	r3, r3, #7
 8008654:	3308      	adds	r3, #8
 8008656:	9303      	str	r3, [sp, #12]
 8008658:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800865a:	4433      	add	r3, r6
 800865c:	9309      	str	r3, [sp, #36]	@ 0x24
 800865e:	e76a      	b.n	8008536 <_svfiprintf_r+0x52>
 8008660:	fb0c 3202 	mla	r2, ip, r2, r3
 8008664:	460c      	mov	r4, r1
 8008666:	2001      	movs	r0, #1
 8008668:	e7a8      	b.n	80085bc <_svfiprintf_r+0xd8>
 800866a:	2300      	movs	r3, #0
 800866c:	3401      	adds	r4, #1
 800866e:	9305      	str	r3, [sp, #20]
 8008670:	4619      	mov	r1, r3
 8008672:	f04f 0c0a 	mov.w	ip, #10
 8008676:	4620      	mov	r0, r4
 8008678:	f810 2b01 	ldrb.w	r2, [r0], #1
 800867c:	3a30      	subs	r2, #48	@ 0x30
 800867e:	2a09      	cmp	r2, #9
 8008680:	d903      	bls.n	800868a <_svfiprintf_r+0x1a6>
 8008682:	2b00      	cmp	r3, #0
 8008684:	d0c6      	beq.n	8008614 <_svfiprintf_r+0x130>
 8008686:	9105      	str	r1, [sp, #20]
 8008688:	e7c4      	b.n	8008614 <_svfiprintf_r+0x130>
 800868a:	fb0c 2101 	mla	r1, ip, r1, r2
 800868e:	4604      	mov	r4, r0
 8008690:	2301      	movs	r3, #1
 8008692:	e7f0      	b.n	8008676 <_svfiprintf_r+0x192>
 8008694:	ab03      	add	r3, sp, #12
 8008696:	9300      	str	r3, [sp, #0]
 8008698:	462a      	mov	r2, r5
 800869a:	4b0e      	ldr	r3, [pc, #56]	@ (80086d4 <_svfiprintf_r+0x1f0>)
 800869c:	a904      	add	r1, sp, #16
 800869e:	4638      	mov	r0, r7
 80086a0:	f3af 8000 	nop.w
 80086a4:	1c42      	adds	r2, r0, #1
 80086a6:	4606      	mov	r6, r0
 80086a8:	d1d6      	bne.n	8008658 <_svfiprintf_r+0x174>
 80086aa:	89ab      	ldrh	r3, [r5, #12]
 80086ac:	065b      	lsls	r3, r3, #25
 80086ae:	f53f af2d 	bmi.w	800850c <_svfiprintf_r+0x28>
 80086b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80086b4:	e72c      	b.n	8008510 <_svfiprintf_r+0x2c>
 80086b6:	ab03      	add	r3, sp, #12
 80086b8:	9300      	str	r3, [sp, #0]
 80086ba:	462a      	mov	r2, r5
 80086bc:	4b05      	ldr	r3, [pc, #20]	@ (80086d4 <_svfiprintf_r+0x1f0>)
 80086be:	a904      	add	r1, sp, #16
 80086c0:	4638      	mov	r0, r7
 80086c2:	f000 f879 	bl	80087b8 <_printf_i>
 80086c6:	e7ed      	b.n	80086a4 <_svfiprintf_r+0x1c0>
 80086c8:	0800940a 	.word	0x0800940a
 80086cc:	08009414 	.word	0x08009414
 80086d0:	00000000 	.word	0x00000000
 80086d4:	0800842d 	.word	0x0800842d
 80086d8:	08009410 	.word	0x08009410

080086dc <_printf_common>:
 80086dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086e0:	4616      	mov	r6, r2
 80086e2:	4698      	mov	r8, r3
 80086e4:	688a      	ldr	r2, [r1, #8]
 80086e6:	690b      	ldr	r3, [r1, #16]
 80086e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80086ec:	4293      	cmp	r3, r2
 80086ee:	bfb8      	it	lt
 80086f0:	4613      	movlt	r3, r2
 80086f2:	6033      	str	r3, [r6, #0]
 80086f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80086f8:	4607      	mov	r7, r0
 80086fa:	460c      	mov	r4, r1
 80086fc:	b10a      	cbz	r2, 8008702 <_printf_common+0x26>
 80086fe:	3301      	adds	r3, #1
 8008700:	6033      	str	r3, [r6, #0]
 8008702:	6823      	ldr	r3, [r4, #0]
 8008704:	0699      	lsls	r1, r3, #26
 8008706:	bf42      	ittt	mi
 8008708:	6833      	ldrmi	r3, [r6, #0]
 800870a:	3302      	addmi	r3, #2
 800870c:	6033      	strmi	r3, [r6, #0]
 800870e:	6825      	ldr	r5, [r4, #0]
 8008710:	f015 0506 	ands.w	r5, r5, #6
 8008714:	d106      	bne.n	8008724 <_printf_common+0x48>
 8008716:	f104 0a19 	add.w	sl, r4, #25
 800871a:	68e3      	ldr	r3, [r4, #12]
 800871c:	6832      	ldr	r2, [r6, #0]
 800871e:	1a9b      	subs	r3, r3, r2
 8008720:	42ab      	cmp	r3, r5
 8008722:	dc26      	bgt.n	8008772 <_printf_common+0x96>
 8008724:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008728:	6822      	ldr	r2, [r4, #0]
 800872a:	3b00      	subs	r3, #0
 800872c:	bf18      	it	ne
 800872e:	2301      	movne	r3, #1
 8008730:	0692      	lsls	r2, r2, #26
 8008732:	d42b      	bmi.n	800878c <_printf_common+0xb0>
 8008734:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008738:	4641      	mov	r1, r8
 800873a:	4638      	mov	r0, r7
 800873c:	47c8      	blx	r9
 800873e:	3001      	adds	r0, #1
 8008740:	d01e      	beq.n	8008780 <_printf_common+0xa4>
 8008742:	6823      	ldr	r3, [r4, #0]
 8008744:	6922      	ldr	r2, [r4, #16]
 8008746:	f003 0306 	and.w	r3, r3, #6
 800874a:	2b04      	cmp	r3, #4
 800874c:	bf02      	ittt	eq
 800874e:	68e5      	ldreq	r5, [r4, #12]
 8008750:	6833      	ldreq	r3, [r6, #0]
 8008752:	1aed      	subeq	r5, r5, r3
 8008754:	68a3      	ldr	r3, [r4, #8]
 8008756:	bf0c      	ite	eq
 8008758:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800875c:	2500      	movne	r5, #0
 800875e:	4293      	cmp	r3, r2
 8008760:	bfc4      	itt	gt
 8008762:	1a9b      	subgt	r3, r3, r2
 8008764:	18ed      	addgt	r5, r5, r3
 8008766:	2600      	movs	r6, #0
 8008768:	341a      	adds	r4, #26
 800876a:	42b5      	cmp	r5, r6
 800876c:	d11a      	bne.n	80087a4 <_printf_common+0xc8>
 800876e:	2000      	movs	r0, #0
 8008770:	e008      	b.n	8008784 <_printf_common+0xa8>
 8008772:	2301      	movs	r3, #1
 8008774:	4652      	mov	r2, sl
 8008776:	4641      	mov	r1, r8
 8008778:	4638      	mov	r0, r7
 800877a:	47c8      	blx	r9
 800877c:	3001      	adds	r0, #1
 800877e:	d103      	bne.n	8008788 <_printf_common+0xac>
 8008780:	f04f 30ff 	mov.w	r0, #4294967295
 8008784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008788:	3501      	adds	r5, #1
 800878a:	e7c6      	b.n	800871a <_printf_common+0x3e>
 800878c:	18e1      	adds	r1, r4, r3
 800878e:	1c5a      	adds	r2, r3, #1
 8008790:	2030      	movs	r0, #48	@ 0x30
 8008792:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008796:	4422      	add	r2, r4
 8008798:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800879c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80087a0:	3302      	adds	r3, #2
 80087a2:	e7c7      	b.n	8008734 <_printf_common+0x58>
 80087a4:	2301      	movs	r3, #1
 80087a6:	4622      	mov	r2, r4
 80087a8:	4641      	mov	r1, r8
 80087aa:	4638      	mov	r0, r7
 80087ac:	47c8      	blx	r9
 80087ae:	3001      	adds	r0, #1
 80087b0:	d0e6      	beq.n	8008780 <_printf_common+0xa4>
 80087b2:	3601      	adds	r6, #1
 80087b4:	e7d9      	b.n	800876a <_printf_common+0x8e>
	...

080087b8 <_printf_i>:
 80087b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087bc:	7e0f      	ldrb	r7, [r1, #24]
 80087be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80087c0:	2f78      	cmp	r7, #120	@ 0x78
 80087c2:	4691      	mov	r9, r2
 80087c4:	4680      	mov	r8, r0
 80087c6:	460c      	mov	r4, r1
 80087c8:	469a      	mov	sl, r3
 80087ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80087ce:	d807      	bhi.n	80087e0 <_printf_i+0x28>
 80087d0:	2f62      	cmp	r7, #98	@ 0x62
 80087d2:	d80a      	bhi.n	80087ea <_printf_i+0x32>
 80087d4:	2f00      	cmp	r7, #0
 80087d6:	f000 80d2 	beq.w	800897e <_printf_i+0x1c6>
 80087da:	2f58      	cmp	r7, #88	@ 0x58
 80087dc:	f000 80b9 	beq.w	8008952 <_printf_i+0x19a>
 80087e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80087e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80087e8:	e03a      	b.n	8008860 <_printf_i+0xa8>
 80087ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80087ee:	2b15      	cmp	r3, #21
 80087f0:	d8f6      	bhi.n	80087e0 <_printf_i+0x28>
 80087f2:	a101      	add	r1, pc, #4	@ (adr r1, 80087f8 <_printf_i+0x40>)
 80087f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087f8:	08008851 	.word	0x08008851
 80087fc:	08008865 	.word	0x08008865
 8008800:	080087e1 	.word	0x080087e1
 8008804:	080087e1 	.word	0x080087e1
 8008808:	080087e1 	.word	0x080087e1
 800880c:	080087e1 	.word	0x080087e1
 8008810:	08008865 	.word	0x08008865
 8008814:	080087e1 	.word	0x080087e1
 8008818:	080087e1 	.word	0x080087e1
 800881c:	080087e1 	.word	0x080087e1
 8008820:	080087e1 	.word	0x080087e1
 8008824:	08008965 	.word	0x08008965
 8008828:	0800888f 	.word	0x0800888f
 800882c:	0800891f 	.word	0x0800891f
 8008830:	080087e1 	.word	0x080087e1
 8008834:	080087e1 	.word	0x080087e1
 8008838:	08008987 	.word	0x08008987
 800883c:	080087e1 	.word	0x080087e1
 8008840:	0800888f 	.word	0x0800888f
 8008844:	080087e1 	.word	0x080087e1
 8008848:	080087e1 	.word	0x080087e1
 800884c:	08008927 	.word	0x08008927
 8008850:	6833      	ldr	r3, [r6, #0]
 8008852:	1d1a      	adds	r2, r3, #4
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	6032      	str	r2, [r6, #0]
 8008858:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800885c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008860:	2301      	movs	r3, #1
 8008862:	e09d      	b.n	80089a0 <_printf_i+0x1e8>
 8008864:	6833      	ldr	r3, [r6, #0]
 8008866:	6820      	ldr	r0, [r4, #0]
 8008868:	1d19      	adds	r1, r3, #4
 800886a:	6031      	str	r1, [r6, #0]
 800886c:	0606      	lsls	r6, r0, #24
 800886e:	d501      	bpl.n	8008874 <_printf_i+0xbc>
 8008870:	681d      	ldr	r5, [r3, #0]
 8008872:	e003      	b.n	800887c <_printf_i+0xc4>
 8008874:	0645      	lsls	r5, r0, #25
 8008876:	d5fb      	bpl.n	8008870 <_printf_i+0xb8>
 8008878:	f9b3 5000 	ldrsh.w	r5, [r3]
 800887c:	2d00      	cmp	r5, #0
 800887e:	da03      	bge.n	8008888 <_printf_i+0xd0>
 8008880:	232d      	movs	r3, #45	@ 0x2d
 8008882:	426d      	negs	r5, r5
 8008884:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008888:	4859      	ldr	r0, [pc, #356]	@ (80089f0 <_printf_i+0x238>)
 800888a:	230a      	movs	r3, #10
 800888c:	e011      	b.n	80088b2 <_printf_i+0xfa>
 800888e:	6821      	ldr	r1, [r4, #0]
 8008890:	6833      	ldr	r3, [r6, #0]
 8008892:	0608      	lsls	r0, r1, #24
 8008894:	f853 5b04 	ldr.w	r5, [r3], #4
 8008898:	d402      	bmi.n	80088a0 <_printf_i+0xe8>
 800889a:	0649      	lsls	r1, r1, #25
 800889c:	bf48      	it	mi
 800889e:	b2ad      	uxthmi	r5, r5
 80088a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80088a2:	4853      	ldr	r0, [pc, #332]	@ (80089f0 <_printf_i+0x238>)
 80088a4:	6033      	str	r3, [r6, #0]
 80088a6:	bf14      	ite	ne
 80088a8:	230a      	movne	r3, #10
 80088aa:	2308      	moveq	r3, #8
 80088ac:	2100      	movs	r1, #0
 80088ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80088b2:	6866      	ldr	r6, [r4, #4]
 80088b4:	60a6      	str	r6, [r4, #8]
 80088b6:	2e00      	cmp	r6, #0
 80088b8:	bfa2      	ittt	ge
 80088ba:	6821      	ldrge	r1, [r4, #0]
 80088bc:	f021 0104 	bicge.w	r1, r1, #4
 80088c0:	6021      	strge	r1, [r4, #0]
 80088c2:	b90d      	cbnz	r5, 80088c8 <_printf_i+0x110>
 80088c4:	2e00      	cmp	r6, #0
 80088c6:	d04b      	beq.n	8008960 <_printf_i+0x1a8>
 80088c8:	4616      	mov	r6, r2
 80088ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80088ce:	fb03 5711 	mls	r7, r3, r1, r5
 80088d2:	5dc7      	ldrb	r7, [r0, r7]
 80088d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80088d8:	462f      	mov	r7, r5
 80088da:	42bb      	cmp	r3, r7
 80088dc:	460d      	mov	r5, r1
 80088de:	d9f4      	bls.n	80088ca <_printf_i+0x112>
 80088e0:	2b08      	cmp	r3, #8
 80088e2:	d10b      	bne.n	80088fc <_printf_i+0x144>
 80088e4:	6823      	ldr	r3, [r4, #0]
 80088e6:	07df      	lsls	r7, r3, #31
 80088e8:	d508      	bpl.n	80088fc <_printf_i+0x144>
 80088ea:	6923      	ldr	r3, [r4, #16]
 80088ec:	6861      	ldr	r1, [r4, #4]
 80088ee:	4299      	cmp	r1, r3
 80088f0:	bfde      	ittt	le
 80088f2:	2330      	movle	r3, #48	@ 0x30
 80088f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80088f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80088fc:	1b92      	subs	r2, r2, r6
 80088fe:	6122      	str	r2, [r4, #16]
 8008900:	f8cd a000 	str.w	sl, [sp]
 8008904:	464b      	mov	r3, r9
 8008906:	aa03      	add	r2, sp, #12
 8008908:	4621      	mov	r1, r4
 800890a:	4640      	mov	r0, r8
 800890c:	f7ff fee6 	bl	80086dc <_printf_common>
 8008910:	3001      	adds	r0, #1
 8008912:	d14a      	bne.n	80089aa <_printf_i+0x1f2>
 8008914:	f04f 30ff 	mov.w	r0, #4294967295
 8008918:	b004      	add	sp, #16
 800891a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800891e:	6823      	ldr	r3, [r4, #0]
 8008920:	f043 0320 	orr.w	r3, r3, #32
 8008924:	6023      	str	r3, [r4, #0]
 8008926:	4833      	ldr	r0, [pc, #204]	@ (80089f4 <_printf_i+0x23c>)
 8008928:	2778      	movs	r7, #120	@ 0x78
 800892a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800892e:	6823      	ldr	r3, [r4, #0]
 8008930:	6831      	ldr	r1, [r6, #0]
 8008932:	061f      	lsls	r7, r3, #24
 8008934:	f851 5b04 	ldr.w	r5, [r1], #4
 8008938:	d402      	bmi.n	8008940 <_printf_i+0x188>
 800893a:	065f      	lsls	r7, r3, #25
 800893c:	bf48      	it	mi
 800893e:	b2ad      	uxthmi	r5, r5
 8008940:	6031      	str	r1, [r6, #0]
 8008942:	07d9      	lsls	r1, r3, #31
 8008944:	bf44      	itt	mi
 8008946:	f043 0320 	orrmi.w	r3, r3, #32
 800894a:	6023      	strmi	r3, [r4, #0]
 800894c:	b11d      	cbz	r5, 8008956 <_printf_i+0x19e>
 800894e:	2310      	movs	r3, #16
 8008950:	e7ac      	b.n	80088ac <_printf_i+0xf4>
 8008952:	4827      	ldr	r0, [pc, #156]	@ (80089f0 <_printf_i+0x238>)
 8008954:	e7e9      	b.n	800892a <_printf_i+0x172>
 8008956:	6823      	ldr	r3, [r4, #0]
 8008958:	f023 0320 	bic.w	r3, r3, #32
 800895c:	6023      	str	r3, [r4, #0]
 800895e:	e7f6      	b.n	800894e <_printf_i+0x196>
 8008960:	4616      	mov	r6, r2
 8008962:	e7bd      	b.n	80088e0 <_printf_i+0x128>
 8008964:	6833      	ldr	r3, [r6, #0]
 8008966:	6825      	ldr	r5, [r4, #0]
 8008968:	6961      	ldr	r1, [r4, #20]
 800896a:	1d18      	adds	r0, r3, #4
 800896c:	6030      	str	r0, [r6, #0]
 800896e:	062e      	lsls	r6, r5, #24
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	d501      	bpl.n	8008978 <_printf_i+0x1c0>
 8008974:	6019      	str	r1, [r3, #0]
 8008976:	e002      	b.n	800897e <_printf_i+0x1c6>
 8008978:	0668      	lsls	r0, r5, #25
 800897a:	d5fb      	bpl.n	8008974 <_printf_i+0x1bc>
 800897c:	8019      	strh	r1, [r3, #0]
 800897e:	2300      	movs	r3, #0
 8008980:	6123      	str	r3, [r4, #16]
 8008982:	4616      	mov	r6, r2
 8008984:	e7bc      	b.n	8008900 <_printf_i+0x148>
 8008986:	6833      	ldr	r3, [r6, #0]
 8008988:	1d1a      	adds	r2, r3, #4
 800898a:	6032      	str	r2, [r6, #0]
 800898c:	681e      	ldr	r6, [r3, #0]
 800898e:	6862      	ldr	r2, [r4, #4]
 8008990:	2100      	movs	r1, #0
 8008992:	4630      	mov	r0, r6
 8008994:	f7f7 fc5c 	bl	8000250 <memchr>
 8008998:	b108      	cbz	r0, 800899e <_printf_i+0x1e6>
 800899a:	1b80      	subs	r0, r0, r6
 800899c:	6060      	str	r0, [r4, #4]
 800899e:	6863      	ldr	r3, [r4, #4]
 80089a0:	6123      	str	r3, [r4, #16]
 80089a2:	2300      	movs	r3, #0
 80089a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80089a8:	e7aa      	b.n	8008900 <_printf_i+0x148>
 80089aa:	6923      	ldr	r3, [r4, #16]
 80089ac:	4632      	mov	r2, r6
 80089ae:	4649      	mov	r1, r9
 80089b0:	4640      	mov	r0, r8
 80089b2:	47d0      	blx	sl
 80089b4:	3001      	adds	r0, #1
 80089b6:	d0ad      	beq.n	8008914 <_printf_i+0x15c>
 80089b8:	6823      	ldr	r3, [r4, #0]
 80089ba:	079b      	lsls	r3, r3, #30
 80089bc:	d413      	bmi.n	80089e6 <_printf_i+0x22e>
 80089be:	68e0      	ldr	r0, [r4, #12]
 80089c0:	9b03      	ldr	r3, [sp, #12]
 80089c2:	4298      	cmp	r0, r3
 80089c4:	bfb8      	it	lt
 80089c6:	4618      	movlt	r0, r3
 80089c8:	e7a6      	b.n	8008918 <_printf_i+0x160>
 80089ca:	2301      	movs	r3, #1
 80089cc:	4632      	mov	r2, r6
 80089ce:	4649      	mov	r1, r9
 80089d0:	4640      	mov	r0, r8
 80089d2:	47d0      	blx	sl
 80089d4:	3001      	adds	r0, #1
 80089d6:	d09d      	beq.n	8008914 <_printf_i+0x15c>
 80089d8:	3501      	adds	r5, #1
 80089da:	68e3      	ldr	r3, [r4, #12]
 80089dc:	9903      	ldr	r1, [sp, #12]
 80089de:	1a5b      	subs	r3, r3, r1
 80089e0:	42ab      	cmp	r3, r5
 80089e2:	dcf2      	bgt.n	80089ca <_printf_i+0x212>
 80089e4:	e7eb      	b.n	80089be <_printf_i+0x206>
 80089e6:	2500      	movs	r5, #0
 80089e8:	f104 0619 	add.w	r6, r4, #25
 80089ec:	e7f5      	b.n	80089da <_printf_i+0x222>
 80089ee:	bf00      	nop
 80089f0:	0800941b 	.word	0x0800941b
 80089f4:	0800942c 	.word	0x0800942c

080089f8 <__sflush_r>:
 80089f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80089fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a00:	0716      	lsls	r6, r2, #28
 8008a02:	4605      	mov	r5, r0
 8008a04:	460c      	mov	r4, r1
 8008a06:	d454      	bmi.n	8008ab2 <__sflush_r+0xba>
 8008a08:	684b      	ldr	r3, [r1, #4]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	dc02      	bgt.n	8008a14 <__sflush_r+0x1c>
 8008a0e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	dd48      	ble.n	8008aa6 <__sflush_r+0xae>
 8008a14:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a16:	2e00      	cmp	r6, #0
 8008a18:	d045      	beq.n	8008aa6 <__sflush_r+0xae>
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008a20:	682f      	ldr	r7, [r5, #0]
 8008a22:	6a21      	ldr	r1, [r4, #32]
 8008a24:	602b      	str	r3, [r5, #0]
 8008a26:	d030      	beq.n	8008a8a <__sflush_r+0x92>
 8008a28:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008a2a:	89a3      	ldrh	r3, [r4, #12]
 8008a2c:	0759      	lsls	r1, r3, #29
 8008a2e:	d505      	bpl.n	8008a3c <__sflush_r+0x44>
 8008a30:	6863      	ldr	r3, [r4, #4]
 8008a32:	1ad2      	subs	r2, r2, r3
 8008a34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008a36:	b10b      	cbz	r3, 8008a3c <__sflush_r+0x44>
 8008a38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008a3a:	1ad2      	subs	r2, r2, r3
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a40:	6a21      	ldr	r1, [r4, #32]
 8008a42:	4628      	mov	r0, r5
 8008a44:	47b0      	blx	r6
 8008a46:	1c43      	adds	r3, r0, #1
 8008a48:	89a3      	ldrh	r3, [r4, #12]
 8008a4a:	d106      	bne.n	8008a5a <__sflush_r+0x62>
 8008a4c:	6829      	ldr	r1, [r5, #0]
 8008a4e:	291d      	cmp	r1, #29
 8008a50:	d82b      	bhi.n	8008aaa <__sflush_r+0xb2>
 8008a52:	4a2a      	ldr	r2, [pc, #168]	@ (8008afc <__sflush_r+0x104>)
 8008a54:	410a      	asrs	r2, r1
 8008a56:	07d6      	lsls	r6, r2, #31
 8008a58:	d427      	bmi.n	8008aaa <__sflush_r+0xb2>
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	6062      	str	r2, [r4, #4]
 8008a5e:	04d9      	lsls	r1, r3, #19
 8008a60:	6922      	ldr	r2, [r4, #16]
 8008a62:	6022      	str	r2, [r4, #0]
 8008a64:	d504      	bpl.n	8008a70 <__sflush_r+0x78>
 8008a66:	1c42      	adds	r2, r0, #1
 8008a68:	d101      	bne.n	8008a6e <__sflush_r+0x76>
 8008a6a:	682b      	ldr	r3, [r5, #0]
 8008a6c:	b903      	cbnz	r3, 8008a70 <__sflush_r+0x78>
 8008a6e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008a70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a72:	602f      	str	r7, [r5, #0]
 8008a74:	b1b9      	cbz	r1, 8008aa6 <__sflush_r+0xae>
 8008a76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a7a:	4299      	cmp	r1, r3
 8008a7c:	d002      	beq.n	8008a84 <__sflush_r+0x8c>
 8008a7e:	4628      	mov	r0, r5
 8008a80:	f7ff fbd4 	bl	800822c <_free_r>
 8008a84:	2300      	movs	r3, #0
 8008a86:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a88:	e00d      	b.n	8008aa6 <__sflush_r+0xae>
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	4628      	mov	r0, r5
 8008a8e:	47b0      	blx	r6
 8008a90:	4602      	mov	r2, r0
 8008a92:	1c50      	adds	r0, r2, #1
 8008a94:	d1c9      	bne.n	8008a2a <__sflush_r+0x32>
 8008a96:	682b      	ldr	r3, [r5, #0]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d0c6      	beq.n	8008a2a <__sflush_r+0x32>
 8008a9c:	2b1d      	cmp	r3, #29
 8008a9e:	d001      	beq.n	8008aa4 <__sflush_r+0xac>
 8008aa0:	2b16      	cmp	r3, #22
 8008aa2:	d11e      	bne.n	8008ae2 <__sflush_r+0xea>
 8008aa4:	602f      	str	r7, [r5, #0]
 8008aa6:	2000      	movs	r0, #0
 8008aa8:	e022      	b.n	8008af0 <__sflush_r+0xf8>
 8008aaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008aae:	b21b      	sxth	r3, r3
 8008ab0:	e01b      	b.n	8008aea <__sflush_r+0xf2>
 8008ab2:	690f      	ldr	r7, [r1, #16]
 8008ab4:	2f00      	cmp	r7, #0
 8008ab6:	d0f6      	beq.n	8008aa6 <__sflush_r+0xae>
 8008ab8:	0793      	lsls	r3, r2, #30
 8008aba:	680e      	ldr	r6, [r1, #0]
 8008abc:	bf08      	it	eq
 8008abe:	694b      	ldreq	r3, [r1, #20]
 8008ac0:	600f      	str	r7, [r1, #0]
 8008ac2:	bf18      	it	ne
 8008ac4:	2300      	movne	r3, #0
 8008ac6:	eba6 0807 	sub.w	r8, r6, r7
 8008aca:	608b      	str	r3, [r1, #8]
 8008acc:	f1b8 0f00 	cmp.w	r8, #0
 8008ad0:	dde9      	ble.n	8008aa6 <__sflush_r+0xae>
 8008ad2:	6a21      	ldr	r1, [r4, #32]
 8008ad4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008ad6:	4643      	mov	r3, r8
 8008ad8:	463a      	mov	r2, r7
 8008ada:	4628      	mov	r0, r5
 8008adc:	47b0      	blx	r6
 8008ade:	2800      	cmp	r0, #0
 8008ae0:	dc08      	bgt.n	8008af4 <__sflush_r+0xfc>
 8008ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ae6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008aea:	81a3      	strh	r3, [r4, #12]
 8008aec:	f04f 30ff 	mov.w	r0, #4294967295
 8008af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008af4:	4407      	add	r7, r0
 8008af6:	eba8 0800 	sub.w	r8, r8, r0
 8008afa:	e7e7      	b.n	8008acc <__sflush_r+0xd4>
 8008afc:	dfbffffe 	.word	0xdfbffffe

08008b00 <_fflush_r>:
 8008b00:	b538      	push	{r3, r4, r5, lr}
 8008b02:	690b      	ldr	r3, [r1, #16]
 8008b04:	4605      	mov	r5, r0
 8008b06:	460c      	mov	r4, r1
 8008b08:	b913      	cbnz	r3, 8008b10 <_fflush_r+0x10>
 8008b0a:	2500      	movs	r5, #0
 8008b0c:	4628      	mov	r0, r5
 8008b0e:	bd38      	pop	{r3, r4, r5, pc}
 8008b10:	b118      	cbz	r0, 8008b1a <_fflush_r+0x1a>
 8008b12:	6a03      	ldr	r3, [r0, #32]
 8008b14:	b90b      	cbnz	r3, 8008b1a <_fflush_r+0x1a>
 8008b16:	f7ff f9e5 	bl	8007ee4 <__sinit>
 8008b1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d0f3      	beq.n	8008b0a <_fflush_r+0xa>
 8008b22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008b24:	07d0      	lsls	r0, r2, #31
 8008b26:	d404      	bmi.n	8008b32 <_fflush_r+0x32>
 8008b28:	0599      	lsls	r1, r3, #22
 8008b2a:	d402      	bmi.n	8008b32 <_fflush_r+0x32>
 8008b2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b2e:	f7ff fb5c 	bl	80081ea <__retarget_lock_acquire_recursive>
 8008b32:	4628      	mov	r0, r5
 8008b34:	4621      	mov	r1, r4
 8008b36:	f7ff ff5f 	bl	80089f8 <__sflush_r>
 8008b3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b3c:	07da      	lsls	r2, r3, #31
 8008b3e:	4605      	mov	r5, r0
 8008b40:	d4e4      	bmi.n	8008b0c <_fflush_r+0xc>
 8008b42:	89a3      	ldrh	r3, [r4, #12]
 8008b44:	059b      	lsls	r3, r3, #22
 8008b46:	d4e1      	bmi.n	8008b0c <_fflush_r+0xc>
 8008b48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b4a:	f7ff fb4f 	bl	80081ec <__retarget_lock_release_recursive>
 8008b4e:	e7dd      	b.n	8008b0c <_fflush_r+0xc>

08008b50 <fiprintf>:
 8008b50:	b40e      	push	{r1, r2, r3}
 8008b52:	b503      	push	{r0, r1, lr}
 8008b54:	4601      	mov	r1, r0
 8008b56:	ab03      	add	r3, sp, #12
 8008b58:	4805      	ldr	r0, [pc, #20]	@ (8008b70 <fiprintf+0x20>)
 8008b5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b5e:	6800      	ldr	r0, [r0, #0]
 8008b60:	9301      	str	r3, [sp, #4]
 8008b62:	f000 f89d 	bl	8008ca0 <_vfiprintf_r>
 8008b66:	b002      	add	sp, #8
 8008b68:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b6c:	b003      	add	sp, #12
 8008b6e:	4770      	bx	lr
 8008b70:	200000d4 	.word	0x200000d4

08008b74 <memmove>:
 8008b74:	4288      	cmp	r0, r1
 8008b76:	b510      	push	{r4, lr}
 8008b78:	eb01 0402 	add.w	r4, r1, r2
 8008b7c:	d902      	bls.n	8008b84 <memmove+0x10>
 8008b7e:	4284      	cmp	r4, r0
 8008b80:	4623      	mov	r3, r4
 8008b82:	d807      	bhi.n	8008b94 <memmove+0x20>
 8008b84:	1e43      	subs	r3, r0, #1
 8008b86:	42a1      	cmp	r1, r4
 8008b88:	d008      	beq.n	8008b9c <memmove+0x28>
 8008b8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b92:	e7f8      	b.n	8008b86 <memmove+0x12>
 8008b94:	4402      	add	r2, r0
 8008b96:	4601      	mov	r1, r0
 8008b98:	428a      	cmp	r2, r1
 8008b9a:	d100      	bne.n	8008b9e <memmove+0x2a>
 8008b9c:	bd10      	pop	{r4, pc}
 8008b9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ba2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ba6:	e7f7      	b.n	8008b98 <memmove+0x24>

08008ba8 <_sbrk_r>:
 8008ba8:	b538      	push	{r3, r4, r5, lr}
 8008baa:	4d06      	ldr	r5, [pc, #24]	@ (8008bc4 <_sbrk_r+0x1c>)
 8008bac:	2300      	movs	r3, #0
 8008bae:	4604      	mov	r4, r0
 8008bb0:	4608      	mov	r0, r1
 8008bb2:	602b      	str	r3, [r5, #0]
 8008bb4:	f7f8 f980 	bl	8000eb8 <_sbrk>
 8008bb8:	1c43      	adds	r3, r0, #1
 8008bba:	d102      	bne.n	8008bc2 <_sbrk_r+0x1a>
 8008bbc:	682b      	ldr	r3, [r5, #0]
 8008bbe:	b103      	cbz	r3, 8008bc2 <_sbrk_r+0x1a>
 8008bc0:	6023      	str	r3, [r4, #0]
 8008bc2:	bd38      	pop	{r3, r4, r5, pc}
 8008bc4:	20000620 	.word	0x20000620

08008bc8 <memcpy>:
 8008bc8:	440a      	add	r2, r1
 8008bca:	4291      	cmp	r1, r2
 8008bcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008bd0:	d100      	bne.n	8008bd4 <memcpy+0xc>
 8008bd2:	4770      	bx	lr
 8008bd4:	b510      	push	{r4, lr}
 8008bd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bde:	4291      	cmp	r1, r2
 8008be0:	d1f9      	bne.n	8008bd6 <memcpy+0xe>
 8008be2:	bd10      	pop	{r4, pc}

08008be4 <abort>:
 8008be4:	b508      	push	{r3, lr}
 8008be6:	2006      	movs	r0, #6
 8008be8:	f000 fa2e 	bl	8009048 <raise>
 8008bec:	2001      	movs	r0, #1
 8008bee:	f7f8 f8eb 	bl	8000dc8 <_exit>

08008bf2 <_realloc_r>:
 8008bf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bf6:	4680      	mov	r8, r0
 8008bf8:	4615      	mov	r5, r2
 8008bfa:	460c      	mov	r4, r1
 8008bfc:	b921      	cbnz	r1, 8008c08 <_realloc_r+0x16>
 8008bfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c02:	4611      	mov	r1, r2
 8008c04:	f7ff bb86 	b.w	8008314 <_malloc_r>
 8008c08:	b92a      	cbnz	r2, 8008c16 <_realloc_r+0x24>
 8008c0a:	f7ff fb0f 	bl	800822c <_free_r>
 8008c0e:	2400      	movs	r4, #0
 8008c10:	4620      	mov	r0, r4
 8008c12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c16:	f000 fa33 	bl	8009080 <_malloc_usable_size_r>
 8008c1a:	4285      	cmp	r5, r0
 8008c1c:	4606      	mov	r6, r0
 8008c1e:	d802      	bhi.n	8008c26 <_realloc_r+0x34>
 8008c20:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008c24:	d8f4      	bhi.n	8008c10 <_realloc_r+0x1e>
 8008c26:	4629      	mov	r1, r5
 8008c28:	4640      	mov	r0, r8
 8008c2a:	f7ff fb73 	bl	8008314 <_malloc_r>
 8008c2e:	4607      	mov	r7, r0
 8008c30:	2800      	cmp	r0, #0
 8008c32:	d0ec      	beq.n	8008c0e <_realloc_r+0x1c>
 8008c34:	42b5      	cmp	r5, r6
 8008c36:	462a      	mov	r2, r5
 8008c38:	4621      	mov	r1, r4
 8008c3a:	bf28      	it	cs
 8008c3c:	4632      	movcs	r2, r6
 8008c3e:	f7ff ffc3 	bl	8008bc8 <memcpy>
 8008c42:	4621      	mov	r1, r4
 8008c44:	4640      	mov	r0, r8
 8008c46:	f7ff faf1 	bl	800822c <_free_r>
 8008c4a:	463c      	mov	r4, r7
 8008c4c:	e7e0      	b.n	8008c10 <_realloc_r+0x1e>

08008c4e <__sfputc_r>:
 8008c4e:	6893      	ldr	r3, [r2, #8]
 8008c50:	3b01      	subs	r3, #1
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	b410      	push	{r4}
 8008c56:	6093      	str	r3, [r2, #8]
 8008c58:	da08      	bge.n	8008c6c <__sfputc_r+0x1e>
 8008c5a:	6994      	ldr	r4, [r2, #24]
 8008c5c:	42a3      	cmp	r3, r4
 8008c5e:	db01      	blt.n	8008c64 <__sfputc_r+0x16>
 8008c60:	290a      	cmp	r1, #10
 8008c62:	d103      	bne.n	8008c6c <__sfputc_r+0x1e>
 8008c64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c68:	f000 b932 	b.w	8008ed0 <__swbuf_r>
 8008c6c:	6813      	ldr	r3, [r2, #0]
 8008c6e:	1c58      	adds	r0, r3, #1
 8008c70:	6010      	str	r0, [r2, #0]
 8008c72:	7019      	strb	r1, [r3, #0]
 8008c74:	4608      	mov	r0, r1
 8008c76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <__sfputs_r>:
 8008c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c7e:	4606      	mov	r6, r0
 8008c80:	460f      	mov	r7, r1
 8008c82:	4614      	mov	r4, r2
 8008c84:	18d5      	adds	r5, r2, r3
 8008c86:	42ac      	cmp	r4, r5
 8008c88:	d101      	bne.n	8008c8e <__sfputs_r+0x12>
 8008c8a:	2000      	movs	r0, #0
 8008c8c:	e007      	b.n	8008c9e <__sfputs_r+0x22>
 8008c8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c92:	463a      	mov	r2, r7
 8008c94:	4630      	mov	r0, r6
 8008c96:	f7ff ffda 	bl	8008c4e <__sfputc_r>
 8008c9a:	1c43      	adds	r3, r0, #1
 8008c9c:	d1f3      	bne.n	8008c86 <__sfputs_r+0xa>
 8008c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008ca0 <_vfiprintf_r>:
 8008ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ca4:	460d      	mov	r5, r1
 8008ca6:	b09d      	sub	sp, #116	@ 0x74
 8008ca8:	4614      	mov	r4, r2
 8008caa:	4698      	mov	r8, r3
 8008cac:	4606      	mov	r6, r0
 8008cae:	b118      	cbz	r0, 8008cb8 <_vfiprintf_r+0x18>
 8008cb0:	6a03      	ldr	r3, [r0, #32]
 8008cb2:	b90b      	cbnz	r3, 8008cb8 <_vfiprintf_r+0x18>
 8008cb4:	f7ff f916 	bl	8007ee4 <__sinit>
 8008cb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008cba:	07d9      	lsls	r1, r3, #31
 8008cbc:	d405      	bmi.n	8008cca <_vfiprintf_r+0x2a>
 8008cbe:	89ab      	ldrh	r3, [r5, #12]
 8008cc0:	059a      	lsls	r2, r3, #22
 8008cc2:	d402      	bmi.n	8008cca <_vfiprintf_r+0x2a>
 8008cc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cc6:	f7ff fa90 	bl	80081ea <__retarget_lock_acquire_recursive>
 8008cca:	89ab      	ldrh	r3, [r5, #12]
 8008ccc:	071b      	lsls	r3, r3, #28
 8008cce:	d501      	bpl.n	8008cd4 <_vfiprintf_r+0x34>
 8008cd0:	692b      	ldr	r3, [r5, #16]
 8008cd2:	b99b      	cbnz	r3, 8008cfc <_vfiprintf_r+0x5c>
 8008cd4:	4629      	mov	r1, r5
 8008cd6:	4630      	mov	r0, r6
 8008cd8:	f000 f938 	bl	8008f4c <__swsetup_r>
 8008cdc:	b170      	cbz	r0, 8008cfc <_vfiprintf_r+0x5c>
 8008cde:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ce0:	07dc      	lsls	r4, r3, #31
 8008ce2:	d504      	bpl.n	8008cee <_vfiprintf_r+0x4e>
 8008ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ce8:	b01d      	add	sp, #116	@ 0x74
 8008cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cee:	89ab      	ldrh	r3, [r5, #12]
 8008cf0:	0598      	lsls	r0, r3, #22
 8008cf2:	d4f7      	bmi.n	8008ce4 <_vfiprintf_r+0x44>
 8008cf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cf6:	f7ff fa79 	bl	80081ec <__retarget_lock_release_recursive>
 8008cfa:	e7f3      	b.n	8008ce4 <_vfiprintf_r+0x44>
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d00:	2320      	movs	r3, #32
 8008d02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d06:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d0a:	2330      	movs	r3, #48	@ 0x30
 8008d0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008ebc <_vfiprintf_r+0x21c>
 8008d10:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d14:	f04f 0901 	mov.w	r9, #1
 8008d18:	4623      	mov	r3, r4
 8008d1a:	469a      	mov	sl, r3
 8008d1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d20:	b10a      	cbz	r2, 8008d26 <_vfiprintf_r+0x86>
 8008d22:	2a25      	cmp	r2, #37	@ 0x25
 8008d24:	d1f9      	bne.n	8008d1a <_vfiprintf_r+0x7a>
 8008d26:	ebba 0b04 	subs.w	fp, sl, r4
 8008d2a:	d00b      	beq.n	8008d44 <_vfiprintf_r+0xa4>
 8008d2c:	465b      	mov	r3, fp
 8008d2e:	4622      	mov	r2, r4
 8008d30:	4629      	mov	r1, r5
 8008d32:	4630      	mov	r0, r6
 8008d34:	f7ff ffa2 	bl	8008c7c <__sfputs_r>
 8008d38:	3001      	adds	r0, #1
 8008d3a:	f000 80a7 	beq.w	8008e8c <_vfiprintf_r+0x1ec>
 8008d3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d40:	445a      	add	r2, fp
 8008d42:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d44:	f89a 3000 	ldrb.w	r3, [sl]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	f000 809f 	beq.w	8008e8c <_vfiprintf_r+0x1ec>
 8008d4e:	2300      	movs	r3, #0
 8008d50:	f04f 32ff 	mov.w	r2, #4294967295
 8008d54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d58:	f10a 0a01 	add.w	sl, sl, #1
 8008d5c:	9304      	str	r3, [sp, #16]
 8008d5e:	9307      	str	r3, [sp, #28]
 8008d60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d64:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d66:	4654      	mov	r4, sl
 8008d68:	2205      	movs	r2, #5
 8008d6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d6e:	4853      	ldr	r0, [pc, #332]	@ (8008ebc <_vfiprintf_r+0x21c>)
 8008d70:	f7f7 fa6e 	bl	8000250 <memchr>
 8008d74:	9a04      	ldr	r2, [sp, #16]
 8008d76:	b9d8      	cbnz	r0, 8008db0 <_vfiprintf_r+0x110>
 8008d78:	06d1      	lsls	r1, r2, #27
 8008d7a:	bf44      	itt	mi
 8008d7c:	2320      	movmi	r3, #32
 8008d7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d82:	0713      	lsls	r3, r2, #28
 8008d84:	bf44      	itt	mi
 8008d86:	232b      	movmi	r3, #43	@ 0x2b
 8008d88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d8c:	f89a 3000 	ldrb.w	r3, [sl]
 8008d90:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d92:	d015      	beq.n	8008dc0 <_vfiprintf_r+0x120>
 8008d94:	9a07      	ldr	r2, [sp, #28]
 8008d96:	4654      	mov	r4, sl
 8008d98:	2000      	movs	r0, #0
 8008d9a:	f04f 0c0a 	mov.w	ip, #10
 8008d9e:	4621      	mov	r1, r4
 8008da0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008da4:	3b30      	subs	r3, #48	@ 0x30
 8008da6:	2b09      	cmp	r3, #9
 8008da8:	d94b      	bls.n	8008e42 <_vfiprintf_r+0x1a2>
 8008daa:	b1b0      	cbz	r0, 8008dda <_vfiprintf_r+0x13a>
 8008dac:	9207      	str	r2, [sp, #28]
 8008dae:	e014      	b.n	8008dda <_vfiprintf_r+0x13a>
 8008db0:	eba0 0308 	sub.w	r3, r0, r8
 8008db4:	fa09 f303 	lsl.w	r3, r9, r3
 8008db8:	4313      	orrs	r3, r2
 8008dba:	9304      	str	r3, [sp, #16]
 8008dbc:	46a2      	mov	sl, r4
 8008dbe:	e7d2      	b.n	8008d66 <_vfiprintf_r+0xc6>
 8008dc0:	9b03      	ldr	r3, [sp, #12]
 8008dc2:	1d19      	adds	r1, r3, #4
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	9103      	str	r1, [sp, #12]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	bfbb      	ittet	lt
 8008dcc:	425b      	neglt	r3, r3
 8008dce:	f042 0202 	orrlt.w	r2, r2, #2
 8008dd2:	9307      	strge	r3, [sp, #28]
 8008dd4:	9307      	strlt	r3, [sp, #28]
 8008dd6:	bfb8      	it	lt
 8008dd8:	9204      	strlt	r2, [sp, #16]
 8008dda:	7823      	ldrb	r3, [r4, #0]
 8008ddc:	2b2e      	cmp	r3, #46	@ 0x2e
 8008dde:	d10a      	bne.n	8008df6 <_vfiprintf_r+0x156>
 8008de0:	7863      	ldrb	r3, [r4, #1]
 8008de2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008de4:	d132      	bne.n	8008e4c <_vfiprintf_r+0x1ac>
 8008de6:	9b03      	ldr	r3, [sp, #12]
 8008de8:	1d1a      	adds	r2, r3, #4
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	9203      	str	r2, [sp, #12]
 8008dee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008df2:	3402      	adds	r4, #2
 8008df4:	9305      	str	r3, [sp, #20]
 8008df6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008ecc <_vfiprintf_r+0x22c>
 8008dfa:	7821      	ldrb	r1, [r4, #0]
 8008dfc:	2203      	movs	r2, #3
 8008dfe:	4650      	mov	r0, sl
 8008e00:	f7f7 fa26 	bl	8000250 <memchr>
 8008e04:	b138      	cbz	r0, 8008e16 <_vfiprintf_r+0x176>
 8008e06:	9b04      	ldr	r3, [sp, #16]
 8008e08:	eba0 000a 	sub.w	r0, r0, sl
 8008e0c:	2240      	movs	r2, #64	@ 0x40
 8008e0e:	4082      	lsls	r2, r0
 8008e10:	4313      	orrs	r3, r2
 8008e12:	3401      	adds	r4, #1
 8008e14:	9304      	str	r3, [sp, #16]
 8008e16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e1a:	4829      	ldr	r0, [pc, #164]	@ (8008ec0 <_vfiprintf_r+0x220>)
 8008e1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e20:	2206      	movs	r2, #6
 8008e22:	f7f7 fa15 	bl	8000250 <memchr>
 8008e26:	2800      	cmp	r0, #0
 8008e28:	d03f      	beq.n	8008eaa <_vfiprintf_r+0x20a>
 8008e2a:	4b26      	ldr	r3, [pc, #152]	@ (8008ec4 <_vfiprintf_r+0x224>)
 8008e2c:	bb1b      	cbnz	r3, 8008e76 <_vfiprintf_r+0x1d6>
 8008e2e:	9b03      	ldr	r3, [sp, #12]
 8008e30:	3307      	adds	r3, #7
 8008e32:	f023 0307 	bic.w	r3, r3, #7
 8008e36:	3308      	adds	r3, #8
 8008e38:	9303      	str	r3, [sp, #12]
 8008e3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e3c:	443b      	add	r3, r7
 8008e3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e40:	e76a      	b.n	8008d18 <_vfiprintf_r+0x78>
 8008e42:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e46:	460c      	mov	r4, r1
 8008e48:	2001      	movs	r0, #1
 8008e4a:	e7a8      	b.n	8008d9e <_vfiprintf_r+0xfe>
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	3401      	adds	r4, #1
 8008e50:	9305      	str	r3, [sp, #20]
 8008e52:	4619      	mov	r1, r3
 8008e54:	f04f 0c0a 	mov.w	ip, #10
 8008e58:	4620      	mov	r0, r4
 8008e5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e5e:	3a30      	subs	r2, #48	@ 0x30
 8008e60:	2a09      	cmp	r2, #9
 8008e62:	d903      	bls.n	8008e6c <_vfiprintf_r+0x1cc>
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d0c6      	beq.n	8008df6 <_vfiprintf_r+0x156>
 8008e68:	9105      	str	r1, [sp, #20]
 8008e6a:	e7c4      	b.n	8008df6 <_vfiprintf_r+0x156>
 8008e6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e70:	4604      	mov	r4, r0
 8008e72:	2301      	movs	r3, #1
 8008e74:	e7f0      	b.n	8008e58 <_vfiprintf_r+0x1b8>
 8008e76:	ab03      	add	r3, sp, #12
 8008e78:	9300      	str	r3, [sp, #0]
 8008e7a:	462a      	mov	r2, r5
 8008e7c:	4b12      	ldr	r3, [pc, #72]	@ (8008ec8 <_vfiprintf_r+0x228>)
 8008e7e:	a904      	add	r1, sp, #16
 8008e80:	4630      	mov	r0, r6
 8008e82:	f3af 8000 	nop.w
 8008e86:	4607      	mov	r7, r0
 8008e88:	1c78      	adds	r0, r7, #1
 8008e8a:	d1d6      	bne.n	8008e3a <_vfiprintf_r+0x19a>
 8008e8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e8e:	07d9      	lsls	r1, r3, #31
 8008e90:	d405      	bmi.n	8008e9e <_vfiprintf_r+0x1fe>
 8008e92:	89ab      	ldrh	r3, [r5, #12]
 8008e94:	059a      	lsls	r2, r3, #22
 8008e96:	d402      	bmi.n	8008e9e <_vfiprintf_r+0x1fe>
 8008e98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e9a:	f7ff f9a7 	bl	80081ec <__retarget_lock_release_recursive>
 8008e9e:	89ab      	ldrh	r3, [r5, #12]
 8008ea0:	065b      	lsls	r3, r3, #25
 8008ea2:	f53f af1f 	bmi.w	8008ce4 <_vfiprintf_r+0x44>
 8008ea6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ea8:	e71e      	b.n	8008ce8 <_vfiprintf_r+0x48>
 8008eaa:	ab03      	add	r3, sp, #12
 8008eac:	9300      	str	r3, [sp, #0]
 8008eae:	462a      	mov	r2, r5
 8008eb0:	4b05      	ldr	r3, [pc, #20]	@ (8008ec8 <_vfiprintf_r+0x228>)
 8008eb2:	a904      	add	r1, sp, #16
 8008eb4:	4630      	mov	r0, r6
 8008eb6:	f7ff fc7f 	bl	80087b8 <_printf_i>
 8008eba:	e7e4      	b.n	8008e86 <_vfiprintf_r+0x1e6>
 8008ebc:	0800940a 	.word	0x0800940a
 8008ec0:	08009414 	.word	0x08009414
 8008ec4:	00000000 	.word	0x00000000
 8008ec8:	08008c7d 	.word	0x08008c7d
 8008ecc:	08009410 	.word	0x08009410

08008ed0 <__swbuf_r>:
 8008ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ed2:	460e      	mov	r6, r1
 8008ed4:	4614      	mov	r4, r2
 8008ed6:	4605      	mov	r5, r0
 8008ed8:	b118      	cbz	r0, 8008ee2 <__swbuf_r+0x12>
 8008eda:	6a03      	ldr	r3, [r0, #32]
 8008edc:	b90b      	cbnz	r3, 8008ee2 <__swbuf_r+0x12>
 8008ede:	f7ff f801 	bl	8007ee4 <__sinit>
 8008ee2:	69a3      	ldr	r3, [r4, #24]
 8008ee4:	60a3      	str	r3, [r4, #8]
 8008ee6:	89a3      	ldrh	r3, [r4, #12]
 8008ee8:	071a      	lsls	r2, r3, #28
 8008eea:	d501      	bpl.n	8008ef0 <__swbuf_r+0x20>
 8008eec:	6923      	ldr	r3, [r4, #16]
 8008eee:	b943      	cbnz	r3, 8008f02 <__swbuf_r+0x32>
 8008ef0:	4621      	mov	r1, r4
 8008ef2:	4628      	mov	r0, r5
 8008ef4:	f000 f82a 	bl	8008f4c <__swsetup_r>
 8008ef8:	b118      	cbz	r0, 8008f02 <__swbuf_r+0x32>
 8008efa:	f04f 37ff 	mov.w	r7, #4294967295
 8008efe:	4638      	mov	r0, r7
 8008f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f02:	6823      	ldr	r3, [r4, #0]
 8008f04:	6922      	ldr	r2, [r4, #16]
 8008f06:	1a98      	subs	r0, r3, r2
 8008f08:	6963      	ldr	r3, [r4, #20]
 8008f0a:	b2f6      	uxtb	r6, r6
 8008f0c:	4283      	cmp	r3, r0
 8008f0e:	4637      	mov	r7, r6
 8008f10:	dc05      	bgt.n	8008f1e <__swbuf_r+0x4e>
 8008f12:	4621      	mov	r1, r4
 8008f14:	4628      	mov	r0, r5
 8008f16:	f7ff fdf3 	bl	8008b00 <_fflush_r>
 8008f1a:	2800      	cmp	r0, #0
 8008f1c:	d1ed      	bne.n	8008efa <__swbuf_r+0x2a>
 8008f1e:	68a3      	ldr	r3, [r4, #8]
 8008f20:	3b01      	subs	r3, #1
 8008f22:	60a3      	str	r3, [r4, #8]
 8008f24:	6823      	ldr	r3, [r4, #0]
 8008f26:	1c5a      	adds	r2, r3, #1
 8008f28:	6022      	str	r2, [r4, #0]
 8008f2a:	701e      	strb	r6, [r3, #0]
 8008f2c:	6962      	ldr	r2, [r4, #20]
 8008f2e:	1c43      	adds	r3, r0, #1
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d004      	beq.n	8008f3e <__swbuf_r+0x6e>
 8008f34:	89a3      	ldrh	r3, [r4, #12]
 8008f36:	07db      	lsls	r3, r3, #31
 8008f38:	d5e1      	bpl.n	8008efe <__swbuf_r+0x2e>
 8008f3a:	2e0a      	cmp	r6, #10
 8008f3c:	d1df      	bne.n	8008efe <__swbuf_r+0x2e>
 8008f3e:	4621      	mov	r1, r4
 8008f40:	4628      	mov	r0, r5
 8008f42:	f7ff fddd 	bl	8008b00 <_fflush_r>
 8008f46:	2800      	cmp	r0, #0
 8008f48:	d0d9      	beq.n	8008efe <__swbuf_r+0x2e>
 8008f4a:	e7d6      	b.n	8008efa <__swbuf_r+0x2a>

08008f4c <__swsetup_r>:
 8008f4c:	b538      	push	{r3, r4, r5, lr}
 8008f4e:	4b29      	ldr	r3, [pc, #164]	@ (8008ff4 <__swsetup_r+0xa8>)
 8008f50:	4605      	mov	r5, r0
 8008f52:	6818      	ldr	r0, [r3, #0]
 8008f54:	460c      	mov	r4, r1
 8008f56:	b118      	cbz	r0, 8008f60 <__swsetup_r+0x14>
 8008f58:	6a03      	ldr	r3, [r0, #32]
 8008f5a:	b90b      	cbnz	r3, 8008f60 <__swsetup_r+0x14>
 8008f5c:	f7fe ffc2 	bl	8007ee4 <__sinit>
 8008f60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f64:	0719      	lsls	r1, r3, #28
 8008f66:	d422      	bmi.n	8008fae <__swsetup_r+0x62>
 8008f68:	06da      	lsls	r2, r3, #27
 8008f6a:	d407      	bmi.n	8008f7c <__swsetup_r+0x30>
 8008f6c:	2209      	movs	r2, #9
 8008f6e:	602a      	str	r2, [r5, #0]
 8008f70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f74:	81a3      	strh	r3, [r4, #12]
 8008f76:	f04f 30ff 	mov.w	r0, #4294967295
 8008f7a:	e033      	b.n	8008fe4 <__swsetup_r+0x98>
 8008f7c:	0758      	lsls	r0, r3, #29
 8008f7e:	d512      	bpl.n	8008fa6 <__swsetup_r+0x5a>
 8008f80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f82:	b141      	cbz	r1, 8008f96 <__swsetup_r+0x4a>
 8008f84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f88:	4299      	cmp	r1, r3
 8008f8a:	d002      	beq.n	8008f92 <__swsetup_r+0x46>
 8008f8c:	4628      	mov	r0, r5
 8008f8e:	f7ff f94d 	bl	800822c <_free_r>
 8008f92:	2300      	movs	r3, #0
 8008f94:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f96:	89a3      	ldrh	r3, [r4, #12]
 8008f98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008f9c:	81a3      	strh	r3, [r4, #12]
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	6063      	str	r3, [r4, #4]
 8008fa2:	6923      	ldr	r3, [r4, #16]
 8008fa4:	6023      	str	r3, [r4, #0]
 8008fa6:	89a3      	ldrh	r3, [r4, #12]
 8008fa8:	f043 0308 	orr.w	r3, r3, #8
 8008fac:	81a3      	strh	r3, [r4, #12]
 8008fae:	6923      	ldr	r3, [r4, #16]
 8008fb0:	b94b      	cbnz	r3, 8008fc6 <__swsetup_r+0x7a>
 8008fb2:	89a3      	ldrh	r3, [r4, #12]
 8008fb4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008fb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fbc:	d003      	beq.n	8008fc6 <__swsetup_r+0x7a>
 8008fbe:	4621      	mov	r1, r4
 8008fc0:	4628      	mov	r0, r5
 8008fc2:	f000 f88b 	bl	80090dc <__smakebuf_r>
 8008fc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fca:	f013 0201 	ands.w	r2, r3, #1
 8008fce:	d00a      	beq.n	8008fe6 <__swsetup_r+0x9a>
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	60a2      	str	r2, [r4, #8]
 8008fd4:	6962      	ldr	r2, [r4, #20]
 8008fd6:	4252      	negs	r2, r2
 8008fd8:	61a2      	str	r2, [r4, #24]
 8008fda:	6922      	ldr	r2, [r4, #16]
 8008fdc:	b942      	cbnz	r2, 8008ff0 <__swsetup_r+0xa4>
 8008fde:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008fe2:	d1c5      	bne.n	8008f70 <__swsetup_r+0x24>
 8008fe4:	bd38      	pop	{r3, r4, r5, pc}
 8008fe6:	0799      	lsls	r1, r3, #30
 8008fe8:	bf58      	it	pl
 8008fea:	6962      	ldrpl	r2, [r4, #20]
 8008fec:	60a2      	str	r2, [r4, #8]
 8008fee:	e7f4      	b.n	8008fda <__swsetup_r+0x8e>
 8008ff0:	2000      	movs	r0, #0
 8008ff2:	e7f7      	b.n	8008fe4 <__swsetup_r+0x98>
 8008ff4:	200000d4 	.word	0x200000d4

08008ff8 <_raise_r>:
 8008ff8:	291f      	cmp	r1, #31
 8008ffa:	b538      	push	{r3, r4, r5, lr}
 8008ffc:	4605      	mov	r5, r0
 8008ffe:	460c      	mov	r4, r1
 8009000:	d904      	bls.n	800900c <_raise_r+0x14>
 8009002:	2316      	movs	r3, #22
 8009004:	6003      	str	r3, [r0, #0]
 8009006:	f04f 30ff 	mov.w	r0, #4294967295
 800900a:	bd38      	pop	{r3, r4, r5, pc}
 800900c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800900e:	b112      	cbz	r2, 8009016 <_raise_r+0x1e>
 8009010:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009014:	b94b      	cbnz	r3, 800902a <_raise_r+0x32>
 8009016:	4628      	mov	r0, r5
 8009018:	f000 f830 	bl	800907c <_getpid_r>
 800901c:	4622      	mov	r2, r4
 800901e:	4601      	mov	r1, r0
 8009020:	4628      	mov	r0, r5
 8009022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009026:	f000 b817 	b.w	8009058 <_kill_r>
 800902a:	2b01      	cmp	r3, #1
 800902c:	d00a      	beq.n	8009044 <_raise_r+0x4c>
 800902e:	1c59      	adds	r1, r3, #1
 8009030:	d103      	bne.n	800903a <_raise_r+0x42>
 8009032:	2316      	movs	r3, #22
 8009034:	6003      	str	r3, [r0, #0]
 8009036:	2001      	movs	r0, #1
 8009038:	e7e7      	b.n	800900a <_raise_r+0x12>
 800903a:	2100      	movs	r1, #0
 800903c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009040:	4620      	mov	r0, r4
 8009042:	4798      	blx	r3
 8009044:	2000      	movs	r0, #0
 8009046:	e7e0      	b.n	800900a <_raise_r+0x12>

08009048 <raise>:
 8009048:	4b02      	ldr	r3, [pc, #8]	@ (8009054 <raise+0xc>)
 800904a:	4601      	mov	r1, r0
 800904c:	6818      	ldr	r0, [r3, #0]
 800904e:	f7ff bfd3 	b.w	8008ff8 <_raise_r>
 8009052:	bf00      	nop
 8009054:	200000d4 	.word	0x200000d4

08009058 <_kill_r>:
 8009058:	b538      	push	{r3, r4, r5, lr}
 800905a:	4d07      	ldr	r5, [pc, #28]	@ (8009078 <_kill_r+0x20>)
 800905c:	2300      	movs	r3, #0
 800905e:	4604      	mov	r4, r0
 8009060:	4608      	mov	r0, r1
 8009062:	4611      	mov	r1, r2
 8009064:	602b      	str	r3, [r5, #0]
 8009066:	f7f7 fe9f 	bl	8000da8 <_kill>
 800906a:	1c43      	adds	r3, r0, #1
 800906c:	d102      	bne.n	8009074 <_kill_r+0x1c>
 800906e:	682b      	ldr	r3, [r5, #0]
 8009070:	b103      	cbz	r3, 8009074 <_kill_r+0x1c>
 8009072:	6023      	str	r3, [r4, #0]
 8009074:	bd38      	pop	{r3, r4, r5, pc}
 8009076:	bf00      	nop
 8009078:	20000620 	.word	0x20000620

0800907c <_getpid_r>:
 800907c:	f7f7 be8c 	b.w	8000d98 <_getpid>

08009080 <_malloc_usable_size_r>:
 8009080:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009084:	1f18      	subs	r0, r3, #4
 8009086:	2b00      	cmp	r3, #0
 8009088:	bfbc      	itt	lt
 800908a:	580b      	ldrlt	r3, [r1, r0]
 800908c:	18c0      	addlt	r0, r0, r3
 800908e:	4770      	bx	lr

08009090 <__swhatbuf_r>:
 8009090:	b570      	push	{r4, r5, r6, lr}
 8009092:	460c      	mov	r4, r1
 8009094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009098:	2900      	cmp	r1, #0
 800909a:	b096      	sub	sp, #88	@ 0x58
 800909c:	4615      	mov	r5, r2
 800909e:	461e      	mov	r6, r3
 80090a0:	da0d      	bge.n	80090be <__swhatbuf_r+0x2e>
 80090a2:	89a3      	ldrh	r3, [r4, #12]
 80090a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80090a8:	f04f 0100 	mov.w	r1, #0
 80090ac:	bf14      	ite	ne
 80090ae:	2340      	movne	r3, #64	@ 0x40
 80090b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80090b4:	2000      	movs	r0, #0
 80090b6:	6031      	str	r1, [r6, #0]
 80090b8:	602b      	str	r3, [r5, #0]
 80090ba:	b016      	add	sp, #88	@ 0x58
 80090bc:	bd70      	pop	{r4, r5, r6, pc}
 80090be:	466a      	mov	r2, sp
 80090c0:	f000 f848 	bl	8009154 <_fstat_r>
 80090c4:	2800      	cmp	r0, #0
 80090c6:	dbec      	blt.n	80090a2 <__swhatbuf_r+0x12>
 80090c8:	9901      	ldr	r1, [sp, #4]
 80090ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80090ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80090d2:	4259      	negs	r1, r3
 80090d4:	4159      	adcs	r1, r3
 80090d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090da:	e7eb      	b.n	80090b4 <__swhatbuf_r+0x24>

080090dc <__smakebuf_r>:
 80090dc:	898b      	ldrh	r3, [r1, #12]
 80090de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090e0:	079d      	lsls	r5, r3, #30
 80090e2:	4606      	mov	r6, r0
 80090e4:	460c      	mov	r4, r1
 80090e6:	d507      	bpl.n	80090f8 <__smakebuf_r+0x1c>
 80090e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80090ec:	6023      	str	r3, [r4, #0]
 80090ee:	6123      	str	r3, [r4, #16]
 80090f0:	2301      	movs	r3, #1
 80090f2:	6163      	str	r3, [r4, #20]
 80090f4:	b003      	add	sp, #12
 80090f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090f8:	ab01      	add	r3, sp, #4
 80090fa:	466a      	mov	r2, sp
 80090fc:	f7ff ffc8 	bl	8009090 <__swhatbuf_r>
 8009100:	9f00      	ldr	r7, [sp, #0]
 8009102:	4605      	mov	r5, r0
 8009104:	4639      	mov	r1, r7
 8009106:	4630      	mov	r0, r6
 8009108:	f7ff f904 	bl	8008314 <_malloc_r>
 800910c:	b948      	cbnz	r0, 8009122 <__smakebuf_r+0x46>
 800910e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009112:	059a      	lsls	r2, r3, #22
 8009114:	d4ee      	bmi.n	80090f4 <__smakebuf_r+0x18>
 8009116:	f023 0303 	bic.w	r3, r3, #3
 800911a:	f043 0302 	orr.w	r3, r3, #2
 800911e:	81a3      	strh	r3, [r4, #12]
 8009120:	e7e2      	b.n	80090e8 <__smakebuf_r+0xc>
 8009122:	89a3      	ldrh	r3, [r4, #12]
 8009124:	6020      	str	r0, [r4, #0]
 8009126:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800912a:	81a3      	strh	r3, [r4, #12]
 800912c:	9b01      	ldr	r3, [sp, #4]
 800912e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009132:	b15b      	cbz	r3, 800914c <__smakebuf_r+0x70>
 8009134:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009138:	4630      	mov	r0, r6
 800913a:	f000 f81d 	bl	8009178 <_isatty_r>
 800913e:	b128      	cbz	r0, 800914c <__smakebuf_r+0x70>
 8009140:	89a3      	ldrh	r3, [r4, #12]
 8009142:	f023 0303 	bic.w	r3, r3, #3
 8009146:	f043 0301 	orr.w	r3, r3, #1
 800914a:	81a3      	strh	r3, [r4, #12]
 800914c:	89a3      	ldrh	r3, [r4, #12]
 800914e:	431d      	orrs	r5, r3
 8009150:	81a5      	strh	r5, [r4, #12]
 8009152:	e7cf      	b.n	80090f4 <__smakebuf_r+0x18>

08009154 <_fstat_r>:
 8009154:	b538      	push	{r3, r4, r5, lr}
 8009156:	4d07      	ldr	r5, [pc, #28]	@ (8009174 <_fstat_r+0x20>)
 8009158:	2300      	movs	r3, #0
 800915a:	4604      	mov	r4, r0
 800915c:	4608      	mov	r0, r1
 800915e:	4611      	mov	r1, r2
 8009160:	602b      	str	r3, [r5, #0]
 8009162:	f7f7 fe81 	bl	8000e68 <_fstat>
 8009166:	1c43      	adds	r3, r0, #1
 8009168:	d102      	bne.n	8009170 <_fstat_r+0x1c>
 800916a:	682b      	ldr	r3, [r5, #0]
 800916c:	b103      	cbz	r3, 8009170 <_fstat_r+0x1c>
 800916e:	6023      	str	r3, [r4, #0]
 8009170:	bd38      	pop	{r3, r4, r5, pc}
 8009172:	bf00      	nop
 8009174:	20000620 	.word	0x20000620

08009178 <_isatty_r>:
 8009178:	b538      	push	{r3, r4, r5, lr}
 800917a:	4d06      	ldr	r5, [pc, #24]	@ (8009194 <_isatty_r+0x1c>)
 800917c:	2300      	movs	r3, #0
 800917e:	4604      	mov	r4, r0
 8009180:	4608      	mov	r0, r1
 8009182:	602b      	str	r3, [r5, #0]
 8009184:	f7f7 fe80 	bl	8000e88 <_isatty>
 8009188:	1c43      	adds	r3, r0, #1
 800918a:	d102      	bne.n	8009192 <_isatty_r+0x1a>
 800918c:	682b      	ldr	r3, [r5, #0]
 800918e:	b103      	cbz	r3, 8009192 <_isatty_r+0x1a>
 8009190:	6023      	str	r3, [r4, #0]
 8009192:	bd38      	pop	{r3, r4, r5, pc}
 8009194:	20000620 	.word	0x20000620

08009198 <_init>:
 8009198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800919a:	bf00      	nop
 800919c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800919e:	bc08      	pop	{r3}
 80091a0:	469e      	mov	lr, r3
 80091a2:	4770      	bx	lr

080091a4 <_fini>:
 80091a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091a6:	bf00      	nop
 80091a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091aa:	bc08      	pop	{r3}
 80091ac:	469e      	mov	lr, r3
 80091ae:	4770      	bx	lr
