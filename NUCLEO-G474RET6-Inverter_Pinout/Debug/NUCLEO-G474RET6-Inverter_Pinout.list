
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e44c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000058c  0800e630  0800e630  0000f630  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ebbc  0800ebbc  00010290  2**0
                  CONTENTS
  4 .ARM          00000008  0800ebbc  0800ebbc  0000fbbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ebc4  0800ebc4  00010290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ebc4  0800ebc4  0000fbc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ebc8  0800ebc8  0000fbc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  0800ebcc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000578  20000290  0800ee5c  00010290  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000808  0800ee5c  00010808  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010290  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c3d6  00000000  00000000  000102c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039af  00000000  00000000  0002c696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001670  00000000  00000000  00030048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000114d  00000000  00000000  000316b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a67e  00000000  00000000  00032805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c463  00000000  00000000  0005ce83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114782  00000000  00000000  000792e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018da68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000749c  00000000  00000000  0018daac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  00194f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000290 	.word	0x20000290
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e614 	.word	0x0800e614

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000294 	.word	0x20000294
 800021c:	0800e614 	.word	0x0800e614

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b9a0 	b.w	8001050 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f83c 	bl	8000d94 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_d2lz>:
 8000d28:	b538      	push	{r3, r4, r5, lr}
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4604      	mov	r4, r0
 8000d30:	460d      	mov	r5, r1
 8000d32:	f7ff ff0b 	bl	8000b4c <__aeabi_dcmplt>
 8000d36:	b928      	cbnz	r0, 8000d44 <__aeabi_d2lz+0x1c>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d40:	f000 b80a 	b.w	8000d58 <__aeabi_d2ulz>
 8000d44:	4620      	mov	r0, r4
 8000d46:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d4a:	f000 f805 	bl	8000d58 <__aeabi_d2ulz>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	bd38      	pop	{r3, r4, r5, pc}
 8000d56:	bf00      	nop

08000d58 <__aeabi_d2ulz>:
 8000d58:	b5d0      	push	{r4, r6, r7, lr}
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <__aeabi_d2ulz+0x34>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4606      	mov	r6, r0
 8000d60:	460f      	mov	r7, r1
 8000d62:	f7ff fc81 	bl	8000668 <__aeabi_dmul>
 8000d66:	f7ff ff57 	bl	8000c18 <__aeabi_d2uiz>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	f7ff fc02 	bl	8000574 <__aeabi_ui2d>
 8000d70:	4b07      	ldr	r3, [pc, #28]	@ (8000d90 <__aeabi_d2ulz+0x38>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f7ff fc78 	bl	8000668 <__aeabi_dmul>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	4639      	mov	r1, r7
 8000d80:	f7ff faba 	bl	80002f8 <__aeabi_dsub>
 8000d84:	f7ff ff48 	bl	8000c18 <__aeabi_d2uiz>
 8000d88:	4621      	mov	r1, r4
 8000d8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d8c:	3df00000 	.word	0x3df00000
 8000d90:	41f00000 	.word	0x41f00000

08000d94 <__udivmoddi4>:
 8000d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d98:	9d08      	ldr	r5, [sp, #32]
 8000d9a:	460c      	mov	r4, r1
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d14e      	bne.n	8000e3e <__udivmoddi4+0xaa>
 8000da0:	4694      	mov	ip, r2
 8000da2:	458c      	cmp	ip, r1
 8000da4:	4686      	mov	lr, r0
 8000da6:	fab2 f282 	clz	r2, r2
 8000daa:	d962      	bls.n	8000e72 <__udivmoddi4+0xde>
 8000dac:	b14a      	cbz	r2, 8000dc2 <__udivmoddi4+0x2e>
 8000dae:	f1c2 0320 	rsb	r3, r2, #32
 8000db2:	4091      	lsls	r1, r2
 8000db4:	fa20 f303 	lsr.w	r3, r0, r3
 8000db8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dbc:	4319      	orrs	r1, r3
 8000dbe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f f68c 	uxth.w	r6, ip
 8000dca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd2:	fb07 1114 	mls	r1, r7, r4, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb04 f106 	mul.w	r1, r4, r6
 8000dde:	4299      	cmp	r1, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x64>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dea:	f080 8112 	bcs.w	8001012 <__udivmoddi4+0x27e>
 8000dee:	4299      	cmp	r1, r3
 8000df0:	f240 810f 	bls.w	8001012 <__udivmoddi4+0x27e>
 8000df4:	3c02      	subs	r4, #2
 8000df6:	4463      	add	r3, ip
 8000df8:	1a59      	subs	r1, r3, r1
 8000dfa:	fa1f f38e 	uxth.w	r3, lr
 8000dfe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e02:	fb07 1110 	mls	r1, r7, r0, r1
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f606 	mul.w	r6, r0, r6
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x94>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e1a:	f080 80fc 	bcs.w	8001016 <__udivmoddi4+0x282>
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	f240 80f9 	bls.w	8001016 <__udivmoddi4+0x282>
 8000e24:	4463      	add	r3, ip
 8000e26:	3802      	subs	r0, #2
 8000e28:	1b9b      	subs	r3, r3, r6
 8000e2a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e2e:	2100      	movs	r1, #0
 8000e30:	b11d      	cbz	r5, 8000e3a <__udivmoddi4+0xa6>
 8000e32:	40d3      	lsrs	r3, r2
 8000e34:	2200      	movs	r2, #0
 8000e36:	e9c5 3200 	strd	r3, r2, [r5]
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d905      	bls.n	8000e4e <__udivmoddi4+0xba>
 8000e42:	b10d      	cbz	r5, 8000e48 <__udivmoddi4+0xb4>
 8000e44:	e9c5 0100 	strd	r0, r1, [r5]
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4608      	mov	r0, r1
 8000e4c:	e7f5      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000e4e:	fab3 f183 	clz	r1, r3
 8000e52:	2900      	cmp	r1, #0
 8000e54:	d146      	bne.n	8000ee4 <__udivmoddi4+0x150>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d302      	bcc.n	8000e60 <__udivmoddi4+0xcc>
 8000e5a:	4290      	cmp	r0, r2
 8000e5c:	f0c0 80f0 	bcc.w	8001040 <__udivmoddi4+0x2ac>
 8000e60:	1a86      	subs	r6, r0, r2
 8000e62:	eb64 0303 	sbc.w	r3, r4, r3
 8000e66:	2001      	movs	r0, #1
 8000e68:	2d00      	cmp	r5, #0
 8000e6a:	d0e6      	beq.n	8000e3a <__udivmoddi4+0xa6>
 8000e6c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e70:	e7e3      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000e72:	2a00      	cmp	r2, #0
 8000e74:	f040 8090 	bne.w	8000f98 <__udivmoddi4+0x204>
 8000e78:	eba1 040c 	sub.w	r4, r1, ip
 8000e7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e80:	fa1f f78c 	uxth.w	r7, ip
 8000e84:	2101      	movs	r1, #1
 8000e86:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e8e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e96:	fb07 f006 	mul.w	r0, r7, r6
 8000e9a:	4298      	cmp	r0, r3
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x11c>
 8000e9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x11a>
 8000ea8:	4298      	cmp	r0, r3
 8000eaa:	f200 80cd 	bhi.w	8001048 <__udivmoddi4+0x2b4>
 8000eae:	4626      	mov	r6, r4
 8000eb0:	1a1c      	subs	r4, r3, r0
 8000eb2:	fa1f f38e 	uxth.w	r3, lr
 8000eb6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eba:	fb08 4410 	mls	r4, r8, r0, r4
 8000ebe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ec2:	fb00 f707 	mul.w	r7, r0, r7
 8000ec6:	429f      	cmp	r7, r3
 8000ec8:	d908      	bls.n	8000edc <__udivmoddi4+0x148>
 8000eca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ece:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ed2:	d202      	bcs.n	8000eda <__udivmoddi4+0x146>
 8000ed4:	429f      	cmp	r7, r3
 8000ed6:	f200 80b0 	bhi.w	800103a <__udivmoddi4+0x2a6>
 8000eda:	4620      	mov	r0, r4
 8000edc:	1bdb      	subs	r3, r3, r7
 8000ede:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ee2:	e7a5      	b.n	8000e30 <__udivmoddi4+0x9c>
 8000ee4:	f1c1 0620 	rsb	r6, r1, #32
 8000ee8:	408b      	lsls	r3, r1
 8000eea:	fa22 f706 	lsr.w	r7, r2, r6
 8000eee:	431f      	orrs	r7, r3
 8000ef0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ef4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ef8:	ea43 030c 	orr.w	r3, r3, ip
 8000efc:	40f4      	lsrs	r4, r6
 8000efe:	fa00 f801 	lsl.w	r8, r0, r1
 8000f02:	0c38      	lsrs	r0, r7, #16
 8000f04:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f08:	fbb4 fef0 	udiv	lr, r4, r0
 8000f0c:	fa1f fc87 	uxth.w	ip, r7
 8000f10:	fb00 441e 	mls	r4, r0, lr, r4
 8000f14:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f18:	fb0e f90c 	mul.w	r9, lr, ip
 8000f1c:	45a1      	cmp	r9, r4
 8000f1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f22:	d90a      	bls.n	8000f3a <__udivmoddi4+0x1a6>
 8000f24:	193c      	adds	r4, r7, r4
 8000f26:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f2a:	f080 8084 	bcs.w	8001036 <__udivmoddi4+0x2a2>
 8000f2e:	45a1      	cmp	r9, r4
 8000f30:	f240 8081 	bls.w	8001036 <__udivmoddi4+0x2a2>
 8000f34:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f38:	443c      	add	r4, r7
 8000f3a:	eba4 0409 	sub.w	r4, r4, r9
 8000f3e:	fa1f f983 	uxth.w	r9, r3
 8000f42:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f46:	fb00 4413 	mls	r4, r0, r3, r4
 8000f4a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f4e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f52:	45a4      	cmp	ip, r4
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x1d2>
 8000f56:	193c      	adds	r4, r7, r4
 8000f58:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f5c:	d267      	bcs.n	800102e <__udivmoddi4+0x29a>
 8000f5e:	45a4      	cmp	ip, r4
 8000f60:	d965      	bls.n	800102e <__udivmoddi4+0x29a>
 8000f62:	3b02      	subs	r3, #2
 8000f64:	443c      	add	r4, r7
 8000f66:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f6a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f6e:	eba4 040c 	sub.w	r4, r4, ip
 8000f72:	429c      	cmp	r4, r3
 8000f74:	46ce      	mov	lr, r9
 8000f76:	469c      	mov	ip, r3
 8000f78:	d351      	bcc.n	800101e <__udivmoddi4+0x28a>
 8000f7a:	d04e      	beq.n	800101a <__udivmoddi4+0x286>
 8000f7c:	b155      	cbz	r5, 8000f94 <__udivmoddi4+0x200>
 8000f7e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f82:	eb64 040c 	sbc.w	r4, r4, ip
 8000f86:	fa04 f606 	lsl.w	r6, r4, r6
 8000f8a:	40cb      	lsrs	r3, r1
 8000f8c:	431e      	orrs	r6, r3
 8000f8e:	40cc      	lsrs	r4, r1
 8000f90:	e9c5 6400 	strd	r6, r4, [r5]
 8000f94:	2100      	movs	r1, #0
 8000f96:	e750      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000f98:	f1c2 0320 	rsb	r3, r2, #32
 8000f9c:	fa20 f103 	lsr.w	r1, r0, r3
 8000fa0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa4:	fa24 f303 	lsr.w	r3, r4, r3
 8000fa8:	4094      	lsls	r4, r2
 8000faa:	430c      	orrs	r4, r1
 8000fac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fb0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fb4:	fa1f f78c 	uxth.w	r7, ip
 8000fb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fbc:	fb08 3110 	mls	r1, r8, r0, r3
 8000fc0:	0c23      	lsrs	r3, r4, #16
 8000fc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fc6:	fb00 f107 	mul.w	r1, r0, r7
 8000fca:	4299      	cmp	r1, r3
 8000fcc:	d908      	bls.n	8000fe0 <__udivmoddi4+0x24c>
 8000fce:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fd6:	d22c      	bcs.n	8001032 <__udivmoddi4+0x29e>
 8000fd8:	4299      	cmp	r1, r3
 8000fda:	d92a      	bls.n	8001032 <__udivmoddi4+0x29e>
 8000fdc:	3802      	subs	r0, #2
 8000fde:	4463      	add	r3, ip
 8000fe0:	1a5b      	subs	r3, r3, r1
 8000fe2:	b2a4      	uxth	r4, r4
 8000fe4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fe8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ff0:	fb01 f307 	mul.w	r3, r1, r7
 8000ff4:	42a3      	cmp	r3, r4
 8000ff6:	d908      	bls.n	800100a <__udivmoddi4+0x276>
 8000ff8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ffc:	f101 36ff 	add.w	r6, r1, #4294967295
 8001000:	d213      	bcs.n	800102a <__udivmoddi4+0x296>
 8001002:	42a3      	cmp	r3, r4
 8001004:	d911      	bls.n	800102a <__udivmoddi4+0x296>
 8001006:	3902      	subs	r1, #2
 8001008:	4464      	add	r4, ip
 800100a:	1ae4      	subs	r4, r4, r3
 800100c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001010:	e739      	b.n	8000e86 <__udivmoddi4+0xf2>
 8001012:	4604      	mov	r4, r0
 8001014:	e6f0      	b.n	8000df8 <__udivmoddi4+0x64>
 8001016:	4608      	mov	r0, r1
 8001018:	e706      	b.n	8000e28 <__udivmoddi4+0x94>
 800101a:	45c8      	cmp	r8, r9
 800101c:	d2ae      	bcs.n	8000f7c <__udivmoddi4+0x1e8>
 800101e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001022:	eb63 0c07 	sbc.w	ip, r3, r7
 8001026:	3801      	subs	r0, #1
 8001028:	e7a8      	b.n	8000f7c <__udivmoddi4+0x1e8>
 800102a:	4631      	mov	r1, r6
 800102c:	e7ed      	b.n	800100a <__udivmoddi4+0x276>
 800102e:	4603      	mov	r3, r0
 8001030:	e799      	b.n	8000f66 <__udivmoddi4+0x1d2>
 8001032:	4630      	mov	r0, r6
 8001034:	e7d4      	b.n	8000fe0 <__udivmoddi4+0x24c>
 8001036:	46d6      	mov	lr, sl
 8001038:	e77f      	b.n	8000f3a <__udivmoddi4+0x1a6>
 800103a:	4463      	add	r3, ip
 800103c:	3802      	subs	r0, #2
 800103e:	e74d      	b.n	8000edc <__udivmoddi4+0x148>
 8001040:	4606      	mov	r6, r0
 8001042:	4623      	mov	r3, r4
 8001044:	4608      	mov	r0, r1
 8001046:	e70f      	b.n	8000e68 <__udivmoddi4+0xd4>
 8001048:	3e02      	subs	r6, #2
 800104a:	4463      	add	r3, ip
 800104c:	e730      	b.n	8000eb0 <__udivmoddi4+0x11c>
 800104e:	bf00      	nop

08001050 <__aeabi_idiv0>:
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08c      	sub	sp, #48	@ 0x30
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800105a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	2220      	movs	r2, #32
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f009 ff1a 	bl	800aea6 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001072:	4b33      	ldr	r3, [pc, #204]	@ (8001140 <MX_ADC1_Init+0xec>)
 8001074:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001078:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800107a:	4b31      	ldr	r3, [pc, #196]	@ (8001140 <MX_ADC1_Init+0xec>)
 800107c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001080:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001082:	4b2f      	ldr	r3, [pc, #188]	@ (8001140 <MX_ADC1_Init+0xec>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001088:	4b2d      	ldr	r3, [pc, #180]	@ (8001140 <MX_ADC1_Init+0xec>)
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800108e:	4b2c      	ldr	r3, [pc, #176]	@ (8001140 <MX_ADC1_Init+0xec>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001094:	4b2a      	ldr	r3, [pc, #168]	@ (8001140 <MX_ADC1_Init+0xec>)
 8001096:	2200      	movs	r2, #0
 8001098:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800109a:	4b29      	ldr	r3, [pc, #164]	@ (8001140 <MX_ADC1_Init+0xec>)
 800109c:	2204      	movs	r2, #4
 800109e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010a0:	4b27      	ldr	r3, [pc, #156]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010a6:	4b26      	ldr	r3, [pc, #152]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80010ac:	4b24      	ldr	r3, [pc, #144]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010b2:	4b23      	ldr	r3, [pc, #140]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 80010ba:	4b21      	ldr	r3, [pc, #132]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010bc:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 80010c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010d8:	4b19      	ldr	r3, [pc, #100]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010e0:	4817      	ldr	r0, [pc, #92]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010e2:	f001 fdc1 	bl	8002c68 <HAL_ADC_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80010ec:	f000 fb32 	bl	8001754 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010f0:	2300      	movs	r3, #0
 80010f2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010f8:	4619      	mov	r1, r3
 80010fa:	4811      	ldr	r0, [pc, #68]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010fc:	f003 f944 	bl	8004388 <HAL_ADCEx_MultiModeConfigChannel>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001106:	f000 fb25 	bl	8001754 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800110a:	4b0e      	ldr	r3, [pc, #56]	@ (8001144 <MX_ADC1_Init+0xf0>)
 800110c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800110e:	2306      	movs	r3, #6
 8001110:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8001112:	2304      	movs	r3, #4
 8001114:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001116:	237f      	movs	r3, #127	@ 0x7f
 8001118:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800111a:	2304      	movs	r3, #4
 800111c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	4619      	mov	r1, r3
 8001126:	4806      	ldr	r0, [pc, #24]	@ (8001140 <MX_ADC1_Init+0xec>)
 8001128:	f002 fab2 	bl	8003690 <HAL_ADC_ConfigChannel>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001132:	f000 fb0f 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	3730      	adds	r7, #48	@ 0x30
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200002ac 	.word	0x200002ac
 8001144:	08600004 	.word	0x08600004

08001148 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800114e:	463b      	mov	r3, r7
 8001150:	2220      	movs	r2, #32
 8001152:	2100      	movs	r1, #0
 8001154:	4618      	mov	r0, r3
 8001156:	f009 fea6 	bl	800aea6 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800115a:	4b2b      	ldr	r3, [pc, #172]	@ (8001208 <MX_ADC2_Init+0xc0>)
 800115c:	4a2b      	ldr	r2, [pc, #172]	@ (800120c <MX_ADC2_Init+0xc4>)
 800115e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001160:	4b29      	ldr	r3, [pc, #164]	@ (8001208 <MX_ADC2_Init+0xc0>)
 8001162:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001166:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001168:	4b27      	ldr	r3, [pc, #156]	@ (8001208 <MX_ADC2_Init+0xc0>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800116e:	4b26      	ldr	r3, [pc, #152]	@ (8001208 <MX_ADC2_Init+0xc0>)
 8001170:	2200      	movs	r2, #0
 8001172:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001174:	4b24      	ldr	r3, [pc, #144]	@ (8001208 <MX_ADC2_Init+0xc0>)
 8001176:	2200      	movs	r2, #0
 8001178:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800117a:	4b23      	ldr	r3, [pc, #140]	@ (8001208 <MX_ADC2_Init+0xc0>)
 800117c:	2200      	movs	r2, #0
 800117e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001180:	4b21      	ldr	r3, [pc, #132]	@ (8001208 <MX_ADC2_Init+0xc0>)
 8001182:	2204      	movs	r2, #4
 8001184:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001186:	4b20      	ldr	r3, [pc, #128]	@ (8001208 <MX_ADC2_Init+0xc0>)
 8001188:	2200      	movs	r2, #0
 800118a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800118c:	4b1e      	ldr	r3, [pc, #120]	@ (8001208 <MX_ADC2_Init+0xc0>)
 800118e:	2200      	movs	r2, #0
 8001190:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001192:	4b1d      	ldr	r3, [pc, #116]	@ (8001208 <MX_ADC2_Init+0xc0>)
 8001194:	2201      	movs	r2, #1
 8001196:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001198:	4b1b      	ldr	r3, [pc, #108]	@ (8001208 <MX_ADC2_Init+0xc0>)
 800119a:	2200      	movs	r2, #0
 800119c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011a0:	4b19      	ldr	r3, [pc, #100]	@ (8001208 <MX_ADC2_Init+0xc0>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011a6:	4b18      	ldr	r3, [pc, #96]	@ (8001208 <MX_ADC2_Init+0xc0>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80011ac:	4b16      	ldr	r3, [pc, #88]	@ (8001208 <MX_ADC2_Init+0xc0>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011b4:	4b14      	ldr	r3, [pc, #80]	@ (8001208 <MX_ADC2_Init+0xc0>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80011ba:	4b13      	ldr	r3, [pc, #76]	@ (8001208 <MX_ADC2_Init+0xc0>)
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011c2:	4811      	ldr	r0, [pc, #68]	@ (8001208 <MX_ADC2_Init+0xc0>)
 80011c4:	f001 fd50 	bl	8002c68 <HAL_ADC_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80011ce:	f000 fac1 	bl	8001754 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80011d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001210 <MX_ADC2_Init+0xc8>)
 80011d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011d6:	2306      	movs	r3, #6
 80011d8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011de:	237f      	movs	r3, #127	@ 0x7f
 80011e0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011e2:	2304      	movs	r3, #4
 80011e4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011ea:	463b      	mov	r3, r7
 80011ec:	4619      	mov	r1, r3
 80011ee:	4806      	ldr	r0, [pc, #24]	@ (8001208 <MX_ADC2_Init+0xc0>)
 80011f0:	f002 fa4e 	bl	8003690 <HAL_ADC_ConfigChannel>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80011fa:	f000 faab 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	3720      	adds	r7, #32
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000318 	.word	0x20000318
 800120c:	50000100 	.word	0x50000100
 8001210:	19200040 	.word	0x19200040

08001214 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b0a4      	sub	sp, #144	@ 0x90
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800122c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001230:	2254      	movs	r2, #84	@ 0x54
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f009 fe36 	bl	800aea6 <memset>
  if(adcHandle->Instance==ADC1)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001242:	f040 80a8 	bne.w	8001396 <HAL_ADC_MspInit+0x182>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001246:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800124a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800124c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001250:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001252:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001256:	4618      	mov	r0, r3
 8001258:	f004 fd88 	bl	8005d6c <HAL_RCCEx_PeriphCLKConfig>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001262:	f000 fa77 	bl	8001754 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001266:	4b81      	ldr	r3, [pc, #516]	@ (800146c <HAL_ADC_MspInit+0x258>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	3301      	adds	r3, #1
 800126c:	4a7f      	ldr	r2, [pc, #508]	@ (800146c <HAL_ADC_MspInit+0x258>)
 800126e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001270:	4b7e      	ldr	r3, [pc, #504]	@ (800146c <HAL_ADC_MspInit+0x258>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d10b      	bne.n	8001290 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001278:	4b7d      	ldr	r3, [pc, #500]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 800127a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127c:	4a7c      	ldr	r2, [pc, #496]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 800127e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001282:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001284:	4b7a      	ldr	r3, [pc, #488]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 8001286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001288:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800128c:	627b      	str	r3, [r7, #36]	@ 0x24
 800128e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001290:	4b77      	ldr	r3, [pc, #476]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 8001292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001294:	4a76      	ldr	r2, [pc, #472]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 8001296:	f043 0304 	orr.w	r3, r3, #4
 800129a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800129c:	4b74      	ldr	r3, [pc, #464]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 800129e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	623b      	str	r3, [r7, #32]
 80012a6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a8:	4b71      	ldr	r3, [pc, #452]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 80012aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ac:	4a70      	ldr	r2, [pc, #448]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012b4:	4b6e      	ldr	r3, [pc, #440]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 80012b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	61fb      	str	r3, [r7, #28]
 80012be:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c0:	4b6b      	ldr	r3, [pc, #428]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 80012c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c4:	4a6a      	ldr	r2, [pc, #424]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 80012c6:	f043 0302 	orr.w	r3, r3, #2
 80012ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012cc:	4b68      	ldr	r3, [pc, #416]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 80012ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d0:	f003 0302 	and.w	r3, r3, #2
 80012d4:	61bb      	str	r3, [r7, #24]
 80012d6:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 80012d8:	2304      	movs	r3, #4
 80012da:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012dc:	2303      	movs	r3, #3
 80012de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 80012e8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80012ec:	4619      	mov	r1, r3
 80012ee:	4861      	ldr	r0, [pc, #388]	@ (8001474 <HAL_ADC_MspInit+0x260>)
 80012f0:	f003 fd64 	bl	8004dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 80012f4:	2302      	movs	r3, #2
 80012f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012f8:	2303      	movs	r3, #3
 80012fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001308:	4619      	mov	r1, r3
 800130a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800130e:	f003 fd55 	bl	8004dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|V_Imes_Pin;
 8001312:	2303      	movs	r3, #3
 8001314:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001316:	2303      	movs	r3, #3
 8001318:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001322:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001326:	4619      	mov	r1, r3
 8001328:	4853      	ldr	r0, [pc, #332]	@ (8001478 <HAL_ADC_MspInit+0x264>)
 800132a:	f003 fd47 	bl	8004dbc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 800132e:	4b53      	ldr	r3, [pc, #332]	@ (800147c <HAL_ADC_MspInit+0x268>)
 8001330:	4a53      	ldr	r2, [pc, #332]	@ (8001480 <HAL_ADC_MspInit+0x26c>)
 8001332:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001334:	4b51      	ldr	r3, [pc, #324]	@ (800147c <HAL_ADC_MspInit+0x268>)
 8001336:	2205      	movs	r2, #5
 8001338:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800133a:	4b50      	ldr	r3, [pc, #320]	@ (800147c <HAL_ADC_MspInit+0x268>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001340:	4b4e      	ldr	r3, [pc, #312]	@ (800147c <HAL_ADC_MspInit+0x268>)
 8001342:	2200      	movs	r2, #0
 8001344:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001346:	4b4d      	ldr	r3, [pc, #308]	@ (800147c <HAL_ADC_MspInit+0x268>)
 8001348:	2280      	movs	r2, #128	@ 0x80
 800134a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800134c:	4b4b      	ldr	r3, [pc, #300]	@ (800147c <HAL_ADC_MspInit+0x268>)
 800134e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001352:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001354:	4b49      	ldr	r3, [pc, #292]	@ (800147c <HAL_ADC_MspInit+0x268>)
 8001356:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800135a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800135c:	4b47      	ldr	r3, [pc, #284]	@ (800147c <HAL_ADC_MspInit+0x268>)
 800135e:	2200      	movs	r2, #0
 8001360:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001362:	4b46      	ldr	r3, [pc, #280]	@ (800147c <HAL_ADC_MspInit+0x268>)
 8001364:	2200      	movs	r2, #0
 8001366:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001368:	4844      	ldr	r0, [pc, #272]	@ (800147c <HAL_ADC_MspInit+0x268>)
 800136a:	f003 f9f5 	bl	8004758 <HAL_DMA_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <HAL_ADC_MspInit+0x164>
    {
      Error_Handler();
 8001374:	f000 f9ee 	bl	8001754 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4a40      	ldr	r2, [pc, #256]	@ (800147c <HAL_ADC_MspInit+0x268>)
 800137c:	655a      	str	r2, [r3, #84]	@ 0x54
 800137e:	4a3f      	ldr	r2, [pc, #252]	@ (800147c <HAL_ADC_MspInit+0x268>)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001384:	2200      	movs	r2, #0
 8001386:	2100      	movs	r1, #0
 8001388:	2012      	movs	r0, #18
 800138a:	f003 f9bd 	bl	8004708 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800138e:	2012      	movs	r0, #18
 8001390:	f003 f9d4 	bl	800473c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001394:	e066      	b.n	8001464 <HAL_ADC_MspInit+0x250>
  else if(adcHandle->Instance==ADC2)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a3a      	ldr	r2, [pc, #232]	@ (8001484 <HAL_ADC_MspInit+0x270>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d161      	bne.n	8001464 <HAL_ADC_MspInit+0x250>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80013a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80013a6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80013aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013ac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013b0:	4618      	mov	r0, r3
 80013b2:	f004 fcdb 	bl	8005d6c <HAL_RCCEx_PeriphCLKConfig>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <HAL_ADC_MspInit+0x1ac>
      Error_Handler();
 80013bc:	f000 f9ca 	bl	8001754 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013c0:	4b2a      	ldr	r3, [pc, #168]	@ (800146c <HAL_ADC_MspInit+0x258>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	3301      	adds	r3, #1
 80013c6:	4a29      	ldr	r2, [pc, #164]	@ (800146c <HAL_ADC_MspInit+0x258>)
 80013c8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013ca:	4b28      	ldr	r3, [pc, #160]	@ (800146c <HAL_ADC_MspInit+0x258>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d10b      	bne.n	80013ea <HAL_ADC_MspInit+0x1d6>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013d2:	4b27      	ldr	r3, [pc, #156]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 80013d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d6:	4a26      	ldr	r2, [pc, #152]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 80013d8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013de:	4b24      	ldr	r3, [pc, #144]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 80013e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013e6:	617b      	str	r3, [r7, #20]
 80013e8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ea:	4b21      	ldr	r3, [pc, #132]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ee:	4a20      	ldr	r2, [pc, #128]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 80013f0:	f043 0304 	orr.w	r3, r3, #4
 80013f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fa:	f003 0304 	and.w	r3, r3, #4
 80013fe:	613b      	str	r3, [r7, #16]
 8001400:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	4b1b      	ldr	r3, [pc, #108]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001406:	4a1a      	ldr	r2, [pc, #104]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800140e:	4b18      	ldr	r3, [pc, #96]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 800141a:	230b      	movs	r3, #11
 800141c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800141e:	2303      	movs	r3, #3
 8001420:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800142a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800142e:	4619      	mov	r1, r3
 8001430:	4810      	ldr	r0, [pc, #64]	@ (8001474 <HAL_ADC_MspInit+0x260>)
 8001432:	f003 fcc3 	bl	8004dbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8001436:	2301      	movs	r3, #1
 8001438:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800143a:	2303      	movs	r3, #3
 800143c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8001446:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800144a:	4619      	mov	r1, r3
 800144c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001450:	f003 fcb4 	bl	8004dbc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001454:	2200      	movs	r2, #0
 8001456:	2100      	movs	r1, #0
 8001458:	2012      	movs	r0, #18
 800145a:	f003 f955 	bl	8004708 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800145e:	2012      	movs	r0, #18
 8001460:	f003 f96c 	bl	800473c <HAL_NVIC_EnableIRQ>
}
 8001464:	bf00      	nop
 8001466:	3790      	adds	r7, #144	@ 0x90
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	200003e4 	.word	0x200003e4
 8001470:	40021000 	.word	0x40021000
 8001474:	48000800 	.word	0x48000800
 8001478:	48000400 	.word	0x48000400
 800147c:	20000384 	.word	0x20000384
 8001480:	4002001c 	.word	0x4002001c
 8001484:	50000100 	.word	0x50000100

08001488 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800148e:	4b12      	ldr	r3, [pc, #72]	@ (80014d8 <MX_DMA_Init+0x50>)
 8001490:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001492:	4a11      	ldr	r2, [pc, #68]	@ (80014d8 <MX_DMA_Init+0x50>)
 8001494:	f043 0304 	orr.w	r3, r3, #4
 8001498:	6493      	str	r3, [r2, #72]	@ 0x48
 800149a:	4b0f      	ldr	r3, [pc, #60]	@ (80014d8 <MX_DMA_Init+0x50>)
 800149c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014a6:	4b0c      	ldr	r3, [pc, #48]	@ (80014d8 <MX_DMA_Init+0x50>)
 80014a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014aa:	4a0b      	ldr	r2, [pc, #44]	@ (80014d8 <MX_DMA_Init+0x50>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6493      	str	r3, [r2, #72]	@ 0x48
 80014b2:	4b09      	ldr	r3, [pc, #36]	@ (80014d8 <MX_DMA_Init+0x50>)
 80014b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	2100      	movs	r1, #0
 80014c2:	200c      	movs	r0, #12
 80014c4:	f003 f920 	bl	8004708 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80014c8:	200c      	movs	r0, #12
 80014ca:	f003 f937 	bl	800473c <HAL_NVIC_EnableIRQ>

}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40021000 	.word	0x40021000

080014dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08a      	sub	sp, #40	@ 0x28
 80014e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
 80014f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f2:	4b3f      	ldr	r3, [pc, #252]	@ (80015f0 <MX_GPIO_Init+0x114>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f6:	4a3e      	ldr	r2, [pc, #248]	@ (80015f0 <MX_GPIO_Init+0x114>)
 80014f8:	f043 0304 	orr.w	r3, r3, #4
 80014fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014fe:	4b3c      	ldr	r3, [pc, #240]	@ (80015f0 <MX_GPIO_Init+0x114>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001502:	f003 0304 	and.w	r3, r3, #4
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800150a:	4b39      	ldr	r3, [pc, #228]	@ (80015f0 <MX_GPIO_Init+0x114>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800150e:	4a38      	ldr	r2, [pc, #224]	@ (80015f0 <MX_GPIO_Init+0x114>)
 8001510:	f043 0320 	orr.w	r3, r3, #32
 8001514:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001516:	4b36      	ldr	r3, [pc, #216]	@ (80015f0 <MX_GPIO_Init+0x114>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151a:	f003 0320 	and.w	r3, r3, #32
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001522:	4b33      	ldr	r3, [pc, #204]	@ (80015f0 <MX_GPIO_Init+0x114>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001526:	4a32      	ldr	r2, [pc, #200]	@ (80015f0 <MX_GPIO_Init+0x114>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800152e:	4b30      	ldr	r3, [pc, #192]	@ (80015f0 <MX_GPIO_Init+0x114>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800153a:	4b2d      	ldr	r3, [pc, #180]	@ (80015f0 <MX_GPIO_Init+0x114>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153e:	4a2c      	ldr	r2, [pc, #176]	@ (80015f0 <MX_GPIO_Init+0x114>)
 8001540:	f043 0302 	orr.w	r3, r3, #2
 8001544:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001546:	4b2a      	ldr	r3, [pc, #168]	@ (80015f0 <MX_GPIO_Init+0x114>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001552:	4b27      	ldr	r3, [pc, #156]	@ (80015f0 <MX_GPIO_Init+0x114>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001556:	4a26      	ldr	r2, [pc, #152]	@ (80015f0 <MX_GPIO_Init+0x114>)
 8001558:	f043 0308 	orr.w	r3, r3, #8
 800155c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800155e:	4b24      	ldr	r3, [pc, #144]	@ (80015f0 <MX_GPIO_Init+0x114>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001562:	f003 0308 	and.w	r3, r3, #8
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 800156a:	2200      	movs	r2, #0
 800156c:	2120      	movs	r1, #32
 800156e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001572:	f003 fda5 	bl	80050c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8001576:	2200      	movs	r2, #0
 8001578:	2104      	movs	r1, #4
 800157a:	481e      	ldr	r0, [pc, #120]	@ (80015f4 <MX_GPIO_Init+0x118>)
 800157c:	f003 fda0 	bl	80050c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8001580:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001584:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001586:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800158a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	4619      	mov	r1, r3
 8001596:	4818      	ldr	r0, [pc, #96]	@ (80015f8 <MX_GPIO_Init+0x11c>)
 8001598:	f003 fc10 	bl	8004dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 800159c:	2320      	movs	r3, #32
 800159e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a0:	2301      	movs	r3, #1
 80015a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	2300      	movs	r3, #0
 80015aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	4619      	mov	r1, r3
 80015b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015b6:	f003 fc01 	bl	8004dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 80015ba:	2304      	movs	r3, #4
 80015bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015be:	2301      	movs	r3, #1
 80015c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c6:	2300      	movs	r3, #0
 80015c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 80015ca:	f107 0314 	add.w	r3, r7, #20
 80015ce:	4619      	mov	r1, r3
 80015d0:	4808      	ldr	r0, [pc, #32]	@ (80015f4 <MX_GPIO_Init+0x118>)
 80015d2:	f003 fbf3 	bl	8004dbc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2100      	movs	r1, #0
 80015da:	2028      	movs	r0, #40	@ 0x28
 80015dc:	f003 f894 	bl	8004708 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015e0:	2028      	movs	r0, #40	@ 0x28
 80015e2:	f003 f8ab 	bl	800473c <HAL_NVIC_EnableIRQ>

}
 80015e6:	bf00      	nop
 80015e8:	3728      	adds	r7, #40	@ 0x28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40021000 	.word	0x40021000
 80015f4:	48000c00 	.word	0x48000c00
 80015f8:	48000800 	.word	0x48000800

080015fc <HAL_ADC_ConvCpltCallback>:
{


}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]

	HAL_ADC_Start_DMA(hadc, adcBuffer, BUFFER_SIZE);
 8001604:	2205      	movs	r2, #5
 8001606:	4904      	ldr	r1, [pc, #16]	@ (8001618 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f001 fcef 	bl	8002fec <HAL_ADC_Start_DMA>

}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000638 	.word	0x20000638

0800161c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001620:	f001 f881 	bl	8002726 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001624:	f000 f83a 	bl	800169c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001628:	f7ff ff58 	bl	80014dc <MX_GPIO_Init>
  MX_DMA_Init();
 800162c:	f7ff ff2c 	bl	8001488 <MX_DMA_Init>
  MX_ADC2_Init();
 8001630:	f7ff fd8a 	bl	8001148 <MX_ADC2_Init>
  MX_ADC1_Init();
 8001634:	f7ff fd0e 	bl	8001054 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001638:	f000 fa7c 	bl	8001b34 <MX_TIM1_Init>
  MX_TIM3_Init();
 800163c:	f000 fb26 	bl	8001c8c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001640:	f000 fc68 	bl	8001f14 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001644:	f000 fcb2 	bl	8001fac <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	Shell_Init();
 8001648:	f000 fdf2 	bl	8002230 <Shell_Init>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800164c:	2100      	movs	r1, #0
 800164e:	4810      	ldr	r0, [pc, #64]	@ (8001690 <main+0x74>)
 8001650:	f004 ff0c 	bl	800646c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001654:	2100      	movs	r1, #0
 8001656:	480e      	ldr	r0, [pc, #56]	@ (8001690 <main+0x74>)
 8001658:	f006 f88c 	bl	8007774 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800165c:	2104      	movs	r1, #4
 800165e:	480c      	ldr	r0, [pc, #48]	@ (8001690 <main+0x74>)
 8001660:	f004 ff04 	bl	800646c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001664:	2104      	movs	r1, #4
 8001666:	480a      	ldr	r0, [pc, #40]	@ (8001690 <main+0x74>)
 8001668:	f006 f884 	bl	8007774 <HAL_TIMEx_PWMN_Start>


	//***** a activer pour lancer la conversion de l'adc par le dma ****
	HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);
 800166c:	217f      	movs	r1, #127	@ 0x7f
 800166e:	4809      	ldr	r0, [pc, #36]	@ (8001694 <main+0x78>)
 8001670:	f002 fdf6 	bl	8004260 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, adcBuffer, BUFFER_SIZE);
 8001674:	2205      	movs	r2, #5
 8001676:	4908      	ldr	r1, [pc, #32]	@ (8001698 <main+0x7c>)
 8001678:	4806      	ldr	r0, [pc, #24]	@ (8001694 <main+0x78>)
 800167a:	f001 fcb7 	bl	8002fec <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		Shell_Loop();
 800167e:	f000 fe17 	bl	80022b0 <Shell_Loop>
		 * #

		 */


		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001682:	2104      	movs	r1, #4
 8001684:	4802      	ldr	r0, [pc, #8]	@ (8001690 <main+0x74>)
 8001686:	f006 f875 	bl	8007774 <HAL_TIMEx_PWMN_Start>
		Shell_Loop();
 800168a:	bf00      	nop
 800168c:	e7f7      	b.n	800167e <main+0x62>
 800168e:	bf00      	nop
 8001690:	20000438 	.word	0x20000438
 8001694:	200002ac 	.word	0x200002ac
 8001698:	20000638 	.word	0x20000638

0800169c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b094      	sub	sp, #80	@ 0x50
 80016a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016a2:	f107 0318 	add.w	r3, r7, #24
 80016a6:	2238      	movs	r2, #56	@ 0x38
 80016a8:	2100      	movs	r1, #0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f009 fbfb 	bl	800aea6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016b0:	1d3b      	adds	r3, r7, #4
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	60da      	str	r2, [r3, #12]
 80016bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80016be:	2000      	movs	r0, #0
 80016c0:	f003 fd3a 	bl	8005138 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016c4:	2301      	movs	r3, #1
 80016c6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016cc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ce:	2302      	movs	r3, #2
 80016d0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016d2:	2303      	movs	r3, #3
 80016d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80016d6:	2306      	movs	r3, #6
 80016d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80016da:	2355      	movs	r3, #85	@ 0x55
 80016dc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016de:	2302      	movs	r3, #2
 80016e0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016e2:	2302      	movs	r3, #2
 80016e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016e6:	2302      	movs	r3, #2
 80016e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ea:	f107 0318 	add.w	r3, r7, #24
 80016ee:	4618      	mov	r0, r3
 80016f0:	f003 fdd6 	bl	80052a0 <HAL_RCC_OscConfig>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <SystemClock_Config+0x62>
  {
    Error_Handler();
 80016fa:	f000 f82b 	bl	8001754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016fe:	230f      	movs	r3, #15
 8001700:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001702:	2303      	movs	r3, #3
 8001704:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001712:	1d3b      	adds	r3, r7, #4
 8001714:	2104      	movs	r1, #4
 8001716:	4618      	mov	r0, r3
 8001718:	f004 f8da 	bl	80058d0 <HAL_RCC_ClockConfig>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001722:	f000 f817 	bl	8001754 <Error_Handler>
  }
}
 8001726:	bf00      	nop
 8001728:	3750      	adds	r7, #80	@ 0x50
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a04      	ldr	r2, [pc, #16]	@ (8001750 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d101      	bne.n	8001746 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001742:	f001 f809 	bl	8002758 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40001000 	.word	0x40001000

08001754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001758:	b672      	cpsid	i
}
 800175a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <Error_Handler+0x8>

08001760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001766:	4b0f      	ldr	r3, [pc, #60]	@ (80017a4 <HAL_MspInit+0x44>)
 8001768:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800176a:	4a0e      	ldr	r2, [pc, #56]	@ (80017a4 <HAL_MspInit+0x44>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	6613      	str	r3, [r2, #96]	@ 0x60
 8001772:	4b0c      	ldr	r3, [pc, #48]	@ (80017a4 <HAL_MspInit+0x44>)
 8001774:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800177e:	4b09      	ldr	r3, [pc, #36]	@ (80017a4 <HAL_MspInit+0x44>)
 8001780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001782:	4a08      	ldr	r2, [pc, #32]	@ (80017a4 <HAL_MspInit+0x44>)
 8001784:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001788:	6593      	str	r3, [r2, #88]	@ 0x58
 800178a:	4b06      	ldr	r3, [pc, #24]	@ (80017a4 <HAL_MspInit+0x44>)
 800178c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800178e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001792:	603b      	str	r3, [r7, #0]
 8001794:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001796:	f003 fd73 	bl	8005280 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40021000 	.word	0x40021000

080017a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08c      	sub	sp, #48	@ 0x30
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017b8:	4b2c      	ldr	r3, [pc, #176]	@ (800186c <HAL_InitTick+0xc4>)
 80017ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017bc:	4a2b      	ldr	r2, [pc, #172]	@ (800186c <HAL_InitTick+0xc4>)
 80017be:	f043 0310 	orr.w	r3, r3, #16
 80017c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80017c4:	4b29      	ldr	r3, [pc, #164]	@ (800186c <HAL_InitTick+0xc4>)
 80017c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c8:	f003 0310 	and.w	r3, r3, #16
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017d0:	f107 020c 	add.w	r2, r7, #12
 80017d4:	f107 0310 	add.w	r3, r7, #16
 80017d8:	4611      	mov	r1, r2
 80017da:	4618      	mov	r0, r3
 80017dc:	f004 fa4e 	bl	8005c7c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017e0:	f004 fa20 	bl	8005c24 <HAL_RCC_GetPCLK1Freq>
 80017e4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017e8:	4a21      	ldr	r2, [pc, #132]	@ (8001870 <HAL_InitTick+0xc8>)
 80017ea:	fba2 2303 	umull	r2, r3, r2, r3
 80017ee:	0c9b      	lsrs	r3, r3, #18
 80017f0:	3b01      	subs	r3, #1
 80017f2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80017f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001874 <HAL_InitTick+0xcc>)
 80017f6:	4a20      	ldr	r2, [pc, #128]	@ (8001878 <HAL_InitTick+0xd0>)
 80017f8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80017fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001874 <HAL_InitTick+0xcc>)
 80017fc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001800:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001802:	4a1c      	ldr	r2, [pc, #112]	@ (8001874 <HAL_InitTick+0xcc>)
 8001804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001806:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001808:	4b1a      	ldr	r3, [pc, #104]	@ (8001874 <HAL_InitTick+0xcc>)
 800180a:	2200      	movs	r2, #0
 800180c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800180e:	4b19      	ldr	r3, [pc, #100]	@ (8001874 <HAL_InitTick+0xcc>)
 8001810:	2200      	movs	r2, #0
 8001812:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001814:	4817      	ldr	r0, [pc, #92]	@ (8001874 <HAL_InitTick+0xcc>)
 8001816:	f004 fcf7 	bl	8006208 <HAL_TIM_Base_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001820:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001824:	2b00      	cmp	r3, #0
 8001826:	d11b      	bne.n	8001860 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001828:	4812      	ldr	r0, [pc, #72]	@ (8001874 <HAL_InitTick+0xcc>)
 800182a:	f004 fd4f 	bl	80062cc <HAL_TIM_Base_Start_IT>
 800182e:	4603      	mov	r3, r0
 8001830:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001834:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001838:	2b00      	cmp	r3, #0
 800183a:	d111      	bne.n	8001860 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800183c:	2036      	movs	r0, #54	@ 0x36
 800183e:	f002 ff7d 	bl	800473c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b0f      	cmp	r3, #15
 8001846:	d808      	bhi.n	800185a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001848:	2200      	movs	r2, #0
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	2036      	movs	r0, #54	@ 0x36
 800184e:	f002 ff5b 	bl	8004708 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001852:	4a0a      	ldr	r2, [pc, #40]	@ (800187c <HAL_InitTick+0xd4>)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6013      	str	r3, [r2, #0]
 8001858:	e002      	b.n	8001860 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001860:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001864:	4618      	mov	r0, r3
 8001866:	3730      	adds	r7, #48	@ 0x30
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40021000 	.word	0x40021000
 8001870:	431bde83 	.word	0x431bde83
 8001874:	200003e8 	.word	0x200003e8
 8001878:	40001000 	.word	0x40001000
 800187c:	200000c0 	.word	0x200000c0

08001880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8001884:	bf00      	nop
 8001886:	e7fd      	b.n	8001884 <NMI_Handler+0x4>

08001888 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800188c:	bf00      	nop
 800188e:	e7fd      	b.n	800188c <HardFault_Handler+0x4>

08001890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001894:	bf00      	nop
 8001896:	e7fd      	b.n	8001894 <MemManage_Handler+0x4>

08001898 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800189c:	bf00      	nop
 800189e:	e7fd      	b.n	800189c <BusFault_Handler+0x4>

080018a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a4:	bf00      	nop
 80018a6:	e7fd      	b.n	80018a4 <UsageFault_Handler+0x4>

080018a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80018e4:	4802      	ldr	r0, [pc, #8]	@ (80018f0 <DMA1_Channel2_IRQHandler+0x10>)
 80018e6:	f003 f91a 	bl	8004b1e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000384 	.word	0x20000384

080018f4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80018f8:	4803      	ldr	r0, [pc, #12]	@ (8001908 <ADC1_2_IRQHandler+0x14>)
 80018fa:	f001 fc4b 	bl	8003194 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80018fe:	4803      	ldr	r0, [pc, #12]	@ (800190c <ADC1_2_IRQHandler+0x18>)
 8001900:	f001 fc48 	bl	8003194 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}
 8001908:	200002ac 	.word	0x200002ac
 800190c:	20000318 	.word	0x20000318

08001910 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001914:	4802      	ldr	r0, [pc, #8]	@ (8001920 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001916:	f004 ff57 	bl	80067c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000438 	.word	0x20000438

08001924 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001928:	4802      	ldr	r0, [pc, #8]	@ (8001934 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800192a:	f004 ff4d 	bl	80067c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000438 	.word	0x20000438

08001938 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800193c:	4802      	ldr	r0, [pc, #8]	@ (8001948 <USART2_IRQHandler+0x10>)
 800193e:	f006 fb29 	bl	8007f94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200004d0 	.word	0x200004d0

0800194c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001950:	4802      	ldr	r0, [pc, #8]	@ (800195c <USART3_IRQHandler+0x10>)
 8001952:	f006 fb1f 	bl	8007f94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000560 	.word	0x20000560

08001960 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8001964:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001968:	f003 fbc2 	bl	80050f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}

08001970 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001974:	4802      	ldr	r0, [pc, #8]	@ (8001980 <TIM6_DAC_IRQHandler+0x10>)
 8001976:	f004 ff27 	bl	80067c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	200003e8 	.word	0x200003e8

08001984 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return 1;
 8001988:	2301      	movs	r3, #1
}
 800198a:	4618      	mov	r0, r3
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <_kill>:

int _kill(int pid, int sig)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800199e:	f009 fb31 	bl	800b004 <__errno>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2216      	movs	r2, #22
 80019a6:	601a      	str	r2, [r3, #0]
  return -1;
 80019a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <_exit>:

void _exit (int status)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019bc:	f04f 31ff 	mov.w	r1, #4294967295
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff ffe7 	bl	8001994 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019c6:	bf00      	nop
 80019c8:	e7fd      	b.n	80019c6 <_exit+0x12>

080019ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b086      	sub	sp, #24
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	60f8      	str	r0, [r7, #12]
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
 80019da:	e00a      	b.n	80019f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019dc:	f3af 8000 	nop.w
 80019e0:	4601      	mov	r1, r0
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	1c5a      	adds	r2, r3, #1
 80019e6:	60ba      	str	r2, [r7, #8]
 80019e8:	b2ca      	uxtb	r2, r1
 80019ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	3301      	adds	r3, #1
 80019f0:	617b      	str	r3, [r7, #20]
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	dbf0      	blt.n	80019dc <_read+0x12>
  }

  return len;
 80019fa:	687b      	ldr	r3, [r7, #4]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	e009      	b.n	8001a2a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	1c5a      	adds	r2, r3, #1
 8001a1a:	60ba      	str	r2, [r7, #8]
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	3301      	adds	r3, #1
 8001a28:	617b      	str	r3, [r7, #20]
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	dbf1      	blt.n	8001a16 <_write+0x12>
  }
  return len;
 8001a32:	687b      	ldr	r3, [r7, #4]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <_close>:

int _close(int file)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a64:	605a      	str	r2, [r3, #4]
  return 0;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <_isatty>:

int _isatty(int file)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a7c:	2301      	movs	r3, #1
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b085      	sub	sp, #20
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	60f8      	str	r0, [r7, #12]
 8001a92:	60b9      	str	r1, [r7, #8]
 8001a94:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aac:	4a14      	ldr	r2, [pc, #80]	@ (8001b00 <_sbrk+0x5c>)
 8001aae:	4b15      	ldr	r3, [pc, #84]	@ (8001b04 <_sbrk+0x60>)
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ab8:	4b13      	ldr	r3, [pc, #76]	@ (8001b08 <_sbrk+0x64>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d102      	bne.n	8001ac6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ac0:	4b11      	ldr	r3, [pc, #68]	@ (8001b08 <_sbrk+0x64>)
 8001ac2:	4a12      	ldr	r2, [pc, #72]	@ (8001b0c <_sbrk+0x68>)
 8001ac4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ac6:	4b10      	ldr	r3, [pc, #64]	@ (8001b08 <_sbrk+0x64>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4413      	add	r3, r2
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d207      	bcs.n	8001ae4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ad4:	f009 fa96 	bl	800b004 <__errno>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	220c      	movs	r2, #12
 8001adc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ade:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae2:	e009      	b.n	8001af8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ae4:	4b08      	ldr	r3, [pc, #32]	@ (8001b08 <_sbrk+0x64>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aea:	4b07      	ldr	r3, [pc, #28]	@ (8001b08 <_sbrk+0x64>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4413      	add	r3, r2
 8001af2:	4a05      	ldr	r2, [pc, #20]	@ (8001b08 <_sbrk+0x64>)
 8001af4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001af6:	68fb      	ldr	r3, [r7, #12]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20020000 	.word	0x20020000
 8001b04:	00000400 	.word	0x00000400
 8001b08:	20000434 	.word	0x20000434
 8001b0c:	20000808 	.word	0x20000808

08001b10 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b14:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <SystemInit+0x20>)
 8001b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b1a:	4a05      	ldr	r2, [pc, #20]	@ (8001b30 <SystemInit+0x20>)
 8001b1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b098      	sub	sp, #96	@ 0x60
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b3a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b46:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	605a      	str	r2, [r3, #4]
 8001b50:	609a      	str	r2, [r3, #8]
 8001b52:	60da      	str	r2, [r3, #12]
 8001b54:	611a      	str	r2, [r3, #16]
 8001b56:	615a      	str	r2, [r3, #20]
 8001b58:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b5a:	1d3b      	adds	r3, r7, #4
 8001b5c:	2234      	movs	r2, #52	@ 0x34
 8001b5e:	2100      	movs	r1, #0
 8001b60:	4618      	mov	r0, r3
 8001b62:	f009 f9a0 	bl	800aea6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b66:	4b47      	ldr	r3, [pc, #284]	@ (8001c84 <MX_TIM1_Init+0x150>)
 8001b68:	4a47      	ldr	r2, [pc, #284]	@ (8001c88 <MX_TIM1_Init+0x154>)
 8001b6a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8001b6c:	4b45      	ldr	r3, [pc, #276]	@ (8001c84 <MX_TIM1_Init+0x150>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001b72:	4b44      	ldr	r3, [pc, #272]	@ (8001c84 <MX_TIM1_Init+0x150>)
 8001b74:	2220      	movs	r2, #32
 8001b76:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2125;
 8001b78:	4b42      	ldr	r3, [pc, #264]	@ (8001c84 <MX_TIM1_Init+0x150>)
 8001b7a:	f640 024d 	movw	r2, #2125	@ 0x84d
 8001b7e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b80:	4b40      	ldr	r3, [pc, #256]	@ (8001c84 <MX_TIM1_Init+0x150>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b86:	4b3f      	ldr	r3, [pc, #252]	@ (8001c84 <MX_TIM1_Init+0x150>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b8c:	4b3d      	ldr	r3, [pc, #244]	@ (8001c84 <MX_TIM1_Init+0x150>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b92:	483c      	ldr	r0, [pc, #240]	@ (8001c84 <MX_TIM1_Init+0x150>)
 8001b94:	f004 fc12 	bl	80063bc <HAL_TIM_PWM_Init>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001b9e:	f7ff fdd9 	bl	8001754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ba2:	2320      	movs	r3, #32
 8001ba4:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001baa:	2380      	movs	r3, #128	@ 0x80
 8001bac:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bae:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4833      	ldr	r0, [pc, #204]	@ (8001c84 <MX_TIM1_Init+0x150>)
 8001bb6:	f005 fefd 	bl	80079b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001bc0:	f7ff fdc8 	bl	8001754 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bc4:	2360      	movs	r3, #96	@ 0x60
 8001bc6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 1063;
 8001bc8:	f240 4327 	movw	r3, #1063	@ 0x427
 8001bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bde:	2300      	movs	r3, #0
 8001be0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001be2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001be6:	2200      	movs	r2, #0
 8001be8:	4619      	mov	r1, r3
 8001bea:	4826      	ldr	r0, [pc, #152]	@ (8001c84 <MX_TIM1_Init+0x150>)
 8001bec:	f004 ff6c 	bl	8006ac8 <HAL_TIM_PWM_ConfigChannel>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001bf6:	f7ff fdad 	bl	8001754 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bfa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001bfe:	2204      	movs	r2, #4
 8001c00:	4619      	mov	r1, r3
 8001c02:	4820      	ldr	r0, [pc, #128]	@ (8001c84 <MX_TIM1_Init+0x150>)
 8001c04:	f004 ff60 	bl	8006ac8 <HAL_TIM_PWM_ConfigChannel>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8001c0e:	f7ff fda1 	bl	8001754 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c12:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001c16:	2208      	movs	r2, #8
 8001c18:	4619      	mov	r1, r3
 8001c1a:	481a      	ldr	r0, [pc, #104]	@ (8001c84 <MX_TIM1_Init+0x150>)
 8001c1c:	f004 ff54 	bl	8006ac8 <HAL_TIM_PWM_ConfigChannel>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001c26:	f7ff fd95 	bl	8001754 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 17;
 8001c36:	2311      	movs	r3, #17
 8001c38:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c42:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c50:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c54:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c62:	1d3b      	adds	r3, r7, #4
 8001c64:	4619      	mov	r1, r3
 8001c66:	4807      	ldr	r0, [pc, #28]	@ (8001c84 <MX_TIM1_Init+0x150>)
 8001c68:	f005 ff3a 	bl	8007ae0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001c72:	f7ff fd6f 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c76:	4803      	ldr	r0, [pc, #12]	@ (8001c84 <MX_TIM1_Init+0x150>)
 8001c78:	f000 f8e4 	bl	8001e44 <HAL_TIM_MspPostInit>

}
 8001c7c:	bf00      	nop
 8001c7e:	3760      	adds	r7, #96	@ 0x60
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20000438 	.word	0x20000438
 8001c88:	40012c00 	.word	0x40012c00

08001c8c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b088      	sub	sp, #32
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001c92:	f107 0310 	add.w	r3, r7, #16
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	605a      	str	r2, [r3, #4]
 8001c9c:	609a      	str	r2, [r3, #8]
 8001c9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ca0:	1d3b      	adds	r3, r7, #4
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	605a      	str	r2, [r3, #4]
 8001ca8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001caa:	4b1c      	ldr	r3, [pc, #112]	@ (8001d1c <MX_TIM3_Init+0x90>)
 8001cac:	4a1c      	ldr	r2, [pc, #112]	@ (8001d20 <MX_TIM3_Init+0x94>)
 8001cae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001cb0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d1c <MX_TIM3_Init+0x90>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb6:	4b19      	ldr	r3, [pc, #100]	@ (8001d1c <MX_TIM3_Init+0x90>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001cbc:	4b17      	ldr	r3, [pc, #92]	@ (8001d1c <MX_TIM3_Init+0x90>)
 8001cbe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cc2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cc4:	4b15      	ldr	r3, [pc, #84]	@ (8001d1c <MX_TIM3_Init+0x90>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cca:	4b14      	ldr	r3, [pc, #80]	@ (8001d1c <MX_TIM3_Init+0x90>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8001ce0:	f107 0310 	add.w	r3, r7, #16
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	480d      	ldr	r0, [pc, #52]	@ (8001d1c <MX_TIM3_Init+0x90>)
 8001ce8:	f005 fc95 	bl	8007616 <HAL_TIMEx_HallSensor_Init>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001cf2:	f7ff fd2f 	bl	8001754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001cf6:	2350      	movs	r3, #80	@ 0x50
 8001cf8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cfe:	1d3b      	adds	r3, r7, #4
 8001d00:	4619      	mov	r1, r3
 8001d02:	4806      	ldr	r0, [pc, #24]	@ (8001d1c <MX_TIM3_Init+0x90>)
 8001d04:	f005 fe56 	bl	80079b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001d0e:	f7ff fd21 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d12:	bf00      	nop
 8001d14:	3720      	adds	r7, #32
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000484 	.word	0x20000484
 8001d20:	40000400 	.word	0x40000400

08001d24 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a11      	ldr	r2, [pc, #68]	@ (8001d78 <HAL_TIM_PWM_MspInit+0x54>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d11b      	bne.n	8001d6e <HAL_TIM_PWM_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d36:	4b11      	ldr	r3, [pc, #68]	@ (8001d7c <HAL_TIM_PWM_MspInit+0x58>)
 8001d38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d3a:	4a10      	ldr	r2, [pc, #64]	@ (8001d7c <HAL_TIM_PWM_MspInit+0x58>)
 8001d3c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d40:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d42:	4b0e      	ldr	r3, [pc, #56]	@ (8001d7c <HAL_TIM_PWM_MspInit+0x58>)
 8001d44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	2100      	movs	r1, #0
 8001d52:	2019      	movs	r0, #25
 8001d54:	f002 fcd8 	bl	8004708 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001d58:	2019      	movs	r0, #25
 8001d5a:	f002 fcef 	bl	800473c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2100      	movs	r1, #0
 8001d62:	201a      	movs	r0, #26
 8001d64:	f002 fcd0 	bl	8004708 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001d68:	201a      	movs	r0, #26
 8001d6a:	f002 fce7 	bl	800473c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001d6e:	bf00      	nop
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40012c00 	.word	0x40012c00
 8001d7c:	40021000 	.word	0x40021000

08001d80 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08a      	sub	sp, #40	@ 0x28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d88:	f107 0314 	add.w	r3, r7, #20
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a26      	ldr	r2, [pc, #152]	@ (8001e38 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d145      	bne.n	8001e2e <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001da2:	4b26      	ldr	r3, [pc, #152]	@ (8001e3c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da6:	4a25      	ldr	r2, [pc, #148]	@ (8001e3c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001da8:	f043 0302 	orr.w	r3, r3, #2
 8001dac:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dae:	4b23      	ldr	r3, [pc, #140]	@ (8001e3c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dba:	4b20      	ldr	r3, [pc, #128]	@ (8001e3c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dbe:	4a1f      	ldr	r2, [pc, #124]	@ (8001e3c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dc6:	4b1d      	ldr	r3, [pc, #116]	@ (8001e3c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dd2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e3c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dd6:	4a19      	ldr	r2, [pc, #100]	@ (8001e3c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001dd8:	f043 0304 	orr.w	r3, r3, #4
 8001ddc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dde:	4b17      	ldr	r3, [pc, #92]	@ (8001e3c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001de2:	f003 0304 	and.w	r3, r3, #4
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001dea:	2350      	movs	r3, #80	@ 0x50
 8001dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dee:	2302      	movs	r3, #2
 8001df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df6:	2300      	movs	r3, #0
 8001df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfe:	f107 0314 	add.w	r3, r7, #20
 8001e02:	4619      	mov	r1, r3
 8001e04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e08:	f002 ffd8 	bl	8004dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e12:	2302      	movs	r3, #2
 8001e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e22:	f107 0314 	add.w	r3, r7, #20
 8001e26:	4619      	mov	r1, r3
 8001e28:	4805      	ldr	r0, [pc, #20]	@ (8001e40 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 8001e2a:	f002 ffc7 	bl	8004dbc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001e2e:	bf00      	nop
 8001e30:	3728      	adds	r7, #40	@ 0x28
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40000400 	.word	0x40000400
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	48000800 	.word	0x48000800

08001e44 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08a      	sub	sp, #40	@ 0x28
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]
 8001e5a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a29      	ldr	r2, [pc, #164]	@ (8001f08 <HAL_TIM_MspPostInit+0xc4>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d14b      	bne.n	8001efe <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e66:	4b29      	ldr	r3, [pc, #164]	@ (8001f0c <HAL_TIM_MspPostInit+0xc8>)
 8001e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e6a:	4a28      	ldr	r2, [pc, #160]	@ (8001f0c <HAL_TIM_MspPostInit+0xc8>)
 8001e6c:	f043 0302 	orr.w	r3, r3, #2
 8001e70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e72:	4b26      	ldr	r3, [pc, #152]	@ (8001f0c <HAL_TIM_MspPostInit+0xc8>)
 8001e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7e:	4b23      	ldr	r3, [pc, #140]	@ (8001f0c <HAL_TIM_MspPostInit+0xc8>)
 8001e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e82:	4a22      	ldr	r2, [pc, #136]	@ (8001f0c <HAL_TIM_MspPostInit+0xc8>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e8a:	4b20      	ldr	r3, [pc, #128]	@ (8001f0c <HAL_TIM_MspPostInit+0xc8>)
 8001e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 8001e96:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001e9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001ea8:	2306      	movs	r3, #6
 8001eaa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eac:	f107 0314 	add.w	r3, r7, #20
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4817      	ldr	r0, [pc, #92]	@ (8001f10 <HAL_TIM_MspPostInit+0xcc>)
 8001eb4:	f002 ff82 	bl	8004dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8001eb8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001eca:	2304      	movs	r3, #4
 8001ecc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001ece:	f107 0314 	add.w	r3, r7, #20
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	480e      	ldr	r0, [pc, #56]	@ (8001f10 <HAL_TIM_MspPostInit+0xcc>)
 8001ed6:	f002 ff71 	bl	8004dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 8001eda:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001eec:	2306      	movs	r3, #6
 8001eee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef0:	f107 0314 	add.w	r3, r7, #20
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001efa:	f002 ff5f 	bl	8004dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001efe:	bf00      	nop
 8001f00:	3728      	adds	r7, #40	@ 0x28
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40012c00 	.word	0x40012c00
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	48000400 	.word	0x48000400

08001f14 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f18:	4b22      	ldr	r3, [pc, #136]	@ (8001fa4 <MX_USART2_UART_Init+0x90>)
 8001f1a:	4a23      	ldr	r2, [pc, #140]	@ (8001fa8 <MX_USART2_UART_Init+0x94>)
 8001f1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f1e:	4b21      	ldr	r3, [pc, #132]	@ (8001fa4 <MX_USART2_UART_Init+0x90>)
 8001f20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f26:	4b1f      	ldr	r3, [pc, #124]	@ (8001fa4 <MX_USART2_UART_Init+0x90>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001fa4 <MX_USART2_UART_Init+0x90>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f32:	4b1c      	ldr	r3, [pc, #112]	@ (8001fa4 <MX_USART2_UART_Init+0x90>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f38:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa4 <MX_USART2_UART_Init+0x90>)
 8001f3a:	220c      	movs	r2, #12
 8001f3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f3e:	4b19      	ldr	r3, [pc, #100]	@ (8001fa4 <MX_USART2_UART_Init+0x90>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f44:	4b17      	ldr	r3, [pc, #92]	@ (8001fa4 <MX_USART2_UART_Init+0x90>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f4a:	4b16      	ldr	r3, [pc, #88]	@ (8001fa4 <MX_USART2_UART_Init+0x90>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f50:	4b14      	ldr	r3, [pc, #80]	@ (8001fa4 <MX_USART2_UART_Init+0x90>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f56:	4b13      	ldr	r3, [pc, #76]	@ (8001fa4 <MX_USART2_UART_Init+0x90>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f5c:	4811      	ldr	r0, [pc, #68]	@ (8001fa4 <MX_USART2_UART_Init+0x90>)
 8001f5e:	f005 fedc 	bl	8007d1a <HAL_UART_Init>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001f68:	f7ff fbf4 	bl	8001754 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	480d      	ldr	r0, [pc, #52]	@ (8001fa4 <MX_USART2_UART_Init+0x90>)
 8001f70:	f007 fe7f 	bl	8009c72 <HAL_UARTEx_SetTxFifoThreshold>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001f7a:	f7ff fbeb 	bl	8001754 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f7e:	2100      	movs	r1, #0
 8001f80:	4808      	ldr	r0, [pc, #32]	@ (8001fa4 <MX_USART2_UART_Init+0x90>)
 8001f82:	f007 feb4 	bl	8009cee <HAL_UARTEx_SetRxFifoThreshold>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001f8c:	f7ff fbe2 	bl	8001754 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001f90:	4804      	ldr	r0, [pc, #16]	@ (8001fa4 <MX_USART2_UART_Init+0x90>)
 8001f92:	f007 fe35 	bl	8009c00 <HAL_UARTEx_DisableFifoMode>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001f9c:	f7ff fbda 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fa0:	bf00      	nop
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	200004d0 	.word	0x200004d0
 8001fa8:	40004400 	.word	0x40004400

08001fac <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001fb0:	4b22      	ldr	r3, [pc, #136]	@ (800203c <MX_USART3_UART_Init+0x90>)
 8001fb2:	4a23      	ldr	r2, [pc, #140]	@ (8002040 <MX_USART3_UART_Init+0x94>)
 8001fb4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001fb6:	4b21      	ldr	r3, [pc, #132]	@ (800203c <MX_USART3_UART_Init+0x90>)
 8001fb8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fbc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001fbe:	4b1f      	ldr	r3, [pc, #124]	@ (800203c <MX_USART3_UART_Init+0x90>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fc4:	4b1d      	ldr	r3, [pc, #116]	@ (800203c <MX_USART3_UART_Init+0x90>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fca:	4b1c      	ldr	r3, [pc, #112]	@ (800203c <MX_USART3_UART_Init+0x90>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fd0:	4b1a      	ldr	r3, [pc, #104]	@ (800203c <MX_USART3_UART_Init+0x90>)
 8001fd2:	220c      	movs	r2, #12
 8001fd4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fd6:	4b19      	ldr	r3, [pc, #100]	@ (800203c <MX_USART3_UART_Init+0x90>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fdc:	4b17      	ldr	r3, [pc, #92]	@ (800203c <MX_USART3_UART_Init+0x90>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fe2:	4b16      	ldr	r3, [pc, #88]	@ (800203c <MX_USART3_UART_Init+0x90>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fe8:	4b14      	ldr	r3, [pc, #80]	@ (800203c <MX_USART3_UART_Init+0x90>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fee:	4b13      	ldr	r3, [pc, #76]	@ (800203c <MX_USART3_UART_Init+0x90>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ff4:	4811      	ldr	r0, [pc, #68]	@ (800203c <MX_USART3_UART_Init+0x90>)
 8001ff6:	f005 fe90 	bl	8007d1a <HAL_UART_Init>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002000:	f7ff fba8 	bl	8001754 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002004:	2100      	movs	r1, #0
 8002006:	480d      	ldr	r0, [pc, #52]	@ (800203c <MX_USART3_UART_Init+0x90>)
 8002008:	f007 fe33 	bl	8009c72 <HAL_UARTEx_SetTxFifoThreshold>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002012:	f7ff fb9f 	bl	8001754 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002016:	2100      	movs	r1, #0
 8002018:	4808      	ldr	r0, [pc, #32]	@ (800203c <MX_USART3_UART_Init+0x90>)
 800201a:	f007 fe68 	bl	8009cee <HAL_UARTEx_SetRxFifoThreshold>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002024:	f7ff fb96 	bl	8001754 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002028:	4804      	ldr	r0, [pc, #16]	@ (800203c <MX_USART3_UART_Init+0x90>)
 800202a:	f007 fde9 	bl	8009c00 <HAL_UARTEx_DisableFifoMode>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002034:	f7ff fb8e 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002038:	bf00      	nop
 800203a:	bd80      	pop	{r7, pc}
 800203c:	20000560 	.word	0x20000560
 8002040:	40004800 	.word	0x40004800

08002044 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b0a0      	sub	sp, #128	@ 0x80
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
 800205a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800205c:	f107 0318 	add.w	r3, r7, #24
 8002060:	2254      	movs	r2, #84	@ 0x54
 8002062:	2100      	movs	r1, #0
 8002064:	4618      	mov	r0, r3
 8002066:	f008 ff1e 	bl	800aea6 <memset>
  if(uartHandle->Instance==USART2)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a45      	ldr	r2, [pc, #276]	@ (8002184 <HAL_UART_MspInit+0x140>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d13f      	bne.n	80020f4 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002074:	2302      	movs	r3, #2
 8002076:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002078:	2300      	movs	r3, #0
 800207a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800207c:	f107 0318 	add.w	r3, r7, #24
 8002080:	4618      	mov	r0, r3
 8002082:	f003 fe73 	bl	8005d6c <HAL_RCCEx_PeriphCLKConfig>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800208c:	f7ff fb62 	bl	8001754 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002090:	4b3d      	ldr	r3, [pc, #244]	@ (8002188 <HAL_UART_MspInit+0x144>)
 8002092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002094:	4a3c      	ldr	r2, [pc, #240]	@ (8002188 <HAL_UART_MspInit+0x144>)
 8002096:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800209a:	6593      	str	r3, [r2, #88]	@ 0x58
 800209c:	4b3a      	ldr	r3, [pc, #232]	@ (8002188 <HAL_UART_MspInit+0x144>)
 800209e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020a4:	617b      	str	r3, [r7, #20]
 80020a6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a8:	4b37      	ldr	r3, [pc, #220]	@ (8002188 <HAL_UART_MspInit+0x144>)
 80020aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ac:	4a36      	ldr	r2, [pc, #216]	@ (8002188 <HAL_UART_MspInit+0x144>)
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020b4:	4b34      	ldr	r3, [pc, #208]	@ (8002188 <HAL_UART_MspInit+0x144>)
 80020b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020c0:	230c      	movs	r3, #12
 80020c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c4:	2302      	movs	r3, #2
 80020c6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020cc:	2300      	movs	r3, #0
 80020ce:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020d0:	2307      	movs	r3, #7
 80020d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80020d8:	4619      	mov	r1, r3
 80020da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020de:	f002 fe6d 	bl	8004dbc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80020e2:	2200      	movs	r2, #0
 80020e4:	2100      	movs	r1, #0
 80020e6:	2026      	movs	r0, #38	@ 0x26
 80020e8:	f002 fb0e 	bl	8004708 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020ec:	2026      	movs	r0, #38	@ 0x26
 80020ee:	f002 fb25 	bl	800473c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80020f2:	e043      	b.n	800217c <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a24      	ldr	r2, [pc, #144]	@ (800218c <HAL_UART_MspInit+0x148>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d13e      	bne.n	800217c <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80020fe:	2304      	movs	r3, #4
 8002100:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002102:	2300      	movs	r3, #0
 8002104:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002106:	f107 0318 	add.w	r3, r7, #24
 800210a:	4618      	mov	r0, r3
 800210c:	f003 fe2e 	bl	8005d6c <HAL_RCCEx_PeriphCLKConfig>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8002116:	f7ff fb1d 	bl	8001754 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800211a:	4b1b      	ldr	r3, [pc, #108]	@ (8002188 <HAL_UART_MspInit+0x144>)
 800211c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800211e:	4a1a      	ldr	r2, [pc, #104]	@ (8002188 <HAL_UART_MspInit+0x144>)
 8002120:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002124:	6593      	str	r3, [r2, #88]	@ 0x58
 8002126:	4b18      	ldr	r3, [pc, #96]	@ (8002188 <HAL_UART_MspInit+0x144>)
 8002128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800212a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002132:	4b15      	ldr	r3, [pc, #84]	@ (8002188 <HAL_UART_MspInit+0x144>)
 8002134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002136:	4a14      	ldr	r2, [pc, #80]	@ (8002188 <HAL_UART_MspInit+0x144>)
 8002138:	f043 0304 	orr.w	r3, r3, #4
 800213c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800213e:	4b12      	ldr	r3, [pc, #72]	@ (8002188 <HAL_UART_MspInit+0x144>)
 8002140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002142:	f003 0304 	and.w	r3, r3, #4
 8002146:	60bb      	str	r3, [r7, #8]
 8002148:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800214a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800214e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002150:	2302      	movs	r3, #2
 8002152:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002154:	2300      	movs	r3, #0
 8002156:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002158:	2300      	movs	r3, #0
 800215a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800215c:	2307      	movs	r3, #7
 800215e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002160:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002164:	4619      	mov	r1, r3
 8002166:	480a      	ldr	r0, [pc, #40]	@ (8002190 <HAL_UART_MspInit+0x14c>)
 8002168:	f002 fe28 	bl	8004dbc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800216c:	2200      	movs	r2, #0
 800216e:	2100      	movs	r1, #0
 8002170:	2027      	movs	r0, #39	@ 0x27
 8002172:	f002 fac9 	bl	8004708 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002176:	2027      	movs	r0, #39	@ 0x27
 8002178:	f002 fae0 	bl	800473c <HAL_NVIC_EnableIRQ>
}
 800217c:	bf00      	nop
 800217e:	3780      	adds	r7, #128	@ 0x80
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40004400 	.word	0x40004400
 8002188:	40021000 	.word	0x40021000
 800218c:	40004800 	.word	0x40004800
 8002190:	48000800 	.word	0x48000800

08002194 <start_PWM>:
#define RAMP_STEP 5     // Valeur d'incrément du rapport cyclique à chaque étape

extern ADC_HandleTypeDef hadc1;
//extern adcBuffer;
void start_PWM (TIM_HandleTypeDef htim,uint32_t channel)
{
 8002194:	b084      	sub	sp, #16
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	f107 0c10 	add.w	ip, r7, #16
 80021a0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	HAL_TIM_PWM_Start(&htim, TIM_CHANNEL_1);
 80021a4:	2100      	movs	r1, #0
 80021a6:	f107 0010 	add.w	r0, r7, #16
 80021aa:	f004 f95f 	bl	800646c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim,TIM_CHANNEL_1);
 80021ae:	2100      	movs	r1, #0
 80021b0:	f107 0010 	add.w	r0, r7, #16
 80021b4:	f005 fade 	bl	8007774 <HAL_TIMEx_PWMN_Start>

	HAL_TIM_PWM_Start(&htim, TIM_CHANNEL_2);
 80021b8:	2104      	movs	r1, #4
 80021ba:	f107 0010 	add.w	r0, r7, #16
 80021be:	f004 f955 	bl	800646c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim, TIM_CHANNEL_2);
 80021c2:	2104      	movs	r1, #4
 80021c4:	f107 0010 	add.w	r0, r7, #16
 80021c8:	f005 fad4 	bl	8007774 <HAL_TIMEx_PWMN_Start>


	//On met le rapport cyclique à la valeur du rapport cyclique à 50%

	int alpha = alpha_MID;
 80021cc:	f240 4327 	movw	r3, #1063	@ 0x427
 80021d0:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, alpha);// duty cycle channel 1 égal à 50%
 80021d2:	4b09      	ldr	r3, [pc, #36]	@ (80021f8 <start_PWM+0x64>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, TIM1->ARR - alpha); // duty cycle channel 2 égal à 50%
 80021da:	4b08      	ldr	r3, [pc, #32]	@ (80021fc <start_PWM+0x68>)
 80021dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	4b05      	ldr	r3, [pc, #20]	@ (80021f8 <start_PWM+0x64>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	1a8a      	subs	r2, r1, r2
 80021e6:	639a      	str	r2, [r3, #56]	@ 0x38

}
 80021e8:	bf00      	nop
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80021f2:	b004      	add	sp, #16
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	20000438 	.word	0x20000438
 80021fc:	40012c00 	.word	0x40012c00

08002200 <stop_PWM>:

void stop_PWM(TIM_HandleTypeDef htim,uint32_t channel)

{
 8002200:	b084      	sub	sp, #16
 8002202:	b580      	push	{r7, lr}
 8002204:	af00      	add	r7, sp, #0
 8002206:	f107 0c08 	add.w	ip, r7, #8
 800220a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_TIM_PWM_Stop(&htim, channel);
 800220e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002210:	f107 0008 	add.w	r0, r7, #8
 8002214:	f004 fa3c 	bl	8006690 <HAL_TIM_PWM_Stop>

	HAL_TIMEx_PWMN_Stop(&htim, channel);
 8002218:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800221a:	f107 0008 	add.w	r0, r7, #8
 800221e:	f005 fb6b 	bl	80078f8 <HAL_TIMEx_PWMN_Stop>



}
 8002222:	bf00      	nop
 8002224:	46bd      	mov	sp, r7
 8002226:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800222a:	b004      	add	sp, #16
 800222c:	4770      	bx	lr
	...

08002230 <Shell_Init>:
char* 		argv[MAX_ARGS];
int		 	argc = 0;
char*		token;
int 		newCmdReady = 0;

void Shell_Init(void){
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
	memset(argv, NULL, MAX_ARGS*sizeof(char*));
 8002234:	2224      	movs	r2, #36	@ 0x24
 8002236:	2100      	movs	r1, #0
 8002238:	4816      	ldr	r0, [pc, #88]	@ (8002294 <Shell_Init+0x64>)
 800223a:	f008 fe34 	bl	800aea6 <memset>
	memset(cmdBuffer, NULL, CMD_BUFFER_SIZE*sizeof(char));
 800223e:	2240      	movs	r2, #64	@ 0x40
 8002240:	2100      	movs	r1, #0
 8002242:	4815      	ldr	r0, [pc, #84]	@ (8002298 <Shell_Init+0x68>)
 8002244:	f008 fe2f 	bl	800aea6 <memset>
	memset(uartRxBuffer, NULL, UART_RX_BUFFER_SIZE*sizeof(char));
 8002248:	4b14      	ldr	r3, [pc, #80]	@ (800229c <Shell_Init+0x6c>)
 800224a:	2200      	movs	r2, #0
 800224c:	701a      	strb	r2, [r3, #0]
	memset(uartTxBuffer, NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 800224e:	2240      	movs	r2, #64	@ 0x40
 8002250:	2100      	movs	r1, #0
 8002252:	4813      	ldr	r0, [pc, #76]	@ (80022a0 <Shell_Init+0x70>)
 8002254:	f008 fe27 	bl	800aea6 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8002258:	2201      	movs	r2, #1
 800225a:	4910      	ldr	r1, [pc, #64]	@ (800229c <Shell_Init+0x6c>)
 800225c:	4811      	ldr	r0, [pc, #68]	@ (80022a4 <Shell_Init+0x74>)
 800225e:	f005 fe43 	bl	8007ee8 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 8002262:	4811      	ldr	r0, [pc, #68]	@ (80022a8 <Shell_Init+0x78>)
 8002264:	f7fe f83c 	bl	80002e0 <strlen>
 8002268:	4603      	mov	r3, r0
 800226a:	b29a      	uxth	r2, r3
 800226c:	f04f 33ff 	mov.w	r3, #4294967295
 8002270:	490d      	ldr	r1, [pc, #52]	@ (80022a8 <Shell_Init+0x78>)
 8002272:	480c      	ldr	r0, [pc, #48]	@ (80022a4 <Shell_Init+0x74>)
 8002274:	f005 fda1 	bl	8007dba <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 8002278:	480c      	ldr	r0, [pc, #48]	@ (80022ac <Shell_Init+0x7c>)
 800227a:	f7fe f831 	bl	80002e0 <strlen>
 800227e:	4603      	mov	r3, r0
 8002280:	b29a      	uxth	r2, r3
 8002282:	f04f 33ff 	mov.w	r3, #4294967295
 8002286:	4909      	ldr	r1, [pc, #36]	@ (80022ac <Shell_Init+0x7c>)
 8002288:	4806      	ldr	r0, [pc, #24]	@ (80022a4 <Shell_Init+0x74>)
 800228a:	f005 fd96 	bl	8007dba <HAL_UART_Transmit>
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20000688 	.word	0x20000688
 8002298:	20000644 	.word	0x20000644
 800229c:	200005f4 	.word	0x200005f4
 80022a0:	200005f8 	.word	0x200005f8
 80022a4:	200004d0 	.word	0x200004d0
 80022a8:	20000020 	.word	0x20000020
 80022ac:	20000004 	.word	0x20000004

080022b0 <Shell_Loop>:
		HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
	}
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
	newCmdReady = 0;
}*/
void Shell_Loop(void){
 80022b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022b2:	b09b      	sub	sp, #108	@ 0x6c
 80022b4:	af10      	add	r7, sp, #64	@ 0x40


	if(uartRxReceived){
 80022b6:	4b78      	ldr	r3, [pc, #480]	@ (8002498 <Shell_Loop+0x1e8>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d063      	beq.n	8002386 <Shell_Loop+0xd6>
		switch(uartRxBuffer[0]){
 80022be:	4b77      	ldr	r3, [pc, #476]	@ (800249c <Shell_Loop+0x1ec>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	d034      	beq.n	8002330 <Shell_Loop+0x80>
 80022c6:	2b0d      	cmp	r3, #13
 80022c8:	d148      	bne.n	800235c <Shell_Loop+0xac>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 80022ca:	f04f 33ff 	mov.w	r3, #4294967295
 80022ce:	2203      	movs	r2, #3
 80022d0:	4973      	ldr	r1, [pc, #460]	@ (80024a0 <Shell_Loop+0x1f0>)
 80022d2:	4874      	ldr	r0, [pc, #464]	@ (80024a4 <Shell_Loop+0x1f4>)
 80022d4:	f005 fd71 	bl	8007dba <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 80022d8:	4b73      	ldr	r3, [pc, #460]	@ (80024a8 <Shell_Loop+0x1f8>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a73      	ldr	r2, [pc, #460]	@ (80024ac <Shell_Loop+0x1fc>)
 80022de:	2100      	movs	r1, #0
 80022e0:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 80022e2:	4b73      	ldr	r3, [pc, #460]	@ (80024b0 <Shell_Loop+0x200>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 80022e8:	4972      	ldr	r1, [pc, #456]	@ (80024b4 <Shell_Loop+0x204>)
 80022ea:	4870      	ldr	r0, [pc, #448]	@ (80024ac <Shell_Loop+0x1fc>)
 80022ec:	f008 fde4 	bl	800aeb8 <strtok>
 80022f0:	4603      	mov	r3, r0
 80022f2:	4a71      	ldr	r2, [pc, #452]	@ (80024b8 <Shell_Loop+0x208>)
 80022f4:	6013      	str	r3, [r2, #0]
			while(token != NULL){
 80022f6:	e010      	b.n	800231a <Shell_Loop+0x6a>
				argv[argc++] = token;
 80022f8:	4b6d      	ldr	r3, [pc, #436]	@ (80024b0 <Shell_Loop+0x200>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	1c5a      	adds	r2, r3, #1
 80022fe:	496c      	ldr	r1, [pc, #432]	@ (80024b0 <Shell_Loop+0x200>)
 8002300:	600a      	str	r2, [r1, #0]
 8002302:	4a6d      	ldr	r2, [pc, #436]	@ (80024b8 <Shell_Loop+0x208>)
 8002304:	6812      	ldr	r2, [r2, #0]
 8002306:	496d      	ldr	r1, [pc, #436]	@ (80024bc <Shell_Loop+0x20c>)
 8002308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 800230c:	4969      	ldr	r1, [pc, #420]	@ (80024b4 <Shell_Loop+0x204>)
 800230e:	2000      	movs	r0, #0
 8002310:	f008 fdd2 	bl	800aeb8 <strtok>
 8002314:	4603      	mov	r3, r0
 8002316:	4a68      	ldr	r2, [pc, #416]	@ (80024b8 <Shell_Loop+0x208>)
 8002318:	6013      	str	r3, [r2, #0]
			while(token != NULL){
 800231a:	4b67      	ldr	r3, [pc, #412]	@ (80024b8 <Shell_Loop+0x208>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1ea      	bne.n	80022f8 <Shell_Loop+0x48>
			}
			idx_cmd = 0;
 8002322:	4b61      	ldr	r3, [pc, #388]	@ (80024a8 <Shell_Loop+0x1f8>)
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 8002328:	4b65      	ldr	r3, [pc, #404]	@ (80024c0 <Shell_Loop+0x210>)
 800232a:	2201      	movs	r2, #1
 800232c:	601a      	str	r2, [r3, #0]
			break;
 800232e:	e027      	b.n	8002380 <Shell_Loop+0xd0>
		case ASCII_BACK: // Suppression du dernier caractère
			if (idx_cmd > 0) { // Eviter les index négatifs
 8002330:	4b5d      	ldr	r3, [pc, #372]	@ (80024a8 <Shell_Loop+0x1f8>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	dd22      	ble.n	800237e <Shell_Loop+0xce>
				cmdBuffer[--idx_cmd] = '\0';
 8002338:	4b5b      	ldr	r3, [pc, #364]	@ (80024a8 <Shell_Loop+0x1f8>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	3b01      	subs	r3, #1
 800233e:	4a5a      	ldr	r2, [pc, #360]	@ (80024a8 <Shell_Loop+0x1f8>)
 8002340:	6013      	str	r3, [r2, #0]
 8002342:	4b59      	ldr	r3, [pc, #356]	@ (80024a8 <Shell_Loop+0x1f8>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a59      	ldr	r2, [pc, #356]	@ (80024ac <Shell_Loop+0x1fc>)
 8002348:	2100      	movs	r1, #0
 800234a:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 800234c:	f04f 33ff 	mov.w	r3, #4294967295
 8002350:	2204      	movs	r2, #4
 8002352:	495c      	ldr	r1, [pc, #368]	@ (80024c4 <Shell_Loop+0x214>)
 8002354:	4853      	ldr	r0, [pc, #332]	@ (80024a4 <Shell_Loop+0x1f4>)
 8002356:	f005 fd30 	bl	8007dba <HAL_UART_Transmit>
			}
			break;
 800235a:	e010      	b.n	800237e <Shell_Loop+0xce>
		default: // Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 800235c:	4b52      	ldr	r3, [pc, #328]	@ (80024a8 <Shell_Loop+0x1f8>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	1c5a      	adds	r2, r3, #1
 8002362:	4951      	ldr	r1, [pc, #324]	@ (80024a8 <Shell_Loop+0x1f8>)
 8002364:	600a      	str	r2, [r1, #0]
 8002366:	4a4d      	ldr	r2, [pc, #308]	@ (800249c <Shell_Loop+0x1ec>)
 8002368:	7811      	ldrb	r1, [r2, #0]
 800236a:	4a50      	ldr	r2, [pc, #320]	@ (80024ac <Shell_Loop+0x1fc>)
 800236c:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 800236e:	f04f 33ff 	mov.w	r3, #4294967295
 8002372:	2201      	movs	r2, #1
 8002374:	4949      	ldr	r1, [pc, #292]	@ (800249c <Shell_Loop+0x1ec>)
 8002376:	484b      	ldr	r0, [pc, #300]	@ (80024a4 <Shell_Loop+0x1f4>)
 8002378:	f005 fd1f 	bl	8007dba <HAL_UART_Transmit>
 800237c:	e000      	b.n	8002380 <Shell_Loop+0xd0>
			break;
 800237e:	bf00      	nop
		}
		uartRxReceived = 0;
 8002380:	4b45      	ldr	r3, [pc, #276]	@ (8002498 <Shell_Loop+0x1e8>)
 8002382:	2200      	movs	r2, #0
 8002384:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady){
 8002386:	4b4e      	ldr	r3, [pc, #312]	@ (80024c0 <Shell_Loop+0x210>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	f000 815f 	beq.w	800264e <Shell_Loop+0x39e>
		int commandRecognized = 0; // Indicateur pour vérifier si une commande est reconnue
 8002390:	2300      	movs	r3, #0
 8002392:	627b      	str	r3, [r7, #36]	@ 0x24

		if(strcmp(argv[0], "WhereisBrian?") == 0){
 8002394:	4b49      	ldr	r3, [pc, #292]	@ (80024bc <Shell_Loop+0x20c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	494b      	ldr	r1, [pc, #300]	@ (80024c8 <Shell_Loop+0x218>)
 800239a:	4618      	mov	r0, r3
 800239c:	f7fd ff40 	bl	8000220 <strcmp>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d109      	bne.n	80023ba <Shell_Loop+0x10a>
			HAL_UART_Transmit(&huart2, brian, sizeof(brian), HAL_MAX_DELAY);
 80023a6:	f04f 33ff 	mov.w	r3, #4294967295
 80023aa:	221a      	movs	r2, #26
 80023ac:	4947      	ldr	r1, [pc, #284]	@ (80024cc <Shell_Loop+0x21c>)
 80023ae:	483d      	ldr	r0, [pc, #244]	@ (80024a4 <Shell_Loop+0x1f4>)
 80023b0:	f005 fd03 	bl	8007dba <HAL_UART_Transmit>
			commandRecognized = 1;
 80023b4:	2301      	movs	r3, #1
 80023b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80023b8:	e135      	b.n	8002626 <Shell_Loop+0x376>
		}
		else if(strcmp(argv[0], "help") == 0){
 80023ba:	4b40      	ldr	r3, [pc, #256]	@ (80024bc <Shell_Loop+0x20c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4944      	ldr	r1, [pc, #272]	@ (80024d0 <Shell_Loop+0x220>)
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7fd ff2d 	bl	8000220 <strcmp>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d110      	bne.n	80023ee <Shell_Loop+0x13e>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Print all available functions here\r\n");
 80023cc:	4a41      	ldr	r2, [pc, #260]	@ (80024d4 <Shell_Loop+0x224>)
 80023ce:	2140      	movs	r1, #64	@ 0x40
 80023d0:	4841      	ldr	r0, [pc, #260]	@ (80024d8 <Shell_Loop+0x228>)
 80023d2:	f008 fcd1 	bl	800ad78 <sniprintf>
 80023d6:	6038      	str	r0, [r7, #0]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	b29a      	uxth	r2, r3
 80023dc:	f04f 33ff 	mov.w	r3, #4294967295
 80023e0:	493d      	ldr	r1, [pc, #244]	@ (80024d8 <Shell_Loop+0x228>)
 80023e2:	4830      	ldr	r0, [pc, #192]	@ (80024a4 <Shell_Loop+0x1f4>)
 80023e4:	f005 fce9 	bl	8007dba <HAL_UART_Transmit>
			commandRecognized = 1;
 80023e8:	2301      	movs	r3, #1
 80023ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80023ec:	e11b      	b.n	8002626 <Shell_Loop+0x376>
		}
		else if( strcmp(argv[0], "start") == 0){
 80023ee:	4b33      	ldr	r3, [pc, #204]	@ (80024bc <Shell_Loop+0x20c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	493a      	ldr	r1, [pc, #232]	@ (80024dc <Shell_Loop+0x22c>)
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7fd ff13 	bl	8000220 <strcmp>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d116      	bne.n	800242e <Shell_Loop+0x17e>
			start_PWM (htim1,TIM_CHANNEL_1);
 8002400:	4e37      	ldr	r6, [pc, #220]	@ (80024e0 <Shell_Loop+0x230>)
 8002402:	2300      	movs	r3, #0
 8002404:	930f      	str	r3, [sp, #60]	@ 0x3c
 8002406:	466d      	mov	r5, sp
 8002408:	f106 0410 	add.w	r4, r6, #16
 800240c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800240e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002410:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002412:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002414:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002416:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002418:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800241c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002420:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002424:	f7ff feb6 	bl	8002194 <start_PWM>
			commandRecognized = 1;
 8002428:	2301      	movs	r3, #1
 800242a:	627b      	str	r3, [r7, #36]	@ 0x24
 800242c:	e0fb      	b.n	8002626 <Shell_Loop+0x376>


		}
		else if(strcmp(argv[0], "stop") == 0 ){
 800242e:	4b23      	ldr	r3, [pc, #140]	@ (80024bc <Shell_Loop+0x20c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	492c      	ldr	r1, [pc, #176]	@ (80024e4 <Shell_Loop+0x234>)
 8002434:	4618      	mov	r0, r3
 8002436:	f7fd fef3 	bl	8000220 <strcmp>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d153      	bne.n	80024e8 <Shell_Loop+0x238>
			stop_PWM (htim1,TIM_CHANNEL_1);
 8002440:	4e27      	ldr	r6, [pc, #156]	@ (80024e0 <Shell_Loop+0x230>)
 8002442:	2300      	movs	r3, #0
 8002444:	930f      	str	r3, [sp, #60]	@ 0x3c
 8002446:	466d      	mov	r5, sp
 8002448:	f106 0410 	add.w	r4, r6, #16
 800244c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800244e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002450:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002452:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002454:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002456:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002458:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800245c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002460:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002464:	f7ff fecc 	bl	8002200 <stop_PWM>
			stop_PWM (htim1,TIM_CHANNEL_2);
 8002468:	4e1d      	ldr	r6, [pc, #116]	@ (80024e0 <Shell_Loop+0x230>)
 800246a:	2304      	movs	r3, #4
 800246c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800246e:	466d      	mov	r5, sp
 8002470:	f106 0410 	add.w	r4, r6, #16
 8002474:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002476:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002478:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800247a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800247c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800247e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002480:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002484:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002488:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800248c:	f7ff feb8 	bl	8002200 <stop_PWM>
			commandRecognized = 1;
 8002490:	2301      	movs	r3, #1
 8002492:	627b      	str	r3, [r7, #36]	@ 0x24
 8002494:	e0c7      	b.n	8002626 <Shell_Loop+0x376>
 8002496:	bf00      	nop
 8002498:	200005f0 	.word	0x200005f0
 800249c:	200005f4 	.word	0x200005f4
 80024a0:	20000088 	.word	0x20000088
 80024a4:	200004d0 	.word	0x200004d0
 80024a8:	20000684 	.word	0x20000684
 80024ac:	20000644 	.word	0x20000644
 80024b0:	200006ac 	.word	0x200006ac
 80024b4:	0800e630 	.word	0x0800e630
 80024b8:	200006b0 	.word	0x200006b0
 80024bc:	20000688 	.word	0x20000688
 80024c0:	200006b4 	.word	0x200006b4
 80024c4:	2000008c 	.word	0x2000008c
 80024c8:	0800e634 	.word	0x0800e634
 80024cc:	200000a4 	.word	0x200000a4
 80024d0:	0800e644 	.word	0x0800e644
 80024d4:	0800e64c 	.word	0x0800e64c
 80024d8:	200005f8 	.word	0x200005f8
 80024dc:	0800e674 	.word	0x0800e674
 80024e0:	20000438 	.word	0x20000438
 80024e4:	0800e67c 	.word	0x0800e67c

		}
		else if(strcmp(argv[0], "current") == 0) {
 80024e8:	4b5d      	ldr	r3, [pc, #372]	@ (8002660 <Shell_Loop+0x3b0>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	495d      	ldr	r1, [pc, #372]	@ (8002664 <Shell_Loop+0x3b4>)
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fd fe96 	bl	8000220 <strcmp>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d15e      	bne.n	80025b8 <Shell_Loop+0x308>

			//HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
			//uint16_t adcBuff;
			//adcBuff=HAL_ADC_GetValue(&hadc1);

			float sentivity=0.05;
 80024fa:	4b5b      	ldr	r3, [pc, #364]	@ (8002668 <Shell_Loop+0x3b8>)
 80024fc:	61fb      	str	r3, [r7, #28]
			float adc_val_max=4096.0;
 80024fe:	f04f 438b 	mov.w	r3, #1166016512	@ 0x45800000
 8002502:	61bb      	str	r3, [r7, #24]
			float  adc_vcc =3.3;
 8002504:	4b59      	ldr	r3, [pc, #356]	@ (800266c <Shell_Loop+0x3bc>)
 8002506:	617b      	str	r3, [r7, #20]
			int offset =0;
 8002508:	2300      	movs	r3, #0
 800250a:	613b      	str	r3, [r7, #16]

			float u_adc= adc_vcc * ( (int) (adcBuffer[0]) - offset )/ adc_val_max;
 800250c:	4b58      	ldr	r3, [pc, #352]	@ (8002670 <Shell_Loop+0x3c0>)
 800250e:	881b      	ldrh	r3, [r3, #0]
 8002510:	461a      	mov	r2, r3
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	ee07 3a90 	vmov	s15, r3
 800251a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800251e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002522:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002526:	ed97 7a06 	vldr	s14, [r7, #24]
 800252a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800252e:	edc7 7a03 	vstr	s15, [r7, #12]
			float Imes=(u_adc-1.65)/sentivity;
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f7fe f840 	bl	80005b8 <__aeabi_f2d>
 8002538:	a347      	add	r3, pc, #284	@ (adr r3, 8002658 <Shell_Loop+0x3a8>)
 800253a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253e:	f7fd fedb 	bl	80002f8 <__aeabi_dsub>
 8002542:	4602      	mov	r2, r0
 8002544:	460b      	mov	r3, r1
 8002546:	4614      	mov	r4, r2
 8002548:	461d      	mov	r5, r3
 800254a:	69f8      	ldr	r0, [r7, #28]
 800254c:	f7fe f834 	bl	80005b8 <__aeabi_f2d>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	4620      	mov	r0, r4
 8002556:	4629      	mov	r1, r5
 8002558:	f7fe f9b0 	bl	80008bc <__aeabi_ddiv>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	4610      	mov	r0, r2
 8002562:	4619      	mov	r1, r3
 8002564:	f7fe fb78 	bl	8000c58 <__aeabi_d2f>
 8002568:	4603      	mov	r3, r0
 800256a:	60bb      	str	r3, [r7, #8]


			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Valeur : %d \r\n", adcBuffer[0]);
 800256c:	4b40      	ldr	r3, [pc, #256]	@ (8002670 <Shell_Loop+0x3c0>)
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	4a40      	ldr	r2, [pc, #256]	@ (8002674 <Shell_Loop+0x3c4>)
 8002572:	2140      	movs	r1, #64	@ 0x40
 8002574:	4840      	ldr	r0, [pc, #256]	@ (8002678 <Shell_Loop+0x3c8>)
 8002576:	f008 fbff 	bl	800ad78 <sniprintf>
 800257a:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	b29a      	uxth	r2, r3
 8002580:	f04f 33ff 	mov.w	r3, #4294967295
 8002584:	493c      	ldr	r1, [pc, #240]	@ (8002678 <Shell_Loop+0x3c8>)
 8002586:	483d      	ldr	r0, [pc, #244]	@ (800267c <Shell_Loop+0x3cc>)
 8002588:	f005 fc17 	bl	8007dba <HAL_UART_Transmit>

			uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "ValeurImes : %.2f \r\n", Imes);
 800258c:	68b8      	ldr	r0, [r7, #8]
 800258e:	f7fe f813 	bl	80005b8 <__aeabi_f2d>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	e9cd 2300 	strd	r2, r3, [sp]
 800259a:	4a39      	ldr	r2, [pc, #228]	@ (8002680 <Shell_Loop+0x3d0>)
 800259c:	2140      	movs	r1, #64	@ 0x40
 800259e:	4836      	ldr	r0, [pc, #216]	@ (8002678 <Shell_Loop+0x3c8>)
 80025a0:	f008 fbea 	bl	800ad78 <sniprintf>
 80025a4:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	f04f 33ff 	mov.w	r3, #4294967295
 80025ae:	4932      	ldr	r1, [pc, #200]	@ (8002678 <Shell_Loop+0x3c8>)
 80025b0:	4832      	ldr	r0, [pc, #200]	@ (800267c <Shell_Loop+0x3cc>)
 80025b2:	f005 fc02 	bl	8007dba <HAL_UART_Transmit>
 80025b6:	e036      	b.n	8002626 <Shell_Loop+0x376>

		}

		else if(strcmp(argv[0], "speed") == 0) {
 80025b8:	4b29      	ldr	r3, [pc, #164]	@ (8002660 <Shell_Loop+0x3b0>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4931      	ldr	r1, [pc, #196]	@ (8002684 <Shell_Loop+0x3d4>)
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fd fe2e 	bl	8000220 <strcmp>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d12d      	bne.n	8002626 <Shell_Loop+0x376>
			if(argc > 1) {
 80025ca:	4b2f      	ldr	r3, [pc, #188]	@ (8002688 <Shell_Loop+0x3d8>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	dd22      	ble.n	8002618 <Shell_Loop+0x368>
				int speedValue = atoi(argv[1]);
 80025d2:	4b23      	ldr	r3, [pc, #140]	@ (8002660 <Shell_Loop+0x3b0>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f007 fc16 	bl	8009e08 <atoi>
 80025dc:	6238      	str	r0, [r7, #32]
				if(speedValue >= 200 && speedValue <= 2000){
 80025de:	6a3b      	ldr	r3, [r7, #32]
 80025e0:	2bc7      	cmp	r3, #199	@ 0xc7
 80025e2:	dd11      	ble.n	8002608 <Shell_Loop+0x358>
 80025e4:	6a3b      	ldr	r3, [r7, #32]
 80025e6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80025ea:	dc0d      	bgt.n	8002608 <Shell_Loop+0x358>
					//On met le rapport cyclique à la valeur du rapport cyclique renseigné
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speedValue);
 80025ec:	4b27      	ldr	r3, [pc, #156]	@ (800268c <Shell_Loop+0x3dc>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6a3a      	ldr	r2, [r7, #32]
 80025f2:	635a      	str	r2, [r3, #52]	@ 0x34
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, TIM1->ARR - speedValue);
 80025f4:	4b26      	ldr	r3, [pc, #152]	@ (8002690 <Shell_Loop+0x3e0>)
 80025f6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025f8:	6a3a      	ldr	r2, [r7, #32]
 80025fa:	4b24      	ldr	r3, [pc, #144]	@ (800268c <Shell_Loop+0x3dc>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	1a8a      	subs	r2, r1, r2
 8002600:	639a      	str	r2, [r3, #56]	@ 0x38
					commandRecognized = 1;
 8002602:	2301      	movs	r3, #1
 8002604:	627b      	str	r3, [r7, #36]	@ 0x24
 8002606:	e00e      	b.n	8002626 <Shell_Loop+0x376>
				} else {
					HAL_UART_Transmit(&huart2, (uint8_t *)"Invalid speed value\r\n", strlen("Invalid speed value\r\n"), HAL_MAX_DELAY);
 8002608:	f04f 33ff 	mov.w	r3, #4294967295
 800260c:	2215      	movs	r2, #21
 800260e:	4921      	ldr	r1, [pc, #132]	@ (8002694 <Shell_Loop+0x3e4>)
 8002610:	481a      	ldr	r0, [pc, #104]	@ (800267c <Shell_Loop+0x3cc>)
 8002612:	f005 fbd2 	bl	8007dba <HAL_UART_Transmit>
 8002616:	e006      	b.n	8002626 <Shell_Loop+0x376>
				}
			}
			else {
				HAL_UART_Transmit(&huart2, (uint8_t *)"Please provide a speed value\r\n", strlen("Please provide a speed value\r\n"), HAL_MAX_DELAY);
 8002618:	f04f 33ff 	mov.w	r3, #4294967295
 800261c:	221e      	movs	r2, #30
 800261e:	491e      	ldr	r1, [pc, #120]	@ (8002698 <Shell_Loop+0x3e8>)
 8002620:	4816      	ldr	r0, [pc, #88]	@ (800267c <Shell_Loop+0x3cc>)
 8002622:	f005 fbca 	bl	8007dba <HAL_UART_Transmit>
			uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "ValeurImes : %4d \r\n", Imes);
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);*/
		}

		// Si aucune commande n'est reconnue, envoyer "Command not found"
		if (!commandRecognized) {
 8002626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002628:	2b00      	cmp	r3, #0
 800262a:	d106      	bne.n	800263a <Shell_Loop+0x38a>
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 800262c:	f04f 33ff 	mov.w	r3, #4294967295
 8002630:	2214      	movs	r2, #20
 8002632:	491a      	ldr	r1, [pc, #104]	@ (800269c <Shell_Loop+0x3ec>)
 8002634:	4811      	ldr	r0, [pc, #68]	@ (800267c <Shell_Loop+0x3cc>)
 8002636:	f005 fbc0 	bl	8007dba <HAL_UART_Transmit>
		}

		newCmdReady = 0; // Réinitialiser seulement après exécution ou rejet de la commande
 800263a:	4b19      	ldr	r3, [pc, #100]	@ (80026a0 <Shell_Loop+0x3f0>)
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8002640:	f04f 33ff 	mov.w	r3, #4294967295
 8002644:	221c      	movs	r2, #28
 8002646:	4917      	ldr	r1, [pc, #92]	@ (80026a4 <Shell_Loop+0x3f4>)
 8002648:	480c      	ldr	r0, [pc, #48]	@ (800267c <Shell_Loop+0x3cc>)
 800264a:	f005 fbb6 	bl	8007dba <HAL_UART_Transmit>
	}

}
 800264e:	bf00      	nop
 8002650:	372c      	adds	r7, #44	@ 0x2c
 8002652:	46bd      	mov	sp, r7
 8002654:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002656:	bf00      	nop
 8002658:	66666666 	.word	0x66666666
 800265c:	3ffa6666 	.word	0x3ffa6666
 8002660:	20000688 	.word	0x20000688
 8002664:	0800e684 	.word	0x0800e684
 8002668:	3d4ccccd 	.word	0x3d4ccccd
 800266c:	40533333 	.word	0x40533333
 8002670:	20000638 	.word	0x20000638
 8002674:	0800e68c 	.word	0x0800e68c
 8002678:	200005f8 	.word	0x200005f8
 800267c:	200004d0 	.word	0x200004d0
 8002680:	0800e69c 	.word	0x0800e69c
 8002684:	0800e6b4 	.word	0x0800e6b4
 8002688:	200006ac 	.word	0x200006ac
 800268c:	20000438 	.word	0x20000438
 8002690:	40012c00 	.word	0x40012c00
 8002694:	0800e6bc 	.word	0x0800e6bc
 8002698:	0800e6d4 	.word	0x0800e6d4
 800269c:	20000090 	.word	0x20000090
 80026a0:	200006b4 	.word	0x200006b4
 80026a4:	20000004 	.word	0x20000004

080026a8 <HAL_UART_RxCpltCallback>:




void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 80026b0:	4b05      	ldr	r3, [pc, #20]	@ (80026c8 <HAL_UART_RxCpltCallback+0x20>)
 80026b2:	2201      	movs	r2, #1
 80026b4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80026b6:	2201      	movs	r2, #1
 80026b8:	4904      	ldr	r1, [pc, #16]	@ (80026cc <HAL_UART_RxCpltCallback+0x24>)
 80026ba:	4805      	ldr	r0, [pc, #20]	@ (80026d0 <HAL_UART_RxCpltCallback+0x28>)
 80026bc:	f005 fc14 	bl	8007ee8 <HAL_UART_Receive_IT>
}
 80026c0:	bf00      	nop
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	200005f0 	.word	0x200005f0
 80026cc:	200005f4 	.word	0x200005f4
 80026d0:	200004d0 	.word	0x200004d0

080026d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80026d4:	480d      	ldr	r0, [pc, #52]	@ (800270c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80026d6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026d8:	480d      	ldr	r0, [pc, #52]	@ (8002710 <LoopForever+0x6>)
  ldr r1, =_edata
 80026da:	490e      	ldr	r1, [pc, #56]	@ (8002714 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026dc:	4a0e      	ldr	r2, [pc, #56]	@ (8002718 <LoopForever+0xe>)
  movs r3, #0
 80026de:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80026e0:	e002      	b.n	80026e8 <LoopCopyDataInit>

080026e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026e6:	3304      	adds	r3, #4

080026e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026ec:	d3f9      	bcc.n	80026e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ee:	4a0b      	ldr	r2, [pc, #44]	@ (800271c <LoopForever+0x12>)
  ldr r4, =_ebss
 80026f0:	4c0b      	ldr	r4, [pc, #44]	@ (8002720 <LoopForever+0x16>)
  movs r3, #0
 80026f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026f4:	e001      	b.n	80026fa <LoopFillZerobss>

080026f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026f8:	3204      	adds	r2, #4

080026fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026fc:	d3fb      	bcc.n	80026f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80026fe:	f7ff fa07 	bl	8001b10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002702:	f008 fc85 	bl	800b010 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002706:	f7fe ff89 	bl	800161c <main>

0800270a <LoopForever>:

LoopForever:
    b LoopForever
 800270a:	e7fe      	b.n	800270a <LoopForever>
  ldr   r0, =_estack
 800270c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002710:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002714:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 8002718:	0800ebcc 	.word	0x0800ebcc
  ldr r2, =_sbss
 800271c:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 8002720:	20000808 	.word	0x20000808

08002724 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002724:	e7fe      	b.n	8002724 <ADC3_IRQHandler>

08002726 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b082      	sub	sp, #8
 800272a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800272c:	2300      	movs	r3, #0
 800272e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002730:	2003      	movs	r0, #3
 8002732:	f001 ffde 	bl	80046f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002736:	200f      	movs	r0, #15
 8002738:	f7ff f836 	bl	80017a8 <HAL_InitTick>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d002      	beq.n	8002748 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	71fb      	strb	r3, [r7, #7]
 8002746:	e001      	b.n	800274c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002748:	f7ff f80a 	bl	8001760 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800274c:	79fb      	ldrb	r3, [r7, #7]

}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800275c:	4b05      	ldr	r3, [pc, #20]	@ (8002774 <HAL_IncTick+0x1c>)
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	4b05      	ldr	r3, [pc, #20]	@ (8002778 <HAL_IncTick+0x20>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4413      	add	r3, r2
 8002766:	4a03      	ldr	r2, [pc, #12]	@ (8002774 <HAL_IncTick+0x1c>)
 8002768:	6013      	str	r3, [r2, #0]
}
 800276a:	bf00      	nop
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	200006b8 	.word	0x200006b8
 8002778:	200000c4 	.word	0x200000c4

0800277c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  return uwTick;
 8002780:	4b03      	ldr	r3, [pc, #12]	@ (8002790 <HAL_GetTick+0x14>)
 8002782:	681b      	ldr	r3, [r3, #0]
}
 8002784:	4618      	mov	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	200006b8 	.word	0x200006b8

08002794 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	431a      	orrs	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	609a      	str	r2, [r3, #8]
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
 80027c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	609a      	str	r2, [r3, #8]
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b087      	sub	sp, #28
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
 8002808:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	3360      	adds	r3, #96	@ 0x60
 800280e:	461a      	mov	r2, r3
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4413      	add	r3, r2
 8002816:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	4b08      	ldr	r3, [pc, #32]	@ (8002840 <LL_ADC_SetOffset+0x44>)
 800281e:	4013      	ands	r3, r2
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	430a      	orrs	r2, r1
 800282a:	4313      	orrs	r3, r2
 800282c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002834:	bf00      	nop
 8002836:	371c      	adds	r7, #28
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	03fff000 	.word	0x03fff000

08002844 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	3360      	adds	r3, #96	@ 0x60
 8002852:	461a      	mov	r2, r3
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002864:	4618      	mov	r0, r3
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002870:	b480      	push	{r7}
 8002872:	b087      	sub	sp, #28
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	3360      	adds	r3, #96	@ 0x60
 8002880:	461a      	mov	r2, r3
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	4413      	add	r3, r2
 8002888:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	431a      	orrs	r2, r3
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800289a:	bf00      	nop
 800289c:	371c      	adds	r7, #28
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b087      	sub	sp, #28
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	60f8      	str	r0, [r7, #12]
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	3360      	adds	r3, #96	@ 0x60
 80028b6:	461a      	mov	r2, r3
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	431a      	orrs	r2, r3
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80028d0:	bf00      	nop
 80028d2:	371c      	adds	r7, #28
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80028dc:	b480      	push	{r7}
 80028de:	b087      	sub	sp, #28
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	3360      	adds	r3, #96	@ 0x60
 80028ec:	461a      	mov	r2, r3
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	431a      	orrs	r2, r3
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002906:	bf00      	nop
 8002908:	371c      	adds	r7, #28
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002912:	b480      	push	{r7}
 8002914:	b083      	sub	sp, #12
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
 800291a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	695b      	ldr	r3, [r3, #20]
 8002920:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	431a      	orrs	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	615a      	str	r2, [r3, #20]
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800294c:	2301      	movs	r3, #1
 800294e:	e000      	b.n	8002952 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800295e:	b480      	push	{r7}
 8002960:	b087      	sub	sp, #28
 8002962:	af00      	add	r7, sp, #0
 8002964:	60f8      	str	r0, [r7, #12]
 8002966:	60b9      	str	r1, [r7, #8]
 8002968:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	3330      	adds	r3, #48	@ 0x30
 800296e:	461a      	mov	r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	0a1b      	lsrs	r3, r3, #8
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	f003 030c 	and.w	r3, r3, #12
 800297a:	4413      	add	r3, r2
 800297c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	f003 031f 	and.w	r3, r3, #31
 8002988:	211f      	movs	r1, #31
 800298a:	fa01 f303 	lsl.w	r3, r1, r3
 800298e:	43db      	mvns	r3, r3
 8002990:	401a      	ands	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	0e9b      	lsrs	r3, r3, #26
 8002996:	f003 011f 	and.w	r1, r3, #31
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	f003 031f 	and.w	r3, r3, #31
 80029a0:	fa01 f303 	lsl.w	r3, r1, r3
 80029a4:	431a      	orrs	r2, r3
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029aa:	bf00      	nop
 80029ac:	371c      	adds	r7, #28
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029c2:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80029ca:	2301      	movs	r3, #1
 80029cc:	e000      	b.n	80029d0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80029dc:	b480      	push	{r7}
 80029de:	b087      	sub	sp, #28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	3314      	adds	r3, #20
 80029ec:	461a      	mov	r2, r3
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	0e5b      	lsrs	r3, r3, #25
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	4413      	add	r3, r2
 80029fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	0d1b      	lsrs	r3, r3, #20
 8002a04:	f003 031f 	and.w	r3, r3, #31
 8002a08:	2107      	movs	r1, #7
 8002a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	401a      	ands	r2, r3
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	0d1b      	lsrs	r3, r3, #20
 8002a16:	f003 031f 	and.w	r3, r3, #31
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a20:	431a      	orrs	r2, r3
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a26:	bf00      	nop
 8002a28:	371c      	adds	r7, #28
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
	...

08002a34 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a0f      	ldr	r2, [pc, #60]	@ (8002a80 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d10a      	bne.n	8002a5e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a54:	431a      	orrs	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002a5c:	e00a      	b.n	8002a74 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	401a      	ands	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8002a74:	bf00      	nop
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	407f0000 	.word	0x407f0000

08002a84 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f003 031f 	and.w	r3, r3, #31
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002acc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6093      	str	r3, [r2, #8]
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002af0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002af4:	d101      	bne.n	8002afa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002af6:	2301      	movs	r3, #1
 8002af8:	e000      	b.n	8002afc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002b18:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b1c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b24:	bf00      	nop
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b44:	d101      	bne.n	8002b4a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b46:	2301      	movs	r3, #1
 8002b48:	e000      	b.n	8002b4c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b68:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b6c:	f043 0201 	orr.w	r2, r3, #1
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b90:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b94:	f043 0202 	orr.w	r2, r3, #2
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d101      	bne.n	8002bc0 <LL_ADC_IsEnabled+0x18>
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e000      	b.n	8002bc2 <LL_ADC_IsEnabled+0x1a>
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b083      	sub	sp, #12
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d101      	bne.n	8002be6 <LL_ADC_IsDisableOngoing+0x18>
 8002be2:	2301      	movs	r3, #1
 8002be4:	e000      	b.n	8002be8 <LL_ADC_IsDisableOngoing+0x1a>
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c04:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c08:	f043 0204 	orr.w	r2, r3, #4
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	2b04      	cmp	r3, #4
 8002c2e:	d101      	bne.n	8002c34 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c30:	2301      	movs	r3, #1
 8002c32:	e000      	b.n	8002c36 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 0308 	and.w	r3, r3, #8
 8002c52:	2b08      	cmp	r3, #8
 8002c54:	d101      	bne.n	8002c5a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c56:	2301      	movs	r3, #1
 8002c58:	e000      	b.n	8002c5c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c68:	b590      	push	{r4, r7, lr}
 8002c6a:	b089      	sub	sp, #36	@ 0x24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c70:	2300      	movs	r3, #0
 8002c72:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002c74:	2300      	movs	r3, #0
 8002c76:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e1af      	b.n	8002fe2 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d109      	bne.n	8002ca4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f7fe fabf 	bl	8001214 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff ff19 	bl	8002ae0 <LL_ADC_IsDeepPowerDownEnabled>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d004      	beq.n	8002cbe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff feff 	bl	8002abc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff ff34 	bl	8002b30 <LL_ADC_IsInternalRegulatorEnabled>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d115      	bne.n	8002cfa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff ff18 	bl	8002b08 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cd8:	4b9f      	ldr	r3, [pc, #636]	@ (8002f58 <HAL_ADC_Init+0x2f0>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	099b      	lsrs	r3, r3, #6
 8002cde:	4a9f      	ldr	r2, [pc, #636]	@ (8002f5c <HAL_ADC_Init+0x2f4>)
 8002ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce4:	099b      	lsrs	r3, r3, #6
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002cec:	e002      	b.n	8002cf4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1f9      	bne.n	8002cee <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7ff ff16 	bl	8002b30 <LL_ADC_IsInternalRegulatorEnabled>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10d      	bne.n	8002d26 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d0e:	f043 0210 	orr.w	r2, r3, #16
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d1a:	f043 0201 	orr.w	r2, r3, #1
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff ff76 	bl	8002c1c <LL_ADC_REG_IsConversionOngoing>
 8002d30:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d36:	f003 0310 	and.w	r3, r3, #16
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f040 8148 	bne.w	8002fd0 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f040 8144 	bne.w	8002fd0 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d4c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002d50:	f043 0202 	orr.w	r2, r3, #2
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff ff23 	bl	8002ba8 <LL_ADC_IsEnabled>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d141      	bne.n	8002dec <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d70:	d004      	beq.n	8002d7c <HAL_ADC_Init+0x114>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a7a      	ldr	r2, [pc, #488]	@ (8002f60 <HAL_ADC_Init+0x2f8>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d10f      	bne.n	8002d9c <HAL_ADC_Init+0x134>
 8002d7c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002d80:	f7ff ff12 	bl	8002ba8 <LL_ADC_IsEnabled>
 8002d84:	4604      	mov	r4, r0
 8002d86:	4876      	ldr	r0, [pc, #472]	@ (8002f60 <HAL_ADC_Init+0x2f8>)
 8002d88:	f7ff ff0e 	bl	8002ba8 <LL_ADC_IsEnabled>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	4323      	orrs	r3, r4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	bf0c      	ite	eq
 8002d94:	2301      	moveq	r3, #1
 8002d96:	2300      	movne	r3, #0
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	e012      	b.n	8002dc2 <HAL_ADC_Init+0x15a>
 8002d9c:	4871      	ldr	r0, [pc, #452]	@ (8002f64 <HAL_ADC_Init+0x2fc>)
 8002d9e:	f7ff ff03 	bl	8002ba8 <LL_ADC_IsEnabled>
 8002da2:	4604      	mov	r4, r0
 8002da4:	4870      	ldr	r0, [pc, #448]	@ (8002f68 <HAL_ADC_Init+0x300>)
 8002da6:	f7ff feff 	bl	8002ba8 <LL_ADC_IsEnabled>
 8002daa:	4603      	mov	r3, r0
 8002dac:	431c      	orrs	r4, r3
 8002dae:	486f      	ldr	r0, [pc, #444]	@ (8002f6c <HAL_ADC_Init+0x304>)
 8002db0:	f7ff fefa 	bl	8002ba8 <LL_ADC_IsEnabled>
 8002db4:	4603      	mov	r3, r0
 8002db6:	4323      	orrs	r3, r4
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	bf0c      	ite	eq
 8002dbc:	2301      	moveq	r3, #1
 8002dbe:	2300      	movne	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d012      	beq.n	8002dec <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002dce:	d004      	beq.n	8002dda <HAL_ADC_Init+0x172>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a62      	ldr	r2, [pc, #392]	@ (8002f60 <HAL_ADC_Init+0x2f8>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d101      	bne.n	8002dde <HAL_ADC_Init+0x176>
 8002dda:	4a65      	ldr	r2, [pc, #404]	@ (8002f70 <HAL_ADC_Init+0x308>)
 8002ddc:	e000      	b.n	8002de0 <HAL_ADC_Init+0x178>
 8002dde:	4a65      	ldr	r2, [pc, #404]	@ (8002f74 <HAL_ADC_Init+0x30c>)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	4619      	mov	r1, r3
 8002de6:	4610      	mov	r0, r2
 8002de8:	f7ff fcd4 	bl	8002794 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	7f5b      	ldrb	r3, [r3, #29]
 8002df0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002df6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002dfc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002e02:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e0a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d106      	bne.n	8002e28 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	045b      	lsls	r3, r3, #17
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d009      	beq.n	8002e44 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e34:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e3c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68da      	ldr	r2, [r3, #12]
 8002e4a:	4b4b      	ldr	r3, [pc, #300]	@ (8002f78 <HAL_ADC_Init+0x310>)
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	6812      	ldr	r2, [r2, #0]
 8002e52:	69b9      	ldr	r1, [r7, #24]
 8002e54:	430b      	orrs	r3, r1
 8002e56:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff fed2 	bl	8002c1c <LL_ADC_REG_IsConversionOngoing>
 8002e78:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff fedf 	bl	8002c42 <LL_ADC_INJ_IsConversionOngoing>
 8002e84:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d17f      	bne.n	8002f8c <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d17c      	bne.n	8002f8c <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e96:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002e9e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002eae:	f023 0302 	bic.w	r3, r3, #2
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	6812      	ldr	r2, [r2, #0]
 8002eb6:	69b9      	ldr	r1, [r7, #24]
 8002eb8:	430b      	orrs	r3, r1
 8002eba:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d017      	beq.n	8002ef4 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	691a      	ldr	r2, [r3, #16]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002ed2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002edc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002ee0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6911      	ldr	r1, [r2, #16]
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	6812      	ldr	r2, [r2, #0]
 8002eec:	430b      	orrs	r3, r1
 8002eee:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002ef2:	e013      	b.n	8002f1c <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	691a      	ldr	r2, [r3, #16]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002f02:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	6812      	ldr	r2, [r2, #0]
 8002f10:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002f14:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f18:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d12a      	bne.n	8002f7c <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002f30:	f023 0304 	bic.w	r3, r3, #4
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002f3c:	4311      	orrs	r1, r2
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002f42:	4311      	orrs	r1, r2
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f042 0201 	orr.w	r2, r2, #1
 8002f54:	611a      	str	r2, [r3, #16]
 8002f56:	e019      	b.n	8002f8c <HAL_ADC_Init+0x324>
 8002f58:	20000000 	.word	0x20000000
 8002f5c:	053e2d63 	.word	0x053e2d63
 8002f60:	50000100 	.word	0x50000100
 8002f64:	50000400 	.word	0x50000400
 8002f68:	50000500 	.word	0x50000500
 8002f6c:	50000600 	.word	0x50000600
 8002f70:	50000300 	.word	0x50000300
 8002f74:	50000700 	.word	0x50000700
 8002f78:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	691a      	ldr	r2, [r3, #16]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 0201 	bic.w	r2, r2, #1
 8002f8a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d10c      	bne.n	8002fae <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9a:	f023 010f 	bic.w	r1, r3, #15
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	1e5a      	subs	r2, r3, #1
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	631a      	str	r2, [r3, #48]	@ 0x30
 8002fac:	e007      	b.n	8002fbe <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 020f 	bic.w	r2, r2, #15
 8002fbc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc2:	f023 0303 	bic.w	r3, r3, #3
 8002fc6:	f043 0201 	orr.w	r2, r3, #1
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002fce:	e007      	b.n	8002fe0 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd4:	f043 0210 	orr.w	r2, r3, #16
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002fe0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3724      	adds	r7, #36	@ 0x24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd90      	pop	{r4, r7, pc}
 8002fea:	bf00      	nop

08002fec <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003000:	d004      	beq.n	800300c <HAL_ADC_Start_DMA+0x20>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a5a      	ldr	r2, [pc, #360]	@ (8003170 <HAL_ADC_Start_DMA+0x184>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d101      	bne.n	8003010 <HAL_ADC_Start_DMA+0x24>
 800300c:	4b59      	ldr	r3, [pc, #356]	@ (8003174 <HAL_ADC_Start_DMA+0x188>)
 800300e:	e000      	b.n	8003012 <HAL_ADC_Start_DMA+0x26>
 8003010:	4b59      	ldr	r3, [pc, #356]	@ (8003178 <HAL_ADC_Start_DMA+0x18c>)
 8003012:	4618      	mov	r0, r3
 8003014:	f7ff fd36 	bl	8002a84 <LL_ADC_GetMultimode>
 8003018:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f7ff fdfc 	bl	8002c1c <LL_ADC_REG_IsConversionOngoing>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	f040 809b 	bne.w	8003162 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003032:	2b01      	cmp	r3, #1
 8003034:	d101      	bne.n	800303a <HAL_ADC_Start_DMA+0x4e>
 8003036:	2302      	movs	r3, #2
 8003038:	e096      	b.n	8003168 <HAL_ADC_Start_DMA+0x17c>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a4d      	ldr	r2, [pc, #308]	@ (800317c <HAL_ADC_Start_DMA+0x190>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d008      	beq.n	800305e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d005      	beq.n	800305e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	2b05      	cmp	r3, #5
 8003056:	d002      	beq.n	800305e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	2b09      	cmp	r3, #9
 800305c:	d17a      	bne.n	8003154 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 ff56 	bl	8003f10 <ADC_Enable>
 8003064:	4603      	mov	r3, r0
 8003066:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003068:	7dfb      	ldrb	r3, [r7, #23]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d16d      	bne.n	800314a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003072:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003076:	f023 0301 	bic.w	r3, r3, #1
 800307a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a3a      	ldr	r2, [pc, #232]	@ (8003170 <HAL_ADC_Start_DMA+0x184>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d009      	beq.n	80030a0 <HAL_ADC_Start_DMA+0xb4>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a3b      	ldr	r2, [pc, #236]	@ (8003180 <HAL_ADC_Start_DMA+0x194>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d002      	beq.n	800309c <HAL_ADC_Start_DMA+0xb0>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	e003      	b.n	80030a4 <HAL_ADC_Start_DMA+0xb8>
 800309c:	4b39      	ldr	r3, [pc, #228]	@ (8003184 <HAL_ADC_Start_DMA+0x198>)
 800309e:	e001      	b.n	80030a4 <HAL_ADC_Start_DMA+0xb8>
 80030a0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	6812      	ldr	r2, [r2, #0]
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d002      	beq.n	80030b2 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d105      	bne.n	80030be <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d006      	beq.n	80030d8 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ce:	f023 0206 	bic.w	r2, r3, #6
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	661a      	str	r2, [r3, #96]	@ 0x60
 80030d6:	e002      	b.n	80030de <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e2:	4a29      	ldr	r2, [pc, #164]	@ (8003188 <HAL_ADC_Start_DMA+0x19c>)
 80030e4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ea:	4a28      	ldr	r2, [pc, #160]	@ (800318c <HAL_ADC_Start_DMA+0x1a0>)
 80030ec:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030f2:	4a27      	ldr	r2, [pc, #156]	@ (8003190 <HAL_ADC_Start_DMA+0x1a4>)
 80030f4:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	221c      	movs	r2, #28
 80030fc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f042 0210 	orr.w	r2, r2, #16
 8003114:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68da      	ldr	r2, [r3, #12]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f042 0201 	orr.w	r2, r2, #1
 8003124:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	3340      	adds	r3, #64	@ 0x40
 8003130:	4619      	mov	r1, r3
 8003132:	68ba      	ldr	r2, [r7, #8]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f001 fbb7 	bl	80048a8 <HAL_DMA_Start_IT>
 800313a:	4603      	mov	r3, r0
 800313c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff fd56 	bl	8002bf4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003148:	e00d      	b.n	8003166 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003152:	e008      	b.n	8003166 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003160:	e001      	b.n	8003166 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003162:	2302      	movs	r3, #2
 8003164:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003166:	7dfb      	ldrb	r3, [r7, #23]
}
 8003168:	4618      	mov	r0, r3
 800316a:	3718      	adds	r7, #24
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	50000100 	.word	0x50000100
 8003174:	50000300 	.word	0x50000300
 8003178:	50000700 	.word	0x50000700
 800317c:	50000600 	.word	0x50000600
 8003180:	50000500 	.word	0x50000500
 8003184:	50000400 	.word	0x50000400
 8003188:	08004093 	.word	0x08004093
 800318c:	0800416b 	.word	0x0800416b
 8003190:	08004187 	.word	0x08004187

08003194 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b08a      	sub	sp, #40	@ 0x28
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800319c:	2300      	movs	r3, #0
 800319e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031b8:	d004      	beq.n	80031c4 <HAL_ADC_IRQHandler+0x30>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a8e      	ldr	r2, [pc, #568]	@ (80033f8 <HAL_ADC_IRQHandler+0x264>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d101      	bne.n	80031c8 <HAL_ADC_IRQHandler+0x34>
 80031c4:	4b8d      	ldr	r3, [pc, #564]	@ (80033fc <HAL_ADC_IRQHandler+0x268>)
 80031c6:	e000      	b.n	80031ca <HAL_ADC_IRQHandler+0x36>
 80031c8:	4b8d      	ldr	r3, [pc, #564]	@ (8003400 <HAL_ADC_IRQHandler+0x26c>)
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7ff fc5a 	bl	8002a84 <LL_ADC_GetMultimode>
 80031d0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d017      	beq.n	800320c <HAL_ADC_IRQHandler+0x78>
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d012      	beq.n	800320c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ea:	f003 0310 	and.w	r3, r3, #16
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d105      	bne.n	80031fe <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031f6:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f001 f8b8 	bl	8004374 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2202      	movs	r2, #2
 800320a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	f003 0304 	and.w	r3, r3, #4
 8003212:	2b00      	cmp	r3, #0
 8003214:	d004      	beq.n	8003220 <HAL_ADC_IRQHandler+0x8c>
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b00      	cmp	r3, #0
 800321e:	d10b      	bne.n	8003238 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 8094 	beq.w	8003354 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 808e 	beq.w	8003354 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800323c:	f003 0310 	and.w	r3, r3, #16
 8003240:	2b00      	cmp	r3, #0
 8003242:	d105      	bne.n	8003250 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003248:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff fb6f 	bl	8002938 <LL_ADC_REG_IsTriggerSourceSWStart>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d072      	beq.n	8003346 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a64      	ldr	r2, [pc, #400]	@ (80033f8 <HAL_ADC_IRQHandler+0x264>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d009      	beq.n	800327e <HAL_ADC_IRQHandler+0xea>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a65      	ldr	r2, [pc, #404]	@ (8003404 <HAL_ADC_IRQHandler+0x270>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d002      	beq.n	800327a <HAL_ADC_IRQHandler+0xe6>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	e003      	b.n	8003282 <HAL_ADC_IRQHandler+0xee>
 800327a:	4b63      	ldr	r3, [pc, #396]	@ (8003408 <HAL_ADC_IRQHandler+0x274>)
 800327c:	e001      	b.n	8003282 <HAL_ADC_IRQHandler+0xee>
 800327e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	6812      	ldr	r2, [r2, #0]
 8003286:	4293      	cmp	r3, r2
 8003288:	d008      	beq.n	800329c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d005      	beq.n	800329c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	2b05      	cmp	r3, #5
 8003294:	d002      	beq.n	800329c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	2b09      	cmp	r3, #9
 800329a:	d104      	bne.n	80032a6 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	623b      	str	r3, [r7, #32]
 80032a4:	e014      	b.n	80032d0 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a53      	ldr	r2, [pc, #332]	@ (80033f8 <HAL_ADC_IRQHandler+0x264>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d009      	beq.n	80032c4 <HAL_ADC_IRQHandler+0x130>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a53      	ldr	r2, [pc, #332]	@ (8003404 <HAL_ADC_IRQHandler+0x270>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d002      	beq.n	80032c0 <HAL_ADC_IRQHandler+0x12c>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	e003      	b.n	80032c8 <HAL_ADC_IRQHandler+0x134>
 80032c0:	4b51      	ldr	r3, [pc, #324]	@ (8003408 <HAL_ADC_IRQHandler+0x274>)
 80032c2:	e001      	b.n	80032c8 <HAL_ADC_IRQHandler+0x134>
 80032c4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80032c8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80032d0:	6a3b      	ldr	r3, [r7, #32]
 80032d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d135      	bne.n	8003346 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0308 	and.w	r3, r3, #8
 80032e4:	2b08      	cmp	r3, #8
 80032e6:	d12e      	bne.n	8003346 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff fc95 	bl	8002c1c <LL_ADC_REG_IsConversionOngoing>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d11a      	bne.n	800332e <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 020c 	bic.w	r2, r2, #12
 8003306:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800330c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003318:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d112      	bne.n	8003346 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003324:	f043 0201 	orr.w	r2, r3, #1
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800332c:	e00b      	b.n	8003346 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003332:	f043 0210 	orr.w	r2, r3, #16
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800333e:	f043 0201 	orr.w	r2, r3, #1
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7fe f958 	bl	80015fc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	220c      	movs	r2, #12
 8003352:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	f003 0320 	and.w	r3, r3, #32
 800335a:	2b00      	cmp	r3, #0
 800335c:	d004      	beq.n	8003368 <HAL_ADC_IRQHandler+0x1d4>
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	f003 0320 	and.w	r3, r3, #32
 8003364:	2b00      	cmp	r3, #0
 8003366:	d10b      	bne.n	8003380 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800336e:	2b00      	cmp	r3, #0
 8003370:	f000 80b3 	beq.w	80034da <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800337a:	2b00      	cmp	r3, #0
 800337c:	f000 80ad 	beq.w	80034da <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003384:	f003 0310 	and.w	r3, r3, #16
 8003388:	2b00      	cmp	r3, #0
 800338a:	d105      	bne.n	8003398 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003390:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff fb0a 	bl	80029b6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80033a2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff fac5 	bl	8002938 <LL_ADC_REG_IsTriggerSourceSWStart>
 80033ae:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a10      	ldr	r2, [pc, #64]	@ (80033f8 <HAL_ADC_IRQHandler+0x264>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d009      	beq.n	80033ce <HAL_ADC_IRQHandler+0x23a>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a11      	ldr	r2, [pc, #68]	@ (8003404 <HAL_ADC_IRQHandler+0x270>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d002      	beq.n	80033ca <HAL_ADC_IRQHandler+0x236>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	e003      	b.n	80033d2 <HAL_ADC_IRQHandler+0x23e>
 80033ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003408 <HAL_ADC_IRQHandler+0x274>)
 80033cc:	e001      	b.n	80033d2 <HAL_ADC_IRQHandler+0x23e>
 80033ce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	6812      	ldr	r2, [r2, #0]
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d008      	beq.n	80033ec <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d005      	beq.n	80033ec <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	2b06      	cmp	r3, #6
 80033e4:	d002      	beq.n	80033ec <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	2b07      	cmp	r3, #7
 80033ea:	d10f      	bne.n	800340c <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	623b      	str	r3, [r7, #32]
 80033f4:	e01f      	b.n	8003436 <HAL_ADC_IRQHandler+0x2a2>
 80033f6:	bf00      	nop
 80033f8:	50000100 	.word	0x50000100
 80033fc:	50000300 	.word	0x50000300
 8003400:	50000700 	.word	0x50000700
 8003404:	50000500 	.word	0x50000500
 8003408:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a8b      	ldr	r2, [pc, #556]	@ (8003640 <HAL_ADC_IRQHandler+0x4ac>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d009      	beq.n	800342a <HAL_ADC_IRQHandler+0x296>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a8a      	ldr	r2, [pc, #552]	@ (8003644 <HAL_ADC_IRQHandler+0x4b0>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d002      	beq.n	8003426 <HAL_ADC_IRQHandler+0x292>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	e003      	b.n	800342e <HAL_ADC_IRQHandler+0x29a>
 8003426:	4b88      	ldr	r3, [pc, #544]	@ (8003648 <HAL_ADC_IRQHandler+0x4b4>)
 8003428:	e001      	b.n	800342e <HAL_ADC_IRQHandler+0x29a>
 800342a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800342e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d047      	beq.n	80034cc <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d007      	beq.n	8003456 <HAL_ADC_IRQHandler+0x2c2>
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d03f      	beq.n	80034cc <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003452:	2b00      	cmp	r3, #0
 8003454:	d13a      	bne.n	80034cc <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003460:	2b40      	cmp	r3, #64	@ 0x40
 8003462:	d133      	bne.n	80034cc <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003464:	6a3b      	ldr	r3, [r7, #32]
 8003466:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d12e      	bne.n	80034cc <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff fbe5 	bl	8002c42 <LL_ADC_INJ_IsConversionOngoing>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d11a      	bne.n	80034b4 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800348c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003492:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800349e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d112      	bne.n	80034cc <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034aa:	f043 0201 	orr.w	r2, r3, #1
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80034b2:	e00b      	b.n	80034cc <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034b8:	f043 0210 	orr.w	r2, r3, #16
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034c4:	f043 0201 	orr.w	r2, r3, #1
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 ff29 	bl	8004324 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2260      	movs	r2, #96	@ 0x60
 80034d8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d011      	beq.n	8003508 <HAL_ADC_IRQHandler+0x374>
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00c      	beq.n	8003508 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034f2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f8b4 	bl	8003668 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2280      	movs	r2, #128	@ 0x80
 8003506:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800350e:	2b00      	cmp	r3, #0
 8003510:	d012      	beq.n	8003538 <HAL_ADC_IRQHandler+0x3a4>
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00d      	beq.n	8003538 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003520:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 ff0f 	bl	800434c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003536:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800353e:	2b00      	cmp	r3, #0
 8003540:	d012      	beq.n	8003568 <HAL_ADC_IRQHandler+0x3d4>
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00d      	beq.n	8003568 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003550:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 ff01 	bl	8004360 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003566:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	f003 0310 	and.w	r3, r3, #16
 800356e:	2b00      	cmp	r3, #0
 8003570:	d043      	beq.n	80035fa <HAL_ADC_IRQHandler+0x466>
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	f003 0310 	and.w	r3, r3, #16
 8003578:	2b00      	cmp	r3, #0
 800357a:	d03e      	beq.n	80035fa <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003580:	2b00      	cmp	r3, #0
 8003582:	d102      	bne.n	800358a <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003584:	2301      	movs	r3, #1
 8003586:	627b      	str	r3, [r7, #36]	@ 0x24
 8003588:	e021      	b.n	80035ce <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d015      	beq.n	80035bc <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003598:	d004      	beq.n	80035a4 <HAL_ADC_IRQHandler+0x410>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a28      	ldr	r2, [pc, #160]	@ (8003640 <HAL_ADC_IRQHandler+0x4ac>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d101      	bne.n	80035a8 <HAL_ADC_IRQHandler+0x414>
 80035a4:	4b29      	ldr	r3, [pc, #164]	@ (800364c <HAL_ADC_IRQHandler+0x4b8>)
 80035a6:	e000      	b.n	80035aa <HAL_ADC_IRQHandler+0x416>
 80035a8:	4b29      	ldr	r3, [pc, #164]	@ (8003650 <HAL_ADC_IRQHandler+0x4bc>)
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff fa78 	bl	8002aa0 <LL_ADC_GetMultiDMATransfer>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00b      	beq.n	80035ce <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80035b6:	2301      	movs	r3, #1
 80035b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80035ba:	e008      	b.n	80035ce <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80035ca:	2301      	movs	r3, #1
 80035cc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80035ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d10e      	bne.n	80035f2 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035d8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035e4:	f043 0202 	orr.w	r2, r3, #2
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 f845 	bl	800367c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2210      	movs	r2, #16
 80035f8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003600:	2b00      	cmp	r3, #0
 8003602:	d018      	beq.n	8003636 <HAL_ADC_IRQHandler+0x4a2>
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800360a:	2b00      	cmp	r3, #0
 800360c:	d013      	beq.n	8003636 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003612:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800361e:	f043 0208 	orr.w	r2, r3, #8
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800362e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 fe81 	bl	8004338 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003636:	bf00      	nop
 8003638:	3728      	adds	r7, #40	@ 0x28
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	50000100 	.word	0x50000100
 8003644:	50000500 	.word	0x50000500
 8003648:	50000400 	.word	0x50000400
 800364c:	50000300 	.word	0x50000300
 8003650:	50000700 	.word	0x50000700

08003654 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b0b6      	sub	sp, #216	@ 0xd8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800369a:	2300      	movs	r3, #0
 800369c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80036a0:	2300      	movs	r3, #0
 80036a2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d102      	bne.n	80036b4 <HAL_ADC_ConfigChannel+0x24>
 80036ae:	2302      	movs	r3, #2
 80036b0:	f000 bc13 	b.w	8003eda <HAL_ADC_ConfigChannel+0x84a>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7ff faab 	bl	8002c1c <LL_ADC_REG_IsConversionOngoing>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f040 83f3 	bne.w	8003eb4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6818      	ldr	r0, [r3, #0]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	6859      	ldr	r1, [r3, #4]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	461a      	mov	r2, r3
 80036dc:	f7ff f93f 	bl	800295e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff fa99 	bl	8002c1c <LL_ADC_REG_IsConversionOngoing>
 80036ea:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7ff faa5 	bl	8002c42 <LL_ADC_INJ_IsConversionOngoing>
 80036f8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80036fc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003700:	2b00      	cmp	r3, #0
 8003702:	f040 81d9 	bne.w	8003ab8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003706:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800370a:	2b00      	cmp	r3, #0
 800370c:	f040 81d4 	bne.w	8003ab8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003718:	d10f      	bne.n	800373a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6818      	ldr	r0, [r3, #0]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2200      	movs	r2, #0
 8003724:	4619      	mov	r1, r3
 8003726:	f7ff f959 	bl	80029dc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff f8ed 	bl	8002912 <LL_ADC_SetSamplingTimeCommonConfig>
 8003738:	e00e      	b.n	8003758 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6818      	ldr	r0, [r3, #0]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	6819      	ldr	r1, [r3, #0]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	461a      	mov	r2, r3
 8003748:	f7ff f948 	bl	80029dc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2100      	movs	r1, #0
 8003752:	4618      	mov	r0, r3
 8003754:	f7ff f8dd 	bl	8002912 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	695a      	ldr	r2, [r3, #20]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	08db      	lsrs	r3, r3, #3
 8003764:	f003 0303 	and.w	r3, r3, #3
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	fa02 f303 	lsl.w	r3, r2, r3
 800376e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	2b04      	cmp	r3, #4
 8003778:	d022      	beq.n	80037c0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6818      	ldr	r0, [r3, #0]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	6919      	ldr	r1, [r3, #16]
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800378a:	f7ff f837 	bl	80027fc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6818      	ldr	r0, [r3, #0]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	6919      	ldr	r1, [r3, #16]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	461a      	mov	r2, r3
 800379c:	f7ff f883 	bl	80028a6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6818      	ldr	r0, [r3, #0]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	6919      	ldr	r1, [r3, #16]
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	7f1b      	ldrb	r3, [r3, #28]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d102      	bne.n	80037b6 <HAL_ADC_ConfigChannel+0x126>
 80037b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037b4:	e000      	b.n	80037b8 <HAL_ADC_ConfigChannel+0x128>
 80037b6:	2300      	movs	r3, #0
 80037b8:	461a      	mov	r2, r3
 80037ba:	f7ff f88f 	bl	80028dc <LL_ADC_SetOffsetSaturation>
 80037be:	e17b      	b.n	8003ab8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2100      	movs	r1, #0
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7ff f83c 	bl	8002844 <LL_ADC_GetOffsetChannel>
 80037cc:	4603      	mov	r3, r0
 80037ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10a      	bne.n	80037ec <HAL_ADC_ConfigChannel+0x15c>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2100      	movs	r1, #0
 80037dc:	4618      	mov	r0, r3
 80037de:	f7ff f831 	bl	8002844 <LL_ADC_GetOffsetChannel>
 80037e2:	4603      	mov	r3, r0
 80037e4:	0e9b      	lsrs	r3, r3, #26
 80037e6:	f003 021f 	and.w	r2, r3, #31
 80037ea:	e01e      	b.n	800382a <HAL_ADC_ConfigChannel+0x19a>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2100      	movs	r1, #0
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7ff f826 	bl	8002844 <LL_ADC_GetOffsetChannel>
 80037f8:	4603      	mov	r3, r0
 80037fa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003802:	fa93 f3a3 	rbit	r3, r3
 8003806:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800380a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800380e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003812:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800381a:	2320      	movs	r3, #32
 800381c:	e004      	b.n	8003828 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800381e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003822:	fab3 f383 	clz	r3, r3
 8003826:	b2db      	uxtb	r3, r3
 8003828:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003832:	2b00      	cmp	r3, #0
 8003834:	d105      	bne.n	8003842 <HAL_ADC_ConfigChannel+0x1b2>
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	0e9b      	lsrs	r3, r3, #26
 800383c:	f003 031f 	and.w	r3, r3, #31
 8003840:	e018      	b.n	8003874 <HAL_ADC_ConfigChannel+0x1e4>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800384e:	fa93 f3a3 	rbit	r3, r3
 8003852:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003856:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800385a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800385e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003866:	2320      	movs	r3, #32
 8003868:	e004      	b.n	8003874 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800386a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800386e:	fab3 f383 	clz	r3, r3
 8003872:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003874:	429a      	cmp	r2, r3
 8003876:	d106      	bne.n	8003886 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2200      	movs	r2, #0
 800387e:	2100      	movs	r1, #0
 8003880:	4618      	mov	r0, r3
 8003882:	f7fe fff5 	bl	8002870 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2101      	movs	r1, #1
 800388c:	4618      	mov	r0, r3
 800388e:	f7fe ffd9 	bl	8002844 <LL_ADC_GetOffsetChannel>
 8003892:	4603      	mov	r3, r0
 8003894:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10a      	bne.n	80038b2 <HAL_ADC_ConfigChannel+0x222>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2101      	movs	r1, #1
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fe ffce 	bl	8002844 <LL_ADC_GetOffsetChannel>
 80038a8:	4603      	mov	r3, r0
 80038aa:	0e9b      	lsrs	r3, r3, #26
 80038ac:	f003 021f 	and.w	r2, r3, #31
 80038b0:	e01e      	b.n	80038f0 <HAL_ADC_ConfigChannel+0x260>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2101      	movs	r1, #1
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7fe ffc3 	bl	8002844 <LL_ADC_GetOffsetChannel>
 80038be:	4603      	mov	r3, r0
 80038c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80038c8:	fa93 f3a3 	rbit	r3, r3
 80038cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80038d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80038d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80038d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d101      	bne.n	80038e4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80038e0:	2320      	movs	r3, #32
 80038e2:	e004      	b.n	80038ee <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80038e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80038e8:	fab3 f383 	clz	r3, r3
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d105      	bne.n	8003908 <HAL_ADC_ConfigChannel+0x278>
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	0e9b      	lsrs	r3, r3, #26
 8003902:	f003 031f 	and.w	r3, r3, #31
 8003906:	e018      	b.n	800393a <HAL_ADC_ConfigChannel+0x2aa>
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003910:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003914:	fa93 f3a3 	rbit	r3, r3
 8003918:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800391c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003920:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003924:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800392c:	2320      	movs	r3, #32
 800392e:	e004      	b.n	800393a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003930:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003934:	fab3 f383 	clz	r3, r3
 8003938:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800393a:	429a      	cmp	r2, r3
 800393c:	d106      	bne.n	800394c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2200      	movs	r2, #0
 8003944:	2101      	movs	r1, #1
 8003946:	4618      	mov	r0, r3
 8003948:	f7fe ff92 	bl	8002870 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2102      	movs	r1, #2
 8003952:	4618      	mov	r0, r3
 8003954:	f7fe ff76 	bl	8002844 <LL_ADC_GetOffsetChannel>
 8003958:	4603      	mov	r3, r0
 800395a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10a      	bne.n	8003978 <HAL_ADC_ConfigChannel+0x2e8>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2102      	movs	r1, #2
 8003968:	4618      	mov	r0, r3
 800396a:	f7fe ff6b 	bl	8002844 <LL_ADC_GetOffsetChannel>
 800396e:	4603      	mov	r3, r0
 8003970:	0e9b      	lsrs	r3, r3, #26
 8003972:	f003 021f 	and.w	r2, r3, #31
 8003976:	e01e      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x326>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2102      	movs	r1, #2
 800397e:	4618      	mov	r0, r3
 8003980:	f7fe ff60 	bl	8002844 <LL_ADC_GetOffsetChannel>
 8003984:	4603      	mov	r3, r0
 8003986:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800398e:	fa93 f3a3 	rbit	r3, r3
 8003992:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003996:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800399a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800399e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80039a6:	2320      	movs	r3, #32
 80039a8:	e004      	b.n	80039b4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80039aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80039ae:	fab3 f383 	clz	r3, r3
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d105      	bne.n	80039ce <HAL_ADC_ConfigChannel+0x33e>
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	0e9b      	lsrs	r3, r3, #26
 80039c8:	f003 031f 	and.w	r3, r3, #31
 80039cc:	e016      	b.n	80039fc <HAL_ADC_ConfigChannel+0x36c>
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80039da:	fa93 f3a3 	rbit	r3, r3
 80039de:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80039e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80039e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80039e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80039ee:	2320      	movs	r3, #32
 80039f0:	e004      	b.n	80039fc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80039f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039f6:	fab3 f383 	clz	r3, r3
 80039fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d106      	bne.n	8003a0e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2200      	movs	r2, #0
 8003a06:	2102      	movs	r1, #2
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7fe ff31 	bl	8002870 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2103      	movs	r1, #3
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7fe ff15 	bl	8002844 <LL_ADC_GetOffsetChannel>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10a      	bne.n	8003a3a <HAL_ADC_ConfigChannel+0x3aa>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2103      	movs	r1, #3
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fe ff0a 	bl	8002844 <LL_ADC_GetOffsetChannel>
 8003a30:	4603      	mov	r3, r0
 8003a32:	0e9b      	lsrs	r3, r3, #26
 8003a34:	f003 021f 	and.w	r2, r3, #31
 8003a38:	e017      	b.n	8003a6a <HAL_ADC_ConfigChannel+0x3da>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2103      	movs	r1, #3
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fe feff 	bl	8002844 <LL_ADC_GetOffsetChannel>
 8003a46:	4603      	mov	r3, r0
 8003a48:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a4c:	fa93 f3a3 	rbit	r3, r3
 8003a50:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003a52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a54:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003a56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d101      	bne.n	8003a60 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003a5c:	2320      	movs	r3, #32
 8003a5e:	e003      	b.n	8003a68 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003a60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a62:	fab3 f383 	clz	r3, r3
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d105      	bne.n	8003a82 <HAL_ADC_ConfigChannel+0x3f2>
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	0e9b      	lsrs	r3, r3, #26
 8003a7c:	f003 031f 	and.w	r3, r3, #31
 8003a80:	e011      	b.n	8003aa6 <HAL_ADC_ConfigChannel+0x416>
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a8a:	fa93 f3a3 	rbit	r3, r3
 8003a8e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003a90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a92:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003a94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003a9a:	2320      	movs	r3, #32
 8003a9c:	e003      	b.n	8003aa6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003a9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003aa0:	fab3 f383 	clz	r3, r3
 8003aa4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d106      	bne.n	8003ab8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	2103      	movs	r1, #3
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fe fedc 	bl	8002870 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7ff f873 	bl	8002ba8 <LL_ADC_IsEnabled>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f040 813d 	bne.w	8003d44 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6818      	ldr	r0, [r3, #0]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	6819      	ldr	r1, [r3, #0]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	f7fe ffac 	bl	8002a34 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	4aa2      	ldr	r2, [pc, #648]	@ (8003d6c <HAL_ADC_ConfigChannel+0x6dc>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	f040 812e 	bne.w	8003d44 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10b      	bne.n	8003b10 <HAL_ADC_ConfigChannel+0x480>
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	0e9b      	lsrs	r3, r3, #26
 8003afe:	3301      	adds	r3, #1
 8003b00:	f003 031f 	and.w	r3, r3, #31
 8003b04:	2b09      	cmp	r3, #9
 8003b06:	bf94      	ite	ls
 8003b08:	2301      	movls	r3, #1
 8003b0a:	2300      	movhi	r3, #0
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	e019      	b.n	8003b44 <HAL_ADC_ConfigChannel+0x4b4>
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b18:	fa93 f3a3 	rbit	r3, r3
 8003b1c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003b1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b20:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003b22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003b28:	2320      	movs	r3, #32
 8003b2a:	e003      	b.n	8003b34 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003b2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b2e:	fab3 f383 	clz	r3, r3
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	3301      	adds	r3, #1
 8003b36:	f003 031f 	and.w	r3, r3, #31
 8003b3a:	2b09      	cmp	r3, #9
 8003b3c:	bf94      	ite	ls
 8003b3e:	2301      	movls	r3, #1
 8003b40:	2300      	movhi	r3, #0
 8003b42:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d079      	beq.n	8003c3c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d107      	bne.n	8003b64 <HAL_ADC_ConfigChannel+0x4d4>
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	0e9b      	lsrs	r3, r3, #26
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	069b      	lsls	r3, r3, #26
 8003b5e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003b62:	e015      	b.n	8003b90 <HAL_ADC_ConfigChannel+0x500>
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b6c:	fa93 f3a3 	rbit	r3, r3
 8003b70:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003b72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b74:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003b76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003b7c:	2320      	movs	r3, #32
 8003b7e:	e003      	b.n	8003b88 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003b80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b82:	fab3 f383 	clz	r3, r3
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	3301      	adds	r3, #1
 8003b8a:	069b      	lsls	r3, r3, #26
 8003b8c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d109      	bne.n	8003bb0 <HAL_ADC_ConfigChannel+0x520>
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	0e9b      	lsrs	r3, r3, #26
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	f003 031f 	and.w	r3, r3, #31
 8003ba8:	2101      	movs	r1, #1
 8003baa:	fa01 f303 	lsl.w	r3, r1, r3
 8003bae:	e017      	b.n	8003be0 <HAL_ADC_ConfigChannel+0x550>
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bb8:	fa93 f3a3 	rbit	r3, r3
 8003bbc:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003bbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bc0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003bc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d101      	bne.n	8003bcc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003bc8:	2320      	movs	r3, #32
 8003bca:	e003      	b.n	8003bd4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003bcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bce:	fab3 f383 	clz	r3, r3
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	f003 031f 	and.w	r3, r3, #31
 8003bda:	2101      	movs	r1, #1
 8003bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8003be0:	ea42 0103 	orr.w	r1, r2, r3
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10a      	bne.n	8003c06 <HAL_ADC_ConfigChannel+0x576>
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	0e9b      	lsrs	r3, r3, #26
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	f003 021f 	and.w	r2, r3, #31
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	4413      	add	r3, r2
 8003c02:	051b      	lsls	r3, r3, #20
 8003c04:	e018      	b.n	8003c38 <HAL_ADC_ConfigChannel+0x5a8>
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c0e:	fa93 f3a3 	rbit	r3, r3
 8003c12:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003c14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003c18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003c1e:	2320      	movs	r3, #32
 8003c20:	e003      	b.n	8003c2a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003c22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c24:	fab3 f383 	clz	r3, r3
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	f003 021f 	and.w	r2, r3, #31
 8003c30:	4613      	mov	r3, r2
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	4413      	add	r3, r2
 8003c36:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c38:	430b      	orrs	r3, r1
 8003c3a:	e07e      	b.n	8003d3a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d107      	bne.n	8003c58 <HAL_ADC_ConfigChannel+0x5c8>
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	0e9b      	lsrs	r3, r3, #26
 8003c4e:	3301      	adds	r3, #1
 8003c50:	069b      	lsls	r3, r3, #26
 8003c52:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003c56:	e015      	b.n	8003c84 <HAL_ADC_ConfigChannel+0x5f4>
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c60:	fa93 f3a3 	rbit	r3, r3
 8003c64:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c68:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003c70:	2320      	movs	r3, #32
 8003c72:	e003      	b.n	8003c7c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c76:	fab3 f383 	clz	r3, r3
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	069b      	lsls	r3, r3, #26
 8003c80:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d109      	bne.n	8003ca4 <HAL_ADC_ConfigChannel+0x614>
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	0e9b      	lsrs	r3, r3, #26
 8003c96:	3301      	adds	r3, #1
 8003c98:	f003 031f 	and.w	r3, r3, #31
 8003c9c:	2101      	movs	r1, #1
 8003c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca2:	e017      	b.n	8003cd4 <HAL_ADC_ConfigChannel+0x644>
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	fa93 f3a3 	rbit	r3, r3
 8003cb0:	61fb      	str	r3, [r7, #28]
  return result;
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d101      	bne.n	8003cc0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003cbc:	2320      	movs	r3, #32
 8003cbe:	e003      	b.n	8003cc8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc2:	fab3 f383 	clz	r3, r3
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	3301      	adds	r3, #1
 8003cca:	f003 031f 	and.w	r3, r3, #31
 8003cce:	2101      	movs	r1, #1
 8003cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd4:	ea42 0103 	orr.w	r1, r2, r3
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10d      	bne.n	8003d00 <HAL_ADC_ConfigChannel+0x670>
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	0e9b      	lsrs	r3, r3, #26
 8003cea:	3301      	adds	r3, #1
 8003cec:	f003 021f 	and.w	r2, r3, #31
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	4413      	add	r3, r2
 8003cf6:	3b1e      	subs	r3, #30
 8003cf8:	051b      	lsls	r3, r3, #20
 8003cfa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003cfe:	e01b      	b.n	8003d38 <HAL_ADC_ConfigChannel+0x6a8>
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	fa93 f3a3 	rbit	r3, r3
 8003d0c:	613b      	str	r3, [r7, #16]
  return result;
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d101      	bne.n	8003d1c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003d18:	2320      	movs	r3, #32
 8003d1a:	e003      	b.n	8003d24 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	fab3 f383 	clz	r3, r3
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	3301      	adds	r3, #1
 8003d26:	f003 021f 	and.w	r2, r3, #31
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	4413      	add	r3, r2
 8003d30:	3b1e      	subs	r3, #30
 8003d32:	051b      	lsls	r3, r3, #20
 8003d34:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d38:	430b      	orrs	r3, r1
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	6892      	ldr	r2, [r2, #8]
 8003d3e:	4619      	mov	r1, r3
 8003d40:	f7fe fe4c 	bl	80029dc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	4b09      	ldr	r3, [pc, #36]	@ (8003d70 <HAL_ADC_ConfigChannel+0x6e0>)
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 80be 	beq.w	8003ece <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d5a:	d004      	beq.n	8003d66 <HAL_ADC_ConfigChannel+0x6d6>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a04      	ldr	r2, [pc, #16]	@ (8003d74 <HAL_ADC_ConfigChannel+0x6e4>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d10a      	bne.n	8003d7c <HAL_ADC_ConfigChannel+0x6ec>
 8003d66:	4b04      	ldr	r3, [pc, #16]	@ (8003d78 <HAL_ADC_ConfigChannel+0x6e8>)
 8003d68:	e009      	b.n	8003d7e <HAL_ADC_ConfigChannel+0x6ee>
 8003d6a:	bf00      	nop
 8003d6c:	407f0000 	.word	0x407f0000
 8003d70:	80080000 	.word	0x80080000
 8003d74:	50000100 	.word	0x50000100
 8003d78:	50000300 	.word	0x50000300
 8003d7c:	4b59      	ldr	r3, [pc, #356]	@ (8003ee4 <HAL_ADC_ConfigChannel+0x854>)
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7fe fd2e 	bl	80027e0 <LL_ADC_GetCommonPathInternalCh>
 8003d84:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a56      	ldr	r2, [pc, #344]	@ (8003ee8 <HAL_ADC_ConfigChannel+0x858>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d004      	beq.n	8003d9c <HAL_ADC_ConfigChannel+0x70c>
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a55      	ldr	r2, [pc, #340]	@ (8003eec <HAL_ADC_ConfigChannel+0x85c>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d13a      	bne.n	8003e12 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003d9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003da0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d134      	bne.n	8003e12 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003db0:	d005      	beq.n	8003dbe <HAL_ADC_ConfigChannel+0x72e>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a4e      	ldr	r2, [pc, #312]	@ (8003ef0 <HAL_ADC_ConfigChannel+0x860>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	f040 8085 	bne.w	8003ec8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003dc6:	d004      	beq.n	8003dd2 <HAL_ADC_ConfigChannel+0x742>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a49      	ldr	r2, [pc, #292]	@ (8003ef4 <HAL_ADC_ConfigChannel+0x864>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d101      	bne.n	8003dd6 <HAL_ADC_ConfigChannel+0x746>
 8003dd2:	4a49      	ldr	r2, [pc, #292]	@ (8003ef8 <HAL_ADC_ConfigChannel+0x868>)
 8003dd4:	e000      	b.n	8003dd8 <HAL_ADC_ConfigChannel+0x748>
 8003dd6:	4a43      	ldr	r2, [pc, #268]	@ (8003ee4 <HAL_ADC_ConfigChannel+0x854>)
 8003dd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ddc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003de0:	4619      	mov	r1, r3
 8003de2:	4610      	mov	r0, r2
 8003de4:	f7fe fce9 	bl	80027ba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003de8:	4b44      	ldr	r3, [pc, #272]	@ (8003efc <HAL_ADC_ConfigChannel+0x86c>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	099b      	lsrs	r3, r3, #6
 8003dee:	4a44      	ldr	r2, [pc, #272]	@ (8003f00 <HAL_ADC_ConfigChannel+0x870>)
 8003df0:	fba2 2303 	umull	r2, r3, r2, r3
 8003df4:	099b      	lsrs	r3, r3, #6
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	4613      	mov	r3, r2
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	4413      	add	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e02:	e002      	b.n	8003e0a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	3b01      	subs	r3, #1
 8003e08:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1f9      	bne.n	8003e04 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e10:	e05a      	b.n	8003ec8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a3b      	ldr	r2, [pc, #236]	@ (8003f04 <HAL_ADC_ConfigChannel+0x874>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d125      	bne.n	8003e68 <HAL_ADC_ConfigChannel+0x7d8>
 8003e1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d11f      	bne.n	8003e68 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a31      	ldr	r2, [pc, #196]	@ (8003ef4 <HAL_ADC_ConfigChannel+0x864>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d104      	bne.n	8003e3c <HAL_ADC_ConfigChannel+0x7ac>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a34      	ldr	r2, [pc, #208]	@ (8003f08 <HAL_ADC_ConfigChannel+0x878>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d047      	beq.n	8003ecc <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e44:	d004      	beq.n	8003e50 <HAL_ADC_ConfigChannel+0x7c0>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a2a      	ldr	r2, [pc, #168]	@ (8003ef4 <HAL_ADC_ConfigChannel+0x864>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d101      	bne.n	8003e54 <HAL_ADC_ConfigChannel+0x7c4>
 8003e50:	4a29      	ldr	r2, [pc, #164]	@ (8003ef8 <HAL_ADC_ConfigChannel+0x868>)
 8003e52:	e000      	b.n	8003e56 <HAL_ADC_ConfigChannel+0x7c6>
 8003e54:	4a23      	ldr	r2, [pc, #140]	@ (8003ee4 <HAL_ADC_ConfigChannel+0x854>)
 8003e56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e5e:	4619      	mov	r1, r3
 8003e60:	4610      	mov	r0, r2
 8003e62:	f7fe fcaa 	bl	80027ba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e66:	e031      	b.n	8003ecc <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a27      	ldr	r2, [pc, #156]	@ (8003f0c <HAL_ADC_ConfigChannel+0x87c>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d12d      	bne.n	8003ece <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003e72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d127      	bne.n	8003ece <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a1c      	ldr	r2, [pc, #112]	@ (8003ef4 <HAL_ADC_ConfigChannel+0x864>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d022      	beq.n	8003ece <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e90:	d004      	beq.n	8003e9c <HAL_ADC_ConfigChannel+0x80c>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a17      	ldr	r2, [pc, #92]	@ (8003ef4 <HAL_ADC_ConfigChannel+0x864>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d101      	bne.n	8003ea0 <HAL_ADC_ConfigChannel+0x810>
 8003e9c:	4a16      	ldr	r2, [pc, #88]	@ (8003ef8 <HAL_ADC_ConfigChannel+0x868>)
 8003e9e:	e000      	b.n	8003ea2 <HAL_ADC_ConfigChannel+0x812>
 8003ea0:	4a10      	ldr	r2, [pc, #64]	@ (8003ee4 <HAL_ADC_ConfigChannel+0x854>)
 8003ea2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ea6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003eaa:	4619      	mov	r1, r3
 8003eac:	4610      	mov	r0, r2
 8003eae:	f7fe fc84 	bl	80027ba <LL_ADC_SetCommonPathInternalCh>
 8003eb2:	e00c      	b.n	8003ece <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb8:	f043 0220 	orr.w	r2, r3, #32
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003ec6:	e002      	b.n	8003ece <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ec8:	bf00      	nop
 8003eca:	e000      	b.n	8003ece <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ecc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003ed6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	37d8      	adds	r7, #216	@ 0xd8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	50000700 	.word	0x50000700
 8003ee8:	c3210000 	.word	0xc3210000
 8003eec:	90c00010 	.word	0x90c00010
 8003ef0:	50000600 	.word	0x50000600
 8003ef4:	50000100 	.word	0x50000100
 8003ef8:	50000300 	.word	0x50000300
 8003efc:	20000000 	.word	0x20000000
 8003f00:	053e2d63 	.word	0x053e2d63
 8003f04:	c7520000 	.word	0xc7520000
 8003f08:	50000500 	.word	0x50000500
 8003f0c:	cb840000 	.word	0xcb840000

08003f10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7fe fe43 	bl	8002ba8 <LL_ADC_IsEnabled>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d14d      	bne.n	8003fc4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689a      	ldr	r2, [r3, #8]
 8003f2e:	4b28      	ldr	r3, [pc, #160]	@ (8003fd0 <ADC_Enable+0xc0>)
 8003f30:	4013      	ands	r3, r2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00d      	beq.n	8003f52 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f3a:	f043 0210 	orr.w	r2, r3, #16
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f46:	f043 0201 	orr.w	r2, r3, #1
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e039      	b.n	8003fc6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7fe fdfe 	bl	8002b58 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003f5c:	f7fe fc0e 	bl	800277c <HAL_GetTick>
 8003f60:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f62:	e028      	b.n	8003fb6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7fe fe1d 	bl	8002ba8 <LL_ADC_IsEnabled>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d104      	bne.n	8003f7e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7fe fded 	bl	8002b58 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003f7e:	f7fe fbfd 	bl	800277c <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d914      	bls.n	8003fb6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d00d      	beq.n	8003fb6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f9e:	f043 0210 	orr.w	r2, r3, #16
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003faa:	f043 0201 	orr.w	r2, r3, #1
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e007      	b.n	8003fc6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d1cf      	bne.n	8003f64 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	8000003f 	.word	0x8000003f

08003fd4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7fe fdf4 	bl	8002bce <LL_ADC_IsDisableOngoing>
 8003fe6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7fe fddb 	bl	8002ba8 <LL_ADC_IsEnabled>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d047      	beq.n	8004088 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d144      	bne.n	8004088 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f003 030d 	and.w	r3, r3, #13
 8004008:	2b01      	cmp	r3, #1
 800400a:	d10c      	bne.n	8004026 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4618      	mov	r0, r3
 8004012:	f7fe fdb5 	bl	8002b80 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2203      	movs	r2, #3
 800401c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800401e:	f7fe fbad 	bl	800277c <HAL_GetTick>
 8004022:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004024:	e029      	b.n	800407a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800402a:	f043 0210 	orr.w	r2, r3, #16
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004036:	f043 0201 	orr.w	r2, r3, #1
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e023      	b.n	800408a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004042:	f7fe fb9b 	bl	800277c <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d914      	bls.n	800407a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00d      	beq.n	800407a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004062:	f043 0210 	orr.w	r2, r3, #16
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800406e:	f043 0201 	orr.w	r2, r3, #1
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e007      	b.n	800408a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1dc      	bne.n	8004042 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b084      	sub	sp, #16
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800409e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040a4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d14b      	bne.n	8004144 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040b0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0308 	and.w	r3, r3, #8
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d021      	beq.n	800410a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fe fc34 	bl	8002938 <LL_ADC_REG_IsTriggerSourceSWStart>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d032      	beq.n	800413c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d12b      	bne.n	800413c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d11f      	bne.n	800413c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004100:	f043 0201 	orr.w	r2, r3, #1
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004108:	e018      	b.n	800413c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d111      	bne.n	800413c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800411c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004128:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d105      	bne.n	800413c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004134:	f043 0201 	orr.w	r2, r3, #1
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f7fd fa5d 	bl	80015fc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004142:	e00e      	b.n	8004162 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004148:	f003 0310 	and.w	r3, r3, #16
 800414c:	2b00      	cmp	r3, #0
 800414e:	d003      	beq.n	8004158 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f7ff fa93 	bl	800367c <HAL_ADC_ErrorCallback>
}
 8004156:	e004      	b.n	8004162 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800415c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	4798      	blx	r3
}
 8004162:	bf00      	nop
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b084      	sub	sp, #16
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004176:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f7ff fa6b 	bl	8003654 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800417e:	bf00      	nop
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004186:	b580      	push	{r7, lr}
 8004188:	b084      	sub	sp, #16
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004192:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004198:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041a4:	f043 0204 	orr.w	r2, r3, #4
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f7ff fa65 	bl	800367c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80041b2:	bf00      	nop
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <LL_ADC_IsEnabled>:
{
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d101      	bne.n	80041d2 <LL_ADC_IsEnabled+0x18>
 80041ce:	2301      	movs	r3, #1
 80041d0:	e000      	b.n	80041d4 <LL_ADC_IsEnabled+0x1a>
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <LL_ADC_StartCalibration>:
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80041f2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80041fc:	4313      	orrs	r3, r2
 80041fe:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	609a      	str	r2, [r3, #8]
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <LL_ADC_IsCalibrationOnGoing>:
{
 8004212:	b480      	push	{r7}
 8004214:	b083      	sub	sp, #12
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004222:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004226:	d101      	bne.n	800422c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004228:	2301      	movs	r3, #1
 800422a:	e000      	b.n	800422e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <LL_ADC_REG_IsConversionOngoing>:
{
 800423a:	b480      	push	{r7}
 800423c:	b083      	sub	sp, #12
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f003 0304 	and.w	r3, r3, #4
 800424a:	2b04      	cmp	r3, #4
 800424c:	d101      	bne.n	8004252 <LL_ADC_REG_IsConversionOngoing+0x18>
 800424e:	2301      	movs	r3, #1
 8004250:	e000      	b.n	8004254 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800426a:	2300      	movs	r3, #0
 800426c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004274:	2b01      	cmp	r3, #1
 8004276:	d101      	bne.n	800427c <HAL_ADCEx_Calibration_Start+0x1c>
 8004278:	2302      	movs	r3, #2
 800427a:	e04d      	b.n	8004318 <HAL_ADCEx_Calibration_Start+0xb8>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f7ff fea5 	bl	8003fd4 <ADC_Disable>
 800428a:	4603      	mov	r3, r0
 800428c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800428e:	7bfb      	ldrb	r3, [r7, #15]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d136      	bne.n	8004302 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004298:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800429c:	f023 0302 	bic.w	r3, r3, #2
 80042a0:	f043 0202 	orr.w	r2, r3, #2
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	6839      	ldr	r1, [r7, #0]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7ff ff96 	bl	80041e0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80042b4:	e014      	b.n	80042e0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	3301      	adds	r3, #1
 80042ba:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	4a18      	ldr	r2, [pc, #96]	@ (8004320 <HAL_ADCEx_Calibration_Start+0xc0>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d90d      	bls.n	80042e0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042c8:	f023 0312 	bic.w	r3, r3, #18
 80042cc:	f043 0210 	orr.w	r2, r3, #16
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e01b      	b.n	8004318 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7ff ff94 	bl	8004212 <LL_ADC_IsCalibrationOnGoing>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1e2      	bne.n	80042b6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042f4:	f023 0303 	bic.w	r3, r3, #3
 80042f8:	f043 0201 	orr.w	r2, r3, #1
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004300:	e005      	b.n	800430e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004306:	f043 0210 	orr.w	r2, r3, #16
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004316:	7bfb      	ldrb	r3, [r7, #15]
}
 8004318:	4618      	mov	r0, r3
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	0004de01 	.word	0x0004de01

08004324 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004388:	b590      	push	{r4, r7, lr}
 800438a:	b0a1      	sub	sp, #132	@ 0x84
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004392:	2300      	movs	r3, #0
 8004394:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d101      	bne.n	80043a6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80043a2:	2302      	movs	r3, #2
 80043a4:	e0e7      	b.n	8004576 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80043ae:	2300      	movs	r3, #0
 80043b0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80043b2:	2300      	movs	r3, #0
 80043b4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80043be:	d102      	bne.n	80043c6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80043c0:	4b6f      	ldr	r3, [pc, #444]	@ (8004580 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80043c2:	60bb      	str	r3, [r7, #8]
 80043c4:	e009      	b.n	80043da <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a6e      	ldr	r2, [pc, #440]	@ (8004584 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d102      	bne.n	80043d6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80043d0:	4b6d      	ldr	r3, [pc, #436]	@ (8004588 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80043d2:	60bb      	str	r3, [r7, #8]
 80043d4:	e001      	b.n	80043da <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80043d6:	2300      	movs	r3, #0
 80043d8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d10b      	bne.n	80043f8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043e4:	f043 0220 	orr.w	r2, r3, #32
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e0be      	b.n	8004576 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7ff ff1d 	bl	800423a <LL_ADC_REG_IsConversionOngoing>
 8004400:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4618      	mov	r0, r3
 8004408:	f7ff ff17 	bl	800423a <LL_ADC_REG_IsConversionOngoing>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	f040 80a0 	bne.w	8004554 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004414:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004416:	2b00      	cmp	r3, #0
 8004418:	f040 809c 	bne.w	8004554 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004424:	d004      	beq.n	8004430 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a55      	ldr	r2, [pc, #340]	@ (8004580 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d101      	bne.n	8004434 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004430:	4b56      	ldr	r3, [pc, #344]	@ (800458c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004432:	e000      	b.n	8004436 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004434:	4b56      	ldr	r3, [pc, #344]	@ (8004590 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004436:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d04b      	beq.n	80044d8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004440:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	6859      	ldr	r1, [r3, #4]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004452:	035b      	lsls	r3, r3, #13
 8004454:	430b      	orrs	r3, r1
 8004456:	431a      	orrs	r2, r3
 8004458:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800445a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004464:	d004      	beq.n	8004470 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a45      	ldr	r2, [pc, #276]	@ (8004580 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d10f      	bne.n	8004490 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004470:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004474:	f7ff fea1 	bl	80041ba <LL_ADC_IsEnabled>
 8004478:	4604      	mov	r4, r0
 800447a:	4841      	ldr	r0, [pc, #260]	@ (8004580 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800447c:	f7ff fe9d 	bl	80041ba <LL_ADC_IsEnabled>
 8004480:	4603      	mov	r3, r0
 8004482:	4323      	orrs	r3, r4
 8004484:	2b00      	cmp	r3, #0
 8004486:	bf0c      	ite	eq
 8004488:	2301      	moveq	r3, #1
 800448a:	2300      	movne	r3, #0
 800448c:	b2db      	uxtb	r3, r3
 800448e:	e012      	b.n	80044b6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004490:	483c      	ldr	r0, [pc, #240]	@ (8004584 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004492:	f7ff fe92 	bl	80041ba <LL_ADC_IsEnabled>
 8004496:	4604      	mov	r4, r0
 8004498:	483b      	ldr	r0, [pc, #236]	@ (8004588 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800449a:	f7ff fe8e 	bl	80041ba <LL_ADC_IsEnabled>
 800449e:	4603      	mov	r3, r0
 80044a0:	431c      	orrs	r4, r3
 80044a2:	483c      	ldr	r0, [pc, #240]	@ (8004594 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80044a4:	f7ff fe89 	bl	80041ba <LL_ADC_IsEnabled>
 80044a8:	4603      	mov	r3, r0
 80044aa:	4323      	orrs	r3, r4
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	bf0c      	ite	eq
 80044b0:	2301      	moveq	r3, #1
 80044b2:	2300      	movne	r3, #0
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d056      	beq.n	8004568 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80044ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80044c2:	f023 030f 	bic.w	r3, r3, #15
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	6811      	ldr	r1, [r2, #0]
 80044ca:	683a      	ldr	r2, [r7, #0]
 80044cc:	6892      	ldr	r2, [r2, #8]
 80044ce:	430a      	orrs	r2, r1
 80044d0:	431a      	orrs	r2, r3
 80044d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044d4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80044d6:	e047      	b.n	8004568 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80044d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80044e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044e2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044ec:	d004      	beq.n	80044f8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a23      	ldr	r2, [pc, #140]	@ (8004580 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d10f      	bne.n	8004518 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80044f8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80044fc:	f7ff fe5d 	bl	80041ba <LL_ADC_IsEnabled>
 8004500:	4604      	mov	r4, r0
 8004502:	481f      	ldr	r0, [pc, #124]	@ (8004580 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004504:	f7ff fe59 	bl	80041ba <LL_ADC_IsEnabled>
 8004508:	4603      	mov	r3, r0
 800450a:	4323      	orrs	r3, r4
 800450c:	2b00      	cmp	r3, #0
 800450e:	bf0c      	ite	eq
 8004510:	2301      	moveq	r3, #1
 8004512:	2300      	movne	r3, #0
 8004514:	b2db      	uxtb	r3, r3
 8004516:	e012      	b.n	800453e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004518:	481a      	ldr	r0, [pc, #104]	@ (8004584 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800451a:	f7ff fe4e 	bl	80041ba <LL_ADC_IsEnabled>
 800451e:	4604      	mov	r4, r0
 8004520:	4819      	ldr	r0, [pc, #100]	@ (8004588 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004522:	f7ff fe4a 	bl	80041ba <LL_ADC_IsEnabled>
 8004526:	4603      	mov	r3, r0
 8004528:	431c      	orrs	r4, r3
 800452a:	481a      	ldr	r0, [pc, #104]	@ (8004594 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800452c:	f7ff fe45 	bl	80041ba <LL_ADC_IsEnabled>
 8004530:	4603      	mov	r3, r0
 8004532:	4323      	orrs	r3, r4
 8004534:	2b00      	cmp	r3, #0
 8004536:	bf0c      	ite	eq
 8004538:	2301      	moveq	r3, #1
 800453a:	2300      	movne	r3, #0
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d012      	beq.n	8004568 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004542:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800454a:	f023 030f 	bic.w	r3, r3, #15
 800454e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004550:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004552:	e009      	b.n	8004568 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004558:	f043 0220 	orr.w	r2, r3, #32
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004566:	e000      	b.n	800456a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004568:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004572:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004576:	4618      	mov	r0, r3
 8004578:	3784      	adds	r7, #132	@ 0x84
 800457a:	46bd      	mov	sp, r7
 800457c:	bd90      	pop	{r4, r7, pc}
 800457e:	bf00      	nop
 8004580:	50000100 	.word	0x50000100
 8004584:	50000400 	.word	0x50000400
 8004588:	50000500 	.word	0x50000500
 800458c:	50000300 	.word	0x50000300
 8004590:	50000700 	.word	0x50000700
 8004594:	50000600 	.word	0x50000600

08004598 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f003 0307 	and.w	r3, r3, #7
 80045a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045a8:	4b0c      	ldr	r3, [pc, #48]	@ (80045dc <__NVIC_SetPriorityGrouping+0x44>)
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80045b4:	4013      	ands	r3, r2
 80045b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80045c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045ca:	4a04      	ldr	r2, [pc, #16]	@ (80045dc <__NVIC_SetPriorityGrouping+0x44>)
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	60d3      	str	r3, [r2, #12]
}
 80045d0:	bf00      	nop
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	e000ed00 	.word	0xe000ed00

080045e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045e4:	4b04      	ldr	r3, [pc, #16]	@ (80045f8 <__NVIC_GetPriorityGrouping+0x18>)
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	0a1b      	lsrs	r3, r3, #8
 80045ea:	f003 0307 	and.w	r3, r3, #7
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr
 80045f8:	e000ed00 	.word	0xe000ed00

080045fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	4603      	mov	r3, r0
 8004604:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800460a:	2b00      	cmp	r3, #0
 800460c:	db0b      	blt.n	8004626 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800460e:	79fb      	ldrb	r3, [r7, #7]
 8004610:	f003 021f 	and.w	r2, r3, #31
 8004614:	4907      	ldr	r1, [pc, #28]	@ (8004634 <__NVIC_EnableIRQ+0x38>)
 8004616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800461a:	095b      	lsrs	r3, r3, #5
 800461c:	2001      	movs	r0, #1
 800461e:	fa00 f202 	lsl.w	r2, r0, r2
 8004622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004626:	bf00      	nop
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	e000e100 	.word	0xe000e100

08004638 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	4603      	mov	r3, r0
 8004640:	6039      	str	r1, [r7, #0]
 8004642:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004648:	2b00      	cmp	r3, #0
 800464a:	db0a      	blt.n	8004662 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	b2da      	uxtb	r2, r3
 8004650:	490c      	ldr	r1, [pc, #48]	@ (8004684 <__NVIC_SetPriority+0x4c>)
 8004652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004656:	0112      	lsls	r2, r2, #4
 8004658:	b2d2      	uxtb	r2, r2
 800465a:	440b      	add	r3, r1
 800465c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004660:	e00a      	b.n	8004678 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	b2da      	uxtb	r2, r3
 8004666:	4908      	ldr	r1, [pc, #32]	@ (8004688 <__NVIC_SetPriority+0x50>)
 8004668:	79fb      	ldrb	r3, [r7, #7]
 800466a:	f003 030f 	and.w	r3, r3, #15
 800466e:	3b04      	subs	r3, #4
 8004670:	0112      	lsls	r2, r2, #4
 8004672:	b2d2      	uxtb	r2, r2
 8004674:	440b      	add	r3, r1
 8004676:	761a      	strb	r2, [r3, #24]
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr
 8004684:	e000e100 	.word	0xe000e100
 8004688:	e000ed00 	.word	0xe000ed00

0800468c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800468c:	b480      	push	{r7}
 800468e:	b089      	sub	sp, #36	@ 0x24
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f003 0307 	and.w	r3, r3, #7
 800469e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	f1c3 0307 	rsb	r3, r3, #7
 80046a6:	2b04      	cmp	r3, #4
 80046a8:	bf28      	it	cs
 80046aa:	2304      	movcs	r3, #4
 80046ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	3304      	adds	r3, #4
 80046b2:	2b06      	cmp	r3, #6
 80046b4:	d902      	bls.n	80046bc <NVIC_EncodePriority+0x30>
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	3b03      	subs	r3, #3
 80046ba:	e000      	b.n	80046be <NVIC_EncodePriority+0x32>
 80046bc:	2300      	movs	r3, #0
 80046be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046c0:	f04f 32ff 	mov.w	r2, #4294967295
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ca:	43da      	mvns	r2, r3
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	401a      	ands	r2, r3
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046d4:	f04f 31ff 	mov.w	r1, #4294967295
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	fa01 f303 	lsl.w	r3, r1, r3
 80046de:	43d9      	mvns	r1, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046e4:	4313      	orrs	r3, r2
         );
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3724      	adds	r7, #36	@ 0x24
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr

080046f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b082      	sub	sp, #8
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7ff ff4c 	bl	8004598 <__NVIC_SetPriorityGrouping>
}
 8004700:	bf00      	nop
 8004702:	3708      	adds	r7, #8
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af00      	add	r7, sp, #0
 800470e:	4603      	mov	r3, r0
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
 8004714:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004716:	f7ff ff63 	bl	80045e0 <__NVIC_GetPriorityGrouping>
 800471a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	68b9      	ldr	r1, [r7, #8]
 8004720:	6978      	ldr	r0, [r7, #20]
 8004722:	f7ff ffb3 	bl	800468c <NVIC_EncodePriority>
 8004726:	4602      	mov	r2, r0
 8004728:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800472c:	4611      	mov	r1, r2
 800472e:	4618      	mov	r0, r3
 8004730:	f7ff ff82 	bl	8004638 <__NVIC_SetPriority>
}
 8004734:	bf00      	nop
 8004736:	3718      	adds	r7, #24
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	4603      	mov	r3, r0
 8004744:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800474a:	4618      	mov	r0, r3
 800474c:	f7ff ff56 	bl	80045fc <__NVIC_EnableIRQ>
}
 8004750:	bf00      	nop
 8004752:	3708      	adds	r7, #8
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e08d      	b.n	8004886 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	461a      	mov	r2, r3
 8004770:	4b47      	ldr	r3, [pc, #284]	@ (8004890 <HAL_DMA_Init+0x138>)
 8004772:	429a      	cmp	r2, r3
 8004774:	d80f      	bhi.n	8004796 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	461a      	mov	r2, r3
 800477c:	4b45      	ldr	r3, [pc, #276]	@ (8004894 <HAL_DMA_Init+0x13c>)
 800477e:	4413      	add	r3, r2
 8004780:	4a45      	ldr	r2, [pc, #276]	@ (8004898 <HAL_DMA_Init+0x140>)
 8004782:	fba2 2303 	umull	r2, r3, r2, r3
 8004786:	091b      	lsrs	r3, r3, #4
 8004788:	009a      	lsls	r2, r3, #2
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a42      	ldr	r2, [pc, #264]	@ (800489c <HAL_DMA_Init+0x144>)
 8004792:	641a      	str	r2, [r3, #64]	@ 0x40
 8004794:	e00e      	b.n	80047b4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	461a      	mov	r2, r3
 800479c:	4b40      	ldr	r3, [pc, #256]	@ (80048a0 <HAL_DMA_Init+0x148>)
 800479e:	4413      	add	r3, r2
 80047a0:	4a3d      	ldr	r2, [pc, #244]	@ (8004898 <HAL_DMA_Init+0x140>)
 80047a2:	fba2 2303 	umull	r2, r3, r2, r3
 80047a6:	091b      	lsrs	r3, r3, #4
 80047a8:	009a      	lsls	r2, r3, #2
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a3c      	ldr	r2, [pc, #240]	@ (80048a4 <HAL_DMA_Init+0x14c>)
 80047b2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2202      	movs	r2, #2
 80047b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80047ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80047d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 fa76 	bl	8004cf8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004814:	d102      	bne.n	800481c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004824:	b2d2      	uxtb	r2, r2
 8004826:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004830:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d010      	beq.n	800485c <HAL_DMA_Init+0x104>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	2b04      	cmp	r3, #4
 8004840:	d80c      	bhi.n	800485c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 fa96 	bl	8004d74 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800484c:	2200      	movs	r2, #0
 800484e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004858:	605a      	str	r2, [r3, #4]
 800485a:	e008      	b.n	800486e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	40020407 	.word	0x40020407
 8004894:	bffdfff8 	.word	0xbffdfff8
 8004898:	cccccccd 	.word	0xcccccccd
 800489c:	40020000 	.word	0x40020000
 80048a0:	bffdfbf8 	.word	0xbffdfbf8
 80048a4:	40020400 	.word	0x40020400

080048a8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b086      	sub	sp, #24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
 80048b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048b6:	2300      	movs	r3, #0
 80048b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d101      	bne.n	80048c8 <HAL_DMA_Start_IT+0x20>
 80048c4:	2302      	movs	r3, #2
 80048c6:	e066      	b.n	8004996 <HAL_DMA_Start_IT+0xee>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d155      	bne.n	8004988 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2202      	movs	r2, #2
 80048e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f022 0201 	bic.w	r2, r2, #1
 80048f8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	68b9      	ldr	r1, [r7, #8]
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	f000 f9bb 	bl	8004c7c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800490a:	2b00      	cmp	r3, #0
 800490c:	d008      	beq.n	8004920 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f042 020e 	orr.w	r2, r2, #14
 800491c:	601a      	str	r2, [r3, #0]
 800491e:	e00f      	b.n	8004940 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 0204 	bic.w	r2, r2, #4
 800492e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f042 020a 	orr.w	r2, r2, #10
 800493e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d007      	beq.n	800495e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004958:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800495c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004962:	2b00      	cmp	r3, #0
 8004964:	d007      	beq.n	8004976 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004970:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004974:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f042 0201 	orr.w	r2, r2, #1
 8004984:	601a      	str	r2, [r3, #0]
 8004986:	e005      	b.n	8004994 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004990:	2302      	movs	r3, #2
 8004992:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004994:	7dfb      	ldrb	r3, [r7, #23]
}
 8004996:	4618      	mov	r0, r3
 8004998:	3718      	adds	r7, #24
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800499e:	b480      	push	{r7}
 80049a0:	b085      	sub	sp, #20
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049a6:	2300      	movs	r3, #0
 80049a8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d005      	beq.n	80049c2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2204      	movs	r2, #4
 80049ba:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	73fb      	strb	r3, [r7, #15]
 80049c0:	e037      	b.n	8004a32 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f022 020e 	bic.w	r2, r2, #14
 80049d0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049e0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f022 0201 	bic.w	r2, r2, #1
 80049f0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049f6:	f003 021f 	and.w	r2, r3, #31
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049fe:	2101      	movs	r1, #1
 8004a00:	fa01 f202 	lsl.w	r2, r1, r2
 8004a04:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004a0e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00c      	beq.n	8004a32 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a22:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a26:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004a30:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d00d      	beq.n	8004a84 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2204      	movs	r2, #4
 8004a6c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	73fb      	strb	r3, [r7, #15]
 8004a82:	e047      	b.n	8004b14 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f022 020e 	bic.w	r2, r2, #14
 8004a92:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 0201 	bic.w	r2, r2, #1
 8004aa2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ab2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ab8:	f003 021f 	and.w	r2, r3, #31
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac0:	2101      	movs	r1, #1
 8004ac2:	fa01 f202 	lsl.w	r2, r1, r2
 8004ac6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004ad0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00c      	beq.n	8004af4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ae4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ae8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004af2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d003      	beq.n	8004b14 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	4798      	blx	r3
    }
  }
  return status;
 8004b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b084      	sub	sp, #16
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b3a:	f003 031f 	and.w	r3, r3, #31
 8004b3e:	2204      	movs	r2, #4
 8004b40:	409a      	lsls	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	4013      	ands	r3, r2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d026      	beq.n	8004b98 <HAL_DMA_IRQHandler+0x7a>
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	f003 0304 	and.w	r3, r3, #4
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d021      	beq.n	8004b98 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0320 	and.w	r3, r3, #32
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d107      	bne.n	8004b72 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 0204 	bic.w	r2, r2, #4
 8004b70:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b76:	f003 021f 	and.w	r2, r3, #31
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b7e:	2104      	movs	r1, #4
 8004b80:	fa01 f202 	lsl.w	r2, r1, r2
 8004b84:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d071      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004b96:	e06c      	b.n	8004c72 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b9c:	f003 031f 	and.w	r3, r3, #31
 8004ba0:	2202      	movs	r2, #2
 8004ba2:	409a      	lsls	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d02e      	beq.n	8004c0a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d029      	beq.n	8004c0a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0320 	and.w	r3, r3, #32
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10b      	bne.n	8004bdc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f022 020a 	bic.w	r2, r2, #10
 8004bd2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004be0:	f003 021f 	and.w	r2, r3, #31
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be8:	2102      	movs	r1, #2
 8004bea:	fa01 f202 	lsl.w	r2, r1, r2
 8004bee:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d038      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004c08:	e033      	b.n	8004c72 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c0e:	f003 031f 	and.w	r3, r3, #31
 8004c12:	2208      	movs	r2, #8
 8004c14:	409a      	lsls	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	4013      	ands	r3, r2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d02a      	beq.n	8004c74 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	f003 0308 	and.w	r3, r3, #8
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d025      	beq.n	8004c74 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 020e 	bic.w	r2, r2, #14
 8004c36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c3c:	f003 021f 	and.w	r2, r3, #31
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c44:	2101      	movs	r1, #1
 8004c46:	fa01 f202 	lsl.w	r2, r1, r2
 8004c4a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d004      	beq.n	8004c74 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004c72:	bf00      	nop
 8004c74:	bf00      	nop
}
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
 8004c88:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004c92:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d004      	beq.n	8004ca6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004ca4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004caa:	f003 021f 	and.w	r2, r3, #31
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb2:	2101      	movs	r1, #1
 8004cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8004cb8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	683a      	ldr	r2, [r7, #0]
 8004cc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	2b10      	cmp	r3, #16
 8004cc8:	d108      	bne.n	8004cdc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004cda:	e007      	b.n	8004cec <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	60da      	str	r2, [r3, #12]
}
 8004cec:	bf00      	nop
 8004cee:	3714      	adds	r7, #20
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b087      	sub	sp, #28
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	461a      	mov	r2, r3
 8004d06:	4b16      	ldr	r3, [pc, #88]	@ (8004d60 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d802      	bhi.n	8004d12 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004d0c:	4b15      	ldr	r3, [pc, #84]	@ (8004d64 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004d0e:	617b      	str	r3, [r7, #20]
 8004d10:	e001      	b.n	8004d16 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004d12:	4b15      	ldr	r3, [pc, #84]	@ (8004d68 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004d14:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	3b08      	subs	r3, #8
 8004d22:	4a12      	ldr	r2, [pc, #72]	@ (8004d6c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004d24:	fba2 2303 	umull	r2, r3, r2, r3
 8004d28:	091b      	lsrs	r3, r3, #4
 8004d2a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d30:	089b      	lsrs	r3, r3, #2
 8004d32:	009a      	lsls	r2, r3, #2
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	4413      	add	r3, r2
 8004d38:	461a      	mov	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a0b      	ldr	r2, [pc, #44]	@ (8004d70 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004d42:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f003 031f 	and.w	r3, r3, #31
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	409a      	lsls	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004d52:	bf00      	nop
 8004d54:	371c      	adds	r7, #28
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	40020407 	.word	0x40020407
 8004d64:	40020800 	.word	0x40020800
 8004d68:	40020820 	.word	0x40020820
 8004d6c:	cccccccd 	.word	0xcccccccd
 8004d70:	40020880 	.word	0x40020880

08004d74 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	4b0b      	ldr	r3, [pc, #44]	@ (8004db4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004d88:	4413      	add	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a08      	ldr	r2, [pc, #32]	@ (8004db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004d96:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	f003 031f 	and.w	r3, r3, #31
 8004da0:	2201      	movs	r2, #1
 8004da2:	409a      	lsls	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004da8:	bf00      	nop
 8004daa:	3714      	adds	r7, #20
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr
 8004db4:	1000823f 	.word	0x1000823f
 8004db8:	40020940 	.word	0x40020940

08004dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b087      	sub	sp, #28
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004dca:	e15a      	b.n	8005082 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	2101      	movs	r1, #1
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004dd8:	4013      	ands	r3, r2
 8004dda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	f000 814c 	beq.w	800507c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f003 0303 	and.w	r3, r3, #3
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d005      	beq.n	8004dfc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d130      	bne.n	8004e5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	005b      	lsls	r3, r3, #1
 8004e06:	2203      	movs	r2, #3
 8004e08:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0c:	43db      	mvns	r3, r3
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	4013      	ands	r3, r2
 8004e12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	68da      	ldr	r2, [r3, #12]
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	005b      	lsls	r3, r3, #1
 8004e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e32:	2201      	movs	r2, #1
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3a:	43db      	mvns	r3, r3
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	091b      	lsrs	r3, r3, #4
 8004e48:	f003 0201 	and.w	r2, r3, #1
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f003 0303 	and.w	r3, r3, #3
 8004e66:	2b03      	cmp	r3, #3
 8004e68:	d017      	beq.n	8004e9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	005b      	lsls	r3, r3, #1
 8004e74:	2203      	movs	r2, #3
 8004e76:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7a:	43db      	mvns	r3, r3
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	4013      	ands	r3, r2
 8004e80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	689a      	ldr	r2, [r3, #8]
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f003 0303 	and.w	r3, r3, #3
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d123      	bne.n	8004eee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	08da      	lsrs	r2, r3, #3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	3208      	adds	r2, #8
 8004eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	f003 0307 	and.w	r3, r3, #7
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	220f      	movs	r2, #15
 8004ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec2:	43db      	mvns	r3, r3
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	691a      	ldr	r2, [r3, #16]
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f003 0307 	and.w	r3, r3, #7
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	08da      	lsrs	r2, r3, #3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	3208      	adds	r2, #8
 8004ee8:	6939      	ldr	r1, [r7, #16]
 8004eea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	005b      	lsls	r3, r3, #1
 8004ef8:	2203      	movs	r2, #3
 8004efa:	fa02 f303 	lsl.w	r3, r2, r3
 8004efe:	43db      	mvns	r3, r3
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	4013      	ands	r3, r2
 8004f04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f003 0203 	and.w	r2, r3, #3
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	005b      	lsls	r3, r3, #1
 8004f12:	fa02 f303 	lsl.w	r3, r2, r3
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f000 80a6 	beq.w	800507c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f30:	4b5b      	ldr	r3, [pc, #364]	@ (80050a0 <HAL_GPIO_Init+0x2e4>)
 8004f32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f34:	4a5a      	ldr	r2, [pc, #360]	@ (80050a0 <HAL_GPIO_Init+0x2e4>)
 8004f36:	f043 0301 	orr.w	r3, r3, #1
 8004f3a:	6613      	str	r3, [r2, #96]	@ 0x60
 8004f3c:	4b58      	ldr	r3, [pc, #352]	@ (80050a0 <HAL_GPIO_Init+0x2e4>)
 8004f3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f40:	f003 0301 	and.w	r3, r3, #1
 8004f44:	60bb      	str	r3, [r7, #8]
 8004f46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f48:	4a56      	ldr	r2, [pc, #344]	@ (80050a4 <HAL_GPIO_Init+0x2e8>)
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	089b      	lsrs	r3, r3, #2
 8004f4e:	3302      	adds	r3, #2
 8004f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f003 0303 	and.w	r3, r3, #3
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	220f      	movs	r2, #15
 8004f60:	fa02 f303 	lsl.w	r3, r2, r3
 8004f64:	43db      	mvns	r3, r3
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	4013      	ands	r3, r2
 8004f6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004f72:	d01f      	beq.n	8004fb4 <HAL_GPIO_Init+0x1f8>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a4c      	ldr	r2, [pc, #304]	@ (80050a8 <HAL_GPIO_Init+0x2ec>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d019      	beq.n	8004fb0 <HAL_GPIO_Init+0x1f4>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a4b      	ldr	r2, [pc, #300]	@ (80050ac <HAL_GPIO_Init+0x2f0>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d013      	beq.n	8004fac <HAL_GPIO_Init+0x1f0>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a4a      	ldr	r2, [pc, #296]	@ (80050b0 <HAL_GPIO_Init+0x2f4>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d00d      	beq.n	8004fa8 <HAL_GPIO_Init+0x1ec>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a49      	ldr	r2, [pc, #292]	@ (80050b4 <HAL_GPIO_Init+0x2f8>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d007      	beq.n	8004fa4 <HAL_GPIO_Init+0x1e8>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a48      	ldr	r2, [pc, #288]	@ (80050b8 <HAL_GPIO_Init+0x2fc>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d101      	bne.n	8004fa0 <HAL_GPIO_Init+0x1e4>
 8004f9c:	2305      	movs	r3, #5
 8004f9e:	e00a      	b.n	8004fb6 <HAL_GPIO_Init+0x1fa>
 8004fa0:	2306      	movs	r3, #6
 8004fa2:	e008      	b.n	8004fb6 <HAL_GPIO_Init+0x1fa>
 8004fa4:	2304      	movs	r3, #4
 8004fa6:	e006      	b.n	8004fb6 <HAL_GPIO_Init+0x1fa>
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e004      	b.n	8004fb6 <HAL_GPIO_Init+0x1fa>
 8004fac:	2302      	movs	r3, #2
 8004fae:	e002      	b.n	8004fb6 <HAL_GPIO_Init+0x1fa>
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e000      	b.n	8004fb6 <HAL_GPIO_Init+0x1fa>
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	f002 0203 	and.w	r2, r2, #3
 8004fbc:	0092      	lsls	r2, r2, #2
 8004fbe:	4093      	lsls	r3, r2
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004fc6:	4937      	ldr	r1, [pc, #220]	@ (80050a4 <HAL_GPIO_Init+0x2e8>)
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	089b      	lsrs	r3, r3, #2
 8004fcc:	3302      	adds	r3, #2
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004fd4:	4b39      	ldr	r3, [pc, #228]	@ (80050bc <HAL_GPIO_Init+0x300>)
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	43db      	mvns	r3, r3
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d003      	beq.n	8004ff8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004ff8:	4a30      	ldr	r2, [pc, #192]	@ (80050bc <HAL_GPIO_Init+0x300>)
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004ffe:	4b2f      	ldr	r3, [pc, #188]	@ (80050bc <HAL_GPIO_Init+0x300>)
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	43db      	mvns	r3, r3
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	4013      	ands	r3, r2
 800500c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d003      	beq.n	8005022 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	4313      	orrs	r3, r2
 8005020:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005022:	4a26      	ldr	r2, [pc, #152]	@ (80050bc <HAL_GPIO_Init+0x300>)
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005028:	4b24      	ldr	r3, [pc, #144]	@ (80050bc <HAL_GPIO_Init+0x300>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	43db      	mvns	r3, r3
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	4013      	ands	r3, r2
 8005036:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d003      	beq.n	800504c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	4313      	orrs	r3, r2
 800504a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800504c:	4a1b      	ldr	r2, [pc, #108]	@ (80050bc <HAL_GPIO_Init+0x300>)
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005052:	4b1a      	ldr	r3, [pc, #104]	@ (80050bc <HAL_GPIO_Init+0x300>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	43db      	mvns	r3, r3
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	4013      	ands	r3, r2
 8005060:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	4313      	orrs	r3, r2
 8005074:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005076:	4a11      	ldr	r2, [pc, #68]	@ (80050bc <HAL_GPIO_Init+0x300>)
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	3301      	adds	r3, #1
 8005080:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	fa22 f303 	lsr.w	r3, r2, r3
 800508c:	2b00      	cmp	r3, #0
 800508e:	f47f ae9d 	bne.w	8004dcc <HAL_GPIO_Init+0x10>
  }
}
 8005092:	bf00      	nop
 8005094:	bf00      	nop
 8005096:	371c      	adds	r7, #28
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr
 80050a0:	40021000 	.word	0x40021000
 80050a4:	40010000 	.word	0x40010000
 80050a8:	48000400 	.word	0x48000400
 80050ac:	48000800 	.word	0x48000800
 80050b0:	48000c00 	.word	0x48000c00
 80050b4:	48001000 	.word	0x48001000
 80050b8:	48001400 	.word	0x48001400
 80050bc:	40010400 	.word	0x40010400

080050c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	460b      	mov	r3, r1
 80050ca:	807b      	strh	r3, [r7, #2]
 80050cc:	4613      	mov	r3, r2
 80050ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80050d0:	787b      	ldrb	r3, [r7, #1]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d003      	beq.n	80050de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80050d6:	887a      	ldrh	r2, [r7, #2]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80050dc:	e002      	b.n	80050e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80050de:	887a      	ldrh	r2, [r7, #2]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80050e4:	bf00      	nop
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	4603      	mov	r3, r0
 80050f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80050fa:	4b08      	ldr	r3, [pc, #32]	@ (800511c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050fc:	695a      	ldr	r2, [r3, #20]
 80050fe:	88fb      	ldrh	r3, [r7, #6]
 8005100:	4013      	ands	r3, r2
 8005102:	2b00      	cmp	r3, #0
 8005104:	d006      	beq.n	8005114 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005106:	4a05      	ldr	r2, [pc, #20]	@ (800511c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005108:	88fb      	ldrh	r3, [r7, #6]
 800510a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800510c:	88fb      	ldrh	r3, [r7, #6]
 800510e:	4618      	mov	r0, r3
 8005110:	f000 f806 	bl	8005120 <HAL_GPIO_EXTI_Callback>
  }
}
 8005114:	bf00      	nop
 8005116:	3708      	adds	r7, #8
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	40010400 	.word	0x40010400

08005120 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	4603      	mov	r3, r0
 8005128:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800512a:	bf00      	nop
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
	...

08005138 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d141      	bne.n	80051ca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005146:	4b4b      	ldr	r3, [pc, #300]	@ (8005274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800514e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005152:	d131      	bne.n	80051b8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005154:	4b47      	ldr	r3, [pc, #284]	@ (8005274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005156:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800515a:	4a46      	ldr	r2, [pc, #280]	@ (8005274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800515c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005160:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005164:	4b43      	ldr	r3, [pc, #268]	@ (8005274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800516c:	4a41      	ldr	r2, [pc, #260]	@ (8005274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800516e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005172:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005174:	4b40      	ldr	r3, [pc, #256]	@ (8005278 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2232      	movs	r2, #50	@ 0x32
 800517a:	fb02 f303 	mul.w	r3, r2, r3
 800517e:	4a3f      	ldr	r2, [pc, #252]	@ (800527c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005180:	fba2 2303 	umull	r2, r3, r2, r3
 8005184:	0c9b      	lsrs	r3, r3, #18
 8005186:	3301      	adds	r3, #1
 8005188:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800518a:	e002      	b.n	8005192 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	3b01      	subs	r3, #1
 8005190:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005192:	4b38      	ldr	r3, [pc, #224]	@ (8005274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800519a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800519e:	d102      	bne.n	80051a6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1f2      	bne.n	800518c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80051a6:	4b33      	ldr	r3, [pc, #204]	@ (8005274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051b2:	d158      	bne.n	8005266 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e057      	b.n	8005268 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80051b8:	4b2e      	ldr	r3, [pc, #184]	@ (8005274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051be:	4a2d      	ldr	r2, [pc, #180]	@ (8005274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80051c8:	e04d      	b.n	8005266 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051d0:	d141      	bne.n	8005256 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80051d2:	4b28      	ldr	r3, [pc, #160]	@ (8005274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80051da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051de:	d131      	bne.n	8005244 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80051e0:	4b24      	ldr	r3, [pc, #144]	@ (8005274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051e6:	4a23      	ldr	r2, [pc, #140]	@ (8005274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80051f0:	4b20      	ldr	r3, [pc, #128]	@ (8005274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80051f8:	4a1e      	ldr	r2, [pc, #120]	@ (8005274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80051fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005200:	4b1d      	ldr	r3, [pc, #116]	@ (8005278 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2232      	movs	r2, #50	@ 0x32
 8005206:	fb02 f303 	mul.w	r3, r2, r3
 800520a:	4a1c      	ldr	r2, [pc, #112]	@ (800527c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800520c:	fba2 2303 	umull	r2, r3, r2, r3
 8005210:	0c9b      	lsrs	r3, r3, #18
 8005212:	3301      	adds	r3, #1
 8005214:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005216:	e002      	b.n	800521e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	3b01      	subs	r3, #1
 800521c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800521e:	4b15      	ldr	r3, [pc, #84]	@ (8005274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005226:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800522a:	d102      	bne.n	8005232 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1f2      	bne.n	8005218 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005232:	4b10      	ldr	r3, [pc, #64]	@ (8005274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800523a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800523e:	d112      	bne.n	8005266 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e011      	b.n	8005268 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005244:	4b0b      	ldr	r3, [pc, #44]	@ (8005274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005246:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800524a:	4a0a      	ldr	r2, [pc, #40]	@ (8005274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800524c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005250:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005254:	e007      	b.n	8005266 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005256:	4b07      	ldr	r3, [pc, #28]	@ (8005274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800525e:	4a05      	ldr	r2, [pc, #20]	@ (8005274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005260:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005264:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	3714      	adds	r7, #20
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr
 8005274:	40007000 	.word	0x40007000
 8005278:	20000000 	.word	0x20000000
 800527c:	431bde83 	.word	0x431bde83

08005280 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005280:	b480      	push	{r7}
 8005282:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005284:	4b05      	ldr	r3, [pc, #20]	@ (800529c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	4a04      	ldr	r2, [pc, #16]	@ (800529c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800528a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800528e:	6093      	str	r3, [r2, #8]
}
 8005290:	bf00      	nop
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	40007000 	.word	0x40007000

080052a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b088      	sub	sp, #32
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e306      	b.n	80058c0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d075      	beq.n	80053aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052be:	4b97      	ldr	r3, [pc, #604]	@ (800551c <HAL_RCC_OscConfig+0x27c>)
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f003 030c 	and.w	r3, r3, #12
 80052c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052c8:	4b94      	ldr	r3, [pc, #592]	@ (800551c <HAL_RCC_OscConfig+0x27c>)
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	f003 0303 	and.w	r3, r3, #3
 80052d0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	2b0c      	cmp	r3, #12
 80052d6:	d102      	bne.n	80052de <HAL_RCC_OscConfig+0x3e>
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	2b03      	cmp	r3, #3
 80052dc:	d002      	beq.n	80052e4 <HAL_RCC_OscConfig+0x44>
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d10b      	bne.n	80052fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052e4:	4b8d      	ldr	r3, [pc, #564]	@ (800551c <HAL_RCC_OscConfig+0x27c>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d05b      	beq.n	80053a8 <HAL_RCC_OscConfig+0x108>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d157      	bne.n	80053a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e2e1      	b.n	80058c0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005304:	d106      	bne.n	8005314 <HAL_RCC_OscConfig+0x74>
 8005306:	4b85      	ldr	r3, [pc, #532]	@ (800551c <HAL_RCC_OscConfig+0x27c>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a84      	ldr	r2, [pc, #528]	@ (800551c <HAL_RCC_OscConfig+0x27c>)
 800530c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005310:	6013      	str	r3, [r2, #0]
 8005312:	e01d      	b.n	8005350 <HAL_RCC_OscConfig+0xb0>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800531c:	d10c      	bne.n	8005338 <HAL_RCC_OscConfig+0x98>
 800531e:	4b7f      	ldr	r3, [pc, #508]	@ (800551c <HAL_RCC_OscConfig+0x27c>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a7e      	ldr	r2, [pc, #504]	@ (800551c <HAL_RCC_OscConfig+0x27c>)
 8005324:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005328:	6013      	str	r3, [r2, #0]
 800532a:	4b7c      	ldr	r3, [pc, #496]	@ (800551c <HAL_RCC_OscConfig+0x27c>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a7b      	ldr	r2, [pc, #492]	@ (800551c <HAL_RCC_OscConfig+0x27c>)
 8005330:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005334:	6013      	str	r3, [r2, #0]
 8005336:	e00b      	b.n	8005350 <HAL_RCC_OscConfig+0xb0>
 8005338:	4b78      	ldr	r3, [pc, #480]	@ (800551c <HAL_RCC_OscConfig+0x27c>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a77      	ldr	r2, [pc, #476]	@ (800551c <HAL_RCC_OscConfig+0x27c>)
 800533e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005342:	6013      	str	r3, [r2, #0]
 8005344:	4b75      	ldr	r3, [pc, #468]	@ (800551c <HAL_RCC_OscConfig+0x27c>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a74      	ldr	r2, [pc, #464]	@ (800551c <HAL_RCC_OscConfig+0x27c>)
 800534a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800534e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d013      	beq.n	8005380 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005358:	f7fd fa10 	bl	800277c <HAL_GetTick>
 800535c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800535e:	e008      	b.n	8005372 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005360:	f7fd fa0c 	bl	800277c <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	2b64      	cmp	r3, #100	@ 0x64
 800536c:	d901      	bls.n	8005372 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e2a6      	b.n	80058c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005372:	4b6a      	ldr	r3, [pc, #424]	@ (800551c <HAL_RCC_OscConfig+0x27c>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d0f0      	beq.n	8005360 <HAL_RCC_OscConfig+0xc0>
 800537e:	e014      	b.n	80053aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005380:	f7fd f9fc 	bl	800277c <HAL_GetTick>
 8005384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005386:	e008      	b.n	800539a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005388:	f7fd f9f8 	bl	800277c <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	2b64      	cmp	r3, #100	@ 0x64
 8005394:	d901      	bls.n	800539a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e292      	b.n	80058c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800539a:	4b60      	ldr	r3, [pc, #384]	@ (800551c <HAL_RCC_OscConfig+0x27c>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1f0      	bne.n	8005388 <HAL_RCC_OscConfig+0xe8>
 80053a6:	e000      	b.n	80053aa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d075      	beq.n	80054a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053b6:	4b59      	ldr	r3, [pc, #356]	@ (800551c <HAL_RCC_OscConfig+0x27c>)
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f003 030c 	and.w	r3, r3, #12
 80053be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053c0:	4b56      	ldr	r3, [pc, #344]	@ (800551c <HAL_RCC_OscConfig+0x27c>)
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	f003 0303 	and.w	r3, r3, #3
 80053c8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	2b0c      	cmp	r3, #12
 80053ce:	d102      	bne.n	80053d6 <HAL_RCC_OscConfig+0x136>
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d002      	beq.n	80053dc <HAL_RCC_OscConfig+0x13c>
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	2b04      	cmp	r3, #4
 80053da:	d11f      	bne.n	800541c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053dc:	4b4f      	ldr	r3, [pc, #316]	@ (800551c <HAL_RCC_OscConfig+0x27c>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d005      	beq.n	80053f4 <HAL_RCC_OscConfig+0x154>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d101      	bne.n	80053f4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e265      	b.n	80058c0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053f4:	4b49      	ldr	r3, [pc, #292]	@ (800551c <HAL_RCC_OscConfig+0x27c>)
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	061b      	lsls	r3, r3, #24
 8005402:	4946      	ldr	r1, [pc, #280]	@ (800551c <HAL_RCC_OscConfig+0x27c>)
 8005404:	4313      	orrs	r3, r2
 8005406:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005408:	4b45      	ldr	r3, [pc, #276]	@ (8005520 <HAL_RCC_OscConfig+0x280>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4618      	mov	r0, r3
 800540e:	f7fc f9cb 	bl	80017a8 <HAL_InitTick>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d043      	beq.n	80054a0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e251      	b.n	80058c0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d023      	beq.n	800546c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005424:	4b3d      	ldr	r3, [pc, #244]	@ (800551c <HAL_RCC_OscConfig+0x27c>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a3c      	ldr	r2, [pc, #240]	@ (800551c <HAL_RCC_OscConfig+0x27c>)
 800542a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800542e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005430:	f7fd f9a4 	bl	800277c <HAL_GetTick>
 8005434:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005436:	e008      	b.n	800544a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005438:	f7fd f9a0 	bl	800277c <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	2b02      	cmp	r3, #2
 8005444:	d901      	bls.n	800544a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e23a      	b.n	80058c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800544a:	4b34      	ldr	r3, [pc, #208]	@ (800551c <HAL_RCC_OscConfig+0x27c>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005452:	2b00      	cmp	r3, #0
 8005454:	d0f0      	beq.n	8005438 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005456:	4b31      	ldr	r3, [pc, #196]	@ (800551c <HAL_RCC_OscConfig+0x27c>)
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	061b      	lsls	r3, r3, #24
 8005464:	492d      	ldr	r1, [pc, #180]	@ (800551c <HAL_RCC_OscConfig+0x27c>)
 8005466:	4313      	orrs	r3, r2
 8005468:	604b      	str	r3, [r1, #4]
 800546a:	e01a      	b.n	80054a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800546c:	4b2b      	ldr	r3, [pc, #172]	@ (800551c <HAL_RCC_OscConfig+0x27c>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a2a      	ldr	r2, [pc, #168]	@ (800551c <HAL_RCC_OscConfig+0x27c>)
 8005472:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005476:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005478:	f7fd f980 	bl	800277c <HAL_GetTick>
 800547c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800547e:	e008      	b.n	8005492 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005480:	f7fd f97c 	bl	800277c <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	2b02      	cmp	r3, #2
 800548c:	d901      	bls.n	8005492 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e216      	b.n	80058c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005492:	4b22      	ldr	r3, [pc, #136]	@ (800551c <HAL_RCC_OscConfig+0x27c>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1f0      	bne.n	8005480 <HAL_RCC_OscConfig+0x1e0>
 800549e:	e000      	b.n	80054a2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0308 	and.w	r3, r3, #8
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d041      	beq.n	8005532 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d01c      	beq.n	80054f0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054b6:	4b19      	ldr	r3, [pc, #100]	@ (800551c <HAL_RCC_OscConfig+0x27c>)
 80054b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054bc:	4a17      	ldr	r2, [pc, #92]	@ (800551c <HAL_RCC_OscConfig+0x27c>)
 80054be:	f043 0301 	orr.w	r3, r3, #1
 80054c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054c6:	f7fd f959 	bl	800277c <HAL_GetTick>
 80054ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054cc:	e008      	b.n	80054e0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054ce:	f7fd f955 	bl	800277c <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d901      	bls.n	80054e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e1ef      	b.n	80058c0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054e0:	4b0e      	ldr	r3, [pc, #56]	@ (800551c <HAL_RCC_OscConfig+0x27c>)
 80054e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054e6:	f003 0302 	and.w	r3, r3, #2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d0ef      	beq.n	80054ce <HAL_RCC_OscConfig+0x22e>
 80054ee:	e020      	b.n	8005532 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054f0:	4b0a      	ldr	r3, [pc, #40]	@ (800551c <HAL_RCC_OscConfig+0x27c>)
 80054f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054f6:	4a09      	ldr	r2, [pc, #36]	@ (800551c <HAL_RCC_OscConfig+0x27c>)
 80054f8:	f023 0301 	bic.w	r3, r3, #1
 80054fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005500:	f7fd f93c 	bl	800277c <HAL_GetTick>
 8005504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005506:	e00d      	b.n	8005524 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005508:	f7fd f938 	bl	800277c <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	2b02      	cmp	r3, #2
 8005514:	d906      	bls.n	8005524 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e1d2      	b.n	80058c0 <HAL_RCC_OscConfig+0x620>
 800551a:	bf00      	nop
 800551c:	40021000 	.word	0x40021000
 8005520:	200000c0 	.word	0x200000c0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005524:	4b8c      	ldr	r3, [pc, #560]	@ (8005758 <HAL_RCC_OscConfig+0x4b8>)
 8005526:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800552a:	f003 0302 	and.w	r3, r3, #2
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1ea      	bne.n	8005508 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0304 	and.w	r3, r3, #4
 800553a:	2b00      	cmp	r3, #0
 800553c:	f000 80a6 	beq.w	800568c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005540:	2300      	movs	r3, #0
 8005542:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005544:	4b84      	ldr	r3, [pc, #528]	@ (8005758 <HAL_RCC_OscConfig+0x4b8>)
 8005546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005548:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800554c:	2b00      	cmp	r3, #0
 800554e:	d101      	bne.n	8005554 <HAL_RCC_OscConfig+0x2b4>
 8005550:	2301      	movs	r3, #1
 8005552:	e000      	b.n	8005556 <HAL_RCC_OscConfig+0x2b6>
 8005554:	2300      	movs	r3, #0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00d      	beq.n	8005576 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800555a:	4b7f      	ldr	r3, [pc, #508]	@ (8005758 <HAL_RCC_OscConfig+0x4b8>)
 800555c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800555e:	4a7e      	ldr	r2, [pc, #504]	@ (8005758 <HAL_RCC_OscConfig+0x4b8>)
 8005560:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005564:	6593      	str	r3, [r2, #88]	@ 0x58
 8005566:	4b7c      	ldr	r3, [pc, #496]	@ (8005758 <HAL_RCC_OscConfig+0x4b8>)
 8005568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800556a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800556e:	60fb      	str	r3, [r7, #12]
 8005570:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005572:	2301      	movs	r3, #1
 8005574:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005576:	4b79      	ldr	r3, [pc, #484]	@ (800575c <HAL_RCC_OscConfig+0x4bc>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800557e:	2b00      	cmp	r3, #0
 8005580:	d118      	bne.n	80055b4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005582:	4b76      	ldr	r3, [pc, #472]	@ (800575c <HAL_RCC_OscConfig+0x4bc>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a75      	ldr	r2, [pc, #468]	@ (800575c <HAL_RCC_OscConfig+0x4bc>)
 8005588:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800558c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800558e:	f7fd f8f5 	bl	800277c <HAL_GetTick>
 8005592:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005594:	e008      	b.n	80055a8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005596:	f7fd f8f1 	bl	800277c <HAL_GetTick>
 800559a:	4602      	mov	r2, r0
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d901      	bls.n	80055a8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e18b      	b.n	80058c0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055a8:	4b6c      	ldr	r3, [pc, #432]	@ (800575c <HAL_RCC_OscConfig+0x4bc>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d0f0      	beq.n	8005596 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d108      	bne.n	80055ce <HAL_RCC_OscConfig+0x32e>
 80055bc:	4b66      	ldr	r3, [pc, #408]	@ (8005758 <HAL_RCC_OscConfig+0x4b8>)
 80055be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055c2:	4a65      	ldr	r2, [pc, #404]	@ (8005758 <HAL_RCC_OscConfig+0x4b8>)
 80055c4:	f043 0301 	orr.w	r3, r3, #1
 80055c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055cc:	e024      	b.n	8005618 <HAL_RCC_OscConfig+0x378>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	2b05      	cmp	r3, #5
 80055d4:	d110      	bne.n	80055f8 <HAL_RCC_OscConfig+0x358>
 80055d6:	4b60      	ldr	r3, [pc, #384]	@ (8005758 <HAL_RCC_OscConfig+0x4b8>)
 80055d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055dc:	4a5e      	ldr	r2, [pc, #376]	@ (8005758 <HAL_RCC_OscConfig+0x4b8>)
 80055de:	f043 0304 	orr.w	r3, r3, #4
 80055e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055e6:	4b5c      	ldr	r3, [pc, #368]	@ (8005758 <HAL_RCC_OscConfig+0x4b8>)
 80055e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ec:	4a5a      	ldr	r2, [pc, #360]	@ (8005758 <HAL_RCC_OscConfig+0x4b8>)
 80055ee:	f043 0301 	orr.w	r3, r3, #1
 80055f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055f6:	e00f      	b.n	8005618 <HAL_RCC_OscConfig+0x378>
 80055f8:	4b57      	ldr	r3, [pc, #348]	@ (8005758 <HAL_RCC_OscConfig+0x4b8>)
 80055fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055fe:	4a56      	ldr	r2, [pc, #344]	@ (8005758 <HAL_RCC_OscConfig+0x4b8>)
 8005600:	f023 0301 	bic.w	r3, r3, #1
 8005604:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005608:	4b53      	ldr	r3, [pc, #332]	@ (8005758 <HAL_RCC_OscConfig+0x4b8>)
 800560a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800560e:	4a52      	ldr	r2, [pc, #328]	@ (8005758 <HAL_RCC_OscConfig+0x4b8>)
 8005610:	f023 0304 	bic.w	r3, r3, #4
 8005614:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d016      	beq.n	800564e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005620:	f7fd f8ac 	bl	800277c <HAL_GetTick>
 8005624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005626:	e00a      	b.n	800563e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005628:	f7fd f8a8 	bl	800277c <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005636:	4293      	cmp	r3, r2
 8005638:	d901      	bls.n	800563e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e140      	b.n	80058c0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800563e:	4b46      	ldr	r3, [pc, #280]	@ (8005758 <HAL_RCC_OscConfig+0x4b8>)
 8005640:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005644:	f003 0302 	and.w	r3, r3, #2
 8005648:	2b00      	cmp	r3, #0
 800564a:	d0ed      	beq.n	8005628 <HAL_RCC_OscConfig+0x388>
 800564c:	e015      	b.n	800567a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800564e:	f7fd f895 	bl	800277c <HAL_GetTick>
 8005652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005654:	e00a      	b.n	800566c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005656:	f7fd f891 	bl	800277c <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005664:	4293      	cmp	r3, r2
 8005666:	d901      	bls.n	800566c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e129      	b.n	80058c0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800566c:	4b3a      	ldr	r3, [pc, #232]	@ (8005758 <HAL_RCC_OscConfig+0x4b8>)
 800566e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1ed      	bne.n	8005656 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800567a:	7ffb      	ldrb	r3, [r7, #31]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d105      	bne.n	800568c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005680:	4b35      	ldr	r3, [pc, #212]	@ (8005758 <HAL_RCC_OscConfig+0x4b8>)
 8005682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005684:	4a34      	ldr	r2, [pc, #208]	@ (8005758 <HAL_RCC_OscConfig+0x4b8>)
 8005686:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800568a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0320 	and.w	r3, r3, #32
 8005694:	2b00      	cmp	r3, #0
 8005696:	d03c      	beq.n	8005712 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	699b      	ldr	r3, [r3, #24]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d01c      	beq.n	80056da <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80056a0:	4b2d      	ldr	r3, [pc, #180]	@ (8005758 <HAL_RCC_OscConfig+0x4b8>)
 80056a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056a6:	4a2c      	ldr	r2, [pc, #176]	@ (8005758 <HAL_RCC_OscConfig+0x4b8>)
 80056a8:	f043 0301 	orr.w	r3, r3, #1
 80056ac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056b0:	f7fd f864 	bl	800277c <HAL_GetTick>
 80056b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80056b6:	e008      	b.n	80056ca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056b8:	f7fd f860 	bl	800277c <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e0fa      	b.n	80058c0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80056ca:	4b23      	ldr	r3, [pc, #140]	@ (8005758 <HAL_RCC_OscConfig+0x4b8>)
 80056cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056d0:	f003 0302 	and.w	r3, r3, #2
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d0ef      	beq.n	80056b8 <HAL_RCC_OscConfig+0x418>
 80056d8:	e01b      	b.n	8005712 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80056da:	4b1f      	ldr	r3, [pc, #124]	@ (8005758 <HAL_RCC_OscConfig+0x4b8>)
 80056dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056e0:	4a1d      	ldr	r2, [pc, #116]	@ (8005758 <HAL_RCC_OscConfig+0x4b8>)
 80056e2:	f023 0301 	bic.w	r3, r3, #1
 80056e6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ea:	f7fd f847 	bl	800277c <HAL_GetTick>
 80056ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80056f0:	e008      	b.n	8005704 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056f2:	f7fd f843 	bl	800277c <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d901      	bls.n	8005704 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e0dd      	b.n	80058c0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005704:	4b14      	ldr	r3, [pc, #80]	@ (8005758 <HAL_RCC_OscConfig+0x4b8>)
 8005706:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800570a:	f003 0302 	and.w	r3, r3, #2
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1ef      	bne.n	80056f2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	2b00      	cmp	r3, #0
 8005718:	f000 80d1 	beq.w	80058be <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800571c:	4b0e      	ldr	r3, [pc, #56]	@ (8005758 <HAL_RCC_OscConfig+0x4b8>)
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f003 030c 	and.w	r3, r3, #12
 8005724:	2b0c      	cmp	r3, #12
 8005726:	f000 808b 	beq.w	8005840 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	69db      	ldr	r3, [r3, #28]
 800572e:	2b02      	cmp	r3, #2
 8005730:	d15e      	bne.n	80057f0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005732:	4b09      	ldr	r3, [pc, #36]	@ (8005758 <HAL_RCC_OscConfig+0x4b8>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a08      	ldr	r2, [pc, #32]	@ (8005758 <HAL_RCC_OscConfig+0x4b8>)
 8005738:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800573c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800573e:	f7fd f81d 	bl	800277c <HAL_GetTick>
 8005742:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005744:	e00c      	b.n	8005760 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005746:	f7fd f819 	bl	800277c <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	2b02      	cmp	r3, #2
 8005752:	d905      	bls.n	8005760 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e0b3      	b.n	80058c0 <HAL_RCC_OscConfig+0x620>
 8005758:	40021000 	.word	0x40021000
 800575c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005760:	4b59      	ldr	r3, [pc, #356]	@ (80058c8 <HAL_RCC_OscConfig+0x628>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1ec      	bne.n	8005746 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800576c:	4b56      	ldr	r3, [pc, #344]	@ (80058c8 <HAL_RCC_OscConfig+0x628>)
 800576e:	68da      	ldr	r2, [r3, #12]
 8005770:	4b56      	ldr	r3, [pc, #344]	@ (80058cc <HAL_RCC_OscConfig+0x62c>)
 8005772:	4013      	ands	r3, r2
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	6a11      	ldr	r1, [r2, #32]
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800577c:	3a01      	subs	r2, #1
 800577e:	0112      	lsls	r2, r2, #4
 8005780:	4311      	orrs	r1, r2
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005786:	0212      	lsls	r2, r2, #8
 8005788:	4311      	orrs	r1, r2
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800578e:	0852      	lsrs	r2, r2, #1
 8005790:	3a01      	subs	r2, #1
 8005792:	0552      	lsls	r2, r2, #21
 8005794:	4311      	orrs	r1, r2
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800579a:	0852      	lsrs	r2, r2, #1
 800579c:	3a01      	subs	r2, #1
 800579e:	0652      	lsls	r2, r2, #25
 80057a0:	4311      	orrs	r1, r2
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80057a6:	06d2      	lsls	r2, r2, #27
 80057a8:	430a      	orrs	r2, r1
 80057aa:	4947      	ldr	r1, [pc, #284]	@ (80058c8 <HAL_RCC_OscConfig+0x628>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057b0:	4b45      	ldr	r3, [pc, #276]	@ (80058c8 <HAL_RCC_OscConfig+0x628>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a44      	ldr	r2, [pc, #272]	@ (80058c8 <HAL_RCC_OscConfig+0x628>)
 80057b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057ba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80057bc:	4b42      	ldr	r3, [pc, #264]	@ (80058c8 <HAL_RCC_OscConfig+0x628>)
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	4a41      	ldr	r2, [pc, #260]	@ (80058c8 <HAL_RCC_OscConfig+0x628>)
 80057c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c8:	f7fc ffd8 	bl	800277c <HAL_GetTick>
 80057cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057ce:	e008      	b.n	80057e2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057d0:	f7fc ffd4 	bl	800277c <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e06e      	b.n	80058c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057e2:	4b39      	ldr	r3, [pc, #228]	@ (80058c8 <HAL_RCC_OscConfig+0x628>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d0f0      	beq.n	80057d0 <HAL_RCC_OscConfig+0x530>
 80057ee:	e066      	b.n	80058be <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057f0:	4b35      	ldr	r3, [pc, #212]	@ (80058c8 <HAL_RCC_OscConfig+0x628>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a34      	ldr	r2, [pc, #208]	@ (80058c8 <HAL_RCC_OscConfig+0x628>)
 80057f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057fa:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80057fc:	4b32      	ldr	r3, [pc, #200]	@ (80058c8 <HAL_RCC_OscConfig+0x628>)
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	4a31      	ldr	r2, [pc, #196]	@ (80058c8 <HAL_RCC_OscConfig+0x628>)
 8005802:	f023 0303 	bic.w	r3, r3, #3
 8005806:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005808:	4b2f      	ldr	r3, [pc, #188]	@ (80058c8 <HAL_RCC_OscConfig+0x628>)
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	4a2e      	ldr	r2, [pc, #184]	@ (80058c8 <HAL_RCC_OscConfig+0x628>)
 800580e:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8005812:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005816:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005818:	f7fc ffb0 	bl	800277c <HAL_GetTick>
 800581c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800581e:	e008      	b.n	8005832 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005820:	f7fc ffac 	bl	800277c <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	2b02      	cmp	r3, #2
 800582c:	d901      	bls.n	8005832 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e046      	b.n	80058c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005832:	4b25      	ldr	r3, [pc, #148]	@ (80058c8 <HAL_RCC_OscConfig+0x628>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1f0      	bne.n	8005820 <HAL_RCC_OscConfig+0x580>
 800583e:	e03e      	b.n	80058be <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	69db      	ldr	r3, [r3, #28]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d101      	bne.n	800584c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e039      	b.n	80058c0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800584c:	4b1e      	ldr	r3, [pc, #120]	@ (80058c8 <HAL_RCC_OscConfig+0x628>)
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f003 0203 	and.w	r2, r3, #3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a1b      	ldr	r3, [r3, #32]
 800585c:	429a      	cmp	r2, r3
 800585e:	d12c      	bne.n	80058ba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800586a:	3b01      	subs	r3, #1
 800586c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800586e:	429a      	cmp	r2, r3
 8005870:	d123      	bne.n	80058ba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800587c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800587e:	429a      	cmp	r2, r3
 8005880:	d11b      	bne.n	80058ba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800588c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800588e:	429a      	cmp	r2, r3
 8005890:	d113      	bne.n	80058ba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800589c:	085b      	lsrs	r3, r3, #1
 800589e:	3b01      	subs	r3, #1
 80058a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d109      	bne.n	80058ba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058b0:	085b      	lsrs	r3, r3, #1
 80058b2:	3b01      	subs	r3, #1
 80058b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d001      	beq.n	80058be <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e000      	b.n	80058c0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3720      	adds	r7, #32
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	40021000 	.word	0x40021000
 80058cc:	019f800c 	.word	0x019f800c

080058d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b086      	sub	sp, #24
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80058da:	2300      	movs	r3, #0
 80058dc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d101      	bne.n	80058e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e11e      	b.n	8005b26 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058e8:	4b91      	ldr	r3, [pc, #580]	@ (8005b30 <HAL_RCC_ClockConfig+0x260>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 030f 	and.w	r3, r3, #15
 80058f0:	683a      	ldr	r2, [r7, #0]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d910      	bls.n	8005918 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058f6:	4b8e      	ldr	r3, [pc, #568]	@ (8005b30 <HAL_RCC_ClockConfig+0x260>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f023 020f 	bic.w	r2, r3, #15
 80058fe:	498c      	ldr	r1, [pc, #560]	@ (8005b30 <HAL_RCC_ClockConfig+0x260>)
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	4313      	orrs	r3, r2
 8005904:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005906:	4b8a      	ldr	r3, [pc, #552]	@ (8005b30 <HAL_RCC_ClockConfig+0x260>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 030f 	and.w	r3, r3, #15
 800590e:	683a      	ldr	r2, [r7, #0]
 8005910:	429a      	cmp	r2, r3
 8005912:	d001      	beq.n	8005918 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e106      	b.n	8005b26 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0301 	and.w	r3, r3, #1
 8005920:	2b00      	cmp	r3, #0
 8005922:	d073      	beq.n	8005a0c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	2b03      	cmp	r3, #3
 800592a:	d129      	bne.n	8005980 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800592c:	4b81      	ldr	r3, [pc, #516]	@ (8005b34 <HAL_RCC_ClockConfig+0x264>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d101      	bne.n	800593c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e0f4      	b.n	8005b26 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800593c:	f000 f9d0 	bl	8005ce0 <RCC_GetSysClockFreqFromPLLSource>
 8005940:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	4a7c      	ldr	r2, [pc, #496]	@ (8005b38 <HAL_RCC_ClockConfig+0x268>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d93f      	bls.n	80059ca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800594a:	4b7a      	ldr	r3, [pc, #488]	@ (8005b34 <HAL_RCC_ClockConfig+0x264>)
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d009      	beq.n	800596a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800595e:	2b00      	cmp	r3, #0
 8005960:	d033      	beq.n	80059ca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005966:	2b00      	cmp	r3, #0
 8005968:	d12f      	bne.n	80059ca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800596a:	4b72      	ldr	r3, [pc, #456]	@ (8005b34 <HAL_RCC_ClockConfig+0x264>)
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005972:	4a70      	ldr	r2, [pc, #448]	@ (8005b34 <HAL_RCC_ClockConfig+0x264>)
 8005974:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005978:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800597a:	2380      	movs	r3, #128	@ 0x80
 800597c:	617b      	str	r3, [r7, #20]
 800597e:	e024      	b.n	80059ca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	2b02      	cmp	r3, #2
 8005986:	d107      	bne.n	8005998 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005988:	4b6a      	ldr	r3, [pc, #424]	@ (8005b34 <HAL_RCC_ClockConfig+0x264>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d109      	bne.n	80059a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e0c6      	b.n	8005b26 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005998:	4b66      	ldr	r3, [pc, #408]	@ (8005b34 <HAL_RCC_ClockConfig+0x264>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d101      	bne.n	80059a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e0be      	b.n	8005b26 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80059a8:	f000 f8ce 	bl	8005b48 <HAL_RCC_GetSysClockFreq>
 80059ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	4a61      	ldr	r2, [pc, #388]	@ (8005b38 <HAL_RCC_ClockConfig+0x268>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d909      	bls.n	80059ca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80059b6:	4b5f      	ldr	r3, [pc, #380]	@ (8005b34 <HAL_RCC_ClockConfig+0x264>)
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80059be:	4a5d      	ldr	r2, [pc, #372]	@ (8005b34 <HAL_RCC_ClockConfig+0x264>)
 80059c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059c4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80059c6:	2380      	movs	r3, #128	@ 0x80
 80059c8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80059ca:	4b5a      	ldr	r3, [pc, #360]	@ (8005b34 <HAL_RCC_ClockConfig+0x264>)
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f023 0203 	bic.w	r2, r3, #3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	4957      	ldr	r1, [pc, #348]	@ (8005b34 <HAL_RCC_ClockConfig+0x264>)
 80059d8:	4313      	orrs	r3, r2
 80059da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059dc:	f7fc fece 	bl	800277c <HAL_GetTick>
 80059e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059e2:	e00a      	b.n	80059fa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059e4:	f7fc feca 	bl	800277c <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d901      	bls.n	80059fa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e095      	b.n	8005b26 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059fa:	4b4e      	ldr	r3, [pc, #312]	@ (8005b34 <HAL_RCC_ClockConfig+0x264>)
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f003 020c 	and.w	r2, r3, #12
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d1eb      	bne.n	80059e4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 0302 	and.w	r3, r3, #2
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d023      	beq.n	8005a60 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0304 	and.w	r3, r3, #4
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d005      	beq.n	8005a30 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a24:	4b43      	ldr	r3, [pc, #268]	@ (8005b34 <HAL_RCC_ClockConfig+0x264>)
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	4a42      	ldr	r2, [pc, #264]	@ (8005b34 <HAL_RCC_ClockConfig+0x264>)
 8005a2a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005a2e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0308 	and.w	r3, r3, #8
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d007      	beq.n	8005a4c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005a3c:	4b3d      	ldr	r3, [pc, #244]	@ (8005b34 <HAL_RCC_ClockConfig+0x264>)
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005a44:	4a3b      	ldr	r2, [pc, #236]	@ (8005b34 <HAL_RCC_ClockConfig+0x264>)
 8005a46:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005a4a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a4c:	4b39      	ldr	r3, [pc, #228]	@ (8005b34 <HAL_RCC_ClockConfig+0x264>)
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	4936      	ldr	r1, [pc, #216]	@ (8005b34 <HAL_RCC_ClockConfig+0x264>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	608b      	str	r3, [r1, #8]
 8005a5e:	e008      	b.n	8005a72 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	2b80      	cmp	r3, #128	@ 0x80
 8005a64:	d105      	bne.n	8005a72 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005a66:	4b33      	ldr	r3, [pc, #204]	@ (8005b34 <HAL_RCC_ClockConfig+0x264>)
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	4a32      	ldr	r2, [pc, #200]	@ (8005b34 <HAL_RCC_ClockConfig+0x264>)
 8005a6c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a70:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a72:	4b2f      	ldr	r3, [pc, #188]	@ (8005b30 <HAL_RCC_ClockConfig+0x260>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 030f 	and.w	r3, r3, #15
 8005a7a:	683a      	ldr	r2, [r7, #0]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d21d      	bcs.n	8005abc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a80:	4b2b      	ldr	r3, [pc, #172]	@ (8005b30 <HAL_RCC_ClockConfig+0x260>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f023 020f 	bic.w	r2, r3, #15
 8005a88:	4929      	ldr	r1, [pc, #164]	@ (8005b30 <HAL_RCC_ClockConfig+0x260>)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005a90:	f7fc fe74 	bl	800277c <HAL_GetTick>
 8005a94:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a96:	e00a      	b.n	8005aae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a98:	f7fc fe70 	bl	800277c <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d901      	bls.n	8005aae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e03b      	b.n	8005b26 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aae:	4b20      	ldr	r3, [pc, #128]	@ (8005b30 <HAL_RCC_ClockConfig+0x260>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 030f 	and.w	r3, r3, #15
 8005ab6:	683a      	ldr	r2, [r7, #0]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d1ed      	bne.n	8005a98 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0304 	and.w	r3, r3, #4
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d008      	beq.n	8005ada <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8005b34 <HAL_RCC_ClockConfig+0x264>)
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	4917      	ldr	r1, [pc, #92]	@ (8005b34 <HAL_RCC_ClockConfig+0x264>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0308 	and.w	r3, r3, #8
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d009      	beq.n	8005afa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ae6:	4b13      	ldr	r3, [pc, #76]	@ (8005b34 <HAL_RCC_ClockConfig+0x264>)
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	00db      	lsls	r3, r3, #3
 8005af4:	490f      	ldr	r1, [pc, #60]	@ (8005b34 <HAL_RCC_ClockConfig+0x264>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005afa:	f000 f825 	bl	8005b48 <HAL_RCC_GetSysClockFreq>
 8005afe:	4602      	mov	r2, r0
 8005b00:	4b0c      	ldr	r3, [pc, #48]	@ (8005b34 <HAL_RCC_ClockConfig+0x264>)
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	091b      	lsrs	r3, r3, #4
 8005b06:	f003 030f 	and.w	r3, r3, #15
 8005b0a:	490c      	ldr	r1, [pc, #48]	@ (8005b3c <HAL_RCC_ClockConfig+0x26c>)
 8005b0c:	5ccb      	ldrb	r3, [r1, r3]
 8005b0e:	f003 031f 	and.w	r3, r3, #31
 8005b12:	fa22 f303 	lsr.w	r3, r2, r3
 8005b16:	4a0a      	ldr	r2, [pc, #40]	@ (8005b40 <HAL_RCC_ClockConfig+0x270>)
 8005b18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8005b44 <HAL_RCC_ClockConfig+0x274>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7fb fe42 	bl	80017a8 <HAL_InitTick>
 8005b24:	4603      	mov	r3, r0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3718      	adds	r7, #24
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	40022000 	.word	0x40022000
 8005b34:	40021000 	.word	0x40021000
 8005b38:	04c4b400 	.word	0x04c4b400
 8005b3c:	0800e6f4 	.word	0x0800e6f4
 8005b40:	20000000 	.word	0x20000000
 8005b44:	200000c0 	.word	0x200000c0

08005b48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b087      	sub	sp, #28
 8005b4c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005b4e:	4b2c      	ldr	r3, [pc, #176]	@ (8005c00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f003 030c 	and.w	r3, r3, #12
 8005b56:	2b04      	cmp	r3, #4
 8005b58:	d102      	bne.n	8005b60 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005b5a:	4b2a      	ldr	r3, [pc, #168]	@ (8005c04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005b5c:	613b      	str	r3, [r7, #16]
 8005b5e:	e047      	b.n	8005bf0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005b60:	4b27      	ldr	r3, [pc, #156]	@ (8005c00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f003 030c 	and.w	r3, r3, #12
 8005b68:	2b08      	cmp	r3, #8
 8005b6a:	d102      	bne.n	8005b72 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b6c:	4b26      	ldr	r3, [pc, #152]	@ (8005c08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b6e:	613b      	str	r3, [r7, #16]
 8005b70:	e03e      	b.n	8005bf0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005b72:	4b23      	ldr	r3, [pc, #140]	@ (8005c00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f003 030c 	and.w	r3, r3, #12
 8005b7a:	2b0c      	cmp	r3, #12
 8005b7c:	d136      	bne.n	8005bec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b7e:	4b20      	ldr	r3, [pc, #128]	@ (8005c00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	f003 0303 	and.w	r3, r3, #3
 8005b86:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b88:	4b1d      	ldr	r3, [pc, #116]	@ (8005c00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	091b      	lsrs	r3, r3, #4
 8005b8e:	f003 030f 	and.w	r3, r3, #15
 8005b92:	3301      	adds	r3, #1
 8005b94:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2b03      	cmp	r3, #3
 8005b9a:	d10c      	bne.n	8005bb6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b9c:	4a1a      	ldr	r2, [pc, #104]	@ (8005c08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ba4:	4a16      	ldr	r2, [pc, #88]	@ (8005c00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ba6:	68d2      	ldr	r2, [r2, #12]
 8005ba8:	0a12      	lsrs	r2, r2, #8
 8005baa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005bae:	fb02 f303 	mul.w	r3, r2, r3
 8005bb2:	617b      	str	r3, [r7, #20]
      break;
 8005bb4:	e00c      	b.n	8005bd0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005bb6:	4a13      	ldr	r2, [pc, #76]	@ (8005c04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bbe:	4a10      	ldr	r2, [pc, #64]	@ (8005c00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bc0:	68d2      	ldr	r2, [r2, #12]
 8005bc2:	0a12      	lsrs	r2, r2, #8
 8005bc4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005bc8:	fb02 f303 	mul.w	r3, r2, r3
 8005bcc:	617b      	str	r3, [r7, #20]
      break;
 8005bce:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8005c00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	0e5b      	lsrs	r3, r3, #25
 8005bd6:	f003 0303 	and.w	r3, r3, #3
 8005bda:	3301      	adds	r3, #1
 8005bdc:	005b      	lsls	r3, r3, #1
 8005bde:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005be8:	613b      	str	r3, [r7, #16]
 8005bea:	e001      	b.n	8005bf0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005bec:	2300      	movs	r3, #0
 8005bee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005bf0:	693b      	ldr	r3, [r7, #16]
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	371c      	adds	r7, #28
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	40021000 	.word	0x40021000
 8005c04:	00f42400 	.word	0x00f42400
 8005c08:	016e3600 	.word	0x016e3600

08005c0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c10:	4b03      	ldr	r3, [pc, #12]	@ (8005c20 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c12:	681b      	ldr	r3, [r3, #0]
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop
 8005c20:	20000000 	.word	0x20000000

08005c24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005c28:	f7ff fff0 	bl	8005c0c <HAL_RCC_GetHCLKFreq>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	4b06      	ldr	r3, [pc, #24]	@ (8005c48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	0a1b      	lsrs	r3, r3, #8
 8005c34:	f003 0307 	and.w	r3, r3, #7
 8005c38:	4904      	ldr	r1, [pc, #16]	@ (8005c4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c3a:	5ccb      	ldrb	r3, [r1, r3]
 8005c3c:	f003 031f 	and.w	r3, r3, #31
 8005c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	40021000 	.word	0x40021000
 8005c4c:	0800e704 	.word	0x0800e704

08005c50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005c54:	f7ff ffda 	bl	8005c0c <HAL_RCC_GetHCLKFreq>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	4b06      	ldr	r3, [pc, #24]	@ (8005c74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	0adb      	lsrs	r3, r3, #11
 8005c60:	f003 0307 	and.w	r3, r3, #7
 8005c64:	4904      	ldr	r1, [pc, #16]	@ (8005c78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c66:	5ccb      	ldrb	r3, [r1, r3]
 8005c68:	f003 031f 	and.w	r3, r3, #31
 8005c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	40021000 	.word	0x40021000
 8005c78:	0800e704 	.word	0x0800e704

08005c7c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	220f      	movs	r2, #15
 8005c8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005c8c:	4b12      	ldr	r3, [pc, #72]	@ (8005cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	f003 0203 	and.w	r2, r3, #3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005c98:	4b0f      	ldr	r3, [pc, #60]	@ (8005cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8005cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005cb0:	4b09      	ldr	r3, [pc, #36]	@ (8005cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	08db      	lsrs	r3, r3, #3
 8005cb6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005cbe:	4b07      	ldr	r3, [pc, #28]	@ (8005cdc <HAL_RCC_GetClockConfig+0x60>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 020f 	and.w	r2, r3, #15
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	601a      	str	r2, [r3, #0]
}
 8005cca:	bf00      	nop
 8005ccc:	370c      	adds	r7, #12
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	40021000 	.word	0x40021000
 8005cdc:	40022000 	.word	0x40022000

08005ce0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b087      	sub	sp, #28
 8005ce4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ce6:	4b1e      	ldr	r3, [pc, #120]	@ (8005d60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	f003 0303 	and.w	r3, r3, #3
 8005cee:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8005d60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	091b      	lsrs	r3, r3, #4
 8005cf6:	f003 030f 	and.w	r3, r3, #15
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	2b03      	cmp	r3, #3
 8005d02:	d10c      	bne.n	8005d1e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d04:	4a17      	ldr	r2, [pc, #92]	@ (8005d64 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d0c:	4a14      	ldr	r2, [pc, #80]	@ (8005d60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d0e:	68d2      	ldr	r2, [r2, #12]
 8005d10:	0a12      	lsrs	r2, r2, #8
 8005d12:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005d16:	fb02 f303 	mul.w	r3, r2, r3
 8005d1a:	617b      	str	r3, [r7, #20]
    break;
 8005d1c:	e00c      	b.n	8005d38 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d1e:	4a12      	ldr	r2, [pc, #72]	@ (8005d68 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d26:	4a0e      	ldr	r2, [pc, #56]	@ (8005d60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d28:	68d2      	ldr	r2, [r2, #12]
 8005d2a:	0a12      	lsrs	r2, r2, #8
 8005d2c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005d30:	fb02 f303 	mul.w	r3, r2, r3
 8005d34:	617b      	str	r3, [r7, #20]
    break;
 8005d36:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d38:	4b09      	ldr	r3, [pc, #36]	@ (8005d60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	0e5b      	lsrs	r3, r3, #25
 8005d3e:	f003 0303 	and.w	r3, r3, #3
 8005d42:	3301      	adds	r3, #1
 8005d44:	005b      	lsls	r3, r3, #1
 8005d46:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d50:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005d52:	687b      	ldr	r3, [r7, #4]
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	371c      	adds	r7, #28
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr
 8005d60:	40021000 	.word	0x40021000
 8005d64:	016e3600 	.word	0x016e3600
 8005d68:	00f42400 	.word	0x00f42400

08005d6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b086      	sub	sp, #24
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d74:	2300      	movs	r3, #0
 8005d76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d78:	2300      	movs	r3, #0
 8005d7a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f000 8098 	beq.w	8005eba <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d8e:	4b43      	ldr	r3, [pc, #268]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10d      	bne.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d9a:	4b40      	ldr	r3, [pc, #256]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d9e:	4a3f      	ldr	r2, [pc, #252]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005da0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005da4:	6593      	str	r3, [r2, #88]	@ 0x58
 8005da6:	4b3d      	ldr	r3, [pc, #244]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005daa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dae:	60bb      	str	r3, [r7, #8]
 8005db0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005db2:	2301      	movs	r3, #1
 8005db4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005db6:	4b3a      	ldr	r3, [pc, #232]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a39      	ldr	r2, [pc, #228]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005dbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005dc0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005dc2:	f7fc fcdb 	bl	800277c <HAL_GetTick>
 8005dc6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005dc8:	e009      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dca:	f7fc fcd7 	bl	800277c <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d902      	bls.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	74fb      	strb	r3, [r7, #19]
        break;
 8005ddc:	e005      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005dde:	4b30      	ldr	r3, [pc, #192]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d0ef      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005dea:	7cfb      	ldrb	r3, [r7, #19]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d159      	bne.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005df0:	4b2a      	ldr	r3, [pc, #168]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005df6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dfa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d01e      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d019      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e0c:	4b23      	ldr	r3, [pc, #140]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e18:	4b20      	ldr	r3, [pc, #128]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e1e:	4a1f      	ldr	r2, [pc, #124]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e28:	4b1c      	ldr	r3, [pc, #112]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e2e:	4a1b      	ldr	r2, [pc, #108]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005e38:	4a18      	ldr	r2, [pc, #96]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	f003 0301 	and.w	r3, r3, #1
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d016      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e4a:	f7fc fc97 	bl	800277c <HAL_GetTick>
 8005e4e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e50:	e00b      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e52:	f7fc fc93 	bl	800277c <HAL_GetTick>
 8005e56:	4602      	mov	r2, r0
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d902      	bls.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	74fb      	strb	r3, [r7, #19]
            break;
 8005e68:	e006      	b.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e70:	f003 0302 	and.w	r3, r3, #2
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d0ec      	beq.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005e78:	7cfb      	ldrb	r3, [r7, #19]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10b      	bne.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e7e:	4b07      	ldr	r3, [pc, #28]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e8c:	4903      	ldr	r1, [pc, #12]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005e94:	e008      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e96:	7cfb      	ldrb	r3, [r7, #19]
 8005e98:	74bb      	strb	r3, [r7, #18]
 8005e9a:	e005      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005e9c:	40021000 	.word	0x40021000
 8005ea0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ea4:	7cfb      	ldrb	r3, [r7, #19]
 8005ea6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ea8:	7c7b      	ldrb	r3, [r7, #17]
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d105      	bne.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005eae:	4ba7      	ldr	r3, [pc, #668]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eb2:	4aa6      	ldr	r2, [pc, #664]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005eb8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 0301 	and.w	r3, r3, #1
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d00a      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ec6:	4ba1      	ldr	r3, [pc, #644]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ecc:	f023 0203 	bic.w	r2, r3, #3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	499d      	ldr	r1, [pc, #628]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 0302 	and.w	r3, r3, #2
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00a      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ee8:	4b98      	ldr	r3, [pc, #608]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eee:	f023 020c 	bic.w	r2, r3, #12
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	4995      	ldr	r1, [pc, #596]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0304 	and.w	r3, r3, #4
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00a      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f0a:	4b90      	ldr	r3, [pc, #576]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f10:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	498c      	ldr	r1, [pc, #560]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0308 	and.w	r3, r3, #8
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00a      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f2c:	4b87      	ldr	r3, [pc, #540]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f32:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	4984      	ldr	r1, [pc, #528]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0310 	and.w	r3, r3, #16
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00a      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005f4e:	4b7f      	ldr	r3, [pc, #508]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f54:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	497b      	ldr	r1, [pc, #492]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0320 	and.w	r3, r3, #32
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d00a      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f70:	4b76      	ldr	r3, [pc, #472]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f76:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	4973      	ldr	r1, [pc, #460]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f80:	4313      	orrs	r3, r2
 8005f82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00a      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f92:	4b6e      	ldr	r3, [pc, #440]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f98:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	69db      	ldr	r3, [r3, #28]
 8005fa0:	496a      	ldr	r1, [pc, #424]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00a      	beq.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005fb4:	4b65      	ldr	r3, [pc, #404]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fba:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	4962      	ldr	r1, [pc, #392]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00a      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005fd6:	4b5d      	ldr	r3, [pc, #372]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fdc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe4:	4959      	ldr	r1, [pc, #356]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d00a      	beq.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005ff8:	4b54      	ldr	r3, [pc, #336]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ffa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ffe:	f023 0203 	bic.w	r2, r3, #3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006006:	4951      	ldr	r1, [pc, #324]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006008:	4313      	orrs	r3, r2
 800600a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00a      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800601a:	4b4c      	ldr	r3, [pc, #304]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800601c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006020:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006028:	4948      	ldr	r1, [pc, #288]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800602a:	4313      	orrs	r3, r2
 800602c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006038:	2b00      	cmp	r3, #0
 800603a:	d015      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800603c:	4b43      	ldr	r3, [pc, #268]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800603e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006042:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800604a:	4940      	ldr	r1, [pc, #256]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800604c:	4313      	orrs	r3, r2
 800604e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006056:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800605a:	d105      	bne.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800605c:	4b3b      	ldr	r3, [pc, #236]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	4a3a      	ldr	r2, [pc, #232]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006062:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006066:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006070:	2b00      	cmp	r3, #0
 8006072:	d015      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006074:	4b35      	ldr	r3, [pc, #212]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800607a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006082:	4932      	ldr	r1, [pc, #200]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006084:	4313      	orrs	r3, r2
 8006086:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800608e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006092:	d105      	bne.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006094:	4b2d      	ldr	r3, [pc, #180]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	4a2c      	ldr	r2, [pc, #176]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800609a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800609e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d015      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80060ac:	4b27      	ldr	r3, [pc, #156]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060b2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ba:	4924      	ldr	r1, [pc, #144]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060bc:	4313      	orrs	r3, r2
 80060be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80060ca:	d105      	bne.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060cc:	4b1f      	ldr	r3, [pc, #124]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	4a1e      	ldr	r2, [pc, #120]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060d6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d015      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80060e4:	4b19      	ldr	r3, [pc, #100]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060ea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060f2:	4916      	ldr	r1, [pc, #88]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060f4:	4313      	orrs	r3, r2
 80060f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006102:	d105      	bne.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006104:	4b11      	ldr	r3, [pc, #68]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	4a10      	ldr	r2, [pc, #64]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800610a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800610e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006118:	2b00      	cmp	r3, #0
 800611a:	d019      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800611c:	4b0b      	ldr	r3, [pc, #44]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800611e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006122:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800612a:	4908      	ldr	r1, [pc, #32]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800612c:	4313      	orrs	r3, r2
 800612e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006136:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800613a:	d109      	bne.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800613c:	4b03      	ldr	r3, [pc, #12]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	4a02      	ldr	r2, [pc, #8]	@ (800614c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006142:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006146:	60d3      	str	r3, [r2, #12]
 8006148:	e002      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800614a:	bf00      	nop
 800614c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006158:	2b00      	cmp	r3, #0
 800615a:	d015      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800615c:	4b29      	ldr	r3, [pc, #164]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800615e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006162:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800616a:	4926      	ldr	r1, [pc, #152]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800616c:	4313      	orrs	r3, r2
 800616e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006176:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800617a:	d105      	bne.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800617c:	4b21      	ldr	r3, [pc, #132]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	4a20      	ldr	r2, [pc, #128]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006182:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006186:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d015      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006194:	4b1b      	ldr	r3, [pc, #108]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800619a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061a2:	4918      	ldr	r1, [pc, #96]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061a4:	4313      	orrs	r3, r2
 80061a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061b2:	d105      	bne.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80061b4:	4b13      	ldr	r3, [pc, #76]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	4a12      	ldr	r2, [pc, #72]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061be:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d015      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80061cc:	4b0d      	ldr	r3, [pc, #52]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80061d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061da:	490a      	ldr	r1, [pc, #40]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061dc:	4313      	orrs	r3, r2
 80061de:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80061ea:	d105      	bne.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061ec:	4b05      	ldr	r3, [pc, #20]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	4a04      	ldr	r2, [pc, #16]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061f6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80061f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3718      	adds	r7, #24
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	40021000 	.word	0x40021000

08006208 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e049      	b.n	80062ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006220:	b2db      	uxtb	r3, r3
 8006222:	2b00      	cmp	r3, #0
 8006224:	d106      	bne.n	8006234 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f841 	bl	80062b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2202      	movs	r2, #2
 8006238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	3304      	adds	r3, #4
 8006244:	4619      	mov	r1, r3
 8006246:	4610      	mov	r0, r2
 8006248:	f000 fd7a 	bl	8006d40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3708      	adds	r7, #8
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b083      	sub	sp, #12
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80062be:	bf00      	nop
 80062c0:	370c      	adds	r7, #12
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
	...

080062cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d001      	beq.n	80062e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e054      	b.n	800638e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2202      	movs	r2, #2
 80062e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68da      	ldr	r2, [r3, #12]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f042 0201 	orr.w	r2, r2, #1
 80062fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a26      	ldr	r2, [pc, #152]	@ (800639c <HAL_TIM_Base_Start_IT+0xd0>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d022      	beq.n	800634c <HAL_TIM_Base_Start_IT+0x80>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800630e:	d01d      	beq.n	800634c <HAL_TIM_Base_Start_IT+0x80>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a22      	ldr	r2, [pc, #136]	@ (80063a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d018      	beq.n	800634c <HAL_TIM_Base_Start_IT+0x80>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a21      	ldr	r2, [pc, #132]	@ (80063a4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d013      	beq.n	800634c <HAL_TIM_Base_Start_IT+0x80>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a1f      	ldr	r2, [pc, #124]	@ (80063a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d00e      	beq.n	800634c <HAL_TIM_Base_Start_IT+0x80>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a1e      	ldr	r2, [pc, #120]	@ (80063ac <HAL_TIM_Base_Start_IT+0xe0>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d009      	beq.n	800634c <HAL_TIM_Base_Start_IT+0x80>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a1c      	ldr	r2, [pc, #112]	@ (80063b0 <HAL_TIM_Base_Start_IT+0xe4>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d004      	beq.n	800634c <HAL_TIM_Base_Start_IT+0x80>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a1b      	ldr	r2, [pc, #108]	@ (80063b4 <HAL_TIM_Base_Start_IT+0xe8>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d115      	bne.n	8006378 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	689a      	ldr	r2, [r3, #8]
 8006352:	4b19      	ldr	r3, [pc, #100]	@ (80063b8 <HAL_TIM_Base_Start_IT+0xec>)
 8006354:	4013      	ands	r3, r2
 8006356:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2b06      	cmp	r3, #6
 800635c:	d015      	beq.n	800638a <HAL_TIM_Base_Start_IT+0xbe>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006364:	d011      	beq.n	800638a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f042 0201 	orr.w	r2, r2, #1
 8006374:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006376:	e008      	b.n	800638a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f042 0201 	orr.w	r2, r2, #1
 8006386:	601a      	str	r2, [r3, #0]
 8006388:	e000      	b.n	800638c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800638a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3714      	adds	r7, #20
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	40012c00 	.word	0x40012c00
 80063a0:	40000400 	.word	0x40000400
 80063a4:	40000800 	.word	0x40000800
 80063a8:	40000c00 	.word	0x40000c00
 80063ac:	40013400 	.word	0x40013400
 80063b0:	40014000 	.word	0x40014000
 80063b4:	40015000 	.word	0x40015000
 80063b8:	00010007 	.word	0x00010007

080063bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d101      	bne.n	80063ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e049      	b.n	8006462 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d106      	bne.n	80063e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f7fb fc9e 	bl	8001d24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2202      	movs	r2, #2
 80063ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	3304      	adds	r3, #4
 80063f8:	4619      	mov	r1, r3
 80063fa:	4610      	mov	r0, r2
 80063fc:	f000 fca0 	bl	8006d40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3708      	adds	r7, #8
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
	...

0800646c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d109      	bne.n	8006490 <HAL_TIM_PWM_Start+0x24>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006482:	b2db      	uxtb	r3, r3
 8006484:	2b01      	cmp	r3, #1
 8006486:	bf14      	ite	ne
 8006488:	2301      	movne	r3, #1
 800648a:	2300      	moveq	r3, #0
 800648c:	b2db      	uxtb	r3, r3
 800648e:	e03c      	b.n	800650a <HAL_TIM_PWM_Start+0x9e>
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	2b04      	cmp	r3, #4
 8006494:	d109      	bne.n	80064aa <HAL_TIM_PWM_Start+0x3e>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800649c:	b2db      	uxtb	r3, r3
 800649e:	2b01      	cmp	r3, #1
 80064a0:	bf14      	ite	ne
 80064a2:	2301      	movne	r3, #1
 80064a4:	2300      	moveq	r3, #0
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	e02f      	b.n	800650a <HAL_TIM_PWM_Start+0x9e>
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	2b08      	cmp	r3, #8
 80064ae:	d109      	bne.n	80064c4 <HAL_TIM_PWM_Start+0x58>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	bf14      	ite	ne
 80064bc:	2301      	movne	r3, #1
 80064be:	2300      	moveq	r3, #0
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	e022      	b.n	800650a <HAL_TIM_PWM_Start+0x9e>
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	2b0c      	cmp	r3, #12
 80064c8:	d109      	bne.n	80064de <HAL_TIM_PWM_Start+0x72>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	bf14      	ite	ne
 80064d6:	2301      	movne	r3, #1
 80064d8:	2300      	moveq	r3, #0
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	e015      	b.n	800650a <HAL_TIM_PWM_Start+0x9e>
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	2b10      	cmp	r3, #16
 80064e2:	d109      	bne.n	80064f8 <HAL_TIM_PWM_Start+0x8c>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	bf14      	ite	ne
 80064f0:	2301      	movne	r3, #1
 80064f2:	2300      	moveq	r3, #0
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	e008      	b.n	800650a <HAL_TIM_PWM_Start+0x9e>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b01      	cmp	r3, #1
 8006502:	bf14      	ite	ne
 8006504:	2301      	movne	r3, #1
 8006506:	2300      	moveq	r3, #0
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2b00      	cmp	r3, #0
 800650c:	d001      	beq.n	8006512 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e0a6      	b.n	8006660 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d104      	bne.n	8006522 <HAL_TIM_PWM_Start+0xb6>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2202      	movs	r2, #2
 800651c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006520:	e023      	b.n	800656a <HAL_TIM_PWM_Start+0xfe>
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	2b04      	cmp	r3, #4
 8006526:	d104      	bne.n	8006532 <HAL_TIM_PWM_Start+0xc6>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2202      	movs	r2, #2
 800652c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006530:	e01b      	b.n	800656a <HAL_TIM_PWM_Start+0xfe>
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	2b08      	cmp	r3, #8
 8006536:	d104      	bne.n	8006542 <HAL_TIM_PWM_Start+0xd6>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2202      	movs	r2, #2
 800653c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006540:	e013      	b.n	800656a <HAL_TIM_PWM_Start+0xfe>
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	2b0c      	cmp	r3, #12
 8006546:	d104      	bne.n	8006552 <HAL_TIM_PWM_Start+0xe6>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2202      	movs	r2, #2
 800654c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006550:	e00b      	b.n	800656a <HAL_TIM_PWM_Start+0xfe>
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	2b10      	cmp	r3, #16
 8006556:	d104      	bne.n	8006562 <HAL_TIM_PWM_Start+0xf6>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2202      	movs	r2, #2
 800655c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006560:	e003      	b.n	800656a <HAL_TIM_PWM_Start+0xfe>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2202      	movs	r2, #2
 8006566:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2201      	movs	r2, #1
 8006570:	6839      	ldr	r1, [r7, #0]
 8006572:	4618      	mov	r0, r3
 8006574:	f001 f82a 	bl	80075cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a3a      	ldr	r2, [pc, #232]	@ (8006668 <HAL_TIM_PWM_Start+0x1fc>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d018      	beq.n	80065b4 <HAL_TIM_PWM_Start+0x148>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a39      	ldr	r2, [pc, #228]	@ (800666c <HAL_TIM_PWM_Start+0x200>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d013      	beq.n	80065b4 <HAL_TIM_PWM_Start+0x148>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a37      	ldr	r2, [pc, #220]	@ (8006670 <HAL_TIM_PWM_Start+0x204>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d00e      	beq.n	80065b4 <HAL_TIM_PWM_Start+0x148>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a36      	ldr	r2, [pc, #216]	@ (8006674 <HAL_TIM_PWM_Start+0x208>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d009      	beq.n	80065b4 <HAL_TIM_PWM_Start+0x148>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a34      	ldr	r2, [pc, #208]	@ (8006678 <HAL_TIM_PWM_Start+0x20c>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d004      	beq.n	80065b4 <HAL_TIM_PWM_Start+0x148>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a33      	ldr	r2, [pc, #204]	@ (800667c <HAL_TIM_PWM_Start+0x210>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d101      	bne.n	80065b8 <HAL_TIM_PWM_Start+0x14c>
 80065b4:	2301      	movs	r3, #1
 80065b6:	e000      	b.n	80065ba <HAL_TIM_PWM_Start+0x14e>
 80065b8:	2300      	movs	r3, #0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d007      	beq.n	80065ce <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80065cc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a25      	ldr	r2, [pc, #148]	@ (8006668 <HAL_TIM_PWM_Start+0x1fc>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d022      	beq.n	800661e <HAL_TIM_PWM_Start+0x1b2>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065e0:	d01d      	beq.n	800661e <HAL_TIM_PWM_Start+0x1b2>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a26      	ldr	r2, [pc, #152]	@ (8006680 <HAL_TIM_PWM_Start+0x214>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d018      	beq.n	800661e <HAL_TIM_PWM_Start+0x1b2>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a24      	ldr	r2, [pc, #144]	@ (8006684 <HAL_TIM_PWM_Start+0x218>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d013      	beq.n	800661e <HAL_TIM_PWM_Start+0x1b2>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a23      	ldr	r2, [pc, #140]	@ (8006688 <HAL_TIM_PWM_Start+0x21c>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d00e      	beq.n	800661e <HAL_TIM_PWM_Start+0x1b2>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a19      	ldr	r2, [pc, #100]	@ (800666c <HAL_TIM_PWM_Start+0x200>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d009      	beq.n	800661e <HAL_TIM_PWM_Start+0x1b2>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a18      	ldr	r2, [pc, #96]	@ (8006670 <HAL_TIM_PWM_Start+0x204>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d004      	beq.n	800661e <HAL_TIM_PWM_Start+0x1b2>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a18      	ldr	r2, [pc, #96]	@ (800667c <HAL_TIM_PWM_Start+0x210>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d115      	bne.n	800664a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	689a      	ldr	r2, [r3, #8]
 8006624:	4b19      	ldr	r3, [pc, #100]	@ (800668c <HAL_TIM_PWM_Start+0x220>)
 8006626:	4013      	ands	r3, r2
 8006628:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2b06      	cmp	r3, #6
 800662e:	d015      	beq.n	800665c <HAL_TIM_PWM_Start+0x1f0>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006636:	d011      	beq.n	800665c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f042 0201 	orr.w	r2, r2, #1
 8006646:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006648:	e008      	b.n	800665c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f042 0201 	orr.w	r2, r2, #1
 8006658:	601a      	str	r2, [r3, #0]
 800665a:	e000      	b.n	800665e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800665c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800665e:	2300      	movs	r3, #0
}
 8006660:	4618      	mov	r0, r3
 8006662:	3710      	adds	r7, #16
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	40012c00 	.word	0x40012c00
 800666c:	40013400 	.word	0x40013400
 8006670:	40014000 	.word	0x40014000
 8006674:	40014400 	.word	0x40014400
 8006678:	40014800 	.word	0x40014800
 800667c:	40015000 	.word	0x40015000
 8006680:	40000400 	.word	0x40000400
 8006684:	40000800 	.word	0x40000800
 8006688:	40000c00 	.word	0x40000c00
 800668c:	00010007 	.word	0x00010007

08006690 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2200      	movs	r2, #0
 80066a0:	6839      	ldr	r1, [r7, #0]
 80066a2:	4618      	mov	r0, r3
 80066a4:	f000 ff92 	bl	80075cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a40      	ldr	r2, [pc, #256]	@ (80067b0 <HAL_TIM_PWM_Stop+0x120>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d018      	beq.n	80066e4 <HAL_TIM_PWM_Stop+0x54>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a3f      	ldr	r2, [pc, #252]	@ (80067b4 <HAL_TIM_PWM_Stop+0x124>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d013      	beq.n	80066e4 <HAL_TIM_PWM_Stop+0x54>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a3d      	ldr	r2, [pc, #244]	@ (80067b8 <HAL_TIM_PWM_Stop+0x128>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d00e      	beq.n	80066e4 <HAL_TIM_PWM_Stop+0x54>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a3c      	ldr	r2, [pc, #240]	@ (80067bc <HAL_TIM_PWM_Stop+0x12c>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d009      	beq.n	80066e4 <HAL_TIM_PWM_Stop+0x54>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a3a      	ldr	r2, [pc, #232]	@ (80067c0 <HAL_TIM_PWM_Stop+0x130>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d004      	beq.n	80066e4 <HAL_TIM_PWM_Stop+0x54>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a39      	ldr	r2, [pc, #228]	@ (80067c4 <HAL_TIM_PWM_Stop+0x134>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d101      	bne.n	80066e8 <HAL_TIM_PWM_Stop+0x58>
 80066e4:	2301      	movs	r3, #1
 80066e6:	e000      	b.n	80066ea <HAL_TIM_PWM_Stop+0x5a>
 80066e8:	2300      	movs	r3, #0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d017      	beq.n	800671e <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	6a1a      	ldr	r2, [r3, #32]
 80066f4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80066f8:	4013      	ands	r3, r2
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10f      	bne.n	800671e <HAL_TIM_PWM_Stop+0x8e>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	6a1a      	ldr	r2, [r3, #32]
 8006704:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006708:	4013      	ands	r3, r2
 800670a:	2b00      	cmp	r3, #0
 800670c:	d107      	bne.n	800671e <HAL_TIM_PWM_Stop+0x8e>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800671c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	6a1a      	ldr	r2, [r3, #32]
 8006724:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006728:	4013      	ands	r3, r2
 800672a:	2b00      	cmp	r3, #0
 800672c:	d10f      	bne.n	800674e <HAL_TIM_PWM_Stop+0xbe>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	6a1a      	ldr	r2, [r3, #32]
 8006734:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006738:	4013      	ands	r3, r2
 800673a:	2b00      	cmp	r3, #0
 800673c:	d107      	bne.n	800674e <HAL_TIM_PWM_Stop+0xbe>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f022 0201 	bic.w	r2, r2, #1
 800674c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d104      	bne.n	800675e <HAL_TIM_PWM_Stop+0xce>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800675c:	e023      	b.n	80067a6 <HAL_TIM_PWM_Stop+0x116>
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	2b04      	cmp	r3, #4
 8006762:	d104      	bne.n	800676e <HAL_TIM_PWM_Stop+0xde>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800676c:	e01b      	b.n	80067a6 <HAL_TIM_PWM_Stop+0x116>
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	2b08      	cmp	r3, #8
 8006772:	d104      	bne.n	800677e <HAL_TIM_PWM_Stop+0xee>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800677c:	e013      	b.n	80067a6 <HAL_TIM_PWM_Stop+0x116>
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	2b0c      	cmp	r3, #12
 8006782:	d104      	bne.n	800678e <HAL_TIM_PWM_Stop+0xfe>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800678c:	e00b      	b.n	80067a6 <HAL_TIM_PWM_Stop+0x116>
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	2b10      	cmp	r3, #16
 8006792:	d104      	bne.n	800679e <HAL_TIM_PWM_Stop+0x10e>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800679c:	e003      	b.n	80067a6 <HAL_TIM_PWM_Stop+0x116>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2201      	movs	r2, #1
 80067a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3708      	adds	r7, #8
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	40012c00 	.word	0x40012c00
 80067b4:	40013400 	.word	0x40013400
 80067b8:	40014000 	.word	0x40014000
 80067bc:	40014400 	.word	0x40014400
 80067c0:	40014800 	.word	0x40014800
 80067c4:	40015000 	.word	0x40015000

080067c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	f003 0302 	and.w	r3, r3, #2
 80067da:	2b02      	cmp	r3, #2
 80067dc:	d122      	bne.n	8006824 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	f003 0302 	and.w	r3, r3, #2
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d11b      	bne.n	8006824 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f06f 0202 	mvn.w	r2, #2
 80067f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2201      	movs	r2, #1
 80067fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	f003 0303 	and.w	r3, r3, #3
 8006806:	2b00      	cmp	r3, #0
 8006808:	d003      	beq.n	8006812 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 fa7a 	bl	8006d04 <HAL_TIM_IC_CaptureCallback>
 8006810:	e005      	b.n	800681e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 fa6c 	bl	8006cf0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 fa7d 	bl	8006d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	f003 0304 	and.w	r3, r3, #4
 800682e:	2b04      	cmp	r3, #4
 8006830:	d122      	bne.n	8006878 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	f003 0304 	and.w	r3, r3, #4
 800683c:	2b04      	cmp	r3, #4
 800683e:	d11b      	bne.n	8006878 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f06f 0204 	mvn.w	r2, #4
 8006848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2202      	movs	r2, #2
 800684e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	699b      	ldr	r3, [r3, #24]
 8006856:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800685a:	2b00      	cmp	r3, #0
 800685c:	d003      	beq.n	8006866 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 fa50 	bl	8006d04 <HAL_TIM_IC_CaptureCallback>
 8006864:	e005      	b.n	8006872 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 fa42 	bl	8006cf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 fa53 	bl	8006d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	f003 0308 	and.w	r3, r3, #8
 8006882:	2b08      	cmp	r3, #8
 8006884:	d122      	bne.n	80068cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	f003 0308 	and.w	r3, r3, #8
 8006890:	2b08      	cmp	r3, #8
 8006892:	d11b      	bne.n	80068cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f06f 0208 	mvn.w	r2, #8
 800689c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2204      	movs	r2, #4
 80068a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	69db      	ldr	r3, [r3, #28]
 80068aa:	f003 0303 	and.w	r3, r3, #3
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d003      	beq.n	80068ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 fa26 	bl	8006d04 <HAL_TIM_IC_CaptureCallback>
 80068b8:	e005      	b.n	80068c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 fa18 	bl	8006cf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 fa29 	bl	8006d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	f003 0310 	and.w	r3, r3, #16
 80068d6:	2b10      	cmp	r3, #16
 80068d8:	d122      	bne.n	8006920 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	f003 0310 	and.w	r3, r3, #16
 80068e4:	2b10      	cmp	r3, #16
 80068e6:	d11b      	bne.n	8006920 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f06f 0210 	mvn.w	r2, #16
 80068f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2208      	movs	r2, #8
 80068f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	69db      	ldr	r3, [r3, #28]
 80068fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006902:	2b00      	cmp	r3, #0
 8006904:	d003      	beq.n	800690e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 f9fc 	bl	8006d04 <HAL_TIM_IC_CaptureCallback>
 800690c:	e005      	b.n	800691a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 f9ee 	bl	8006cf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 f9ff 	bl	8006d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	f003 0301 	and.w	r3, r3, #1
 800692a:	2b01      	cmp	r3, #1
 800692c:	d10e      	bne.n	800694c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	f003 0301 	and.w	r3, r3, #1
 8006938:	2b01      	cmp	r3, #1
 800693a:	d107      	bne.n	800694c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f06f 0201 	mvn.w	r2, #1
 8006944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f7fa fef2 	bl	8001730 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006956:	2b80      	cmp	r3, #128	@ 0x80
 8006958:	d10e      	bne.n	8006978 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006964:	2b80      	cmp	r3, #128	@ 0x80
 8006966:	d107      	bne.n	8006978 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f001 f970 	bl	8007c58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006982:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006986:	d10e      	bne.n	80069a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006992:	2b80      	cmp	r3, #128	@ 0x80
 8006994:	d107      	bne.n	80069a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800699e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f001 f963 	bl	8007c6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069b0:	2b40      	cmp	r3, #64	@ 0x40
 80069b2:	d10e      	bne.n	80069d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069be:	2b40      	cmp	r3, #64	@ 0x40
 80069c0:	d107      	bne.n	80069d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80069ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 f9ad 	bl	8006d2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	f003 0320 	and.w	r3, r3, #32
 80069dc:	2b20      	cmp	r3, #32
 80069de:	d10e      	bne.n	80069fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	f003 0320 	and.w	r3, r3, #32
 80069ea:	2b20      	cmp	r3, #32
 80069ec:	d107      	bne.n	80069fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f06f 0220 	mvn.w	r2, #32
 80069f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f001 f923 	bl	8007c44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a08:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a0c:	d10f      	bne.n	8006a2e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a1c:	d107      	bne.n	8006a2e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006a26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f001 f929 	bl	8007c80 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	691b      	ldr	r3, [r3, #16]
 8006a34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a38:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a3c:	d10f      	bne.n	8006a5e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a4c:	d107      	bne.n	8006a5e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006a56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f001 f91b 	bl	8007c94 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	691b      	ldr	r3, [r3, #16]
 8006a64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a6c:	d10f      	bne.n	8006a8e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a7c:	d107      	bne.n	8006a8e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006a86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f001 f90d 	bl	8007ca8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a98:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006a9c:	d10f      	bne.n	8006abe <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006aa8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006aac:	d107      	bne.n	8006abe <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f001 f8ff 	bl	8007cbc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006abe:	bf00      	nop
 8006ac0:	3708      	adds	r7, #8
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
	...

08006ac8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b086      	sub	sp, #24
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d101      	bne.n	8006ae6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006ae2:	2302      	movs	r3, #2
 8006ae4:	e0ff      	b.n	8006ce6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2b14      	cmp	r3, #20
 8006af2:	f200 80f0 	bhi.w	8006cd6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006af6:	a201      	add	r2, pc, #4	@ (adr r2, 8006afc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006afc:	08006b51 	.word	0x08006b51
 8006b00:	08006cd7 	.word	0x08006cd7
 8006b04:	08006cd7 	.word	0x08006cd7
 8006b08:	08006cd7 	.word	0x08006cd7
 8006b0c:	08006b91 	.word	0x08006b91
 8006b10:	08006cd7 	.word	0x08006cd7
 8006b14:	08006cd7 	.word	0x08006cd7
 8006b18:	08006cd7 	.word	0x08006cd7
 8006b1c:	08006bd3 	.word	0x08006bd3
 8006b20:	08006cd7 	.word	0x08006cd7
 8006b24:	08006cd7 	.word	0x08006cd7
 8006b28:	08006cd7 	.word	0x08006cd7
 8006b2c:	08006c13 	.word	0x08006c13
 8006b30:	08006cd7 	.word	0x08006cd7
 8006b34:	08006cd7 	.word	0x08006cd7
 8006b38:	08006cd7 	.word	0x08006cd7
 8006b3c:	08006c55 	.word	0x08006c55
 8006b40:	08006cd7 	.word	0x08006cd7
 8006b44:	08006cd7 	.word	0x08006cd7
 8006b48:	08006cd7 	.word	0x08006cd7
 8006b4c:	08006c95 	.word	0x08006c95
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	68b9      	ldr	r1, [r7, #8]
 8006b56:	4618      	mov	r0, r3
 8006b58:	f000 f99a 	bl	8006e90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	699a      	ldr	r2, [r3, #24]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f042 0208 	orr.w	r2, r2, #8
 8006b6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	699a      	ldr	r2, [r3, #24]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f022 0204 	bic.w	r2, r2, #4
 8006b7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	6999      	ldr	r1, [r3, #24]
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	691a      	ldr	r2, [r3, #16]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	430a      	orrs	r2, r1
 8006b8c:	619a      	str	r2, [r3, #24]
      break;
 8006b8e:	e0a5      	b.n	8006cdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68b9      	ldr	r1, [r7, #8]
 8006b96:	4618      	mov	r0, r3
 8006b98:	f000 fa14 	bl	8006fc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	699a      	ldr	r2, [r3, #24]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006baa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	699a      	ldr	r2, [r3, #24]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	6999      	ldr	r1, [r3, #24]
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	021a      	lsls	r2, r3, #8
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	430a      	orrs	r2, r1
 8006bce:	619a      	str	r2, [r3, #24]
      break;
 8006bd0:	e084      	b.n	8006cdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68b9      	ldr	r1, [r7, #8]
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f000 fa87 	bl	80070ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	69da      	ldr	r2, [r3, #28]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f042 0208 	orr.w	r2, r2, #8
 8006bec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	69da      	ldr	r2, [r3, #28]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f022 0204 	bic.w	r2, r2, #4
 8006bfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	69d9      	ldr	r1, [r3, #28]
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	691a      	ldr	r2, [r3, #16]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	430a      	orrs	r2, r1
 8006c0e:	61da      	str	r2, [r3, #28]
      break;
 8006c10:	e064      	b.n	8006cdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	68b9      	ldr	r1, [r7, #8]
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f000 faf9 	bl	8007210 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	69da      	ldr	r2, [r3, #28]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	69da      	ldr	r2, [r3, #28]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	69d9      	ldr	r1, [r3, #28]
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	021a      	lsls	r2, r3, #8
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	430a      	orrs	r2, r1
 8006c50:	61da      	str	r2, [r3, #28]
      break;
 8006c52:	e043      	b.n	8006cdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	68b9      	ldr	r1, [r7, #8]
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f000 fb6c 	bl	8007338 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f042 0208 	orr.w	r2, r2, #8
 8006c6e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f022 0204 	bic.w	r2, r2, #4
 8006c7e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	691a      	ldr	r2, [r3, #16]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	430a      	orrs	r2, r1
 8006c90:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006c92:	e023      	b.n	8006cdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68b9      	ldr	r1, [r7, #8]
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f000 fbb6 	bl	800740c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006cae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006cbe:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	021a      	lsls	r2, r3, #8
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	430a      	orrs	r2, r1
 8006cd2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006cd4:	e002      	b.n	8006cdc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	75fb      	strb	r3, [r7, #23]
      break;
 8006cda:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006ce4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3718      	adds	r7, #24
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop

08006cf0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cf8:	bf00      	nop
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d0c:	bf00      	nop
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d20:	bf00      	nop
 8006d22:	370c      	adds	r7, #12
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d34:	bf00      	nop
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b085      	sub	sp, #20
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a46      	ldr	r2, [pc, #280]	@ (8006e6c <TIM_Base_SetConfig+0x12c>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d017      	beq.n	8006d88 <TIM_Base_SetConfig+0x48>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d5e:	d013      	beq.n	8006d88 <TIM_Base_SetConfig+0x48>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a43      	ldr	r2, [pc, #268]	@ (8006e70 <TIM_Base_SetConfig+0x130>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d00f      	beq.n	8006d88 <TIM_Base_SetConfig+0x48>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a42      	ldr	r2, [pc, #264]	@ (8006e74 <TIM_Base_SetConfig+0x134>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d00b      	beq.n	8006d88 <TIM_Base_SetConfig+0x48>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a41      	ldr	r2, [pc, #260]	@ (8006e78 <TIM_Base_SetConfig+0x138>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d007      	beq.n	8006d88 <TIM_Base_SetConfig+0x48>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a40      	ldr	r2, [pc, #256]	@ (8006e7c <TIM_Base_SetConfig+0x13c>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d003      	beq.n	8006d88 <TIM_Base_SetConfig+0x48>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a3f      	ldr	r2, [pc, #252]	@ (8006e80 <TIM_Base_SetConfig+0x140>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d108      	bne.n	8006d9a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a33      	ldr	r2, [pc, #204]	@ (8006e6c <TIM_Base_SetConfig+0x12c>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d023      	beq.n	8006dea <TIM_Base_SetConfig+0xaa>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006da8:	d01f      	beq.n	8006dea <TIM_Base_SetConfig+0xaa>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a30      	ldr	r2, [pc, #192]	@ (8006e70 <TIM_Base_SetConfig+0x130>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d01b      	beq.n	8006dea <TIM_Base_SetConfig+0xaa>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a2f      	ldr	r2, [pc, #188]	@ (8006e74 <TIM_Base_SetConfig+0x134>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d017      	beq.n	8006dea <TIM_Base_SetConfig+0xaa>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a2e      	ldr	r2, [pc, #184]	@ (8006e78 <TIM_Base_SetConfig+0x138>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d013      	beq.n	8006dea <TIM_Base_SetConfig+0xaa>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a2d      	ldr	r2, [pc, #180]	@ (8006e7c <TIM_Base_SetConfig+0x13c>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d00f      	beq.n	8006dea <TIM_Base_SetConfig+0xaa>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a2d      	ldr	r2, [pc, #180]	@ (8006e84 <TIM_Base_SetConfig+0x144>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d00b      	beq.n	8006dea <TIM_Base_SetConfig+0xaa>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a2c      	ldr	r2, [pc, #176]	@ (8006e88 <TIM_Base_SetConfig+0x148>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d007      	beq.n	8006dea <TIM_Base_SetConfig+0xaa>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a2b      	ldr	r2, [pc, #172]	@ (8006e8c <TIM_Base_SetConfig+0x14c>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d003      	beq.n	8006dea <TIM_Base_SetConfig+0xaa>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a26      	ldr	r2, [pc, #152]	@ (8006e80 <TIM_Base_SetConfig+0x140>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d108      	bne.n	8006dfc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006df0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	695b      	ldr	r3, [r3, #20]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	689a      	ldr	r2, [r3, #8]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a12      	ldr	r2, [pc, #72]	@ (8006e6c <TIM_Base_SetConfig+0x12c>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d013      	beq.n	8006e50 <TIM_Base_SetConfig+0x110>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a14      	ldr	r2, [pc, #80]	@ (8006e7c <TIM_Base_SetConfig+0x13c>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d00f      	beq.n	8006e50 <TIM_Base_SetConfig+0x110>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a14      	ldr	r2, [pc, #80]	@ (8006e84 <TIM_Base_SetConfig+0x144>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d00b      	beq.n	8006e50 <TIM_Base_SetConfig+0x110>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a13      	ldr	r2, [pc, #76]	@ (8006e88 <TIM_Base_SetConfig+0x148>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d007      	beq.n	8006e50 <TIM_Base_SetConfig+0x110>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a12      	ldr	r2, [pc, #72]	@ (8006e8c <TIM_Base_SetConfig+0x14c>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d003      	beq.n	8006e50 <TIM_Base_SetConfig+0x110>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a0d      	ldr	r2, [pc, #52]	@ (8006e80 <TIM_Base_SetConfig+0x140>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d103      	bne.n	8006e58 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	691a      	ldr	r2, [r3, #16]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	615a      	str	r2, [r3, #20]
}
 8006e5e:	bf00      	nop
 8006e60:	3714      	adds	r7, #20
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop
 8006e6c:	40012c00 	.word	0x40012c00
 8006e70:	40000400 	.word	0x40000400
 8006e74:	40000800 	.word	0x40000800
 8006e78:	40000c00 	.word	0x40000c00
 8006e7c:	40013400 	.word	0x40013400
 8006e80:	40015000 	.word	0x40015000
 8006e84:	40014000 	.word	0x40014000
 8006e88:	40014400 	.word	0x40014400
 8006e8c:	40014800 	.word	0x40014800

08006e90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b087      	sub	sp, #28
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a1b      	ldr	r3, [r3, #32]
 8006e9e:	f023 0201 	bic.w	r2, r3, #1
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a1b      	ldr	r3, [r3, #32]
 8006eaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ebe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f023 0303 	bic.w	r3, r3, #3
 8006eca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	f023 0302 	bic.w	r3, r3, #2
 8006edc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	697a      	ldr	r2, [r7, #20]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4a30      	ldr	r2, [pc, #192]	@ (8006fac <TIM_OC1_SetConfig+0x11c>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d013      	beq.n	8006f18 <TIM_OC1_SetConfig+0x88>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4a2f      	ldr	r2, [pc, #188]	@ (8006fb0 <TIM_OC1_SetConfig+0x120>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d00f      	beq.n	8006f18 <TIM_OC1_SetConfig+0x88>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4a2e      	ldr	r2, [pc, #184]	@ (8006fb4 <TIM_OC1_SetConfig+0x124>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d00b      	beq.n	8006f18 <TIM_OC1_SetConfig+0x88>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4a2d      	ldr	r2, [pc, #180]	@ (8006fb8 <TIM_OC1_SetConfig+0x128>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d007      	beq.n	8006f18 <TIM_OC1_SetConfig+0x88>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4a2c      	ldr	r2, [pc, #176]	@ (8006fbc <TIM_OC1_SetConfig+0x12c>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d003      	beq.n	8006f18 <TIM_OC1_SetConfig+0x88>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a2b      	ldr	r2, [pc, #172]	@ (8006fc0 <TIM_OC1_SetConfig+0x130>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d10c      	bne.n	8006f32 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	f023 0308 	bic.w	r3, r3, #8
 8006f1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	697a      	ldr	r2, [r7, #20]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	f023 0304 	bic.w	r3, r3, #4
 8006f30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4a1d      	ldr	r2, [pc, #116]	@ (8006fac <TIM_OC1_SetConfig+0x11c>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d013      	beq.n	8006f62 <TIM_OC1_SetConfig+0xd2>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a1c      	ldr	r2, [pc, #112]	@ (8006fb0 <TIM_OC1_SetConfig+0x120>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d00f      	beq.n	8006f62 <TIM_OC1_SetConfig+0xd2>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a1b      	ldr	r2, [pc, #108]	@ (8006fb4 <TIM_OC1_SetConfig+0x124>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d00b      	beq.n	8006f62 <TIM_OC1_SetConfig+0xd2>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a1a      	ldr	r2, [pc, #104]	@ (8006fb8 <TIM_OC1_SetConfig+0x128>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d007      	beq.n	8006f62 <TIM_OC1_SetConfig+0xd2>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a19      	ldr	r2, [pc, #100]	@ (8006fbc <TIM_OC1_SetConfig+0x12c>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d003      	beq.n	8006f62 <TIM_OC1_SetConfig+0xd2>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a18      	ldr	r2, [pc, #96]	@ (8006fc0 <TIM_OC1_SetConfig+0x130>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d111      	bne.n	8006f86 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006f70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	695b      	ldr	r3, [r3, #20]
 8006f76:	693a      	ldr	r2, [r7, #16]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	699b      	ldr	r3, [r3, #24]
 8006f80:	693a      	ldr	r2, [r7, #16]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	693a      	ldr	r2, [r7, #16]
 8006f8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	68fa      	ldr	r2, [r7, #12]
 8006f90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	685a      	ldr	r2, [r3, #4]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	697a      	ldr	r2, [r7, #20]
 8006f9e:	621a      	str	r2, [r3, #32]
}
 8006fa0:	bf00      	nop
 8006fa2:	371c      	adds	r7, #28
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr
 8006fac:	40012c00 	.word	0x40012c00
 8006fb0:	40013400 	.word	0x40013400
 8006fb4:	40014000 	.word	0x40014000
 8006fb8:	40014400 	.word	0x40014400
 8006fbc:	40014800 	.word	0x40014800
 8006fc0:	40015000 	.word	0x40015000

08006fc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b087      	sub	sp, #28
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a1b      	ldr	r3, [r3, #32]
 8006fd2:	f023 0210 	bic.w	r2, r3, #16
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a1b      	ldr	r3, [r3, #32]
 8006fde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	699b      	ldr	r3, [r3, #24]
 8006fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ff2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ffe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	021b      	lsls	r3, r3, #8
 8007006:	68fa      	ldr	r2, [r7, #12]
 8007008:	4313      	orrs	r3, r2
 800700a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	f023 0320 	bic.w	r3, r3, #32
 8007012:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	011b      	lsls	r3, r3, #4
 800701a:	697a      	ldr	r2, [r7, #20]
 800701c:	4313      	orrs	r3, r2
 800701e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a2c      	ldr	r2, [pc, #176]	@ (80070d4 <TIM_OC2_SetConfig+0x110>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d007      	beq.n	8007038 <TIM_OC2_SetConfig+0x74>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a2b      	ldr	r2, [pc, #172]	@ (80070d8 <TIM_OC2_SetConfig+0x114>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d003      	beq.n	8007038 <TIM_OC2_SetConfig+0x74>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4a2a      	ldr	r2, [pc, #168]	@ (80070dc <TIM_OC2_SetConfig+0x118>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d10d      	bne.n	8007054 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800703e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	011b      	lsls	r3, r3, #4
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	4313      	orrs	r3, r2
 800704a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007052:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a1f      	ldr	r2, [pc, #124]	@ (80070d4 <TIM_OC2_SetConfig+0x110>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d013      	beq.n	8007084 <TIM_OC2_SetConfig+0xc0>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a1e      	ldr	r2, [pc, #120]	@ (80070d8 <TIM_OC2_SetConfig+0x114>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d00f      	beq.n	8007084 <TIM_OC2_SetConfig+0xc0>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a1e      	ldr	r2, [pc, #120]	@ (80070e0 <TIM_OC2_SetConfig+0x11c>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d00b      	beq.n	8007084 <TIM_OC2_SetConfig+0xc0>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a1d      	ldr	r2, [pc, #116]	@ (80070e4 <TIM_OC2_SetConfig+0x120>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d007      	beq.n	8007084 <TIM_OC2_SetConfig+0xc0>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a1c      	ldr	r2, [pc, #112]	@ (80070e8 <TIM_OC2_SetConfig+0x124>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d003      	beq.n	8007084 <TIM_OC2_SetConfig+0xc0>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a17      	ldr	r2, [pc, #92]	@ (80070dc <TIM_OC2_SetConfig+0x118>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d113      	bne.n	80070ac <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800708a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007092:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	695b      	ldr	r3, [r3, #20]
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	693a      	ldr	r2, [r7, #16]
 800709c:	4313      	orrs	r3, r2
 800709e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	699b      	ldr	r3, [r3, #24]
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	693a      	ldr	r2, [r7, #16]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	693a      	ldr	r2, [r7, #16]
 80070b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	685a      	ldr	r2, [r3, #4]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	697a      	ldr	r2, [r7, #20]
 80070c4:	621a      	str	r2, [r3, #32]
}
 80070c6:	bf00      	nop
 80070c8:	371c      	adds	r7, #28
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	40012c00 	.word	0x40012c00
 80070d8:	40013400 	.word	0x40013400
 80070dc:	40015000 	.word	0x40015000
 80070e0:	40014000 	.word	0x40014000
 80070e4:	40014400 	.word	0x40014400
 80070e8:	40014800 	.word	0x40014800

080070ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b087      	sub	sp, #28
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a1b      	ldr	r3, [r3, #32]
 80070fa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a1b      	ldr	r3, [r3, #32]
 8007106:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	69db      	ldr	r3, [r3, #28]
 8007112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800711a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800711e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f023 0303 	bic.w	r3, r3, #3
 8007126:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	4313      	orrs	r3, r2
 8007130:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007138:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	021b      	lsls	r3, r3, #8
 8007140:	697a      	ldr	r2, [r7, #20]
 8007142:	4313      	orrs	r3, r2
 8007144:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a2b      	ldr	r2, [pc, #172]	@ (80071f8 <TIM_OC3_SetConfig+0x10c>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d007      	beq.n	800715e <TIM_OC3_SetConfig+0x72>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a2a      	ldr	r2, [pc, #168]	@ (80071fc <TIM_OC3_SetConfig+0x110>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d003      	beq.n	800715e <TIM_OC3_SetConfig+0x72>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a29      	ldr	r2, [pc, #164]	@ (8007200 <TIM_OC3_SetConfig+0x114>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d10d      	bne.n	800717a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007164:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	021b      	lsls	r3, r3, #8
 800716c:	697a      	ldr	r2, [r7, #20]
 800716e:	4313      	orrs	r3, r2
 8007170:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007178:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a1e      	ldr	r2, [pc, #120]	@ (80071f8 <TIM_OC3_SetConfig+0x10c>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d013      	beq.n	80071aa <TIM_OC3_SetConfig+0xbe>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a1d      	ldr	r2, [pc, #116]	@ (80071fc <TIM_OC3_SetConfig+0x110>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d00f      	beq.n	80071aa <TIM_OC3_SetConfig+0xbe>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a1d      	ldr	r2, [pc, #116]	@ (8007204 <TIM_OC3_SetConfig+0x118>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d00b      	beq.n	80071aa <TIM_OC3_SetConfig+0xbe>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a1c      	ldr	r2, [pc, #112]	@ (8007208 <TIM_OC3_SetConfig+0x11c>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d007      	beq.n	80071aa <TIM_OC3_SetConfig+0xbe>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4a1b      	ldr	r2, [pc, #108]	@ (800720c <TIM_OC3_SetConfig+0x120>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d003      	beq.n	80071aa <TIM_OC3_SetConfig+0xbe>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4a16      	ldr	r2, [pc, #88]	@ (8007200 <TIM_OC3_SetConfig+0x114>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d113      	bne.n	80071d2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80071b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80071b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	695b      	ldr	r3, [r3, #20]
 80071be:	011b      	lsls	r3, r3, #4
 80071c0:	693a      	ldr	r2, [r7, #16]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	011b      	lsls	r3, r3, #4
 80071cc:	693a      	ldr	r2, [r7, #16]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	693a      	ldr	r2, [r7, #16]
 80071d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	68fa      	ldr	r2, [r7, #12]
 80071dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	685a      	ldr	r2, [r3, #4]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	697a      	ldr	r2, [r7, #20]
 80071ea:	621a      	str	r2, [r3, #32]
}
 80071ec:	bf00      	nop
 80071ee:	371c      	adds	r7, #28
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr
 80071f8:	40012c00 	.word	0x40012c00
 80071fc:	40013400 	.word	0x40013400
 8007200:	40015000 	.word	0x40015000
 8007204:	40014000 	.word	0x40014000
 8007208:	40014400 	.word	0x40014400
 800720c:	40014800 	.word	0x40014800

08007210 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007210:	b480      	push	{r7}
 8007212:	b087      	sub	sp, #28
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a1b      	ldr	r3, [r3, #32]
 800721e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a1b      	ldr	r3, [r3, #32]
 800722a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	69db      	ldr	r3, [r3, #28]
 8007236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800723e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800724a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	021b      	lsls	r3, r3, #8
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	4313      	orrs	r3, r2
 8007256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800725e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	031b      	lsls	r3, r3, #12
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	4313      	orrs	r3, r2
 800726a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a2c      	ldr	r2, [pc, #176]	@ (8007320 <TIM_OC4_SetConfig+0x110>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d007      	beq.n	8007284 <TIM_OC4_SetConfig+0x74>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a2b      	ldr	r2, [pc, #172]	@ (8007324 <TIM_OC4_SetConfig+0x114>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d003      	beq.n	8007284 <TIM_OC4_SetConfig+0x74>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a2a      	ldr	r2, [pc, #168]	@ (8007328 <TIM_OC4_SetConfig+0x118>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d10d      	bne.n	80072a0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800728a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	031b      	lsls	r3, r3, #12
 8007292:	697a      	ldr	r2, [r7, #20]
 8007294:	4313      	orrs	r3, r2
 8007296:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800729e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4a1f      	ldr	r2, [pc, #124]	@ (8007320 <TIM_OC4_SetConfig+0x110>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d013      	beq.n	80072d0 <TIM_OC4_SetConfig+0xc0>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a1e      	ldr	r2, [pc, #120]	@ (8007324 <TIM_OC4_SetConfig+0x114>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d00f      	beq.n	80072d0 <TIM_OC4_SetConfig+0xc0>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a1e      	ldr	r2, [pc, #120]	@ (800732c <TIM_OC4_SetConfig+0x11c>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d00b      	beq.n	80072d0 <TIM_OC4_SetConfig+0xc0>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a1d      	ldr	r2, [pc, #116]	@ (8007330 <TIM_OC4_SetConfig+0x120>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d007      	beq.n	80072d0 <TIM_OC4_SetConfig+0xc0>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4a1c      	ldr	r2, [pc, #112]	@ (8007334 <TIM_OC4_SetConfig+0x124>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d003      	beq.n	80072d0 <TIM_OC4_SetConfig+0xc0>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a17      	ldr	r2, [pc, #92]	@ (8007328 <TIM_OC4_SetConfig+0x118>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d113      	bne.n	80072f8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80072d6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80072de:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	695b      	ldr	r3, [r3, #20]
 80072e4:	019b      	lsls	r3, r3, #6
 80072e6:	693a      	ldr	r2, [r7, #16]
 80072e8:	4313      	orrs	r3, r2
 80072ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	699b      	ldr	r3, [r3, #24]
 80072f0:	019b      	lsls	r3, r3, #6
 80072f2:	693a      	ldr	r2, [r7, #16]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	693a      	ldr	r2, [r7, #16]
 80072fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	68fa      	ldr	r2, [r7, #12]
 8007302:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	685a      	ldr	r2, [r3, #4]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	697a      	ldr	r2, [r7, #20]
 8007310:	621a      	str	r2, [r3, #32]
}
 8007312:	bf00      	nop
 8007314:	371c      	adds	r7, #28
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop
 8007320:	40012c00 	.word	0x40012c00
 8007324:	40013400 	.word	0x40013400
 8007328:	40015000 	.word	0x40015000
 800732c:	40014000 	.word	0x40014000
 8007330:	40014400 	.word	0x40014400
 8007334:	40014800 	.word	0x40014800

08007338 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007338:	b480      	push	{r7}
 800733a:	b087      	sub	sp, #28
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a1b      	ldr	r3, [r3, #32]
 8007346:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a1b      	ldr	r3, [r3, #32]
 8007352:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800735e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007366:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800736a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	68fa      	ldr	r2, [r7, #12]
 8007372:	4313      	orrs	r3, r2
 8007374:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800737c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	041b      	lsls	r3, r3, #16
 8007384:	693a      	ldr	r2, [r7, #16]
 8007386:	4313      	orrs	r3, r2
 8007388:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4a19      	ldr	r2, [pc, #100]	@ (80073f4 <TIM_OC5_SetConfig+0xbc>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d013      	beq.n	80073ba <TIM_OC5_SetConfig+0x82>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4a18      	ldr	r2, [pc, #96]	@ (80073f8 <TIM_OC5_SetConfig+0xc0>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d00f      	beq.n	80073ba <TIM_OC5_SetConfig+0x82>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4a17      	ldr	r2, [pc, #92]	@ (80073fc <TIM_OC5_SetConfig+0xc4>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d00b      	beq.n	80073ba <TIM_OC5_SetConfig+0x82>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	4a16      	ldr	r2, [pc, #88]	@ (8007400 <TIM_OC5_SetConfig+0xc8>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d007      	beq.n	80073ba <TIM_OC5_SetConfig+0x82>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4a15      	ldr	r2, [pc, #84]	@ (8007404 <TIM_OC5_SetConfig+0xcc>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d003      	beq.n	80073ba <TIM_OC5_SetConfig+0x82>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4a14      	ldr	r2, [pc, #80]	@ (8007408 <TIM_OC5_SetConfig+0xd0>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d109      	bne.n	80073ce <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	695b      	ldr	r3, [r3, #20]
 80073c6:	021b      	lsls	r3, r3, #8
 80073c8:	697a      	ldr	r2, [r7, #20]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	697a      	ldr	r2, [r7, #20]
 80073d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	68fa      	ldr	r2, [r7, #12]
 80073d8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	685a      	ldr	r2, [r3, #4]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	693a      	ldr	r2, [r7, #16]
 80073e6:	621a      	str	r2, [r3, #32]
}
 80073e8:	bf00      	nop
 80073ea:	371c      	adds	r7, #28
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr
 80073f4:	40012c00 	.word	0x40012c00
 80073f8:	40013400 	.word	0x40013400
 80073fc:	40014000 	.word	0x40014000
 8007400:	40014400 	.word	0x40014400
 8007404:	40014800 	.word	0x40014800
 8007408:	40015000 	.word	0x40015000

0800740c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800740c:	b480      	push	{r7}
 800740e:	b087      	sub	sp, #28
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a1b      	ldr	r3, [r3, #32]
 800741a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a1b      	ldr	r3, [r3, #32]
 8007426:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800743a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800743e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	021b      	lsls	r3, r3, #8
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	4313      	orrs	r3, r2
 800744a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007452:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	051b      	lsls	r3, r3, #20
 800745a:	693a      	ldr	r2, [r7, #16]
 800745c:	4313      	orrs	r3, r2
 800745e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4a1a      	ldr	r2, [pc, #104]	@ (80074cc <TIM_OC6_SetConfig+0xc0>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d013      	beq.n	8007490 <TIM_OC6_SetConfig+0x84>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	4a19      	ldr	r2, [pc, #100]	@ (80074d0 <TIM_OC6_SetConfig+0xc4>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d00f      	beq.n	8007490 <TIM_OC6_SetConfig+0x84>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	4a18      	ldr	r2, [pc, #96]	@ (80074d4 <TIM_OC6_SetConfig+0xc8>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d00b      	beq.n	8007490 <TIM_OC6_SetConfig+0x84>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4a17      	ldr	r2, [pc, #92]	@ (80074d8 <TIM_OC6_SetConfig+0xcc>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d007      	beq.n	8007490 <TIM_OC6_SetConfig+0x84>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	4a16      	ldr	r2, [pc, #88]	@ (80074dc <TIM_OC6_SetConfig+0xd0>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d003      	beq.n	8007490 <TIM_OC6_SetConfig+0x84>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a15      	ldr	r2, [pc, #84]	@ (80074e0 <TIM_OC6_SetConfig+0xd4>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d109      	bne.n	80074a4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007496:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	695b      	ldr	r3, [r3, #20]
 800749c:	029b      	lsls	r3, r3, #10
 800749e:	697a      	ldr	r2, [r7, #20]
 80074a0:	4313      	orrs	r3, r2
 80074a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	697a      	ldr	r2, [r7, #20]
 80074a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	68fa      	ldr	r2, [r7, #12]
 80074ae:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	685a      	ldr	r2, [r3, #4]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	693a      	ldr	r2, [r7, #16]
 80074bc:	621a      	str	r2, [r3, #32]
}
 80074be:	bf00      	nop
 80074c0:	371c      	adds	r7, #28
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr
 80074ca:	bf00      	nop
 80074cc:	40012c00 	.word	0x40012c00
 80074d0:	40013400 	.word	0x40013400
 80074d4:	40014000 	.word	0x40014000
 80074d8:	40014400 	.word	0x40014400
 80074dc:	40014800 	.word	0x40014800
 80074e0:	40015000 	.word	0x40015000

080074e4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b087      	sub	sp, #28
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	607a      	str	r2, [r7, #4]
 80074f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	6a1b      	ldr	r3, [r3, #32]
 80074f6:	f023 0201 	bic.w	r2, r3, #1
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	699b      	ldr	r3, [r3, #24]
 8007502:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6a1b      	ldr	r3, [r3, #32]
 8007508:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	4a28      	ldr	r2, [pc, #160]	@ (80075b0 <TIM_TI1_SetConfig+0xcc>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d01b      	beq.n	800754a <TIM_TI1_SetConfig+0x66>
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007518:	d017      	beq.n	800754a <TIM_TI1_SetConfig+0x66>
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	4a25      	ldr	r2, [pc, #148]	@ (80075b4 <TIM_TI1_SetConfig+0xd0>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d013      	beq.n	800754a <TIM_TI1_SetConfig+0x66>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	4a24      	ldr	r2, [pc, #144]	@ (80075b8 <TIM_TI1_SetConfig+0xd4>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d00f      	beq.n	800754a <TIM_TI1_SetConfig+0x66>
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	4a23      	ldr	r2, [pc, #140]	@ (80075bc <TIM_TI1_SetConfig+0xd8>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d00b      	beq.n	800754a <TIM_TI1_SetConfig+0x66>
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	4a22      	ldr	r2, [pc, #136]	@ (80075c0 <TIM_TI1_SetConfig+0xdc>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d007      	beq.n	800754a <TIM_TI1_SetConfig+0x66>
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	4a21      	ldr	r2, [pc, #132]	@ (80075c4 <TIM_TI1_SetConfig+0xe0>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d003      	beq.n	800754a <TIM_TI1_SetConfig+0x66>
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	4a20      	ldr	r2, [pc, #128]	@ (80075c8 <TIM_TI1_SetConfig+0xe4>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d101      	bne.n	800754e <TIM_TI1_SetConfig+0x6a>
 800754a:	2301      	movs	r3, #1
 800754c:	e000      	b.n	8007550 <TIM_TI1_SetConfig+0x6c>
 800754e:	2300      	movs	r3, #0
 8007550:	2b00      	cmp	r3, #0
 8007552:	d008      	beq.n	8007566 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	f023 0303 	bic.w	r3, r3, #3
 800755a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800755c:	697a      	ldr	r2, [r7, #20]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4313      	orrs	r3, r2
 8007562:	617b      	str	r3, [r7, #20]
 8007564:	e003      	b.n	800756e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	f043 0301 	orr.w	r3, r3, #1
 800756c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007574:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	011b      	lsls	r3, r3, #4
 800757a:	b2db      	uxtb	r3, r3
 800757c:	697a      	ldr	r2, [r7, #20]
 800757e:	4313      	orrs	r3, r2
 8007580:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	f023 030a 	bic.w	r3, r3, #10
 8007588:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	f003 030a 	and.w	r3, r3, #10
 8007590:	693a      	ldr	r2, [r7, #16]
 8007592:	4313      	orrs	r3, r2
 8007594:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	697a      	ldr	r2, [r7, #20]
 800759a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	693a      	ldr	r2, [r7, #16]
 80075a0:	621a      	str	r2, [r3, #32]
}
 80075a2:	bf00      	nop
 80075a4:	371c      	adds	r7, #28
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	40012c00 	.word	0x40012c00
 80075b4:	40000400 	.word	0x40000400
 80075b8:	40000800 	.word	0x40000800
 80075bc:	40000c00 	.word	0x40000c00
 80075c0:	40013400 	.word	0x40013400
 80075c4:	40014000 	.word	0x40014000
 80075c8:	40015000 	.word	0x40015000

080075cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b087      	sub	sp, #28
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	f003 031f 	and.w	r3, r3, #31
 80075de:	2201      	movs	r2, #1
 80075e0:	fa02 f303 	lsl.w	r3, r2, r3
 80075e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6a1a      	ldr	r2, [r3, #32]
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	43db      	mvns	r3, r3
 80075ee:	401a      	ands	r2, r3
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6a1a      	ldr	r2, [r3, #32]
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	f003 031f 	and.w	r3, r3, #31
 80075fe:	6879      	ldr	r1, [r7, #4]
 8007600:	fa01 f303 	lsl.w	r3, r1, r3
 8007604:	431a      	orrs	r2, r3
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	621a      	str	r2, [r3, #32]
}
 800760a:	bf00      	nop
 800760c:	371c      	adds	r7, #28
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr

08007616 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 8007616:	b580      	push	{r7, lr}
 8007618:	b08a      	sub	sp, #40	@ 0x28
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
 800761e:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d101      	bne.n	800762a <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	e0a0      	b.n	800776c <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007630:	b2db      	uxtb	r3, r3
 8007632:	2b00      	cmp	r3, #0
 8007634:	d106      	bne.n	8007644 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f7fa fb9e 	bl	8001d80 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2202      	movs	r2, #2
 8007648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	3304      	adds	r3, #4
 8007654:	4619      	mov	r1, r3
 8007656:	4610      	mov	r0, r2
 8007658:	f7ff fb72 	bl	8006d40 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6818      	ldr	r0, [r3, #0]
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	6819      	ldr	r1, [r3, #0]
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	2203      	movs	r2, #3
 800766a:	f7ff ff3b 	bl	80074e4 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	699a      	ldr	r2, [r3, #24]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f022 020c 	bic.w	r2, r2, #12
 800767c:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	6999      	ldr	r1, [r3, #24]
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	685a      	ldr	r2, [r3, #4]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	430a      	orrs	r2, r1
 800768e:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	685a      	ldr	r2, [r3, #4]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800769e:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	6812      	ldr	r2, [r2, #0]
 80076aa:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80076ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076b2:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	689a      	ldr	r2, [r3, #8]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80076c2:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	6812      	ldr	r2, [r2, #0]
 80076ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80076d2:	f023 0307 	bic.w	r3, r3, #7
 80076d6:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	689a      	ldr	r2, [r3, #8]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f042 0204 	orr.w	r2, r2, #4
 80076e6:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 80076e8:	2300      	movs	r3, #0
 80076ea:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 80076ec:	2300      	movs	r3, #0
 80076ee:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 80076f0:	2370      	movs	r3, #112	@ 0x70
 80076f2:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80076f4:	2300      	movs	r3, #0
 80076f6:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80076f8:	2300      	movs	r3, #0
 80076fa:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80076fc:	2300      	movs	r3, #0
 80076fe:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f107 020c 	add.w	r2, r7, #12
 800770e:	4611      	mov	r1, r2
 8007710:	4618      	mov	r0, r3
 8007712:	f7ff fc57 	bl	8006fc4 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	6812      	ldr	r2, [r2, #0]
 8007720:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007724:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007728:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	685a      	ldr	r2, [r3, #4]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8007738:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2201      	movs	r2, #1
 800773e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2201      	movs	r2, #1
 8007746:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2201      	movs	r2, #1
 800774e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2201      	movs	r2, #1
 8007756:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2201      	movs	r2, #1
 800775e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2201      	movs	r2, #1
 8007766:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800776a:	2300      	movs	r3, #0
}
 800776c:	4618      	mov	r0, r3
 800776e:	3728      	adds	r7, #40	@ 0x28
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d109      	bne.n	8007798 <HAL_TIMEx_PWMN_Start+0x24>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800778a:	b2db      	uxtb	r3, r3
 800778c:	2b01      	cmp	r3, #1
 800778e:	bf14      	ite	ne
 8007790:	2301      	movne	r3, #1
 8007792:	2300      	moveq	r3, #0
 8007794:	b2db      	uxtb	r3, r3
 8007796:	e022      	b.n	80077de <HAL_TIMEx_PWMN_Start+0x6a>
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	2b04      	cmp	r3, #4
 800779c:	d109      	bne.n	80077b2 <HAL_TIMEx_PWMN_Start+0x3e>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	bf14      	ite	ne
 80077aa:	2301      	movne	r3, #1
 80077ac:	2300      	moveq	r3, #0
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	e015      	b.n	80077de <HAL_TIMEx_PWMN_Start+0x6a>
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	2b08      	cmp	r3, #8
 80077b6:	d109      	bne.n	80077cc <HAL_TIMEx_PWMN_Start+0x58>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	bf14      	ite	ne
 80077c4:	2301      	movne	r3, #1
 80077c6:	2300      	moveq	r3, #0
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	e008      	b.n	80077de <HAL_TIMEx_PWMN_Start+0x6a>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	bf14      	ite	ne
 80077d8:	2301      	movne	r3, #1
 80077da:	2300      	moveq	r3, #0
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d001      	beq.n	80077e6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e073      	b.n	80078ce <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d104      	bne.n	80077f6 <HAL_TIMEx_PWMN_Start+0x82>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2202      	movs	r2, #2
 80077f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077f4:	e013      	b.n	800781e <HAL_TIMEx_PWMN_Start+0xaa>
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	2b04      	cmp	r3, #4
 80077fa:	d104      	bne.n	8007806 <HAL_TIMEx_PWMN_Start+0x92>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2202      	movs	r2, #2
 8007800:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007804:	e00b      	b.n	800781e <HAL_TIMEx_PWMN_Start+0xaa>
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	2b08      	cmp	r3, #8
 800780a:	d104      	bne.n	8007816 <HAL_TIMEx_PWMN_Start+0xa2>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2202      	movs	r2, #2
 8007810:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007814:	e003      	b.n	800781e <HAL_TIMEx_PWMN_Start+0xaa>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2202      	movs	r2, #2
 800781a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2204      	movs	r2, #4
 8007824:	6839      	ldr	r1, [r7, #0]
 8007826:	4618      	mov	r0, r3
 8007828:	f000 fa52 	bl	8007cd0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800783a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a25      	ldr	r2, [pc, #148]	@ (80078d8 <HAL_TIMEx_PWMN_Start+0x164>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d022      	beq.n	800788c <HAL_TIMEx_PWMN_Start+0x118>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800784e:	d01d      	beq.n	800788c <HAL_TIMEx_PWMN_Start+0x118>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a21      	ldr	r2, [pc, #132]	@ (80078dc <HAL_TIMEx_PWMN_Start+0x168>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d018      	beq.n	800788c <HAL_TIMEx_PWMN_Start+0x118>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a20      	ldr	r2, [pc, #128]	@ (80078e0 <HAL_TIMEx_PWMN_Start+0x16c>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d013      	beq.n	800788c <HAL_TIMEx_PWMN_Start+0x118>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a1e      	ldr	r2, [pc, #120]	@ (80078e4 <HAL_TIMEx_PWMN_Start+0x170>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d00e      	beq.n	800788c <HAL_TIMEx_PWMN_Start+0x118>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a1d      	ldr	r2, [pc, #116]	@ (80078e8 <HAL_TIMEx_PWMN_Start+0x174>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d009      	beq.n	800788c <HAL_TIMEx_PWMN_Start+0x118>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a1b      	ldr	r2, [pc, #108]	@ (80078ec <HAL_TIMEx_PWMN_Start+0x178>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d004      	beq.n	800788c <HAL_TIMEx_PWMN_Start+0x118>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a1a      	ldr	r2, [pc, #104]	@ (80078f0 <HAL_TIMEx_PWMN_Start+0x17c>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d115      	bne.n	80078b8 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	689a      	ldr	r2, [r3, #8]
 8007892:	4b18      	ldr	r3, [pc, #96]	@ (80078f4 <HAL_TIMEx_PWMN_Start+0x180>)
 8007894:	4013      	ands	r3, r2
 8007896:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2b06      	cmp	r3, #6
 800789c:	d015      	beq.n	80078ca <HAL_TIMEx_PWMN_Start+0x156>
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078a4:	d011      	beq.n	80078ca <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f042 0201 	orr.w	r2, r2, #1
 80078b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078b6:	e008      	b.n	80078ca <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f042 0201 	orr.w	r2, r2, #1
 80078c6:	601a      	str	r2, [r3, #0]
 80078c8:	e000      	b.n	80078cc <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	40012c00 	.word	0x40012c00
 80078dc:	40000400 	.word	0x40000400
 80078e0:	40000800 	.word	0x40000800
 80078e4:	40000c00 	.word	0x40000c00
 80078e8:	40013400 	.word	0x40013400
 80078ec:	40014000 	.word	0x40014000
 80078f0:	40015000 	.word	0x40015000
 80078f4:	00010007 	.word	0x00010007

080078f8 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2200      	movs	r2, #0
 8007908:	6839      	ldr	r1, [r7, #0]
 800790a:	4618      	mov	r0, r3
 800790c:	f000 f9e0 	bl	8007cd0 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	6a1a      	ldr	r2, [r3, #32]
 8007916:	f241 1311 	movw	r3, #4369	@ 0x1111
 800791a:	4013      	ands	r3, r2
 800791c:	2b00      	cmp	r3, #0
 800791e:	d10f      	bne.n	8007940 <HAL_TIMEx_PWMN_Stop+0x48>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	6a1a      	ldr	r2, [r3, #32]
 8007926:	f244 4344 	movw	r3, #17476	@ 0x4444
 800792a:	4013      	ands	r3, r2
 800792c:	2b00      	cmp	r3, #0
 800792e:	d107      	bne.n	8007940 <HAL_TIMEx_PWMN_Stop+0x48>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800793e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	6a1a      	ldr	r2, [r3, #32]
 8007946:	f241 1311 	movw	r3, #4369	@ 0x1111
 800794a:	4013      	ands	r3, r2
 800794c:	2b00      	cmp	r3, #0
 800794e:	d10f      	bne.n	8007970 <HAL_TIMEx_PWMN_Stop+0x78>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	6a1a      	ldr	r2, [r3, #32]
 8007956:	f244 4344 	movw	r3, #17476	@ 0x4444
 800795a:	4013      	ands	r3, r2
 800795c:	2b00      	cmp	r3, #0
 800795e:	d107      	bne.n	8007970 <HAL_TIMEx_PWMN_Stop+0x78>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f022 0201 	bic.w	r2, r2, #1
 800796e:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d104      	bne.n	8007980 <HAL_TIMEx_PWMN_Stop+0x88>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2201      	movs	r2, #1
 800797a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800797e:	e013      	b.n	80079a8 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	2b04      	cmp	r3, #4
 8007984:	d104      	bne.n	8007990 <HAL_TIMEx_PWMN_Stop+0x98>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2201      	movs	r2, #1
 800798a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800798e:	e00b      	b.n	80079a8 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	2b08      	cmp	r3, #8
 8007994:	d104      	bne.n	80079a0 <HAL_TIMEx_PWMN_Stop+0xa8>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2201      	movs	r2, #1
 800799a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800799e:	e003      	b.n	80079a8 <HAL_TIMEx_PWMN_Stop+0xb0>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
	...

080079b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b085      	sub	sp, #20
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d101      	bne.n	80079cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80079c8:	2302      	movs	r3, #2
 80079ca:	e074      	b.n	8007ab6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2202      	movs	r2, #2
 80079d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a34      	ldr	r2, [pc, #208]	@ (8007ac4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d009      	beq.n	8007a0a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a33      	ldr	r2, [pc, #204]	@ (8007ac8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d004      	beq.n	8007a0a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a31      	ldr	r2, [pc, #196]	@ (8007acc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d108      	bne.n	8007a1c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007a10:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	68fa      	ldr	r2, [r7, #12]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007a22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	68fa      	ldr	r2, [r7, #12]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68fa      	ldr	r2, [r7, #12]
 8007a38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a21      	ldr	r2, [pc, #132]	@ (8007ac4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d022      	beq.n	8007a8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a4c:	d01d      	beq.n	8007a8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a1f      	ldr	r2, [pc, #124]	@ (8007ad0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d018      	beq.n	8007a8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a1d      	ldr	r2, [pc, #116]	@ (8007ad4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d013      	beq.n	8007a8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a1c      	ldr	r2, [pc, #112]	@ (8007ad8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d00e      	beq.n	8007a8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a15      	ldr	r2, [pc, #84]	@ (8007ac8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d009      	beq.n	8007a8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a18      	ldr	r2, [pc, #96]	@ (8007adc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d004      	beq.n	8007a8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a11      	ldr	r2, [pc, #68]	@ (8007acc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d10c      	bne.n	8007aa4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	68ba      	ldr	r2, [r7, #8]
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	68ba      	ldr	r2, [r7, #8]
 8007aa2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3714      	adds	r7, #20
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	40012c00 	.word	0x40012c00
 8007ac8:	40013400 	.word	0x40013400
 8007acc:	40015000 	.word	0x40015000
 8007ad0:	40000400 	.word	0x40000400
 8007ad4:	40000800 	.word	0x40000800
 8007ad8:	40000c00 	.word	0x40000c00
 8007adc:	40014000 	.word	0x40014000

08007ae0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b085      	sub	sp, #20
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007aea:	2300      	movs	r3, #0
 8007aec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d101      	bne.n	8007afc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007af8:	2302      	movs	r3, #2
 8007afa:	e096      	b.n	8007c2a <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	691b      	ldr	r3, [r3, #16]
 8007b46:	4313      	orrs	r3, r2
 8007b48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	695b      	ldr	r3, [r3, #20]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b62:	4313      	orrs	r3, r2
 8007b64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	699b      	ldr	r3, [r3, #24]
 8007b70:	041b      	lsls	r3, r3, #16
 8007b72:	4313      	orrs	r3, r2
 8007b74:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a2f      	ldr	r2, [pc, #188]	@ (8007c38 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d009      	beq.n	8007b94 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a2d      	ldr	r2, [pc, #180]	@ (8007c3c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d004      	beq.n	8007b94 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a2c      	ldr	r2, [pc, #176]	@ (8007c40 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d106      	bne.n	8007ba2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	69db      	ldr	r3, [r3, #28]
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a24      	ldr	r2, [pc, #144]	@ (8007c38 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d009      	beq.n	8007bc0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a22      	ldr	r2, [pc, #136]	@ (8007c3c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d004      	beq.n	8007bc0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a21      	ldr	r2, [pc, #132]	@ (8007c40 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d12b      	bne.n	8007c18 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bca:	051b      	lsls	r3, r3, #20
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	6a1b      	ldr	r3, [r3, #32]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007be8:	4313      	orrs	r3, r2
 8007bea:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a11      	ldr	r2, [pc, #68]	@ (8007c38 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d009      	beq.n	8007c0a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a10      	ldr	r2, [pc, #64]	@ (8007c3c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d004      	beq.n	8007c0a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a0e      	ldr	r2, [pc, #56]	@ (8007c40 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d106      	bne.n	8007c18 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c14:	4313      	orrs	r3, r2
 8007c16:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3714      	adds	r7, #20
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr
 8007c36:	bf00      	nop
 8007c38:	40012c00 	.word	0x40012c00
 8007c3c:	40013400 	.word	0x40013400
 8007c40:	40015000 	.word	0x40015000

08007c44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c4c:	bf00      	nop
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c60:	bf00      	nop
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007c74:	bf00      	nop
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007c88:	bf00      	nop
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007c9c:	bf00      	nop
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007cb0:	bf00      	nop
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007cc4:	bf00      	nop
 8007cc6:	370c      	adds	r7, #12
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b087      	sub	sp, #28
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	f003 031f 	and.w	r3, r3, #31
 8007ce2:	2204      	movs	r2, #4
 8007ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ce8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6a1a      	ldr	r2, [r3, #32]
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	43db      	mvns	r3, r3
 8007cf2:	401a      	ands	r2, r3
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6a1a      	ldr	r2, [r3, #32]
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	f003 031f 	and.w	r3, r3, #31
 8007d02:	6879      	ldr	r1, [r7, #4]
 8007d04:	fa01 f303 	lsl.w	r3, r1, r3
 8007d08:	431a      	orrs	r2, r3
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	621a      	str	r2, [r3, #32]
}
 8007d0e:	bf00      	nop
 8007d10:	371c      	adds	r7, #28
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr

08007d1a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b082      	sub	sp, #8
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d101      	bne.n	8007d2c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	e042      	b.n	8007db2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d106      	bne.n	8007d44 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f7fa f980 	bl	8002044 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2224      	movs	r2, #36	@ 0x24
 8007d48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f022 0201 	bic.w	r2, r2, #1
 8007d5a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 fc51 	bl	8008604 <UART_SetConfig>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d101      	bne.n	8007d6c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e022      	b.n	8007db2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d002      	beq.n	8007d7a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 ff41 	bl	8008bfc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	685a      	ldr	r2, [r3, #4]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007d88:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	689a      	ldr	r2, [r3, #8]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007d98:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f042 0201 	orr.w	r2, r2, #1
 8007da8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 ffc8 	bl	8008d40 <UART_CheckIdleState>
 8007db0:	4603      	mov	r3, r0
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3708      	adds	r7, #8
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}

08007dba <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b08a      	sub	sp, #40	@ 0x28
 8007dbe:	af02      	add	r7, sp, #8
 8007dc0:	60f8      	str	r0, [r7, #12]
 8007dc2:	60b9      	str	r1, [r7, #8]
 8007dc4:	603b      	str	r3, [r7, #0]
 8007dc6:	4613      	mov	r3, r2
 8007dc8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007dd0:	2b20      	cmp	r3, #32
 8007dd2:	f040 8083 	bne.w	8007edc <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d002      	beq.n	8007de2 <HAL_UART_Transmit+0x28>
 8007ddc:	88fb      	ldrh	r3, [r7, #6]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d101      	bne.n	8007de6 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	e07b      	b.n	8007ede <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d101      	bne.n	8007df4 <HAL_UART_Transmit+0x3a>
 8007df0:	2302      	movs	r3, #2
 8007df2:	e074      	b.n	8007ede <HAL_UART_Transmit+0x124>
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2221      	movs	r2, #33	@ 0x21
 8007e08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e0c:	f7fa fcb6 	bl	800277c <HAL_GetTick>
 8007e10:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	88fa      	ldrh	r2, [r7, #6]
 8007e16:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	88fa      	ldrh	r2, [r7, #6]
 8007e1e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e2a:	d108      	bne.n	8007e3e <HAL_UART_Transmit+0x84>
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	691b      	ldr	r3, [r3, #16]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d104      	bne.n	8007e3e <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007e34:	2300      	movs	r3, #0
 8007e36:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	61bb      	str	r3, [r7, #24]
 8007e3c:	e003      	b.n	8007e46 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e42:	2300      	movs	r3, #0
 8007e44:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    while (huart->TxXferCount > 0U)
 8007e4e:	e02c      	b.n	8007eaa <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	9300      	str	r3, [sp, #0]
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	2200      	movs	r2, #0
 8007e58:	2180      	movs	r1, #128	@ 0x80
 8007e5a:	68f8      	ldr	r0, [r7, #12]
 8007e5c:	f000 ffbb 	bl	8008dd6 <UART_WaitOnFlagUntilTimeout>
 8007e60:	4603      	mov	r3, r0
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d001      	beq.n	8007e6a <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007e66:	2303      	movs	r3, #3
 8007e68:	e039      	b.n	8007ede <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007e6a:	69fb      	ldr	r3, [r7, #28]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d10b      	bne.n	8007e88 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e70:	69bb      	ldr	r3, [r7, #24]
 8007e72:	881b      	ldrh	r3, [r3, #0]
 8007e74:	461a      	mov	r2, r3
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e7e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007e80:	69bb      	ldr	r3, [r7, #24]
 8007e82:	3302      	adds	r3, #2
 8007e84:	61bb      	str	r3, [r7, #24]
 8007e86:	e007      	b.n	8007e98 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	781a      	ldrb	r2, [r3, #0]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007e92:	69fb      	ldr	r3, [r7, #28]
 8007e94:	3301      	adds	r3, #1
 8007e96:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	b29a      	uxth	r2, r3
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d1cc      	bne.n	8007e50 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	9300      	str	r3, [sp, #0]
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	2140      	movs	r1, #64	@ 0x40
 8007ec0:	68f8      	ldr	r0, [r7, #12]
 8007ec2:	f000 ff88 	bl	8008dd6 <UART_WaitOnFlagUntilTimeout>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d001      	beq.n	8007ed0 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007ecc:	2303      	movs	r3, #3
 8007ece:	e006      	b.n	8007ede <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2220      	movs	r2, #32
 8007ed4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	e000      	b.n	8007ede <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007edc:	2302      	movs	r3, #2
  }
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3720      	adds	r7, #32
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
	...

08007ee8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b08a      	sub	sp, #40	@ 0x28
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	60b9      	str	r1, [r7, #8]
 8007ef2:	4613      	mov	r3, r2
 8007ef4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007efc:	2b20      	cmp	r3, #32
 8007efe:	d142      	bne.n	8007f86 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d002      	beq.n	8007f0c <HAL_UART_Receive_IT+0x24>
 8007f06:	88fb      	ldrh	r3, [r7, #6]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d101      	bne.n	8007f10 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e03b      	b.n	8007f88 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d101      	bne.n	8007f1e <HAL_UART_Receive_IT+0x36>
 8007f1a:	2302      	movs	r3, #2
 8007f1c:	e034      	b.n	8007f88 <HAL_UART_Receive_IT+0xa0>
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2201      	movs	r2, #1
 8007f22:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a17      	ldr	r2, [pc, #92]	@ (8007f90 <HAL_UART_Receive_IT+0xa8>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d01f      	beq.n	8007f76 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d018      	beq.n	8007f76 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	e853 3f00 	ldrex	r3, [r3]
 8007f50:	613b      	str	r3, [r7, #16]
   return(result);
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007f58:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	461a      	mov	r2, r3
 8007f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f62:	623b      	str	r3, [r7, #32]
 8007f64:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f66:	69f9      	ldr	r1, [r7, #28]
 8007f68:	6a3a      	ldr	r2, [r7, #32]
 8007f6a:	e841 2300 	strex	r3, r2, [r1]
 8007f6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f70:	69bb      	ldr	r3, [r7, #24]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d1e6      	bne.n	8007f44 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007f76:	88fb      	ldrh	r3, [r7, #6]
 8007f78:	461a      	mov	r2, r3
 8007f7a:	68b9      	ldr	r1, [r7, #8]
 8007f7c:	68f8      	ldr	r0, [r7, #12]
 8007f7e:	f000 fff3 	bl	8008f68 <UART_Start_Receive_IT>
 8007f82:	4603      	mov	r3, r0
 8007f84:	e000      	b.n	8007f88 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007f86:	2302      	movs	r3, #2
  }
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3728      	adds	r7, #40	@ 0x28
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	40008000 	.word	0x40008000

08007f94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b0ba      	sub	sp, #232	@ 0xe8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	69db      	ldr	r3, [r3, #28]
 8007fa2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007fba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007fbe:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007fc2:	4013      	ands	r3, r2
 8007fc4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007fc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d11b      	bne.n	8008008 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fd4:	f003 0320 	and.w	r3, r3, #32
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d015      	beq.n	8008008 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fe0:	f003 0320 	and.w	r3, r3, #32
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d105      	bne.n	8007ff4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007fe8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007fec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d009      	beq.n	8008008 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	f000 82d6 	beq.w	80085aa <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	4798      	blx	r3
      }
      return;
 8008006:	e2d0      	b.n	80085aa <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008008:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800800c:	2b00      	cmp	r3, #0
 800800e:	f000 811f 	beq.w	8008250 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008012:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008016:	4b8b      	ldr	r3, [pc, #556]	@ (8008244 <HAL_UART_IRQHandler+0x2b0>)
 8008018:	4013      	ands	r3, r2
 800801a:	2b00      	cmp	r3, #0
 800801c:	d106      	bne.n	800802c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800801e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008022:	4b89      	ldr	r3, [pc, #548]	@ (8008248 <HAL_UART_IRQHandler+0x2b4>)
 8008024:	4013      	ands	r3, r2
 8008026:	2b00      	cmp	r3, #0
 8008028:	f000 8112 	beq.w	8008250 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800802c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008030:	f003 0301 	and.w	r3, r3, #1
 8008034:	2b00      	cmp	r3, #0
 8008036:	d011      	beq.n	800805c <HAL_UART_IRQHandler+0xc8>
 8008038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800803c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008040:	2b00      	cmp	r3, #0
 8008042:	d00b      	beq.n	800805c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2201      	movs	r2, #1
 800804a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008052:	f043 0201 	orr.w	r2, r3, #1
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800805c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008060:	f003 0302 	and.w	r3, r3, #2
 8008064:	2b00      	cmp	r3, #0
 8008066:	d011      	beq.n	800808c <HAL_UART_IRQHandler+0xf8>
 8008068:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800806c:	f003 0301 	and.w	r3, r3, #1
 8008070:	2b00      	cmp	r3, #0
 8008072:	d00b      	beq.n	800808c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2202      	movs	r2, #2
 800807a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008082:	f043 0204 	orr.w	r2, r3, #4
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800808c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008090:	f003 0304 	and.w	r3, r3, #4
 8008094:	2b00      	cmp	r3, #0
 8008096:	d011      	beq.n	80080bc <HAL_UART_IRQHandler+0x128>
 8008098:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800809c:	f003 0301 	and.w	r3, r3, #1
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d00b      	beq.n	80080bc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2204      	movs	r2, #4
 80080aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80080b2:	f043 0202 	orr.w	r2, r3, #2
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80080bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080c0:	f003 0308 	and.w	r3, r3, #8
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d017      	beq.n	80080f8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80080c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080cc:	f003 0320 	and.w	r3, r3, #32
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d105      	bne.n	80080e0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80080d4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80080d8:	4b5a      	ldr	r3, [pc, #360]	@ (8008244 <HAL_UART_IRQHandler+0x2b0>)
 80080da:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d00b      	beq.n	80080f8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2208      	movs	r2, #8
 80080e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80080ee:	f043 0208 	orr.w	r2, r3, #8
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80080f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008100:	2b00      	cmp	r3, #0
 8008102:	d012      	beq.n	800812a <HAL_UART_IRQHandler+0x196>
 8008104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008108:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800810c:	2b00      	cmp	r3, #0
 800810e:	d00c      	beq.n	800812a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008118:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008120:	f043 0220 	orr.w	r2, r3, #32
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008130:	2b00      	cmp	r3, #0
 8008132:	f000 823c 	beq.w	80085ae <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800813a:	f003 0320 	and.w	r3, r3, #32
 800813e:	2b00      	cmp	r3, #0
 8008140:	d013      	beq.n	800816a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008142:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008146:	f003 0320 	and.w	r3, r3, #32
 800814a:	2b00      	cmp	r3, #0
 800814c:	d105      	bne.n	800815a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800814e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008156:	2b00      	cmp	r3, #0
 8008158:	d007      	beq.n	800816a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800815e:	2b00      	cmp	r3, #0
 8008160:	d003      	beq.n	800816a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008170:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800817e:	2b40      	cmp	r3, #64	@ 0x40
 8008180:	d005      	beq.n	800818e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008182:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008186:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800818a:	2b00      	cmp	r3, #0
 800818c:	d04f      	beq.n	800822e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f001 f814 	bl	80091bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800819e:	2b40      	cmp	r3, #64	@ 0x40
 80081a0:	d141      	bne.n	8008226 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	3308      	adds	r3, #8
 80081a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80081b0:	e853 3f00 	ldrex	r3, [r3]
 80081b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80081b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80081bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	3308      	adds	r3, #8
 80081ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80081ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80081d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80081da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80081de:	e841 2300 	strex	r3, r2, [r1]
 80081e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80081e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d1d9      	bne.n	80081a2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d013      	beq.n	800821e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80081fa:	4a14      	ldr	r2, [pc, #80]	@ (800824c <HAL_UART_IRQHandler+0x2b8>)
 80081fc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008202:	4618      	mov	r0, r3
 8008204:	f7fc fc24 	bl	8004a50 <HAL_DMA_Abort_IT>
 8008208:	4603      	mov	r3, r0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d017      	beq.n	800823e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8008218:	4610      	mov	r0, r2
 800821a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800821c:	e00f      	b.n	800823e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 f9da 	bl	80085d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008224:	e00b      	b.n	800823e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 f9d6 	bl	80085d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800822c:	e007      	b.n	800823e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 f9d2 	bl	80085d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      }
    }
    return;
 800823c:	e1b7      	b.n	80085ae <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800823e:	bf00      	nop
    return;
 8008240:	e1b5      	b.n	80085ae <HAL_UART_IRQHandler+0x61a>
 8008242:	bf00      	nop
 8008244:	10000001 	.word	0x10000001
 8008248:	04000120 	.word	0x04000120
 800824c:	08009289 	.word	0x08009289

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008254:	2b01      	cmp	r3, #1
 8008256:	f040 814a 	bne.w	80084ee <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800825a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800825e:	f003 0310 	and.w	r3, r3, #16
 8008262:	2b00      	cmp	r3, #0
 8008264:	f000 8143 	beq.w	80084ee <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800826c:	f003 0310 	and.w	r3, r3, #16
 8008270:	2b00      	cmp	r3, #0
 8008272:	f000 813c 	beq.w	80084ee <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	2210      	movs	r2, #16
 800827c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008288:	2b40      	cmp	r3, #64	@ 0x40
 800828a:	f040 80b5 	bne.w	80083f8 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800829a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800829e:	2b00      	cmp	r3, #0
 80082a0:	f000 8187 	beq.w	80085b2 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80082aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80082ae:	429a      	cmp	r2, r3
 80082b0:	f080 817f 	bcs.w	80085b2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80082ba:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f003 0320 	and.w	r3, r3, #32
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	f040 8086 	bne.w	80083dc <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80082dc:	e853 3f00 	ldrex	r3, [r3]
 80082e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80082e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80082e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	461a      	mov	r2, r3
 80082f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80082fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80082fe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008302:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008306:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800830a:	e841 2300 	strex	r3, r2, [r1]
 800830e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008312:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008316:	2b00      	cmp	r3, #0
 8008318:	d1da      	bne.n	80082d0 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	3308      	adds	r3, #8
 8008320:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008322:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008324:	e853 3f00 	ldrex	r3, [r3]
 8008328:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800832a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800832c:	f023 0301 	bic.w	r3, r3, #1
 8008330:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	3308      	adds	r3, #8
 800833a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800833e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008342:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008344:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008346:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800834a:	e841 2300 	strex	r3, r2, [r1]
 800834e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008350:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008352:	2b00      	cmp	r3, #0
 8008354:	d1e1      	bne.n	800831a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	3308      	adds	r3, #8
 800835c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800835e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008360:	e853 3f00 	ldrex	r3, [r3]
 8008364:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008366:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008368:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800836c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	3308      	adds	r3, #8
 8008376:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800837a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800837c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800837e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008380:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008382:	e841 2300 	strex	r3, r2, [r1]
 8008386:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008388:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800838a:	2b00      	cmp	r3, #0
 800838c:	d1e3      	bne.n	8008356 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2220      	movs	r2, #32
 8008392:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083a4:	e853 3f00 	ldrex	r3, [r3]
 80083a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80083aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083ac:	f023 0310 	bic.w	r3, r3, #16
 80083b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	461a      	mov	r2, r3
 80083ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80083be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80083c0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80083c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80083c6:	e841 2300 	strex	r3, r2, [r1]
 80083ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80083cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d1e4      	bne.n	800839c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7fc fae1 	bl	800499e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	1ad3      	subs	r3, r2, r3
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	4619      	mov	r1, r3
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 f8fb 	bl	80085ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80083f6:	e0dc      	b.n	80085b2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008404:	b29b      	uxth	r3, r3
 8008406:	1ad3      	subs	r3, r2, r3
 8008408:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008412:	b29b      	uxth	r3, r3
 8008414:	2b00      	cmp	r3, #0
 8008416:	f000 80ce 	beq.w	80085b6 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800841a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800841e:	2b00      	cmp	r3, #0
 8008420:	f000 80c9 	beq.w	80085b6 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800842c:	e853 3f00 	ldrex	r3, [r3]
 8008430:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008434:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008438:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	461a      	mov	r2, r3
 8008442:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008446:	647b      	str	r3, [r7, #68]	@ 0x44
 8008448:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800844a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800844c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800844e:	e841 2300 	strex	r3, r2, [r1]
 8008452:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008454:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008456:	2b00      	cmp	r3, #0
 8008458:	d1e4      	bne.n	8008424 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	3308      	adds	r3, #8
 8008460:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008464:	e853 3f00 	ldrex	r3, [r3]
 8008468:	623b      	str	r3, [r7, #32]
   return(result);
 800846a:	6a3b      	ldr	r3, [r7, #32]
 800846c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008470:	f023 0301 	bic.w	r3, r3, #1
 8008474:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	3308      	adds	r3, #8
 800847e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008482:	633a      	str	r2, [r7, #48]	@ 0x30
 8008484:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008486:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008488:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800848a:	e841 2300 	strex	r3, r2, [r1]
 800848e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1e1      	bne.n	800845a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2220      	movs	r2, #32
 800849a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2200      	movs	r2, #0
 80084a2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	671a      	str	r2, [r3, #112]	@ 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	e853 3f00 	ldrex	r3, [r3]
 80084b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f023 0310 	bic.w	r3, r3, #16
 80084be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	461a      	mov	r2, r3
 80084c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80084cc:	61fb      	str	r3, [r7, #28]
 80084ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d0:	69b9      	ldr	r1, [r7, #24]
 80084d2:	69fa      	ldr	r2, [r7, #28]
 80084d4:	e841 2300 	strex	r3, r2, [r1]
 80084d8:	617b      	str	r3, [r7, #20]
   return(result);
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d1e4      	bne.n	80084aa <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80084e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80084e4:	4619      	mov	r1, r3
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 f880 	bl	80085ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80084ec:	e063      	b.n	80085b6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80084ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00e      	beq.n	8008518 <HAL_UART_IRQHandler+0x584>
 80084fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008502:	2b00      	cmp	r3, #0
 8008504:	d008      	beq.n	8008518 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800850e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f001 fb57 	bl	8009bc4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008516:	e051      	b.n	80085bc <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800851c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008520:	2b00      	cmp	r3, #0
 8008522:	d014      	beq.n	800854e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008528:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800852c:	2b00      	cmp	r3, #0
 800852e:	d105      	bne.n	800853c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008530:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008534:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008538:	2b00      	cmp	r3, #0
 800853a:	d008      	beq.n	800854e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008540:	2b00      	cmp	r3, #0
 8008542:	d03a      	beq.n	80085ba <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	4798      	blx	r3
    }
    return;
 800854c:	e035      	b.n	80085ba <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800854e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008556:	2b00      	cmp	r3, #0
 8008558:	d009      	beq.n	800856e <HAL_UART_IRQHandler+0x5da>
 800855a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800855e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008562:	2b00      	cmp	r3, #0
 8008564:	d003      	beq.n	800856e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 fea4 	bl	80092b4 <UART_EndTransmit_IT>
    return;
 800856c:	e026      	b.n	80085bc <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800856e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008572:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008576:	2b00      	cmp	r3, #0
 8008578:	d009      	beq.n	800858e <HAL_UART_IRQHandler+0x5fa>
 800857a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800857e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008582:	2b00      	cmp	r3, #0
 8008584:	d003      	beq.n	800858e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f001 fb30 	bl	8009bec <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800858c:	e016      	b.n	80085bc <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800858e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008592:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008596:	2b00      	cmp	r3, #0
 8008598:	d010      	beq.n	80085bc <HAL_UART_IRQHandler+0x628>
 800859a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	da0c      	bge.n	80085bc <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f001 fb18 	bl	8009bd8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80085a8:	e008      	b.n	80085bc <HAL_UART_IRQHandler+0x628>
      return;
 80085aa:	bf00      	nop
 80085ac:	e006      	b.n	80085bc <HAL_UART_IRQHandler+0x628>
    return;
 80085ae:	bf00      	nop
 80085b0:	e004      	b.n	80085bc <HAL_UART_IRQHandler+0x628>
      return;
 80085b2:	bf00      	nop
 80085b4:	e002      	b.n	80085bc <HAL_UART_IRQHandler+0x628>
      return;
 80085b6:	bf00      	nop
 80085b8:	e000      	b.n	80085bc <HAL_UART_IRQHandler+0x628>
    return;
 80085ba:	bf00      	nop
  }
}
 80085bc:	37e8      	adds	r7, #232	@ 0xe8
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop

080085c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80085cc:	bf00      	nop
 80085ce:	370c      	adds	r7, #12
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80085e0:	bf00      	nop
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	460b      	mov	r3, r1
 80085f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80085f8:	bf00      	nop
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008604:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008608:	b08c      	sub	sp, #48	@ 0x30
 800860a:	af00      	add	r7, sp, #0
 800860c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800860e:	2300      	movs	r3, #0
 8008610:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	689a      	ldr	r2, [r3, #8]
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	431a      	orrs	r2, r3
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	695b      	ldr	r3, [r3, #20]
 8008622:	431a      	orrs	r2, r3
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	69db      	ldr	r3, [r3, #28]
 8008628:	4313      	orrs	r3, r2
 800862a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	4baa      	ldr	r3, [pc, #680]	@ (80088dc <UART_SetConfig+0x2d8>)
 8008634:	4013      	ands	r3, r2
 8008636:	697a      	ldr	r2, [r7, #20]
 8008638:	6812      	ldr	r2, [r2, #0]
 800863a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800863c:	430b      	orrs	r3, r1
 800863e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	68da      	ldr	r2, [r3, #12]
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	430a      	orrs	r2, r1
 8008654:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	699b      	ldr	r3, [r3, #24]
 800865a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a9f      	ldr	r2, [pc, #636]	@ (80088e0 <UART_SetConfig+0x2dc>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d004      	beq.n	8008670 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	6a1b      	ldr	r3, [r3, #32]
 800866a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800866c:	4313      	orrs	r3, r2
 800866e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800867a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800867e:	697a      	ldr	r2, [r7, #20]
 8008680:	6812      	ldr	r2, [r2, #0]
 8008682:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008684:	430b      	orrs	r3, r1
 8008686:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800868e:	f023 010f 	bic.w	r1, r3, #15
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	430a      	orrs	r2, r1
 800869c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a90      	ldr	r2, [pc, #576]	@ (80088e4 <UART_SetConfig+0x2e0>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d125      	bne.n	80086f4 <UART_SetConfig+0xf0>
 80086a8:	4b8f      	ldr	r3, [pc, #572]	@ (80088e8 <UART_SetConfig+0x2e4>)
 80086aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086ae:	f003 0303 	and.w	r3, r3, #3
 80086b2:	2b03      	cmp	r3, #3
 80086b4:	d81a      	bhi.n	80086ec <UART_SetConfig+0xe8>
 80086b6:	a201      	add	r2, pc, #4	@ (adr r2, 80086bc <UART_SetConfig+0xb8>)
 80086b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086bc:	080086cd 	.word	0x080086cd
 80086c0:	080086dd 	.word	0x080086dd
 80086c4:	080086d5 	.word	0x080086d5
 80086c8:	080086e5 	.word	0x080086e5
 80086cc:	2301      	movs	r3, #1
 80086ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086d2:	e116      	b.n	8008902 <UART_SetConfig+0x2fe>
 80086d4:	2302      	movs	r3, #2
 80086d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086da:	e112      	b.n	8008902 <UART_SetConfig+0x2fe>
 80086dc:	2304      	movs	r3, #4
 80086de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086e2:	e10e      	b.n	8008902 <UART_SetConfig+0x2fe>
 80086e4:	2308      	movs	r3, #8
 80086e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086ea:	e10a      	b.n	8008902 <UART_SetConfig+0x2fe>
 80086ec:	2310      	movs	r3, #16
 80086ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086f2:	e106      	b.n	8008902 <UART_SetConfig+0x2fe>
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a7c      	ldr	r2, [pc, #496]	@ (80088ec <UART_SetConfig+0x2e8>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d138      	bne.n	8008770 <UART_SetConfig+0x16c>
 80086fe:	4b7a      	ldr	r3, [pc, #488]	@ (80088e8 <UART_SetConfig+0x2e4>)
 8008700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008704:	f003 030c 	and.w	r3, r3, #12
 8008708:	2b0c      	cmp	r3, #12
 800870a:	d82d      	bhi.n	8008768 <UART_SetConfig+0x164>
 800870c:	a201      	add	r2, pc, #4	@ (adr r2, 8008714 <UART_SetConfig+0x110>)
 800870e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008712:	bf00      	nop
 8008714:	08008749 	.word	0x08008749
 8008718:	08008769 	.word	0x08008769
 800871c:	08008769 	.word	0x08008769
 8008720:	08008769 	.word	0x08008769
 8008724:	08008759 	.word	0x08008759
 8008728:	08008769 	.word	0x08008769
 800872c:	08008769 	.word	0x08008769
 8008730:	08008769 	.word	0x08008769
 8008734:	08008751 	.word	0x08008751
 8008738:	08008769 	.word	0x08008769
 800873c:	08008769 	.word	0x08008769
 8008740:	08008769 	.word	0x08008769
 8008744:	08008761 	.word	0x08008761
 8008748:	2300      	movs	r3, #0
 800874a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800874e:	e0d8      	b.n	8008902 <UART_SetConfig+0x2fe>
 8008750:	2302      	movs	r3, #2
 8008752:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008756:	e0d4      	b.n	8008902 <UART_SetConfig+0x2fe>
 8008758:	2304      	movs	r3, #4
 800875a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800875e:	e0d0      	b.n	8008902 <UART_SetConfig+0x2fe>
 8008760:	2308      	movs	r3, #8
 8008762:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008766:	e0cc      	b.n	8008902 <UART_SetConfig+0x2fe>
 8008768:	2310      	movs	r3, #16
 800876a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800876e:	e0c8      	b.n	8008902 <UART_SetConfig+0x2fe>
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a5e      	ldr	r2, [pc, #376]	@ (80088f0 <UART_SetConfig+0x2ec>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d125      	bne.n	80087c6 <UART_SetConfig+0x1c2>
 800877a:	4b5b      	ldr	r3, [pc, #364]	@ (80088e8 <UART_SetConfig+0x2e4>)
 800877c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008780:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008784:	2b30      	cmp	r3, #48	@ 0x30
 8008786:	d016      	beq.n	80087b6 <UART_SetConfig+0x1b2>
 8008788:	2b30      	cmp	r3, #48	@ 0x30
 800878a:	d818      	bhi.n	80087be <UART_SetConfig+0x1ba>
 800878c:	2b20      	cmp	r3, #32
 800878e:	d00a      	beq.n	80087a6 <UART_SetConfig+0x1a2>
 8008790:	2b20      	cmp	r3, #32
 8008792:	d814      	bhi.n	80087be <UART_SetConfig+0x1ba>
 8008794:	2b00      	cmp	r3, #0
 8008796:	d002      	beq.n	800879e <UART_SetConfig+0x19a>
 8008798:	2b10      	cmp	r3, #16
 800879a:	d008      	beq.n	80087ae <UART_SetConfig+0x1aa>
 800879c:	e00f      	b.n	80087be <UART_SetConfig+0x1ba>
 800879e:	2300      	movs	r3, #0
 80087a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087a4:	e0ad      	b.n	8008902 <UART_SetConfig+0x2fe>
 80087a6:	2302      	movs	r3, #2
 80087a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087ac:	e0a9      	b.n	8008902 <UART_SetConfig+0x2fe>
 80087ae:	2304      	movs	r3, #4
 80087b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087b4:	e0a5      	b.n	8008902 <UART_SetConfig+0x2fe>
 80087b6:	2308      	movs	r3, #8
 80087b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087bc:	e0a1      	b.n	8008902 <UART_SetConfig+0x2fe>
 80087be:	2310      	movs	r3, #16
 80087c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087c4:	e09d      	b.n	8008902 <UART_SetConfig+0x2fe>
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a4a      	ldr	r2, [pc, #296]	@ (80088f4 <UART_SetConfig+0x2f0>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d125      	bne.n	800881c <UART_SetConfig+0x218>
 80087d0:	4b45      	ldr	r3, [pc, #276]	@ (80088e8 <UART_SetConfig+0x2e4>)
 80087d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087d6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80087da:	2bc0      	cmp	r3, #192	@ 0xc0
 80087dc:	d016      	beq.n	800880c <UART_SetConfig+0x208>
 80087de:	2bc0      	cmp	r3, #192	@ 0xc0
 80087e0:	d818      	bhi.n	8008814 <UART_SetConfig+0x210>
 80087e2:	2b80      	cmp	r3, #128	@ 0x80
 80087e4:	d00a      	beq.n	80087fc <UART_SetConfig+0x1f8>
 80087e6:	2b80      	cmp	r3, #128	@ 0x80
 80087e8:	d814      	bhi.n	8008814 <UART_SetConfig+0x210>
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d002      	beq.n	80087f4 <UART_SetConfig+0x1f0>
 80087ee:	2b40      	cmp	r3, #64	@ 0x40
 80087f0:	d008      	beq.n	8008804 <UART_SetConfig+0x200>
 80087f2:	e00f      	b.n	8008814 <UART_SetConfig+0x210>
 80087f4:	2300      	movs	r3, #0
 80087f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087fa:	e082      	b.n	8008902 <UART_SetConfig+0x2fe>
 80087fc:	2302      	movs	r3, #2
 80087fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008802:	e07e      	b.n	8008902 <UART_SetConfig+0x2fe>
 8008804:	2304      	movs	r3, #4
 8008806:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800880a:	e07a      	b.n	8008902 <UART_SetConfig+0x2fe>
 800880c:	2308      	movs	r3, #8
 800880e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008812:	e076      	b.n	8008902 <UART_SetConfig+0x2fe>
 8008814:	2310      	movs	r3, #16
 8008816:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800881a:	e072      	b.n	8008902 <UART_SetConfig+0x2fe>
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a35      	ldr	r2, [pc, #212]	@ (80088f8 <UART_SetConfig+0x2f4>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d12a      	bne.n	800887c <UART_SetConfig+0x278>
 8008826:	4b30      	ldr	r3, [pc, #192]	@ (80088e8 <UART_SetConfig+0x2e4>)
 8008828:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800882c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008830:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008834:	d01a      	beq.n	800886c <UART_SetConfig+0x268>
 8008836:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800883a:	d81b      	bhi.n	8008874 <UART_SetConfig+0x270>
 800883c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008840:	d00c      	beq.n	800885c <UART_SetConfig+0x258>
 8008842:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008846:	d815      	bhi.n	8008874 <UART_SetConfig+0x270>
 8008848:	2b00      	cmp	r3, #0
 800884a:	d003      	beq.n	8008854 <UART_SetConfig+0x250>
 800884c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008850:	d008      	beq.n	8008864 <UART_SetConfig+0x260>
 8008852:	e00f      	b.n	8008874 <UART_SetConfig+0x270>
 8008854:	2300      	movs	r3, #0
 8008856:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800885a:	e052      	b.n	8008902 <UART_SetConfig+0x2fe>
 800885c:	2302      	movs	r3, #2
 800885e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008862:	e04e      	b.n	8008902 <UART_SetConfig+0x2fe>
 8008864:	2304      	movs	r3, #4
 8008866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800886a:	e04a      	b.n	8008902 <UART_SetConfig+0x2fe>
 800886c:	2308      	movs	r3, #8
 800886e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008872:	e046      	b.n	8008902 <UART_SetConfig+0x2fe>
 8008874:	2310      	movs	r3, #16
 8008876:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800887a:	e042      	b.n	8008902 <UART_SetConfig+0x2fe>
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a17      	ldr	r2, [pc, #92]	@ (80088e0 <UART_SetConfig+0x2dc>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d13a      	bne.n	80088fc <UART_SetConfig+0x2f8>
 8008886:	4b18      	ldr	r3, [pc, #96]	@ (80088e8 <UART_SetConfig+0x2e4>)
 8008888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800888c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008890:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008894:	d01a      	beq.n	80088cc <UART_SetConfig+0x2c8>
 8008896:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800889a:	d81b      	bhi.n	80088d4 <UART_SetConfig+0x2d0>
 800889c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088a0:	d00c      	beq.n	80088bc <UART_SetConfig+0x2b8>
 80088a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088a6:	d815      	bhi.n	80088d4 <UART_SetConfig+0x2d0>
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d003      	beq.n	80088b4 <UART_SetConfig+0x2b0>
 80088ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088b0:	d008      	beq.n	80088c4 <UART_SetConfig+0x2c0>
 80088b2:	e00f      	b.n	80088d4 <UART_SetConfig+0x2d0>
 80088b4:	2300      	movs	r3, #0
 80088b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088ba:	e022      	b.n	8008902 <UART_SetConfig+0x2fe>
 80088bc:	2302      	movs	r3, #2
 80088be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088c2:	e01e      	b.n	8008902 <UART_SetConfig+0x2fe>
 80088c4:	2304      	movs	r3, #4
 80088c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088ca:	e01a      	b.n	8008902 <UART_SetConfig+0x2fe>
 80088cc:	2308      	movs	r3, #8
 80088ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088d2:	e016      	b.n	8008902 <UART_SetConfig+0x2fe>
 80088d4:	2310      	movs	r3, #16
 80088d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088da:	e012      	b.n	8008902 <UART_SetConfig+0x2fe>
 80088dc:	cfff69f3 	.word	0xcfff69f3
 80088e0:	40008000 	.word	0x40008000
 80088e4:	40013800 	.word	0x40013800
 80088e8:	40021000 	.word	0x40021000
 80088ec:	40004400 	.word	0x40004400
 80088f0:	40004800 	.word	0x40004800
 80088f4:	40004c00 	.word	0x40004c00
 80088f8:	40005000 	.word	0x40005000
 80088fc:	2310      	movs	r3, #16
 80088fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4aae      	ldr	r2, [pc, #696]	@ (8008bc0 <UART_SetConfig+0x5bc>)
 8008908:	4293      	cmp	r3, r2
 800890a:	f040 8097 	bne.w	8008a3c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800890e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008912:	2b08      	cmp	r3, #8
 8008914:	d823      	bhi.n	800895e <UART_SetConfig+0x35a>
 8008916:	a201      	add	r2, pc, #4	@ (adr r2, 800891c <UART_SetConfig+0x318>)
 8008918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800891c:	08008941 	.word	0x08008941
 8008920:	0800895f 	.word	0x0800895f
 8008924:	08008949 	.word	0x08008949
 8008928:	0800895f 	.word	0x0800895f
 800892c:	0800894f 	.word	0x0800894f
 8008930:	0800895f 	.word	0x0800895f
 8008934:	0800895f 	.word	0x0800895f
 8008938:	0800895f 	.word	0x0800895f
 800893c:	08008957 	.word	0x08008957
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008940:	f7fd f970 	bl	8005c24 <HAL_RCC_GetPCLK1Freq>
 8008944:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008946:	e010      	b.n	800896a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008948:	4b9e      	ldr	r3, [pc, #632]	@ (8008bc4 <UART_SetConfig+0x5c0>)
 800894a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800894c:	e00d      	b.n	800896a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800894e:	f7fd f8fb 	bl	8005b48 <HAL_RCC_GetSysClockFreq>
 8008952:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008954:	e009      	b.n	800896a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008956:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800895a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800895c:	e005      	b.n	800896a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800895e:	2300      	movs	r3, #0
 8008960:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008962:	2301      	movs	r3, #1
 8008964:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008968:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800896a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800896c:	2b00      	cmp	r3, #0
 800896e:	f000 8130 	beq.w	8008bd2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008976:	4a94      	ldr	r2, [pc, #592]	@ (8008bc8 <UART_SetConfig+0x5c4>)
 8008978:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800897c:	461a      	mov	r2, r3
 800897e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008980:	fbb3 f3f2 	udiv	r3, r3, r2
 8008984:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	685a      	ldr	r2, [r3, #4]
 800898a:	4613      	mov	r3, r2
 800898c:	005b      	lsls	r3, r3, #1
 800898e:	4413      	add	r3, r2
 8008990:	69ba      	ldr	r2, [r7, #24]
 8008992:	429a      	cmp	r2, r3
 8008994:	d305      	bcc.n	80089a2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800899c:	69ba      	ldr	r2, [r7, #24]
 800899e:	429a      	cmp	r2, r3
 80089a0:	d903      	bls.n	80089aa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80089a2:	2301      	movs	r3, #1
 80089a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80089a8:	e113      	b.n	8008bd2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ac:	2200      	movs	r2, #0
 80089ae:	60bb      	str	r3, [r7, #8]
 80089b0:	60fa      	str	r2, [r7, #12]
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089b6:	4a84      	ldr	r2, [pc, #528]	@ (8008bc8 <UART_SetConfig+0x5c4>)
 80089b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089bc:	b29b      	uxth	r3, r3
 80089be:	2200      	movs	r2, #0
 80089c0:	603b      	str	r3, [r7, #0]
 80089c2:	607a      	str	r2, [r7, #4]
 80089c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80089cc:	f7f8 f994 	bl	8000cf8 <__aeabi_uldivmod>
 80089d0:	4602      	mov	r2, r0
 80089d2:	460b      	mov	r3, r1
 80089d4:	4610      	mov	r0, r2
 80089d6:	4619      	mov	r1, r3
 80089d8:	f04f 0200 	mov.w	r2, #0
 80089dc:	f04f 0300 	mov.w	r3, #0
 80089e0:	020b      	lsls	r3, r1, #8
 80089e2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80089e6:	0202      	lsls	r2, r0, #8
 80089e8:	6979      	ldr	r1, [r7, #20]
 80089ea:	6849      	ldr	r1, [r1, #4]
 80089ec:	0849      	lsrs	r1, r1, #1
 80089ee:	2000      	movs	r0, #0
 80089f0:	460c      	mov	r4, r1
 80089f2:	4605      	mov	r5, r0
 80089f4:	eb12 0804 	adds.w	r8, r2, r4
 80089f8:	eb43 0905 	adc.w	r9, r3, r5
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	469a      	mov	sl, r3
 8008a04:	4693      	mov	fp, r2
 8008a06:	4652      	mov	r2, sl
 8008a08:	465b      	mov	r3, fp
 8008a0a:	4640      	mov	r0, r8
 8008a0c:	4649      	mov	r1, r9
 8008a0e:	f7f8 f973 	bl	8000cf8 <__aeabi_uldivmod>
 8008a12:	4602      	mov	r2, r0
 8008a14:	460b      	mov	r3, r1
 8008a16:	4613      	mov	r3, r2
 8008a18:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008a1a:	6a3b      	ldr	r3, [r7, #32]
 8008a1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a20:	d308      	bcc.n	8008a34 <UART_SetConfig+0x430>
 8008a22:	6a3b      	ldr	r3, [r7, #32]
 8008a24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a28:	d204      	bcs.n	8008a34 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	6a3a      	ldr	r2, [r7, #32]
 8008a30:	60da      	str	r2, [r3, #12]
 8008a32:	e0ce      	b.n	8008bd2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008a34:	2301      	movs	r3, #1
 8008a36:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008a3a:	e0ca      	b.n	8008bd2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	69db      	ldr	r3, [r3, #28]
 8008a40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a44:	d166      	bne.n	8008b14 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008a46:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008a4a:	2b08      	cmp	r3, #8
 8008a4c:	d827      	bhi.n	8008a9e <UART_SetConfig+0x49a>
 8008a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8008a54 <UART_SetConfig+0x450>)
 8008a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a54:	08008a79 	.word	0x08008a79
 8008a58:	08008a81 	.word	0x08008a81
 8008a5c:	08008a89 	.word	0x08008a89
 8008a60:	08008a9f 	.word	0x08008a9f
 8008a64:	08008a8f 	.word	0x08008a8f
 8008a68:	08008a9f 	.word	0x08008a9f
 8008a6c:	08008a9f 	.word	0x08008a9f
 8008a70:	08008a9f 	.word	0x08008a9f
 8008a74:	08008a97 	.word	0x08008a97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a78:	f7fd f8d4 	bl	8005c24 <HAL_RCC_GetPCLK1Freq>
 8008a7c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a7e:	e014      	b.n	8008aaa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a80:	f7fd f8e6 	bl	8005c50 <HAL_RCC_GetPCLK2Freq>
 8008a84:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a86:	e010      	b.n	8008aaa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a88:	4b4e      	ldr	r3, [pc, #312]	@ (8008bc4 <UART_SetConfig+0x5c0>)
 8008a8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008a8c:	e00d      	b.n	8008aaa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a8e:	f7fd f85b 	bl	8005b48 <HAL_RCC_GetSysClockFreq>
 8008a92:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a94:	e009      	b.n	8008aaa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008a9c:	e005      	b.n	8008aaa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008aa8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	f000 8090 	beq.w	8008bd2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ab6:	4a44      	ldr	r2, [pc, #272]	@ (8008bc8 <UART_SetConfig+0x5c4>)
 8008ab8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008abc:	461a      	mov	r2, r3
 8008abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ac0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ac4:	005a      	lsls	r2, r3, #1
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	085b      	lsrs	r3, r3, #1
 8008acc:	441a      	add	r2, r3
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ad6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ad8:	6a3b      	ldr	r3, [r7, #32]
 8008ada:	2b0f      	cmp	r3, #15
 8008adc:	d916      	bls.n	8008b0c <UART_SetConfig+0x508>
 8008ade:	6a3b      	ldr	r3, [r7, #32]
 8008ae0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ae4:	d212      	bcs.n	8008b0c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008ae6:	6a3b      	ldr	r3, [r7, #32]
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	f023 030f 	bic.w	r3, r3, #15
 8008aee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008af0:	6a3b      	ldr	r3, [r7, #32]
 8008af2:	085b      	lsrs	r3, r3, #1
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	f003 0307 	and.w	r3, r3, #7
 8008afa:	b29a      	uxth	r2, r3
 8008afc:	8bfb      	ldrh	r3, [r7, #30]
 8008afe:	4313      	orrs	r3, r2
 8008b00:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	8bfa      	ldrh	r2, [r7, #30]
 8008b08:	60da      	str	r2, [r3, #12]
 8008b0a:	e062      	b.n	8008bd2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008b12:	e05e      	b.n	8008bd2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008b14:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008b18:	2b08      	cmp	r3, #8
 8008b1a:	d828      	bhi.n	8008b6e <UART_SetConfig+0x56a>
 8008b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8008b24 <UART_SetConfig+0x520>)
 8008b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b22:	bf00      	nop
 8008b24:	08008b49 	.word	0x08008b49
 8008b28:	08008b51 	.word	0x08008b51
 8008b2c:	08008b59 	.word	0x08008b59
 8008b30:	08008b6f 	.word	0x08008b6f
 8008b34:	08008b5f 	.word	0x08008b5f
 8008b38:	08008b6f 	.word	0x08008b6f
 8008b3c:	08008b6f 	.word	0x08008b6f
 8008b40:	08008b6f 	.word	0x08008b6f
 8008b44:	08008b67 	.word	0x08008b67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b48:	f7fd f86c 	bl	8005c24 <HAL_RCC_GetPCLK1Freq>
 8008b4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b4e:	e014      	b.n	8008b7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b50:	f7fd f87e 	bl	8005c50 <HAL_RCC_GetPCLK2Freq>
 8008b54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b56:	e010      	b.n	8008b7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b58:	4b1a      	ldr	r3, [pc, #104]	@ (8008bc4 <UART_SetConfig+0x5c0>)
 8008b5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008b5c:	e00d      	b.n	8008b7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b5e:	f7fc fff3 	bl	8005b48 <HAL_RCC_GetSysClockFreq>
 8008b62:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b64:	e009      	b.n	8008b7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008b6c:	e005      	b.n	8008b7a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008b72:	2301      	movs	r3, #1
 8008b74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008b78:	bf00      	nop
    }

    if (pclk != 0U)
 8008b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d028      	beq.n	8008bd2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b84:	4a10      	ldr	r2, [pc, #64]	@ (8008bc8 <UART_SetConfig+0x5c4>)
 8008b86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b8e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	085b      	lsrs	r3, r3, #1
 8008b98:	441a      	add	r2, r3
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ba2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ba4:	6a3b      	ldr	r3, [r7, #32]
 8008ba6:	2b0f      	cmp	r3, #15
 8008ba8:	d910      	bls.n	8008bcc <UART_SetConfig+0x5c8>
 8008baa:	6a3b      	ldr	r3, [r7, #32]
 8008bac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bb0:	d20c      	bcs.n	8008bcc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008bb2:	6a3b      	ldr	r3, [r7, #32]
 8008bb4:	b29a      	uxth	r2, r3
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	60da      	str	r2, [r3, #12]
 8008bbc:	e009      	b.n	8008bd2 <UART_SetConfig+0x5ce>
 8008bbe:	bf00      	nop
 8008bc0:	40008000 	.word	0x40008000
 8008bc4:	00f42400 	.word	0x00f42400
 8008bc8:	0800e70c 	.word	0x0800e70c
      }
      else
      {
        ret = HAL_ERROR;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	2200      	movs	r2, #0
 8008be6:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	2200      	movs	r2, #0
 8008bec:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 8008bee:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3730      	adds	r7, #48	@ 0x30
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008bfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c08:	f003 0301 	and.w	r3, r3, #1
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d00a      	beq.n	8008c26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	430a      	orrs	r2, r1
 8008c24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c2a:	f003 0302 	and.w	r3, r3, #2
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d00a      	beq.n	8008c48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	430a      	orrs	r2, r1
 8008c46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c4c:	f003 0304 	and.w	r3, r3, #4
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d00a      	beq.n	8008c6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	430a      	orrs	r2, r1
 8008c68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c6e:	f003 0308 	and.w	r3, r3, #8
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d00a      	beq.n	8008c8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	430a      	orrs	r2, r1
 8008c8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c90:	f003 0310 	and.w	r3, r3, #16
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d00a      	beq.n	8008cae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	689b      	ldr	r3, [r3, #8]
 8008c9e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	430a      	orrs	r2, r1
 8008cac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cb2:	f003 0320 	and.w	r3, r3, #32
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d00a      	beq.n	8008cd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	430a      	orrs	r2, r1
 8008cce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d01a      	beq.n	8008d12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	430a      	orrs	r2, r1
 8008cf0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cf6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008cfa:	d10a      	bne.n	8008d12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	430a      	orrs	r2, r1
 8008d10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d00a      	beq.n	8008d34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	430a      	orrs	r2, r1
 8008d32:	605a      	str	r2, [r3, #4]
  }
}
 8008d34:	bf00      	nop
 8008d36:	370c      	adds	r7, #12
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr

08008d40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b086      	sub	sp, #24
 8008d44:	af02      	add	r7, sp, #8
 8008d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008d50:	f7f9 fd14 	bl	800277c <HAL_GetTick>
 8008d54:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f003 0308 	and.w	r3, r3, #8
 8008d60:	2b08      	cmp	r3, #8
 8008d62:	d10e      	bne.n	8008d82 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d64:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008d68:	9300      	str	r3, [sp, #0]
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 f82f 	bl	8008dd6 <UART_WaitOnFlagUntilTimeout>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d001      	beq.n	8008d82 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d7e:	2303      	movs	r3, #3
 8008d80:	e025      	b.n	8008dce <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f003 0304 	and.w	r3, r3, #4
 8008d8c:	2b04      	cmp	r3, #4
 8008d8e:	d10e      	bne.n	8008dae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d90:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008d94:	9300      	str	r3, [sp, #0]
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 f819 	bl	8008dd6 <UART_WaitOnFlagUntilTimeout>
 8008da4:	4603      	mov	r3, r0
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d001      	beq.n	8008dae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008daa:	2303      	movs	r3, #3
 8008dac:	e00f      	b.n	8008dce <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2220      	movs	r2, #32
 8008db2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2220      	movs	r2, #32
 8008dba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8008dcc:	2300      	movs	r3, #0
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3710      	adds	r7, #16
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b09c      	sub	sp, #112	@ 0x70
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	60f8      	str	r0, [r7, #12]
 8008dde:	60b9      	str	r1, [r7, #8]
 8008de0:	603b      	str	r3, [r7, #0]
 8008de2:	4613      	mov	r3, r2
 8008de4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008de6:	e0a9      	b.n	8008f3c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008de8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dee:	f000 80a5 	beq.w	8008f3c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008df2:	f7f9 fcc3 	bl	800277c <HAL_GetTick>
 8008df6:	4602      	mov	r2, r0
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	1ad3      	subs	r3, r2, r3
 8008dfc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d302      	bcc.n	8008e08 <UART_WaitOnFlagUntilTimeout+0x32>
 8008e02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d140      	bne.n	8008e8a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e10:	e853 3f00 	ldrex	r3, [r3]
 8008e14:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008e16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e18:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008e1c:	667b      	str	r3, [r7, #100]	@ 0x64
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	461a      	mov	r2, r3
 8008e24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e26:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008e28:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e2a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008e2c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008e2e:	e841 2300 	strex	r3, r2, [r1]
 8008e32:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008e34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d1e6      	bne.n	8008e08 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	3308      	adds	r3, #8
 8008e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e44:	e853 3f00 	ldrex	r3, [r3]
 8008e48:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e4c:	f023 0301 	bic.w	r3, r3, #1
 8008e50:	663b      	str	r3, [r7, #96]	@ 0x60
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	3308      	adds	r3, #8
 8008e58:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008e5a:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008e5c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e5e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008e60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008e62:	e841 2300 	strex	r3, r2, [r1]
 8008e66:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008e68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d1e5      	bne.n	8008e3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2220      	movs	r2, #32
 8008e72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2220      	movs	r2, #32
 8008e7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2200      	movs	r2, #0
 8008e82:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8008e86:	2303      	movs	r3, #3
 8008e88:	e069      	b.n	8008f5e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f003 0304 	and.w	r3, r3, #4
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d051      	beq.n	8008f3c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	69db      	ldr	r3, [r3, #28]
 8008e9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008ea2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ea6:	d149      	bne.n	8008f3c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008eb0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eba:	e853 3f00 	ldrex	r3, [r3]
 8008ebe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec2:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008ec6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	461a      	mov	r2, r3
 8008ece:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ed0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ed2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008ed6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008ed8:	e841 2300 	strex	r3, r2, [r1]
 8008edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d1e6      	bne.n	8008eb2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	3308      	adds	r3, #8
 8008eea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	e853 3f00 	ldrex	r3, [r3]
 8008ef2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	f023 0301 	bic.w	r3, r3, #1
 8008efa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	3308      	adds	r3, #8
 8008f02:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008f04:	623a      	str	r2, [r7, #32]
 8008f06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f08:	69f9      	ldr	r1, [r7, #28]
 8008f0a:	6a3a      	ldr	r2, [r7, #32]
 8008f0c:	e841 2300 	strex	r3, r2, [r1]
 8008f10:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d1e5      	bne.n	8008ee4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2220      	movs	r2, #32
 8008f1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2220      	movs	r2, #32
 8008f24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2220      	movs	r2, #32
 8008f2c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2200      	movs	r2, #0
 8008f34:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008f38:	2303      	movs	r3, #3
 8008f3a:	e010      	b.n	8008f5e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	69da      	ldr	r2, [r3, #28]
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	4013      	ands	r3, r2
 8008f46:	68ba      	ldr	r2, [r7, #8]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	bf0c      	ite	eq
 8008f4c:	2301      	moveq	r3, #1
 8008f4e:	2300      	movne	r3, #0
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	461a      	mov	r2, r3
 8008f54:	79fb      	ldrb	r3, [r7, #7]
 8008f56:	429a      	cmp	r2, r3
 8008f58:	f43f af46 	beq.w	8008de8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f5c:	2300      	movs	r3, #0
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3770      	adds	r7, #112	@ 0x70
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
	...

08008f68 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b0a3      	sub	sp, #140	@ 0x8c
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	4613      	mov	r3, r2
 8008f74:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	68ba      	ldr	r2, [r7, #8]
 8008f7a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	88fa      	ldrh	r2, [r7, #6]
 8008f80:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	88fa      	ldrh	r2, [r7, #6]
 8008f88:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f9a:	d10e      	bne.n	8008fba <UART_Start_Receive_IT+0x52>
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	691b      	ldr	r3, [r3, #16]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d105      	bne.n	8008fb0 <UART_Start_Receive_IT+0x48>
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008faa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008fae:	e02d      	b.n	800900c <UART_Start_Receive_IT+0xa4>
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	22ff      	movs	r2, #255	@ 0xff
 8008fb4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008fb8:	e028      	b.n	800900c <UART_Start_Receive_IT+0xa4>
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d10d      	bne.n	8008fde <UART_Start_Receive_IT+0x76>
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	691b      	ldr	r3, [r3, #16]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d104      	bne.n	8008fd4 <UART_Start_Receive_IT+0x6c>
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	22ff      	movs	r2, #255	@ 0xff
 8008fce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008fd2:	e01b      	b.n	800900c <UART_Start_Receive_IT+0xa4>
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	227f      	movs	r2, #127	@ 0x7f
 8008fd8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008fdc:	e016      	b.n	800900c <UART_Start_Receive_IT+0xa4>
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	689b      	ldr	r3, [r3, #8]
 8008fe2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008fe6:	d10d      	bne.n	8009004 <UART_Start_Receive_IT+0x9c>
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	691b      	ldr	r3, [r3, #16]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d104      	bne.n	8008ffa <UART_Start_Receive_IT+0x92>
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	227f      	movs	r2, #127	@ 0x7f
 8008ff4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008ff8:	e008      	b.n	800900c <UART_Start_Receive_IT+0xa4>
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	223f      	movs	r2, #63	@ 0x3f
 8008ffe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009002:	e003      	b.n	800900c <UART_Start_Receive_IT+0xa4>
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2200      	movs	r2, #0
 8009008:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2200      	movs	r2, #0
 8009010:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2222      	movs	r2, #34	@ 0x22
 8009018:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	3308      	adds	r3, #8
 8009022:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009024:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009026:	e853 3f00 	ldrex	r3, [r3]
 800902a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800902c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800902e:	f043 0301 	orr.w	r3, r3, #1
 8009032:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	3308      	adds	r3, #8
 800903c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009040:	673a      	str	r2, [r7, #112]	@ 0x70
 8009042:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009044:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009046:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009048:	e841 2300 	strex	r3, r2, [r1]
 800904c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800904e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009050:	2b00      	cmp	r3, #0
 8009052:	d1e3      	bne.n	800901c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009058:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800905c:	d153      	bne.n	8009106 <UART_Start_Receive_IT+0x19e>
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009064:	88fa      	ldrh	r2, [r7, #6]
 8009066:	429a      	cmp	r2, r3
 8009068:	d34d      	bcc.n	8009106 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009072:	d107      	bne.n	8009084 <UART_Start_Receive_IT+0x11c>
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	691b      	ldr	r3, [r3, #16]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d103      	bne.n	8009084 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	4a4b      	ldr	r2, [pc, #300]	@ (80091ac <UART_Start_Receive_IT+0x244>)
 8009080:	671a      	str	r2, [r3, #112]	@ 0x70
 8009082:	e002      	b.n	800908a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	4a4a      	ldr	r2, [pc, #296]	@ (80091b0 <UART_Start_Receive_IT+0x248>)
 8009088:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2200      	movs	r2, #0
 800908e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	691b      	ldr	r3, [r3, #16]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d01a      	beq.n	80090d0 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090a2:	e853 3f00 	ldrex	r3, [r3]
 80090a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80090a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80090aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80090ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	461a      	mov	r2, r3
 80090b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80090bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80090be:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80090c2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80090c4:	e841 2300 	strex	r3, r2, [r1]
 80090c8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80090ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d1e4      	bne.n	800909a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	3308      	adds	r3, #8
 80090d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090da:	e853 3f00 	ldrex	r3, [r3]
 80090de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80090e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80090e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	3308      	adds	r3, #8
 80090ee:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80090f0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80090f2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80090f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80090f8:	e841 2300 	strex	r3, r2, [r1]
 80090fc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80090fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009100:	2b00      	cmp	r3, #0
 8009102:	d1e5      	bne.n	80090d0 <UART_Start_Receive_IT+0x168>
 8009104:	e04a      	b.n	800919c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	689b      	ldr	r3, [r3, #8]
 800910a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800910e:	d107      	bne.n	8009120 <UART_Start_Receive_IT+0x1b8>
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	691b      	ldr	r3, [r3, #16]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d103      	bne.n	8009120 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	4a26      	ldr	r2, [pc, #152]	@ (80091b4 <UART_Start_Receive_IT+0x24c>)
 800911c:	671a      	str	r2, [r3, #112]	@ 0x70
 800911e:	e002      	b.n	8009126 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	4a25      	ldr	r2, [pc, #148]	@ (80091b8 <UART_Start_Receive_IT+0x250>)
 8009124:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2200      	movs	r2, #0
 800912a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	691b      	ldr	r3, [r3, #16]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d019      	beq.n	800916a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800913c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800913e:	e853 3f00 	ldrex	r3, [r3]
 8009142:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009146:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800914a:	677b      	str	r3, [r7, #116]	@ 0x74
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	461a      	mov	r2, r3
 8009152:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009154:	637b      	str	r3, [r7, #52]	@ 0x34
 8009156:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009158:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800915a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800915c:	e841 2300 	strex	r3, r2, [r1]
 8009160:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009164:	2b00      	cmp	r3, #0
 8009166:	d1e6      	bne.n	8009136 <UART_Start_Receive_IT+0x1ce>
 8009168:	e018      	b.n	800919c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	e853 3f00 	ldrex	r3, [r3]
 8009176:	613b      	str	r3, [r7, #16]
   return(result);
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	f043 0320 	orr.w	r3, r3, #32
 800917e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	461a      	mov	r2, r3
 8009186:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009188:	623b      	str	r3, [r7, #32]
 800918a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800918c:	69f9      	ldr	r1, [r7, #28]
 800918e:	6a3a      	ldr	r2, [r7, #32]
 8009190:	e841 2300 	strex	r3, r2, [r1]
 8009194:	61bb      	str	r3, [r7, #24]
   return(result);
 8009196:	69bb      	ldr	r3, [r7, #24]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d1e6      	bne.n	800916a <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 800919c:	2300      	movs	r3, #0
}
 800919e:	4618      	mov	r0, r3
 80091a0:	378c      	adds	r7, #140	@ 0x8c
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr
 80091aa:	bf00      	nop
 80091ac:	080098c5 	.word	0x080098c5
 80091b0:	080095cd 	.word	0x080095cd
 80091b4:	0800946b 	.word	0x0800946b
 80091b8:	0800930b 	.word	0x0800930b

080091bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80091bc:	b480      	push	{r7}
 80091be:	b095      	sub	sp, #84	@ 0x54
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091cc:	e853 3f00 	ldrex	r3, [r3]
 80091d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80091d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80091d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	461a      	mov	r2, r3
 80091e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80091e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80091e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80091ea:	e841 2300 	strex	r3, r2, [r1]
 80091ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80091f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d1e6      	bne.n	80091c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	3308      	adds	r3, #8
 80091fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091fe:	6a3b      	ldr	r3, [r7, #32]
 8009200:	e853 3f00 	ldrex	r3, [r3]
 8009204:	61fb      	str	r3, [r7, #28]
   return(result);
 8009206:	69fb      	ldr	r3, [r7, #28]
 8009208:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800920c:	f023 0301 	bic.w	r3, r3, #1
 8009210:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	3308      	adds	r3, #8
 8009218:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800921a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800921c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800921e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009220:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009222:	e841 2300 	strex	r3, r2, [r1]
 8009226:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800922a:	2b00      	cmp	r3, #0
 800922c:	d1e3      	bne.n	80091f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009232:	2b01      	cmp	r3, #1
 8009234:	d118      	bne.n	8009268 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	e853 3f00 	ldrex	r3, [r3]
 8009242:	60bb      	str	r3, [r7, #8]
   return(result);
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	f023 0310 	bic.w	r3, r3, #16
 800924a:	647b      	str	r3, [r7, #68]	@ 0x44
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	461a      	mov	r2, r3
 8009252:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009254:	61bb      	str	r3, [r7, #24]
 8009256:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009258:	6979      	ldr	r1, [r7, #20]
 800925a:	69ba      	ldr	r2, [r7, #24]
 800925c:	e841 2300 	strex	r3, r2, [r1]
 8009260:	613b      	str	r3, [r7, #16]
   return(result);
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d1e6      	bne.n	8009236 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2220      	movs	r2, #32
 800926c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	671a      	str	r2, [r3, #112]	@ 0x70
}
 800927c:	bf00      	nop
 800927e:	3754      	adds	r7, #84	@ 0x54
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009294:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2200      	movs	r2, #0
 800929a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2200      	movs	r2, #0
 80092a2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80092a6:	68f8      	ldr	r0, [r7, #12]
 80092a8:	f7ff f996 	bl	80085d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092ac:	bf00      	nop
 80092ae:	3710      	adds	r7, #16
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b088      	sub	sp, #32
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	e853 3f00 	ldrex	r3, [r3]
 80092c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092d0:	61fb      	str	r3, [r7, #28]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	461a      	mov	r2, r3
 80092d8:	69fb      	ldr	r3, [r7, #28]
 80092da:	61bb      	str	r3, [r7, #24]
 80092dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092de:	6979      	ldr	r1, [r7, #20]
 80092e0:	69ba      	ldr	r2, [r7, #24]
 80092e2:	e841 2300 	strex	r3, r2, [r1]
 80092e6:	613b      	str	r3, [r7, #16]
   return(result);
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d1e6      	bne.n	80092bc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2220      	movs	r2, #32
 80092f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2200      	movs	r2, #0
 80092fa:	675a      	str	r2, [r3, #116]	@ 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f7ff f961 	bl	80085c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009302:	bf00      	nop
 8009304:	3720      	adds	r7, #32
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}

0800930a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800930a:	b580      	push	{r7, lr}
 800930c:	b096      	sub	sp, #88	@ 0x58
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009318:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009322:	2b22      	cmp	r3, #34	@ 0x22
 8009324:	f040 8095 	bne.w	8009452 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800932e:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009332:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8009336:	b2d9      	uxtb	r1, r3
 8009338:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800933c:	b2da      	uxtb	r2, r3
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009342:	400a      	ands	r2, r1
 8009344:	b2d2      	uxtb	r2, r2
 8009346:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800934c:	1c5a      	adds	r2, r3, #1
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009358:	b29b      	uxth	r3, r3
 800935a:	3b01      	subs	r3, #1
 800935c:	b29a      	uxth	r2, r3
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800936a:	b29b      	uxth	r3, r3
 800936c:	2b00      	cmp	r3, #0
 800936e:	d178      	bne.n	8009462 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009378:	e853 3f00 	ldrex	r3, [r3]
 800937c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800937e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009380:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009384:	653b      	str	r3, [r7, #80]	@ 0x50
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	461a      	mov	r2, r3
 800938c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800938e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009390:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009392:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009394:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009396:	e841 2300 	strex	r3, r2, [r1]
 800939a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800939c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d1e6      	bne.n	8009370 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	3308      	adds	r3, #8
 80093a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ac:	e853 3f00 	ldrex	r3, [r3]
 80093b0:	623b      	str	r3, [r7, #32]
   return(result);
 80093b2:	6a3b      	ldr	r3, [r7, #32]
 80093b4:	f023 0301 	bic.w	r3, r3, #1
 80093b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	3308      	adds	r3, #8
 80093c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80093c2:	633a      	str	r2, [r7, #48]	@ 0x30
 80093c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093ca:	e841 2300 	strex	r3, r2, [r1]
 80093ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80093d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d1e5      	bne.n	80093a2 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2220      	movs	r2, #32
 80093da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2200      	movs	r2, #0
 80093e2:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	d12e      	bne.n	800944a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2200      	movs	r2, #0
 80093f0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	e853 3f00 	ldrex	r3, [r3]
 80093fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f023 0310 	bic.w	r3, r3, #16
 8009406:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	461a      	mov	r2, r3
 800940e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009410:	61fb      	str	r3, [r7, #28]
 8009412:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009414:	69b9      	ldr	r1, [r7, #24]
 8009416:	69fa      	ldr	r2, [r7, #28]
 8009418:	e841 2300 	strex	r3, r2, [r1]
 800941c:	617b      	str	r3, [r7, #20]
   return(result);
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d1e6      	bne.n	80093f2 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	69db      	ldr	r3, [r3, #28]
 800942a:	f003 0310 	and.w	r3, r3, #16
 800942e:	2b10      	cmp	r3, #16
 8009430:	d103      	bne.n	800943a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	2210      	movs	r2, #16
 8009438:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009440:	4619      	mov	r1, r3
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f7ff f8d2 	bl	80085ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009448:	e00b      	b.n	8009462 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f7f9 f92c 	bl	80026a8 <HAL_UART_RxCpltCallback>
}
 8009450:	e007      	b.n	8009462 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	699a      	ldr	r2, [r3, #24]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f042 0208 	orr.w	r2, r2, #8
 8009460:	619a      	str	r2, [r3, #24]
}
 8009462:	bf00      	nop
 8009464:	3758      	adds	r7, #88	@ 0x58
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}

0800946a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800946a:	b580      	push	{r7, lr}
 800946c:	b096      	sub	sp, #88	@ 0x58
 800946e:	af00      	add	r7, sp, #0
 8009470:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009478:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009482:	2b22      	cmp	r3, #34	@ 0x22
 8009484:	f040 8095 	bne.w	80095b2 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800948e:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009496:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009498:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 800949c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80094a0:	4013      	ands	r3, r2
 80094a2:	b29a      	uxth	r2, r3
 80094a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094a6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094ac:	1c9a      	adds	r2, r3, #2
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	3b01      	subs	r3, #1
 80094bc:	b29a      	uxth	r2, r3
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d178      	bne.n	80095c2 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094d8:	e853 3f00 	ldrex	r3, [r3]
 80094dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80094de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80094e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	461a      	mov	r2, r3
 80094ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80094f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80094f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80094f6:	e841 2300 	strex	r3, r2, [r1]
 80094fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80094fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d1e6      	bne.n	80094d0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	3308      	adds	r3, #8
 8009508:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800950a:	6a3b      	ldr	r3, [r7, #32]
 800950c:	e853 3f00 	ldrex	r3, [r3]
 8009510:	61fb      	str	r3, [r7, #28]
   return(result);
 8009512:	69fb      	ldr	r3, [r7, #28]
 8009514:	f023 0301 	bic.w	r3, r3, #1
 8009518:	64bb      	str	r3, [r7, #72]	@ 0x48
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	3308      	adds	r3, #8
 8009520:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009522:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009524:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009526:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009528:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800952a:	e841 2300 	strex	r3, r2, [r1]
 800952e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009532:	2b00      	cmp	r3, #0
 8009534:	d1e5      	bne.n	8009502 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2220      	movs	r2, #32
 800953a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2200      	movs	r2, #0
 8009542:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009548:	2b01      	cmp	r3, #1
 800954a:	d12e      	bne.n	80095aa <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	e853 3f00 	ldrex	r3, [r3]
 800955e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	f023 0310 	bic.w	r3, r3, #16
 8009566:	647b      	str	r3, [r7, #68]	@ 0x44
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	461a      	mov	r2, r3
 800956e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009570:	61bb      	str	r3, [r7, #24]
 8009572:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009574:	6979      	ldr	r1, [r7, #20]
 8009576:	69ba      	ldr	r2, [r7, #24]
 8009578:	e841 2300 	strex	r3, r2, [r1]
 800957c:	613b      	str	r3, [r7, #16]
   return(result);
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d1e6      	bne.n	8009552 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	69db      	ldr	r3, [r3, #28]
 800958a:	f003 0310 	and.w	r3, r3, #16
 800958e:	2b10      	cmp	r3, #16
 8009590:	d103      	bne.n	800959a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	2210      	movs	r2, #16
 8009598:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80095a0:	4619      	mov	r1, r3
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f7ff f822 	bl	80085ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80095a8:	e00b      	b.n	80095c2 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f7f9 f87c 	bl	80026a8 <HAL_UART_RxCpltCallback>
}
 80095b0:	e007      	b.n	80095c2 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	699a      	ldr	r2, [r3, #24]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f042 0208 	orr.w	r2, r2, #8
 80095c0:	619a      	str	r2, [r3, #24]
}
 80095c2:	bf00      	nop
 80095c4:	3758      	adds	r7, #88	@ 0x58
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}
	...

080095cc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b0a6      	sub	sp, #152	@ 0x98
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80095da:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	69db      	ldr	r3, [r3, #28]
 80095e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009602:	2b22      	cmp	r3, #34	@ 0x22
 8009604:	f040 814f 	bne.w	80098a6 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800960e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009612:	e0f6      	b.n	8009802 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800961a:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800961e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8009622:	b2d9      	uxtb	r1, r3
 8009624:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009628:	b2da      	uxtb	r2, r3
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800962e:	400a      	ands	r2, r1
 8009630:	b2d2      	uxtb	r2, r2
 8009632:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009638:	1c5a      	adds	r2, r3, #1
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009644:	b29b      	uxth	r3, r3
 8009646:	3b01      	subs	r3, #1
 8009648:	b29a      	uxth	r2, r3
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	69db      	ldr	r3, [r3, #28]
 8009656:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800965a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800965e:	f003 0307 	and.w	r3, r3, #7
 8009662:	2b00      	cmp	r3, #0
 8009664:	d053      	beq.n	800970e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009666:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800966a:	f003 0301 	and.w	r3, r3, #1
 800966e:	2b00      	cmp	r3, #0
 8009670:	d011      	beq.n	8009696 <UART_RxISR_8BIT_FIFOEN+0xca>
 8009672:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800967a:	2b00      	cmp	r3, #0
 800967c:	d00b      	beq.n	8009696 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	2201      	movs	r2, #1
 8009684:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800968c:	f043 0201 	orr.w	r2, r3, #1
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009696:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800969a:	f003 0302 	and.w	r3, r3, #2
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d011      	beq.n	80096c6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80096a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80096a6:	f003 0301 	and.w	r3, r3, #1
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d00b      	beq.n	80096c6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	2202      	movs	r2, #2
 80096b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80096bc:	f043 0204 	orr.w	r2, r3, #4
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80096ca:	f003 0304 	and.w	r3, r3, #4
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d011      	beq.n	80096f6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80096d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80096d6:	f003 0301 	and.w	r3, r3, #1
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d00b      	beq.n	80096f6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	2204      	movs	r2, #4
 80096e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80096ec:	f043 0202 	orr.w	r2, r3, #2
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d006      	beq.n	800970e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f7fe ff69 	bl	80085d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009714:	b29b      	uxth	r3, r3
 8009716:	2b00      	cmp	r3, #0
 8009718:	d173      	bne.n	8009802 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009720:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009722:	e853 3f00 	ldrex	r3, [r3]
 8009726:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009728:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800972a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800972e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	461a      	mov	r2, r3
 8009738:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800973c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800973e:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009740:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009742:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009744:	e841 2300 	strex	r3, r2, [r1]
 8009748:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800974a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800974c:	2b00      	cmp	r3, #0
 800974e:	d1e4      	bne.n	800971a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	3308      	adds	r3, #8
 8009756:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009758:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800975a:	e853 3f00 	ldrex	r3, [r3]
 800975e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009760:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009762:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009766:	f023 0301 	bic.w	r3, r3, #1
 800976a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	3308      	adds	r3, #8
 8009772:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009774:	657a      	str	r2, [r7, #84]	@ 0x54
 8009776:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009778:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800977a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800977c:	e841 2300 	strex	r3, r2, [r1]
 8009780:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009782:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009784:	2b00      	cmp	r3, #0
 8009786:	d1e3      	bne.n	8009750 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2220      	movs	r2, #32
 800978c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2200      	movs	r2, #0
 8009794:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800979a:	2b01      	cmp	r3, #1
 800979c:	d12e      	bne.n	80097fc <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2200      	movs	r2, #0
 80097a2:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097ac:	e853 3f00 	ldrex	r3, [r3]
 80097b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80097b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097b4:	f023 0310 	bic.w	r3, r3, #16
 80097b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	461a      	mov	r2, r3
 80097c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80097c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80097c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80097c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80097ca:	e841 2300 	strex	r3, r2, [r1]
 80097ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80097d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d1e6      	bne.n	80097a4 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	69db      	ldr	r3, [r3, #28]
 80097dc:	f003 0310 	and.w	r3, r3, #16
 80097e0:	2b10      	cmp	r3, #16
 80097e2:	d103      	bne.n	80097ec <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	2210      	movs	r2, #16
 80097ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80097f2:	4619      	mov	r1, r3
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f7fe fef9 	bl	80085ec <HAL_UARTEx_RxEventCallback>
 80097fa:	e002      	b.n	8009802 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f7f8 ff53 	bl	80026a8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009802:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009806:	2b00      	cmp	r3, #0
 8009808:	d006      	beq.n	8009818 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800980a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800980e:	f003 0320 	and.w	r3, r3, #32
 8009812:	2b00      	cmp	r3, #0
 8009814:	f47f aefe 	bne.w	8009614 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800981e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009822:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8009826:	2b00      	cmp	r3, #0
 8009828:	d045      	beq.n	80098b6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009830:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009834:	429a      	cmp	r2, r3
 8009836:	d23e      	bcs.n	80098b6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	3308      	adds	r3, #8
 800983e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009840:	6a3b      	ldr	r3, [r7, #32]
 8009842:	e853 3f00 	ldrex	r3, [r3]
 8009846:	61fb      	str	r3, [r7, #28]
   return(result);
 8009848:	69fb      	ldr	r3, [r7, #28]
 800984a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800984e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	3308      	adds	r3, #8
 8009856:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009858:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800985a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800985c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800985e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009860:	e841 2300 	strex	r3, r2, [r1]
 8009864:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009868:	2b00      	cmp	r3, #0
 800986a:	d1e5      	bne.n	8009838 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	4a14      	ldr	r2, [pc, #80]	@ (80098c0 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009870:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	e853 3f00 	ldrex	r3, [r3]
 800987e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	f043 0320 	orr.w	r3, r3, #32
 8009886:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	461a      	mov	r2, r3
 800988e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009890:	61bb      	str	r3, [r7, #24]
 8009892:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009894:	6979      	ldr	r1, [r7, #20]
 8009896:	69ba      	ldr	r2, [r7, #24]
 8009898:	e841 2300 	strex	r3, r2, [r1]
 800989c:	613b      	str	r3, [r7, #16]
   return(result);
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d1e6      	bne.n	8009872 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80098a4:	e007      	b.n	80098b6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	699a      	ldr	r2, [r3, #24]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f042 0208 	orr.w	r2, r2, #8
 80098b4:	619a      	str	r2, [r3, #24]
}
 80098b6:	bf00      	nop
 80098b8:	3798      	adds	r7, #152	@ 0x98
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
 80098be:	bf00      	nop
 80098c0:	0800930b 	.word	0x0800930b

080098c4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b0a8      	sub	sp, #160	@ 0xa0
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80098d2:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	69db      	ldr	r3, [r3, #28]
 80098dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	689b      	ldr	r3, [r3, #8]
 80098f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098fa:	2b22      	cmp	r3, #34	@ 0x22
 80098fc:	f040 8153 	bne.w	8009ba6 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009906:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800990a:	e0fa      	b.n	8009b02 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009912:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800991a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800991e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 8009922:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 8009926:	4013      	ands	r3, r2
 8009928:	b29a      	uxth	r2, r3
 800992a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800992e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009934:	1c9a      	adds	r2, r3, #2
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009940:	b29b      	uxth	r3, r3
 8009942:	3b01      	subs	r3, #1
 8009944:	b29a      	uxth	r2, r3
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	69db      	ldr	r3, [r3, #28]
 8009952:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009956:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800995a:	f003 0307 	and.w	r3, r3, #7
 800995e:	2b00      	cmp	r3, #0
 8009960:	d053      	beq.n	8009a0a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009962:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009966:	f003 0301 	and.w	r3, r3, #1
 800996a:	2b00      	cmp	r3, #0
 800996c:	d011      	beq.n	8009992 <UART_RxISR_16BIT_FIFOEN+0xce>
 800996e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009976:	2b00      	cmp	r3, #0
 8009978:	d00b      	beq.n	8009992 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	2201      	movs	r2, #1
 8009980:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009988:	f043 0201 	orr.w	r2, r3, #1
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009992:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009996:	f003 0302 	and.w	r3, r3, #2
 800999a:	2b00      	cmp	r3, #0
 800999c:	d011      	beq.n	80099c2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800999e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80099a2:	f003 0301 	and.w	r3, r3, #1
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d00b      	beq.n	80099c2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	2202      	movs	r2, #2
 80099b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80099b8:	f043 0204 	orr.w	r2, r3, #4
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80099c6:	f003 0304 	and.w	r3, r3, #4
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d011      	beq.n	80099f2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80099ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80099d2:	f003 0301 	and.w	r3, r3, #1
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d00b      	beq.n	80099f2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2204      	movs	r2, #4
 80099e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80099e8:	f043 0202 	orr.w	r2, r3, #2
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d006      	beq.n	8009a0a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f7fe fdeb 	bl	80085d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2200      	movs	r2, #0
 8009a06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a10:	b29b      	uxth	r3, r3
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d175      	bne.n	8009b02 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009a1e:	e853 3f00 	ldrex	r3, [r3]
 8009a22:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009a24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a26:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a2a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	461a      	mov	r2, r3
 8009a34:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009a38:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009a3a:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a3c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009a3e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009a40:	e841 2300 	strex	r3, r2, [r1]
 8009a44:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009a46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d1e4      	bne.n	8009a16 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	3308      	adds	r3, #8
 8009a52:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a56:	e853 3f00 	ldrex	r3, [r3]
 8009a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009a5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a62:	f023 0301 	bic.w	r3, r3, #1
 8009a66:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	3308      	adds	r3, #8
 8009a70:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009a74:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009a76:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a78:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009a7a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009a7c:	e841 2300 	strex	r3, r2, [r1]
 8009a80:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009a82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d1e1      	bne.n	8009a4c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2220      	movs	r2, #32
 8009a8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2200      	movs	r2, #0
 8009a94:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a9a:	2b01      	cmp	r3, #1
 8009a9c:	d12e      	bne.n	8009afc <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aac:	e853 3f00 	ldrex	r3, [r3]
 8009ab0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009ab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ab4:	f023 0310 	bic.w	r3, r3, #16
 8009ab8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	461a      	mov	r2, r3
 8009ac0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009ac2:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ac4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009ac8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009aca:	e841 2300 	strex	r3, r2, [r1]
 8009ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009ad0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d1e6      	bne.n	8009aa4 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	69db      	ldr	r3, [r3, #28]
 8009adc:	f003 0310 	and.w	r3, r3, #16
 8009ae0:	2b10      	cmp	r3, #16
 8009ae2:	d103      	bne.n	8009aec <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	2210      	movs	r2, #16
 8009aea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009af2:	4619      	mov	r1, r3
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f7fe fd79 	bl	80085ec <HAL_UARTEx_RxEventCallback>
 8009afa:	e002      	b.n	8009b02 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f7f8 fdd3 	bl	80026a8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009b02:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d006      	beq.n	8009b18 <UART_RxISR_16BIT_FIFOEN+0x254>
 8009b0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009b0e:	f003 0320 	and.w	r3, r3, #32
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	f47f aefa 	bne.w	800990c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b1e:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009b22:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d045      	beq.n	8009bb6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009b30:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d23e      	bcs.n	8009bb6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	3308      	adds	r3, #8
 8009b3e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b42:	e853 3f00 	ldrex	r3, [r3]
 8009b46:	623b      	str	r3, [r7, #32]
   return(result);
 8009b48:	6a3b      	ldr	r3, [r7, #32]
 8009b4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009b4e:	677b      	str	r3, [r7, #116]	@ 0x74
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	3308      	adds	r3, #8
 8009b56:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009b58:	633a      	str	r2, [r7, #48]	@ 0x30
 8009b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b5c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b60:	e841 2300 	strex	r3, r2, [r1]
 8009b64:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d1e5      	bne.n	8009b38 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	4a14      	ldr	r2, [pc, #80]	@ (8009bc0 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009b70:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	e853 3f00 	ldrex	r3, [r3]
 8009b7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f043 0320 	orr.w	r3, r3, #32
 8009b86:	673b      	str	r3, [r7, #112]	@ 0x70
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009b90:	61fb      	str	r3, [r7, #28]
 8009b92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b94:	69b9      	ldr	r1, [r7, #24]
 8009b96:	69fa      	ldr	r2, [r7, #28]
 8009b98:	e841 2300 	strex	r3, r2, [r1]
 8009b9c:	617b      	str	r3, [r7, #20]
   return(result);
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d1e6      	bne.n	8009b72 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ba4:	e007      	b.n	8009bb6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	699a      	ldr	r2, [r3, #24]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f042 0208 	orr.w	r2, r2, #8
 8009bb4:	619a      	str	r2, [r3, #24]
}
 8009bb6:	bf00      	nop
 8009bb8:	37a0      	adds	r7, #160	@ 0xa0
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}
 8009bbe:	bf00      	nop
 8009bc0:	0800946b 	.word	0x0800946b

08009bc4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b083      	sub	sp, #12
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009bcc:	bf00      	nop
 8009bce:	370c      	adds	r7, #12
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr

08009bd8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b083      	sub	sp, #12
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009be0:	bf00      	nop
 8009be2:	370c      	adds	r7, #12
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr

08009bec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b083      	sub	sp, #12
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009bf4:	bf00      	nop
 8009bf6:	370c      	adds	r7, #12
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr

08009c00 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b085      	sub	sp, #20
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009c0e:	2b01      	cmp	r3, #1
 8009c10:	d101      	bne.n	8009c16 <HAL_UARTEx_DisableFifoMode+0x16>
 8009c12:	2302      	movs	r3, #2
 8009c14:	e027      	b.n	8009c66 <HAL_UARTEx_DisableFifoMode+0x66>
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2201      	movs	r2, #1
 8009c1a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2224      	movs	r2, #36	@ 0x24
 8009c22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f022 0201 	bic.w	r2, r2, #1
 8009c3c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009c44:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	68fa      	ldr	r2, [r7, #12]
 8009c52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2220      	movs	r2, #32
 8009c58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009c64:	2300      	movs	r3, #0
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3714      	adds	r7, #20
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c70:	4770      	bx	lr

08009c72 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c72:	b580      	push	{r7, lr}
 8009c74:	b084      	sub	sp, #16
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	6078      	str	r0, [r7, #4]
 8009c7a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009c82:	2b01      	cmp	r3, #1
 8009c84:	d101      	bne.n	8009c8a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009c86:	2302      	movs	r3, #2
 8009c88:	e02d      	b.n	8009ce6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2224      	movs	r2, #36	@ 0x24
 8009c96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	681a      	ldr	r2, [r3, #0]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f022 0201 	bic.w	r2, r2, #1
 8009cb0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	689b      	ldr	r3, [r3, #8]
 8009cb8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	683a      	ldr	r2, [r7, #0]
 8009cc2:	430a      	orrs	r2, r1
 8009cc4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 f850 	bl	8009d6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	68fa      	ldr	r2, [r7, #12]
 8009cd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2220      	movs	r2, #32
 8009cd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009ce4:	2300      	movs	r3, #0
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3710      	adds	r7, #16
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009cee:	b580      	push	{r7, lr}
 8009cf0:	b084      	sub	sp, #16
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
 8009cf6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	d101      	bne.n	8009d06 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009d02:	2302      	movs	r3, #2
 8009d04:	e02d      	b.n	8009d62 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2201      	movs	r2, #1
 8009d0a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2224      	movs	r2, #36	@ 0x24
 8009d12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	681a      	ldr	r2, [r3, #0]
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f022 0201 	bic.w	r2, r2, #1
 8009d2c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	683a      	ldr	r2, [r7, #0]
 8009d3e:	430a      	orrs	r2, r1
 8009d40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f000 f812 	bl	8009d6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	68fa      	ldr	r2, [r7, #12]
 8009d4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2220      	movs	r2, #32
 8009d54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009d60:	2300      	movs	r3, #0
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3710      	adds	r7, #16
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
	...

08009d6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b085      	sub	sp, #20
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d108      	bne.n	8009d8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2201      	movs	r2, #1
 8009d80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2201      	movs	r2, #1
 8009d88:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009d8c:	e031      	b.n	8009df2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009d8e:	2308      	movs	r3, #8
 8009d90:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009d92:	2308      	movs	r3, #8
 8009d94:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	0e5b      	lsrs	r3, r3, #25
 8009d9e:	b2db      	uxtb	r3, r3
 8009da0:	f003 0307 	and.w	r3, r3, #7
 8009da4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	689b      	ldr	r3, [r3, #8]
 8009dac:	0f5b      	lsrs	r3, r3, #29
 8009dae:	b2db      	uxtb	r3, r3
 8009db0:	f003 0307 	and.w	r3, r3, #7
 8009db4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009db6:	7bbb      	ldrb	r3, [r7, #14]
 8009db8:	7b3a      	ldrb	r2, [r7, #12]
 8009dba:	4911      	ldr	r1, [pc, #68]	@ (8009e00 <UARTEx_SetNbDataToProcess+0x94>)
 8009dbc:	5c8a      	ldrb	r2, [r1, r2]
 8009dbe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009dc2:	7b3a      	ldrb	r2, [r7, #12]
 8009dc4:	490f      	ldr	r1, [pc, #60]	@ (8009e04 <UARTEx_SetNbDataToProcess+0x98>)
 8009dc6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009dc8:	fb93 f3f2 	sdiv	r3, r3, r2
 8009dcc:	b29a      	uxth	r2, r3
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009dd4:	7bfb      	ldrb	r3, [r7, #15]
 8009dd6:	7b7a      	ldrb	r2, [r7, #13]
 8009dd8:	4909      	ldr	r1, [pc, #36]	@ (8009e00 <UARTEx_SetNbDataToProcess+0x94>)
 8009dda:	5c8a      	ldrb	r2, [r1, r2]
 8009ddc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009de0:	7b7a      	ldrb	r2, [r7, #13]
 8009de2:	4908      	ldr	r1, [pc, #32]	@ (8009e04 <UARTEx_SetNbDataToProcess+0x98>)
 8009de4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009de6:	fb93 f3f2 	sdiv	r3, r3, r2
 8009dea:	b29a      	uxth	r2, r3
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009df2:	bf00      	nop
 8009df4:	3714      	adds	r7, #20
 8009df6:	46bd      	mov	sp, r7
 8009df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfc:	4770      	bx	lr
 8009dfe:	bf00      	nop
 8009e00:	0800e724 	.word	0x0800e724
 8009e04:	0800e72c 	.word	0x0800e72c

08009e08 <atoi>:
 8009e08:	220a      	movs	r2, #10
 8009e0a:	2100      	movs	r1, #0
 8009e0c:	f000 b87c 	b.w	8009f08 <strtol>

08009e10 <_strtol_l.constprop.0>:
 8009e10:	2b24      	cmp	r3, #36	@ 0x24
 8009e12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e16:	4686      	mov	lr, r0
 8009e18:	4690      	mov	r8, r2
 8009e1a:	d801      	bhi.n	8009e20 <_strtol_l.constprop.0+0x10>
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d106      	bne.n	8009e2e <_strtol_l.constprop.0+0x1e>
 8009e20:	f001 f8f0 	bl	800b004 <__errno>
 8009e24:	2316      	movs	r3, #22
 8009e26:	6003      	str	r3, [r0, #0]
 8009e28:	2000      	movs	r0, #0
 8009e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e2e:	4834      	ldr	r0, [pc, #208]	@ (8009f00 <_strtol_l.constprop.0+0xf0>)
 8009e30:	460d      	mov	r5, r1
 8009e32:	462a      	mov	r2, r5
 8009e34:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e38:	5d06      	ldrb	r6, [r0, r4]
 8009e3a:	f016 0608 	ands.w	r6, r6, #8
 8009e3e:	d1f8      	bne.n	8009e32 <_strtol_l.constprop.0+0x22>
 8009e40:	2c2d      	cmp	r4, #45	@ 0x2d
 8009e42:	d12d      	bne.n	8009ea0 <_strtol_l.constprop.0+0x90>
 8009e44:	782c      	ldrb	r4, [r5, #0]
 8009e46:	2601      	movs	r6, #1
 8009e48:	1c95      	adds	r5, r2, #2
 8009e4a:	f033 0210 	bics.w	r2, r3, #16
 8009e4e:	d109      	bne.n	8009e64 <_strtol_l.constprop.0+0x54>
 8009e50:	2c30      	cmp	r4, #48	@ 0x30
 8009e52:	d12a      	bne.n	8009eaa <_strtol_l.constprop.0+0x9a>
 8009e54:	782a      	ldrb	r2, [r5, #0]
 8009e56:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009e5a:	2a58      	cmp	r2, #88	@ 0x58
 8009e5c:	d125      	bne.n	8009eaa <_strtol_l.constprop.0+0x9a>
 8009e5e:	786c      	ldrb	r4, [r5, #1]
 8009e60:	2310      	movs	r3, #16
 8009e62:	3502      	adds	r5, #2
 8009e64:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009e68:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	fbbc f9f3 	udiv	r9, ip, r3
 8009e72:	4610      	mov	r0, r2
 8009e74:	fb03 ca19 	mls	sl, r3, r9, ip
 8009e78:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009e7c:	2f09      	cmp	r7, #9
 8009e7e:	d81b      	bhi.n	8009eb8 <_strtol_l.constprop.0+0xa8>
 8009e80:	463c      	mov	r4, r7
 8009e82:	42a3      	cmp	r3, r4
 8009e84:	dd27      	ble.n	8009ed6 <_strtol_l.constprop.0+0xc6>
 8009e86:	1c57      	adds	r7, r2, #1
 8009e88:	d007      	beq.n	8009e9a <_strtol_l.constprop.0+0x8a>
 8009e8a:	4581      	cmp	r9, r0
 8009e8c:	d320      	bcc.n	8009ed0 <_strtol_l.constprop.0+0xc0>
 8009e8e:	d101      	bne.n	8009e94 <_strtol_l.constprop.0+0x84>
 8009e90:	45a2      	cmp	sl, r4
 8009e92:	db1d      	blt.n	8009ed0 <_strtol_l.constprop.0+0xc0>
 8009e94:	fb00 4003 	mla	r0, r0, r3, r4
 8009e98:	2201      	movs	r2, #1
 8009e9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e9e:	e7eb      	b.n	8009e78 <_strtol_l.constprop.0+0x68>
 8009ea0:	2c2b      	cmp	r4, #43	@ 0x2b
 8009ea2:	bf04      	itt	eq
 8009ea4:	782c      	ldrbeq	r4, [r5, #0]
 8009ea6:	1c95      	addeq	r5, r2, #2
 8009ea8:	e7cf      	b.n	8009e4a <_strtol_l.constprop.0+0x3a>
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d1da      	bne.n	8009e64 <_strtol_l.constprop.0+0x54>
 8009eae:	2c30      	cmp	r4, #48	@ 0x30
 8009eb0:	bf0c      	ite	eq
 8009eb2:	2308      	moveq	r3, #8
 8009eb4:	230a      	movne	r3, #10
 8009eb6:	e7d5      	b.n	8009e64 <_strtol_l.constprop.0+0x54>
 8009eb8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009ebc:	2f19      	cmp	r7, #25
 8009ebe:	d801      	bhi.n	8009ec4 <_strtol_l.constprop.0+0xb4>
 8009ec0:	3c37      	subs	r4, #55	@ 0x37
 8009ec2:	e7de      	b.n	8009e82 <_strtol_l.constprop.0+0x72>
 8009ec4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009ec8:	2f19      	cmp	r7, #25
 8009eca:	d804      	bhi.n	8009ed6 <_strtol_l.constprop.0+0xc6>
 8009ecc:	3c57      	subs	r4, #87	@ 0x57
 8009ece:	e7d8      	b.n	8009e82 <_strtol_l.constprop.0+0x72>
 8009ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ed4:	e7e1      	b.n	8009e9a <_strtol_l.constprop.0+0x8a>
 8009ed6:	1c53      	adds	r3, r2, #1
 8009ed8:	d108      	bne.n	8009eec <_strtol_l.constprop.0+0xdc>
 8009eda:	2322      	movs	r3, #34	@ 0x22
 8009edc:	f8ce 3000 	str.w	r3, [lr]
 8009ee0:	4660      	mov	r0, ip
 8009ee2:	f1b8 0f00 	cmp.w	r8, #0
 8009ee6:	d0a0      	beq.n	8009e2a <_strtol_l.constprop.0+0x1a>
 8009ee8:	1e69      	subs	r1, r5, #1
 8009eea:	e006      	b.n	8009efa <_strtol_l.constprop.0+0xea>
 8009eec:	b106      	cbz	r6, 8009ef0 <_strtol_l.constprop.0+0xe0>
 8009eee:	4240      	negs	r0, r0
 8009ef0:	f1b8 0f00 	cmp.w	r8, #0
 8009ef4:	d099      	beq.n	8009e2a <_strtol_l.constprop.0+0x1a>
 8009ef6:	2a00      	cmp	r2, #0
 8009ef8:	d1f6      	bne.n	8009ee8 <_strtol_l.constprop.0+0xd8>
 8009efa:	f8c8 1000 	str.w	r1, [r8]
 8009efe:	e794      	b.n	8009e2a <_strtol_l.constprop.0+0x1a>
 8009f00:	0800e735 	.word	0x0800e735

08009f04 <_strtol_r>:
 8009f04:	f7ff bf84 	b.w	8009e10 <_strtol_l.constprop.0>

08009f08 <strtol>:
 8009f08:	4613      	mov	r3, r2
 8009f0a:	460a      	mov	r2, r1
 8009f0c:	4601      	mov	r1, r0
 8009f0e:	4802      	ldr	r0, [pc, #8]	@ (8009f18 <strtol+0x10>)
 8009f10:	6800      	ldr	r0, [r0, #0]
 8009f12:	f7ff bf7d 	b.w	8009e10 <_strtol_l.constprop.0>
 8009f16:	bf00      	nop
 8009f18:	200000d4 	.word	0x200000d4

08009f1c <__cvt>:
 8009f1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f20:	ec57 6b10 	vmov	r6, r7, d0
 8009f24:	2f00      	cmp	r7, #0
 8009f26:	460c      	mov	r4, r1
 8009f28:	4619      	mov	r1, r3
 8009f2a:	463b      	mov	r3, r7
 8009f2c:	bfbb      	ittet	lt
 8009f2e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009f32:	461f      	movlt	r7, r3
 8009f34:	2300      	movge	r3, #0
 8009f36:	232d      	movlt	r3, #45	@ 0x2d
 8009f38:	700b      	strb	r3, [r1, #0]
 8009f3a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009f3c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009f40:	4691      	mov	r9, r2
 8009f42:	f023 0820 	bic.w	r8, r3, #32
 8009f46:	bfbc      	itt	lt
 8009f48:	4632      	movlt	r2, r6
 8009f4a:	4616      	movlt	r6, r2
 8009f4c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009f50:	d005      	beq.n	8009f5e <__cvt+0x42>
 8009f52:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009f56:	d100      	bne.n	8009f5a <__cvt+0x3e>
 8009f58:	3401      	adds	r4, #1
 8009f5a:	2102      	movs	r1, #2
 8009f5c:	e000      	b.n	8009f60 <__cvt+0x44>
 8009f5e:	2103      	movs	r1, #3
 8009f60:	ab03      	add	r3, sp, #12
 8009f62:	9301      	str	r3, [sp, #4]
 8009f64:	ab02      	add	r3, sp, #8
 8009f66:	9300      	str	r3, [sp, #0]
 8009f68:	ec47 6b10 	vmov	d0, r6, r7
 8009f6c:	4653      	mov	r3, sl
 8009f6e:	4622      	mov	r2, r4
 8009f70:	f001 f922 	bl	800b1b8 <_dtoa_r>
 8009f74:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009f78:	4605      	mov	r5, r0
 8009f7a:	d119      	bne.n	8009fb0 <__cvt+0x94>
 8009f7c:	f019 0f01 	tst.w	r9, #1
 8009f80:	d00e      	beq.n	8009fa0 <__cvt+0x84>
 8009f82:	eb00 0904 	add.w	r9, r0, r4
 8009f86:	2200      	movs	r2, #0
 8009f88:	2300      	movs	r3, #0
 8009f8a:	4630      	mov	r0, r6
 8009f8c:	4639      	mov	r1, r7
 8009f8e:	f7f6 fdd3 	bl	8000b38 <__aeabi_dcmpeq>
 8009f92:	b108      	cbz	r0, 8009f98 <__cvt+0x7c>
 8009f94:	f8cd 900c 	str.w	r9, [sp, #12]
 8009f98:	2230      	movs	r2, #48	@ 0x30
 8009f9a:	9b03      	ldr	r3, [sp, #12]
 8009f9c:	454b      	cmp	r3, r9
 8009f9e:	d31e      	bcc.n	8009fde <__cvt+0xc2>
 8009fa0:	9b03      	ldr	r3, [sp, #12]
 8009fa2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009fa4:	1b5b      	subs	r3, r3, r5
 8009fa6:	4628      	mov	r0, r5
 8009fa8:	6013      	str	r3, [r2, #0]
 8009faa:	b004      	add	sp, #16
 8009fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fb0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009fb4:	eb00 0904 	add.w	r9, r0, r4
 8009fb8:	d1e5      	bne.n	8009f86 <__cvt+0x6a>
 8009fba:	7803      	ldrb	r3, [r0, #0]
 8009fbc:	2b30      	cmp	r3, #48	@ 0x30
 8009fbe:	d10a      	bne.n	8009fd6 <__cvt+0xba>
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	4630      	mov	r0, r6
 8009fc6:	4639      	mov	r1, r7
 8009fc8:	f7f6 fdb6 	bl	8000b38 <__aeabi_dcmpeq>
 8009fcc:	b918      	cbnz	r0, 8009fd6 <__cvt+0xba>
 8009fce:	f1c4 0401 	rsb	r4, r4, #1
 8009fd2:	f8ca 4000 	str.w	r4, [sl]
 8009fd6:	f8da 3000 	ldr.w	r3, [sl]
 8009fda:	4499      	add	r9, r3
 8009fdc:	e7d3      	b.n	8009f86 <__cvt+0x6a>
 8009fde:	1c59      	adds	r1, r3, #1
 8009fe0:	9103      	str	r1, [sp, #12]
 8009fe2:	701a      	strb	r2, [r3, #0]
 8009fe4:	e7d9      	b.n	8009f9a <__cvt+0x7e>

08009fe6 <__exponent>:
 8009fe6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009fe8:	2900      	cmp	r1, #0
 8009fea:	bfba      	itte	lt
 8009fec:	4249      	neglt	r1, r1
 8009fee:	232d      	movlt	r3, #45	@ 0x2d
 8009ff0:	232b      	movge	r3, #43	@ 0x2b
 8009ff2:	2909      	cmp	r1, #9
 8009ff4:	7002      	strb	r2, [r0, #0]
 8009ff6:	7043      	strb	r3, [r0, #1]
 8009ff8:	dd29      	ble.n	800a04e <__exponent+0x68>
 8009ffa:	f10d 0307 	add.w	r3, sp, #7
 8009ffe:	461d      	mov	r5, r3
 800a000:	270a      	movs	r7, #10
 800a002:	461a      	mov	r2, r3
 800a004:	fbb1 f6f7 	udiv	r6, r1, r7
 800a008:	fb07 1416 	mls	r4, r7, r6, r1
 800a00c:	3430      	adds	r4, #48	@ 0x30
 800a00e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a012:	460c      	mov	r4, r1
 800a014:	2c63      	cmp	r4, #99	@ 0x63
 800a016:	f103 33ff 	add.w	r3, r3, #4294967295
 800a01a:	4631      	mov	r1, r6
 800a01c:	dcf1      	bgt.n	800a002 <__exponent+0x1c>
 800a01e:	3130      	adds	r1, #48	@ 0x30
 800a020:	1e94      	subs	r4, r2, #2
 800a022:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a026:	1c41      	adds	r1, r0, #1
 800a028:	4623      	mov	r3, r4
 800a02a:	42ab      	cmp	r3, r5
 800a02c:	d30a      	bcc.n	800a044 <__exponent+0x5e>
 800a02e:	f10d 0309 	add.w	r3, sp, #9
 800a032:	1a9b      	subs	r3, r3, r2
 800a034:	42ac      	cmp	r4, r5
 800a036:	bf88      	it	hi
 800a038:	2300      	movhi	r3, #0
 800a03a:	3302      	adds	r3, #2
 800a03c:	4403      	add	r3, r0
 800a03e:	1a18      	subs	r0, r3, r0
 800a040:	b003      	add	sp, #12
 800a042:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a044:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a048:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a04c:	e7ed      	b.n	800a02a <__exponent+0x44>
 800a04e:	2330      	movs	r3, #48	@ 0x30
 800a050:	3130      	adds	r1, #48	@ 0x30
 800a052:	7083      	strb	r3, [r0, #2]
 800a054:	70c1      	strb	r1, [r0, #3]
 800a056:	1d03      	adds	r3, r0, #4
 800a058:	e7f1      	b.n	800a03e <__exponent+0x58>
	...

0800a05c <_printf_float>:
 800a05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a060:	b08d      	sub	sp, #52	@ 0x34
 800a062:	460c      	mov	r4, r1
 800a064:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a068:	4616      	mov	r6, r2
 800a06a:	461f      	mov	r7, r3
 800a06c:	4605      	mov	r5, r0
 800a06e:	f000 ff7f 	bl	800af70 <_localeconv_r>
 800a072:	6803      	ldr	r3, [r0, #0]
 800a074:	9304      	str	r3, [sp, #16]
 800a076:	4618      	mov	r0, r3
 800a078:	f7f6 f932 	bl	80002e0 <strlen>
 800a07c:	2300      	movs	r3, #0
 800a07e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a080:	f8d8 3000 	ldr.w	r3, [r8]
 800a084:	9005      	str	r0, [sp, #20]
 800a086:	3307      	adds	r3, #7
 800a088:	f023 0307 	bic.w	r3, r3, #7
 800a08c:	f103 0208 	add.w	r2, r3, #8
 800a090:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a094:	f8d4 b000 	ldr.w	fp, [r4]
 800a098:	f8c8 2000 	str.w	r2, [r8]
 800a09c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a0a0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a0a4:	9307      	str	r3, [sp, #28]
 800a0a6:	f8cd 8018 	str.w	r8, [sp, #24]
 800a0aa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a0ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0b2:	4b9c      	ldr	r3, [pc, #624]	@ (800a324 <_printf_float+0x2c8>)
 800a0b4:	f04f 32ff 	mov.w	r2, #4294967295
 800a0b8:	f7f6 fd70 	bl	8000b9c <__aeabi_dcmpun>
 800a0bc:	bb70      	cbnz	r0, 800a11c <_printf_float+0xc0>
 800a0be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0c2:	4b98      	ldr	r3, [pc, #608]	@ (800a324 <_printf_float+0x2c8>)
 800a0c4:	f04f 32ff 	mov.w	r2, #4294967295
 800a0c8:	f7f6 fd4a 	bl	8000b60 <__aeabi_dcmple>
 800a0cc:	bb30      	cbnz	r0, 800a11c <_printf_float+0xc0>
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	4640      	mov	r0, r8
 800a0d4:	4649      	mov	r1, r9
 800a0d6:	f7f6 fd39 	bl	8000b4c <__aeabi_dcmplt>
 800a0da:	b110      	cbz	r0, 800a0e2 <_printf_float+0x86>
 800a0dc:	232d      	movs	r3, #45	@ 0x2d
 800a0de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0e2:	4a91      	ldr	r2, [pc, #580]	@ (800a328 <_printf_float+0x2cc>)
 800a0e4:	4b91      	ldr	r3, [pc, #580]	@ (800a32c <_printf_float+0x2d0>)
 800a0e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a0ea:	bf94      	ite	ls
 800a0ec:	4690      	movls	r8, r2
 800a0ee:	4698      	movhi	r8, r3
 800a0f0:	2303      	movs	r3, #3
 800a0f2:	6123      	str	r3, [r4, #16]
 800a0f4:	f02b 0304 	bic.w	r3, fp, #4
 800a0f8:	6023      	str	r3, [r4, #0]
 800a0fa:	f04f 0900 	mov.w	r9, #0
 800a0fe:	9700      	str	r7, [sp, #0]
 800a100:	4633      	mov	r3, r6
 800a102:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a104:	4621      	mov	r1, r4
 800a106:	4628      	mov	r0, r5
 800a108:	f000 f9d2 	bl	800a4b0 <_printf_common>
 800a10c:	3001      	adds	r0, #1
 800a10e:	f040 808d 	bne.w	800a22c <_printf_float+0x1d0>
 800a112:	f04f 30ff 	mov.w	r0, #4294967295
 800a116:	b00d      	add	sp, #52	@ 0x34
 800a118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a11c:	4642      	mov	r2, r8
 800a11e:	464b      	mov	r3, r9
 800a120:	4640      	mov	r0, r8
 800a122:	4649      	mov	r1, r9
 800a124:	f7f6 fd3a 	bl	8000b9c <__aeabi_dcmpun>
 800a128:	b140      	cbz	r0, 800a13c <_printf_float+0xe0>
 800a12a:	464b      	mov	r3, r9
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	bfbc      	itt	lt
 800a130:	232d      	movlt	r3, #45	@ 0x2d
 800a132:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a136:	4a7e      	ldr	r2, [pc, #504]	@ (800a330 <_printf_float+0x2d4>)
 800a138:	4b7e      	ldr	r3, [pc, #504]	@ (800a334 <_printf_float+0x2d8>)
 800a13a:	e7d4      	b.n	800a0e6 <_printf_float+0x8a>
 800a13c:	6863      	ldr	r3, [r4, #4]
 800a13e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a142:	9206      	str	r2, [sp, #24]
 800a144:	1c5a      	adds	r2, r3, #1
 800a146:	d13b      	bne.n	800a1c0 <_printf_float+0x164>
 800a148:	2306      	movs	r3, #6
 800a14a:	6063      	str	r3, [r4, #4]
 800a14c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a150:	2300      	movs	r3, #0
 800a152:	6022      	str	r2, [r4, #0]
 800a154:	9303      	str	r3, [sp, #12]
 800a156:	ab0a      	add	r3, sp, #40	@ 0x28
 800a158:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a15c:	ab09      	add	r3, sp, #36	@ 0x24
 800a15e:	9300      	str	r3, [sp, #0]
 800a160:	6861      	ldr	r1, [r4, #4]
 800a162:	ec49 8b10 	vmov	d0, r8, r9
 800a166:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a16a:	4628      	mov	r0, r5
 800a16c:	f7ff fed6 	bl	8009f1c <__cvt>
 800a170:	9b06      	ldr	r3, [sp, #24]
 800a172:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a174:	2b47      	cmp	r3, #71	@ 0x47
 800a176:	4680      	mov	r8, r0
 800a178:	d129      	bne.n	800a1ce <_printf_float+0x172>
 800a17a:	1cc8      	adds	r0, r1, #3
 800a17c:	db02      	blt.n	800a184 <_printf_float+0x128>
 800a17e:	6863      	ldr	r3, [r4, #4]
 800a180:	4299      	cmp	r1, r3
 800a182:	dd41      	ble.n	800a208 <_printf_float+0x1ac>
 800a184:	f1aa 0a02 	sub.w	sl, sl, #2
 800a188:	fa5f fa8a 	uxtb.w	sl, sl
 800a18c:	3901      	subs	r1, #1
 800a18e:	4652      	mov	r2, sl
 800a190:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a194:	9109      	str	r1, [sp, #36]	@ 0x24
 800a196:	f7ff ff26 	bl	8009fe6 <__exponent>
 800a19a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a19c:	1813      	adds	r3, r2, r0
 800a19e:	2a01      	cmp	r2, #1
 800a1a0:	4681      	mov	r9, r0
 800a1a2:	6123      	str	r3, [r4, #16]
 800a1a4:	dc02      	bgt.n	800a1ac <_printf_float+0x150>
 800a1a6:	6822      	ldr	r2, [r4, #0]
 800a1a8:	07d2      	lsls	r2, r2, #31
 800a1aa:	d501      	bpl.n	800a1b0 <_printf_float+0x154>
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	6123      	str	r3, [r4, #16]
 800a1b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d0a2      	beq.n	800a0fe <_printf_float+0xa2>
 800a1b8:	232d      	movs	r3, #45	@ 0x2d
 800a1ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a1be:	e79e      	b.n	800a0fe <_printf_float+0xa2>
 800a1c0:	9a06      	ldr	r2, [sp, #24]
 800a1c2:	2a47      	cmp	r2, #71	@ 0x47
 800a1c4:	d1c2      	bne.n	800a14c <_printf_float+0xf0>
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d1c0      	bne.n	800a14c <_printf_float+0xf0>
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	e7bd      	b.n	800a14a <_printf_float+0xee>
 800a1ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a1d2:	d9db      	bls.n	800a18c <_printf_float+0x130>
 800a1d4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a1d8:	d118      	bne.n	800a20c <_printf_float+0x1b0>
 800a1da:	2900      	cmp	r1, #0
 800a1dc:	6863      	ldr	r3, [r4, #4]
 800a1de:	dd0b      	ble.n	800a1f8 <_printf_float+0x19c>
 800a1e0:	6121      	str	r1, [r4, #16]
 800a1e2:	b913      	cbnz	r3, 800a1ea <_printf_float+0x18e>
 800a1e4:	6822      	ldr	r2, [r4, #0]
 800a1e6:	07d0      	lsls	r0, r2, #31
 800a1e8:	d502      	bpl.n	800a1f0 <_printf_float+0x194>
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	440b      	add	r3, r1
 800a1ee:	6123      	str	r3, [r4, #16]
 800a1f0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a1f2:	f04f 0900 	mov.w	r9, #0
 800a1f6:	e7db      	b.n	800a1b0 <_printf_float+0x154>
 800a1f8:	b913      	cbnz	r3, 800a200 <_printf_float+0x1a4>
 800a1fa:	6822      	ldr	r2, [r4, #0]
 800a1fc:	07d2      	lsls	r2, r2, #31
 800a1fe:	d501      	bpl.n	800a204 <_printf_float+0x1a8>
 800a200:	3302      	adds	r3, #2
 800a202:	e7f4      	b.n	800a1ee <_printf_float+0x192>
 800a204:	2301      	movs	r3, #1
 800a206:	e7f2      	b.n	800a1ee <_printf_float+0x192>
 800a208:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a20c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a20e:	4299      	cmp	r1, r3
 800a210:	db05      	blt.n	800a21e <_printf_float+0x1c2>
 800a212:	6823      	ldr	r3, [r4, #0]
 800a214:	6121      	str	r1, [r4, #16]
 800a216:	07d8      	lsls	r0, r3, #31
 800a218:	d5ea      	bpl.n	800a1f0 <_printf_float+0x194>
 800a21a:	1c4b      	adds	r3, r1, #1
 800a21c:	e7e7      	b.n	800a1ee <_printf_float+0x192>
 800a21e:	2900      	cmp	r1, #0
 800a220:	bfd4      	ite	le
 800a222:	f1c1 0202 	rsble	r2, r1, #2
 800a226:	2201      	movgt	r2, #1
 800a228:	4413      	add	r3, r2
 800a22a:	e7e0      	b.n	800a1ee <_printf_float+0x192>
 800a22c:	6823      	ldr	r3, [r4, #0]
 800a22e:	055a      	lsls	r2, r3, #21
 800a230:	d407      	bmi.n	800a242 <_printf_float+0x1e6>
 800a232:	6923      	ldr	r3, [r4, #16]
 800a234:	4642      	mov	r2, r8
 800a236:	4631      	mov	r1, r6
 800a238:	4628      	mov	r0, r5
 800a23a:	47b8      	blx	r7
 800a23c:	3001      	adds	r0, #1
 800a23e:	d12b      	bne.n	800a298 <_printf_float+0x23c>
 800a240:	e767      	b.n	800a112 <_printf_float+0xb6>
 800a242:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a246:	f240 80dd 	bls.w	800a404 <_printf_float+0x3a8>
 800a24a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a24e:	2200      	movs	r2, #0
 800a250:	2300      	movs	r3, #0
 800a252:	f7f6 fc71 	bl	8000b38 <__aeabi_dcmpeq>
 800a256:	2800      	cmp	r0, #0
 800a258:	d033      	beq.n	800a2c2 <_printf_float+0x266>
 800a25a:	4a37      	ldr	r2, [pc, #220]	@ (800a338 <_printf_float+0x2dc>)
 800a25c:	2301      	movs	r3, #1
 800a25e:	4631      	mov	r1, r6
 800a260:	4628      	mov	r0, r5
 800a262:	47b8      	blx	r7
 800a264:	3001      	adds	r0, #1
 800a266:	f43f af54 	beq.w	800a112 <_printf_float+0xb6>
 800a26a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a26e:	4543      	cmp	r3, r8
 800a270:	db02      	blt.n	800a278 <_printf_float+0x21c>
 800a272:	6823      	ldr	r3, [r4, #0]
 800a274:	07d8      	lsls	r0, r3, #31
 800a276:	d50f      	bpl.n	800a298 <_printf_float+0x23c>
 800a278:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a27c:	4631      	mov	r1, r6
 800a27e:	4628      	mov	r0, r5
 800a280:	47b8      	blx	r7
 800a282:	3001      	adds	r0, #1
 800a284:	f43f af45 	beq.w	800a112 <_printf_float+0xb6>
 800a288:	f04f 0900 	mov.w	r9, #0
 800a28c:	f108 38ff 	add.w	r8, r8, #4294967295
 800a290:	f104 0a1a 	add.w	sl, r4, #26
 800a294:	45c8      	cmp	r8, r9
 800a296:	dc09      	bgt.n	800a2ac <_printf_float+0x250>
 800a298:	6823      	ldr	r3, [r4, #0]
 800a29a:	079b      	lsls	r3, r3, #30
 800a29c:	f100 8103 	bmi.w	800a4a6 <_printf_float+0x44a>
 800a2a0:	68e0      	ldr	r0, [r4, #12]
 800a2a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a2a4:	4298      	cmp	r0, r3
 800a2a6:	bfb8      	it	lt
 800a2a8:	4618      	movlt	r0, r3
 800a2aa:	e734      	b.n	800a116 <_printf_float+0xba>
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	4652      	mov	r2, sl
 800a2b0:	4631      	mov	r1, r6
 800a2b2:	4628      	mov	r0, r5
 800a2b4:	47b8      	blx	r7
 800a2b6:	3001      	adds	r0, #1
 800a2b8:	f43f af2b 	beq.w	800a112 <_printf_float+0xb6>
 800a2bc:	f109 0901 	add.w	r9, r9, #1
 800a2c0:	e7e8      	b.n	800a294 <_printf_float+0x238>
 800a2c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	dc39      	bgt.n	800a33c <_printf_float+0x2e0>
 800a2c8:	4a1b      	ldr	r2, [pc, #108]	@ (800a338 <_printf_float+0x2dc>)
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	4631      	mov	r1, r6
 800a2ce:	4628      	mov	r0, r5
 800a2d0:	47b8      	blx	r7
 800a2d2:	3001      	adds	r0, #1
 800a2d4:	f43f af1d 	beq.w	800a112 <_printf_float+0xb6>
 800a2d8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a2dc:	ea59 0303 	orrs.w	r3, r9, r3
 800a2e0:	d102      	bne.n	800a2e8 <_printf_float+0x28c>
 800a2e2:	6823      	ldr	r3, [r4, #0]
 800a2e4:	07d9      	lsls	r1, r3, #31
 800a2e6:	d5d7      	bpl.n	800a298 <_printf_float+0x23c>
 800a2e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2ec:	4631      	mov	r1, r6
 800a2ee:	4628      	mov	r0, r5
 800a2f0:	47b8      	blx	r7
 800a2f2:	3001      	adds	r0, #1
 800a2f4:	f43f af0d 	beq.w	800a112 <_printf_float+0xb6>
 800a2f8:	f04f 0a00 	mov.w	sl, #0
 800a2fc:	f104 0b1a 	add.w	fp, r4, #26
 800a300:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a302:	425b      	negs	r3, r3
 800a304:	4553      	cmp	r3, sl
 800a306:	dc01      	bgt.n	800a30c <_printf_float+0x2b0>
 800a308:	464b      	mov	r3, r9
 800a30a:	e793      	b.n	800a234 <_printf_float+0x1d8>
 800a30c:	2301      	movs	r3, #1
 800a30e:	465a      	mov	r2, fp
 800a310:	4631      	mov	r1, r6
 800a312:	4628      	mov	r0, r5
 800a314:	47b8      	blx	r7
 800a316:	3001      	adds	r0, #1
 800a318:	f43f aefb 	beq.w	800a112 <_printf_float+0xb6>
 800a31c:	f10a 0a01 	add.w	sl, sl, #1
 800a320:	e7ee      	b.n	800a300 <_printf_float+0x2a4>
 800a322:	bf00      	nop
 800a324:	7fefffff 	.word	0x7fefffff
 800a328:	0800e835 	.word	0x0800e835
 800a32c:	0800e839 	.word	0x0800e839
 800a330:	0800e83d 	.word	0x0800e83d
 800a334:	0800e841 	.word	0x0800e841
 800a338:	0800e845 	.word	0x0800e845
 800a33c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a33e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a342:	4553      	cmp	r3, sl
 800a344:	bfa8      	it	ge
 800a346:	4653      	movge	r3, sl
 800a348:	2b00      	cmp	r3, #0
 800a34a:	4699      	mov	r9, r3
 800a34c:	dc36      	bgt.n	800a3bc <_printf_float+0x360>
 800a34e:	f04f 0b00 	mov.w	fp, #0
 800a352:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a356:	f104 021a 	add.w	r2, r4, #26
 800a35a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a35c:	9306      	str	r3, [sp, #24]
 800a35e:	eba3 0309 	sub.w	r3, r3, r9
 800a362:	455b      	cmp	r3, fp
 800a364:	dc31      	bgt.n	800a3ca <_printf_float+0x36e>
 800a366:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a368:	459a      	cmp	sl, r3
 800a36a:	dc3a      	bgt.n	800a3e2 <_printf_float+0x386>
 800a36c:	6823      	ldr	r3, [r4, #0]
 800a36e:	07da      	lsls	r2, r3, #31
 800a370:	d437      	bmi.n	800a3e2 <_printf_float+0x386>
 800a372:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a374:	ebaa 0903 	sub.w	r9, sl, r3
 800a378:	9b06      	ldr	r3, [sp, #24]
 800a37a:	ebaa 0303 	sub.w	r3, sl, r3
 800a37e:	4599      	cmp	r9, r3
 800a380:	bfa8      	it	ge
 800a382:	4699      	movge	r9, r3
 800a384:	f1b9 0f00 	cmp.w	r9, #0
 800a388:	dc33      	bgt.n	800a3f2 <_printf_float+0x396>
 800a38a:	f04f 0800 	mov.w	r8, #0
 800a38e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a392:	f104 0b1a 	add.w	fp, r4, #26
 800a396:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a398:	ebaa 0303 	sub.w	r3, sl, r3
 800a39c:	eba3 0309 	sub.w	r3, r3, r9
 800a3a0:	4543      	cmp	r3, r8
 800a3a2:	f77f af79 	ble.w	800a298 <_printf_float+0x23c>
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	465a      	mov	r2, fp
 800a3aa:	4631      	mov	r1, r6
 800a3ac:	4628      	mov	r0, r5
 800a3ae:	47b8      	blx	r7
 800a3b0:	3001      	adds	r0, #1
 800a3b2:	f43f aeae 	beq.w	800a112 <_printf_float+0xb6>
 800a3b6:	f108 0801 	add.w	r8, r8, #1
 800a3ba:	e7ec      	b.n	800a396 <_printf_float+0x33a>
 800a3bc:	4642      	mov	r2, r8
 800a3be:	4631      	mov	r1, r6
 800a3c0:	4628      	mov	r0, r5
 800a3c2:	47b8      	blx	r7
 800a3c4:	3001      	adds	r0, #1
 800a3c6:	d1c2      	bne.n	800a34e <_printf_float+0x2f2>
 800a3c8:	e6a3      	b.n	800a112 <_printf_float+0xb6>
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	4631      	mov	r1, r6
 800a3ce:	4628      	mov	r0, r5
 800a3d0:	9206      	str	r2, [sp, #24]
 800a3d2:	47b8      	blx	r7
 800a3d4:	3001      	adds	r0, #1
 800a3d6:	f43f ae9c 	beq.w	800a112 <_printf_float+0xb6>
 800a3da:	9a06      	ldr	r2, [sp, #24]
 800a3dc:	f10b 0b01 	add.w	fp, fp, #1
 800a3e0:	e7bb      	b.n	800a35a <_printf_float+0x2fe>
 800a3e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3e6:	4631      	mov	r1, r6
 800a3e8:	4628      	mov	r0, r5
 800a3ea:	47b8      	blx	r7
 800a3ec:	3001      	adds	r0, #1
 800a3ee:	d1c0      	bne.n	800a372 <_printf_float+0x316>
 800a3f0:	e68f      	b.n	800a112 <_printf_float+0xb6>
 800a3f2:	9a06      	ldr	r2, [sp, #24]
 800a3f4:	464b      	mov	r3, r9
 800a3f6:	4442      	add	r2, r8
 800a3f8:	4631      	mov	r1, r6
 800a3fa:	4628      	mov	r0, r5
 800a3fc:	47b8      	blx	r7
 800a3fe:	3001      	adds	r0, #1
 800a400:	d1c3      	bne.n	800a38a <_printf_float+0x32e>
 800a402:	e686      	b.n	800a112 <_printf_float+0xb6>
 800a404:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a408:	f1ba 0f01 	cmp.w	sl, #1
 800a40c:	dc01      	bgt.n	800a412 <_printf_float+0x3b6>
 800a40e:	07db      	lsls	r3, r3, #31
 800a410:	d536      	bpl.n	800a480 <_printf_float+0x424>
 800a412:	2301      	movs	r3, #1
 800a414:	4642      	mov	r2, r8
 800a416:	4631      	mov	r1, r6
 800a418:	4628      	mov	r0, r5
 800a41a:	47b8      	blx	r7
 800a41c:	3001      	adds	r0, #1
 800a41e:	f43f ae78 	beq.w	800a112 <_printf_float+0xb6>
 800a422:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a426:	4631      	mov	r1, r6
 800a428:	4628      	mov	r0, r5
 800a42a:	47b8      	blx	r7
 800a42c:	3001      	adds	r0, #1
 800a42e:	f43f ae70 	beq.w	800a112 <_printf_float+0xb6>
 800a432:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a436:	2200      	movs	r2, #0
 800a438:	2300      	movs	r3, #0
 800a43a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a43e:	f7f6 fb7b 	bl	8000b38 <__aeabi_dcmpeq>
 800a442:	b9c0      	cbnz	r0, 800a476 <_printf_float+0x41a>
 800a444:	4653      	mov	r3, sl
 800a446:	f108 0201 	add.w	r2, r8, #1
 800a44a:	4631      	mov	r1, r6
 800a44c:	4628      	mov	r0, r5
 800a44e:	47b8      	blx	r7
 800a450:	3001      	adds	r0, #1
 800a452:	d10c      	bne.n	800a46e <_printf_float+0x412>
 800a454:	e65d      	b.n	800a112 <_printf_float+0xb6>
 800a456:	2301      	movs	r3, #1
 800a458:	465a      	mov	r2, fp
 800a45a:	4631      	mov	r1, r6
 800a45c:	4628      	mov	r0, r5
 800a45e:	47b8      	blx	r7
 800a460:	3001      	adds	r0, #1
 800a462:	f43f ae56 	beq.w	800a112 <_printf_float+0xb6>
 800a466:	f108 0801 	add.w	r8, r8, #1
 800a46a:	45d0      	cmp	r8, sl
 800a46c:	dbf3      	blt.n	800a456 <_printf_float+0x3fa>
 800a46e:	464b      	mov	r3, r9
 800a470:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a474:	e6df      	b.n	800a236 <_printf_float+0x1da>
 800a476:	f04f 0800 	mov.w	r8, #0
 800a47a:	f104 0b1a 	add.w	fp, r4, #26
 800a47e:	e7f4      	b.n	800a46a <_printf_float+0x40e>
 800a480:	2301      	movs	r3, #1
 800a482:	4642      	mov	r2, r8
 800a484:	e7e1      	b.n	800a44a <_printf_float+0x3ee>
 800a486:	2301      	movs	r3, #1
 800a488:	464a      	mov	r2, r9
 800a48a:	4631      	mov	r1, r6
 800a48c:	4628      	mov	r0, r5
 800a48e:	47b8      	blx	r7
 800a490:	3001      	adds	r0, #1
 800a492:	f43f ae3e 	beq.w	800a112 <_printf_float+0xb6>
 800a496:	f108 0801 	add.w	r8, r8, #1
 800a49a:	68e3      	ldr	r3, [r4, #12]
 800a49c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a49e:	1a5b      	subs	r3, r3, r1
 800a4a0:	4543      	cmp	r3, r8
 800a4a2:	dcf0      	bgt.n	800a486 <_printf_float+0x42a>
 800a4a4:	e6fc      	b.n	800a2a0 <_printf_float+0x244>
 800a4a6:	f04f 0800 	mov.w	r8, #0
 800a4aa:	f104 0919 	add.w	r9, r4, #25
 800a4ae:	e7f4      	b.n	800a49a <_printf_float+0x43e>

0800a4b0 <_printf_common>:
 800a4b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4b4:	4616      	mov	r6, r2
 800a4b6:	4698      	mov	r8, r3
 800a4b8:	688a      	ldr	r2, [r1, #8]
 800a4ba:	690b      	ldr	r3, [r1, #16]
 800a4bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	bfb8      	it	lt
 800a4c4:	4613      	movlt	r3, r2
 800a4c6:	6033      	str	r3, [r6, #0]
 800a4c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a4cc:	4607      	mov	r7, r0
 800a4ce:	460c      	mov	r4, r1
 800a4d0:	b10a      	cbz	r2, 800a4d6 <_printf_common+0x26>
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	6033      	str	r3, [r6, #0]
 800a4d6:	6823      	ldr	r3, [r4, #0]
 800a4d8:	0699      	lsls	r1, r3, #26
 800a4da:	bf42      	ittt	mi
 800a4dc:	6833      	ldrmi	r3, [r6, #0]
 800a4de:	3302      	addmi	r3, #2
 800a4e0:	6033      	strmi	r3, [r6, #0]
 800a4e2:	6825      	ldr	r5, [r4, #0]
 800a4e4:	f015 0506 	ands.w	r5, r5, #6
 800a4e8:	d106      	bne.n	800a4f8 <_printf_common+0x48>
 800a4ea:	f104 0a19 	add.w	sl, r4, #25
 800a4ee:	68e3      	ldr	r3, [r4, #12]
 800a4f0:	6832      	ldr	r2, [r6, #0]
 800a4f2:	1a9b      	subs	r3, r3, r2
 800a4f4:	42ab      	cmp	r3, r5
 800a4f6:	dc26      	bgt.n	800a546 <_printf_common+0x96>
 800a4f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a4fc:	6822      	ldr	r2, [r4, #0]
 800a4fe:	3b00      	subs	r3, #0
 800a500:	bf18      	it	ne
 800a502:	2301      	movne	r3, #1
 800a504:	0692      	lsls	r2, r2, #26
 800a506:	d42b      	bmi.n	800a560 <_printf_common+0xb0>
 800a508:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a50c:	4641      	mov	r1, r8
 800a50e:	4638      	mov	r0, r7
 800a510:	47c8      	blx	r9
 800a512:	3001      	adds	r0, #1
 800a514:	d01e      	beq.n	800a554 <_printf_common+0xa4>
 800a516:	6823      	ldr	r3, [r4, #0]
 800a518:	6922      	ldr	r2, [r4, #16]
 800a51a:	f003 0306 	and.w	r3, r3, #6
 800a51e:	2b04      	cmp	r3, #4
 800a520:	bf02      	ittt	eq
 800a522:	68e5      	ldreq	r5, [r4, #12]
 800a524:	6833      	ldreq	r3, [r6, #0]
 800a526:	1aed      	subeq	r5, r5, r3
 800a528:	68a3      	ldr	r3, [r4, #8]
 800a52a:	bf0c      	ite	eq
 800a52c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a530:	2500      	movne	r5, #0
 800a532:	4293      	cmp	r3, r2
 800a534:	bfc4      	itt	gt
 800a536:	1a9b      	subgt	r3, r3, r2
 800a538:	18ed      	addgt	r5, r5, r3
 800a53a:	2600      	movs	r6, #0
 800a53c:	341a      	adds	r4, #26
 800a53e:	42b5      	cmp	r5, r6
 800a540:	d11a      	bne.n	800a578 <_printf_common+0xc8>
 800a542:	2000      	movs	r0, #0
 800a544:	e008      	b.n	800a558 <_printf_common+0xa8>
 800a546:	2301      	movs	r3, #1
 800a548:	4652      	mov	r2, sl
 800a54a:	4641      	mov	r1, r8
 800a54c:	4638      	mov	r0, r7
 800a54e:	47c8      	blx	r9
 800a550:	3001      	adds	r0, #1
 800a552:	d103      	bne.n	800a55c <_printf_common+0xac>
 800a554:	f04f 30ff 	mov.w	r0, #4294967295
 800a558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a55c:	3501      	adds	r5, #1
 800a55e:	e7c6      	b.n	800a4ee <_printf_common+0x3e>
 800a560:	18e1      	adds	r1, r4, r3
 800a562:	1c5a      	adds	r2, r3, #1
 800a564:	2030      	movs	r0, #48	@ 0x30
 800a566:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a56a:	4422      	add	r2, r4
 800a56c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a570:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a574:	3302      	adds	r3, #2
 800a576:	e7c7      	b.n	800a508 <_printf_common+0x58>
 800a578:	2301      	movs	r3, #1
 800a57a:	4622      	mov	r2, r4
 800a57c:	4641      	mov	r1, r8
 800a57e:	4638      	mov	r0, r7
 800a580:	47c8      	blx	r9
 800a582:	3001      	adds	r0, #1
 800a584:	d0e6      	beq.n	800a554 <_printf_common+0xa4>
 800a586:	3601      	adds	r6, #1
 800a588:	e7d9      	b.n	800a53e <_printf_common+0x8e>
	...

0800a58c <_printf_i>:
 800a58c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a590:	7e0f      	ldrb	r7, [r1, #24]
 800a592:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a594:	2f78      	cmp	r7, #120	@ 0x78
 800a596:	4691      	mov	r9, r2
 800a598:	4680      	mov	r8, r0
 800a59a:	460c      	mov	r4, r1
 800a59c:	469a      	mov	sl, r3
 800a59e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a5a2:	d807      	bhi.n	800a5b4 <_printf_i+0x28>
 800a5a4:	2f62      	cmp	r7, #98	@ 0x62
 800a5a6:	d80a      	bhi.n	800a5be <_printf_i+0x32>
 800a5a8:	2f00      	cmp	r7, #0
 800a5aa:	f000 80d2 	beq.w	800a752 <_printf_i+0x1c6>
 800a5ae:	2f58      	cmp	r7, #88	@ 0x58
 800a5b0:	f000 80b9 	beq.w	800a726 <_printf_i+0x19a>
 800a5b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a5b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a5bc:	e03a      	b.n	800a634 <_printf_i+0xa8>
 800a5be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a5c2:	2b15      	cmp	r3, #21
 800a5c4:	d8f6      	bhi.n	800a5b4 <_printf_i+0x28>
 800a5c6:	a101      	add	r1, pc, #4	@ (adr r1, 800a5cc <_printf_i+0x40>)
 800a5c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a5cc:	0800a625 	.word	0x0800a625
 800a5d0:	0800a639 	.word	0x0800a639
 800a5d4:	0800a5b5 	.word	0x0800a5b5
 800a5d8:	0800a5b5 	.word	0x0800a5b5
 800a5dc:	0800a5b5 	.word	0x0800a5b5
 800a5e0:	0800a5b5 	.word	0x0800a5b5
 800a5e4:	0800a639 	.word	0x0800a639
 800a5e8:	0800a5b5 	.word	0x0800a5b5
 800a5ec:	0800a5b5 	.word	0x0800a5b5
 800a5f0:	0800a5b5 	.word	0x0800a5b5
 800a5f4:	0800a5b5 	.word	0x0800a5b5
 800a5f8:	0800a739 	.word	0x0800a739
 800a5fc:	0800a663 	.word	0x0800a663
 800a600:	0800a6f3 	.word	0x0800a6f3
 800a604:	0800a5b5 	.word	0x0800a5b5
 800a608:	0800a5b5 	.word	0x0800a5b5
 800a60c:	0800a75b 	.word	0x0800a75b
 800a610:	0800a5b5 	.word	0x0800a5b5
 800a614:	0800a663 	.word	0x0800a663
 800a618:	0800a5b5 	.word	0x0800a5b5
 800a61c:	0800a5b5 	.word	0x0800a5b5
 800a620:	0800a6fb 	.word	0x0800a6fb
 800a624:	6833      	ldr	r3, [r6, #0]
 800a626:	1d1a      	adds	r2, r3, #4
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	6032      	str	r2, [r6, #0]
 800a62c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a630:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a634:	2301      	movs	r3, #1
 800a636:	e09d      	b.n	800a774 <_printf_i+0x1e8>
 800a638:	6833      	ldr	r3, [r6, #0]
 800a63a:	6820      	ldr	r0, [r4, #0]
 800a63c:	1d19      	adds	r1, r3, #4
 800a63e:	6031      	str	r1, [r6, #0]
 800a640:	0606      	lsls	r6, r0, #24
 800a642:	d501      	bpl.n	800a648 <_printf_i+0xbc>
 800a644:	681d      	ldr	r5, [r3, #0]
 800a646:	e003      	b.n	800a650 <_printf_i+0xc4>
 800a648:	0645      	lsls	r5, r0, #25
 800a64a:	d5fb      	bpl.n	800a644 <_printf_i+0xb8>
 800a64c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a650:	2d00      	cmp	r5, #0
 800a652:	da03      	bge.n	800a65c <_printf_i+0xd0>
 800a654:	232d      	movs	r3, #45	@ 0x2d
 800a656:	426d      	negs	r5, r5
 800a658:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a65c:	4859      	ldr	r0, [pc, #356]	@ (800a7c4 <_printf_i+0x238>)
 800a65e:	230a      	movs	r3, #10
 800a660:	e011      	b.n	800a686 <_printf_i+0xfa>
 800a662:	6821      	ldr	r1, [r4, #0]
 800a664:	6833      	ldr	r3, [r6, #0]
 800a666:	0608      	lsls	r0, r1, #24
 800a668:	f853 5b04 	ldr.w	r5, [r3], #4
 800a66c:	d402      	bmi.n	800a674 <_printf_i+0xe8>
 800a66e:	0649      	lsls	r1, r1, #25
 800a670:	bf48      	it	mi
 800a672:	b2ad      	uxthmi	r5, r5
 800a674:	2f6f      	cmp	r7, #111	@ 0x6f
 800a676:	4853      	ldr	r0, [pc, #332]	@ (800a7c4 <_printf_i+0x238>)
 800a678:	6033      	str	r3, [r6, #0]
 800a67a:	bf14      	ite	ne
 800a67c:	230a      	movne	r3, #10
 800a67e:	2308      	moveq	r3, #8
 800a680:	2100      	movs	r1, #0
 800a682:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a686:	6866      	ldr	r6, [r4, #4]
 800a688:	60a6      	str	r6, [r4, #8]
 800a68a:	2e00      	cmp	r6, #0
 800a68c:	bfa2      	ittt	ge
 800a68e:	6821      	ldrge	r1, [r4, #0]
 800a690:	f021 0104 	bicge.w	r1, r1, #4
 800a694:	6021      	strge	r1, [r4, #0]
 800a696:	b90d      	cbnz	r5, 800a69c <_printf_i+0x110>
 800a698:	2e00      	cmp	r6, #0
 800a69a:	d04b      	beq.n	800a734 <_printf_i+0x1a8>
 800a69c:	4616      	mov	r6, r2
 800a69e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a6a2:	fb03 5711 	mls	r7, r3, r1, r5
 800a6a6:	5dc7      	ldrb	r7, [r0, r7]
 800a6a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a6ac:	462f      	mov	r7, r5
 800a6ae:	42bb      	cmp	r3, r7
 800a6b0:	460d      	mov	r5, r1
 800a6b2:	d9f4      	bls.n	800a69e <_printf_i+0x112>
 800a6b4:	2b08      	cmp	r3, #8
 800a6b6:	d10b      	bne.n	800a6d0 <_printf_i+0x144>
 800a6b8:	6823      	ldr	r3, [r4, #0]
 800a6ba:	07df      	lsls	r7, r3, #31
 800a6bc:	d508      	bpl.n	800a6d0 <_printf_i+0x144>
 800a6be:	6923      	ldr	r3, [r4, #16]
 800a6c0:	6861      	ldr	r1, [r4, #4]
 800a6c2:	4299      	cmp	r1, r3
 800a6c4:	bfde      	ittt	le
 800a6c6:	2330      	movle	r3, #48	@ 0x30
 800a6c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a6cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a6d0:	1b92      	subs	r2, r2, r6
 800a6d2:	6122      	str	r2, [r4, #16]
 800a6d4:	f8cd a000 	str.w	sl, [sp]
 800a6d8:	464b      	mov	r3, r9
 800a6da:	aa03      	add	r2, sp, #12
 800a6dc:	4621      	mov	r1, r4
 800a6de:	4640      	mov	r0, r8
 800a6e0:	f7ff fee6 	bl	800a4b0 <_printf_common>
 800a6e4:	3001      	adds	r0, #1
 800a6e6:	d14a      	bne.n	800a77e <_printf_i+0x1f2>
 800a6e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ec:	b004      	add	sp, #16
 800a6ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6f2:	6823      	ldr	r3, [r4, #0]
 800a6f4:	f043 0320 	orr.w	r3, r3, #32
 800a6f8:	6023      	str	r3, [r4, #0]
 800a6fa:	4833      	ldr	r0, [pc, #204]	@ (800a7c8 <_printf_i+0x23c>)
 800a6fc:	2778      	movs	r7, #120	@ 0x78
 800a6fe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a702:	6823      	ldr	r3, [r4, #0]
 800a704:	6831      	ldr	r1, [r6, #0]
 800a706:	061f      	lsls	r7, r3, #24
 800a708:	f851 5b04 	ldr.w	r5, [r1], #4
 800a70c:	d402      	bmi.n	800a714 <_printf_i+0x188>
 800a70e:	065f      	lsls	r7, r3, #25
 800a710:	bf48      	it	mi
 800a712:	b2ad      	uxthmi	r5, r5
 800a714:	6031      	str	r1, [r6, #0]
 800a716:	07d9      	lsls	r1, r3, #31
 800a718:	bf44      	itt	mi
 800a71a:	f043 0320 	orrmi.w	r3, r3, #32
 800a71e:	6023      	strmi	r3, [r4, #0]
 800a720:	b11d      	cbz	r5, 800a72a <_printf_i+0x19e>
 800a722:	2310      	movs	r3, #16
 800a724:	e7ac      	b.n	800a680 <_printf_i+0xf4>
 800a726:	4827      	ldr	r0, [pc, #156]	@ (800a7c4 <_printf_i+0x238>)
 800a728:	e7e9      	b.n	800a6fe <_printf_i+0x172>
 800a72a:	6823      	ldr	r3, [r4, #0]
 800a72c:	f023 0320 	bic.w	r3, r3, #32
 800a730:	6023      	str	r3, [r4, #0]
 800a732:	e7f6      	b.n	800a722 <_printf_i+0x196>
 800a734:	4616      	mov	r6, r2
 800a736:	e7bd      	b.n	800a6b4 <_printf_i+0x128>
 800a738:	6833      	ldr	r3, [r6, #0]
 800a73a:	6825      	ldr	r5, [r4, #0]
 800a73c:	6961      	ldr	r1, [r4, #20]
 800a73e:	1d18      	adds	r0, r3, #4
 800a740:	6030      	str	r0, [r6, #0]
 800a742:	062e      	lsls	r6, r5, #24
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	d501      	bpl.n	800a74c <_printf_i+0x1c0>
 800a748:	6019      	str	r1, [r3, #0]
 800a74a:	e002      	b.n	800a752 <_printf_i+0x1c6>
 800a74c:	0668      	lsls	r0, r5, #25
 800a74e:	d5fb      	bpl.n	800a748 <_printf_i+0x1bc>
 800a750:	8019      	strh	r1, [r3, #0]
 800a752:	2300      	movs	r3, #0
 800a754:	6123      	str	r3, [r4, #16]
 800a756:	4616      	mov	r6, r2
 800a758:	e7bc      	b.n	800a6d4 <_printf_i+0x148>
 800a75a:	6833      	ldr	r3, [r6, #0]
 800a75c:	1d1a      	adds	r2, r3, #4
 800a75e:	6032      	str	r2, [r6, #0]
 800a760:	681e      	ldr	r6, [r3, #0]
 800a762:	6862      	ldr	r2, [r4, #4]
 800a764:	2100      	movs	r1, #0
 800a766:	4630      	mov	r0, r6
 800a768:	f7f5 fd6a 	bl	8000240 <memchr>
 800a76c:	b108      	cbz	r0, 800a772 <_printf_i+0x1e6>
 800a76e:	1b80      	subs	r0, r0, r6
 800a770:	6060      	str	r0, [r4, #4]
 800a772:	6863      	ldr	r3, [r4, #4]
 800a774:	6123      	str	r3, [r4, #16]
 800a776:	2300      	movs	r3, #0
 800a778:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a77c:	e7aa      	b.n	800a6d4 <_printf_i+0x148>
 800a77e:	6923      	ldr	r3, [r4, #16]
 800a780:	4632      	mov	r2, r6
 800a782:	4649      	mov	r1, r9
 800a784:	4640      	mov	r0, r8
 800a786:	47d0      	blx	sl
 800a788:	3001      	adds	r0, #1
 800a78a:	d0ad      	beq.n	800a6e8 <_printf_i+0x15c>
 800a78c:	6823      	ldr	r3, [r4, #0]
 800a78e:	079b      	lsls	r3, r3, #30
 800a790:	d413      	bmi.n	800a7ba <_printf_i+0x22e>
 800a792:	68e0      	ldr	r0, [r4, #12]
 800a794:	9b03      	ldr	r3, [sp, #12]
 800a796:	4298      	cmp	r0, r3
 800a798:	bfb8      	it	lt
 800a79a:	4618      	movlt	r0, r3
 800a79c:	e7a6      	b.n	800a6ec <_printf_i+0x160>
 800a79e:	2301      	movs	r3, #1
 800a7a0:	4632      	mov	r2, r6
 800a7a2:	4649      	mov	r1, r9
 800a7a4:	4640      	mov	r0, r8
 800a7a6:	47d0      	blx	sl
 800a7a8:	3001      	adds	r0, #1
 800a7aa:	d09d      	beq.n	800a6e8 <_printf_i+0x15c>
 800a7ac:	3501      	adds	r5, #1
 800a7ae:	68e3      	ldr	r3, [r4, #12]
 800a7b0:	9903      	ldr	r1, [sp, #12]
 800a7b2:	1a5b      	subs	r3, r3, r1
 800a7b4:	42ab      	cmp	r3, r5
 800a7b6:	dcf2      	bgt.n	800a79e <_printf_i+0x212>
 800a7b8:	e7eb      	b.n	800a792 <_printf_i+0x206>
 800a7ba:	2500      	movs	r5, #0
 800a7bc:	f104 0619 	add.w	r6, r4, #25
 800a7c0:	e7f5      	b.n	800a7ae <_printf_i+0x222>
 800a7c2:	bf00      	nop
 800a7c4:	0800e847 	.word	0x0800e847
 800a7c8:	0800e858 	.word	0x0800e858

0800a7cc <_scanf_float>:
 800a7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7d0:	b087      	sub	sp, #28
 800a7d2:	4617      	mov	r7, r2
 800a7d4:	9303      	str	r3, [sp, #12]
 800a7d6:	688b      	ldr	r3, [r1, #8]
 800a7d8:	1e5a      	subs	r2, r3, #1
 800a7da:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a7de:	bf81      	itttt	hi
 800a7e0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a7e4:	eb03 0b05 	addhi.w	fp, r3, r5
 800a7e8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a7ec:	608b      	strhi	r3, [r1, #8]
 800a7ee:	680b      	ldr	r3, [r1, #0]
 800a7f0:	460a      	mov	r2, r1
 800a7f2:	f04f 0500 	mov.w	r5, #0
 800a7f6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a7fa:	f842 3b1c 	str.w	r3, [r2], #28
 800a7fe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a802:	4680      	mov	r8, r0
 800a804:	460c      	mov	r4, r1
 800a806:	bf98      	it	ls
 800a808:	f04f 0b00 	movls.w	fp, #0
 800a80c:	9201      	str	r2, [sp, #4]
 800a80e:	4616      	mov	r6, r2
 800a810:	46aa      	mov	sl, r5
 800a812:	46a9      	mov	r9, r5
 800a814:	9502      	str	r5, [sp, #8]
 800a816:	68a2      	ldr	r2, [r4, #8]
 800a818:	b152      	cbz	r2, 800a830 <_scanf_float+0x64>
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	781b      	ldrb	r3, [r3, #0]
 800a81e:	2b4e      	cmp	r3, #78	@ 0x4e
 800a820:	d864      	bhi.n	800a8ec <_scanf_float+0x120>
 800a822:	2b40      	cmp	r3, #64	@ 0x40
 800a824:	d83c      	bhi.n	800a8a0 <_scanf_float+0xd4>
 800a826:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a82a:	b2c8      	uxtb	r0, r1
 800a82c:	280e      	cmp	r0, #14
 800a82e:	d93a      	bls.n	800a8a6 <_scanf_float+0xda>
 800a830:	f1b9 0f00 	cmp.w	r9, #0
 800a834:	d003      	beq.n	800a83e <_scanf_float+0x72>
 800a836:	6823      	ldr	r3, [r4, #0]
 800a838:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a83c:	6023      	str	r3, [r4, #0]
 800a83e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a842:	f1ba 0f01 	cmp.w	sl, #1
 800a846:	f200 8117 	bhi.w	800aa78 <_scanf_float+0x2ac>
 800a84a:	9b01      	ldr	r3, [sp, #4]
 800a84c:	429e      	cmp	r6, r3
 800a84e:	f200 8108 	bhi.w	800aa62 <_scanf_float+0x296>
 800a852:	2001      	movs	r0, #1
 800a854:	b007      	add	sp, #28
 800a856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a85a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a85e:	2a0d      	cmp	r2, #13
 800a860:	d8e6      	bhi.n	800a830 <_scanf_float+0x64>
 800a862:	a101      	add	r1, pc, #4	@ (adr r1, 800a868 <_scanf_float+0x9c>)
 800a864:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a868:	0800a9af 	.word	0x0800a9af
 800a86c:	0800a831 	.word	0x0800a831
 800a870:	0800a831 	.word	0x0800a831
 800a874:	0800a831 	.word	0x0800a831
 800a878:	0800aa0f 	.word	0x0800aa0f
 800a87c:	0800a9e7 	.word	0x0800a9e7
 800a880:	0800a831 	.word	0x0800a831
 800a884:	0800a831 	.word	0x0800a831
 800a888:	0800a9bd 	.word	0x0800a9bd
 800a88c:	0800a831 	.word	0x0800a831
 800a890:	0800a831 	.word	0x0800a831
 800a894:	0800a831 	.word	0x0800a831
 800a898:	0800a831 	.word	0x0800a831
 800a89c:	0800a975 	.word	0x0800a975
 800a8a0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a8a4:	e7db      	b.n	800a85e <_scanf_float+0x92>
 800a8a6:	290e      	cmp	r1, #14
 800a8a8:	d8c2      	bhi.n	800a830 <_scanf_float+0x64>
 800a8aa:	a001      	add	r0, pc, #4	@ (adr r0, 800a8b0 <_scanf_float+0xe4>)
 800a8ac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a8b0:	0800a965 	.word	0x0800a965
 800a8b4:	0800a831 	.word	0x0800a831
 800a8b8:	0800a965 	.word	0x0800a965
 800a8bc:	0800a9fb 	.word	0x0800a9fb
 800a8c0:	0800a831 	.word	0x0800a831
 800a8c4:	0800a90d 	.word	0x0800a90d
 800a8c8:	0800a94b 	.word	0x0800a94b
 800a8cc:	0800a94b 	.word	0x0800a94b
 800a8d0:	0800a94b 	.word	0x0800a94b
 800a8d4:	0800a94b 	.word	0x0800a94b
 800a8d8:	0800a94b 	.word	0x0800a94b
 800a8dc:	0800a94b 	.word	0x0800a94b
 800a8e0:	0800a94b 	.word	0x0800a94b
 800a8e4:	0800a94b 	.word	0x0800a94b
 800a8e8:	0800a94b 	.word	0x0800a94b
 800a8ec:	2b6e      	cmp	r3, #110	@ 0x6e
 800a8ee:	d809      	bhi.n	800a904 <_scanf_float+0x138>
 800a8f0:	2b60      	cmp	r3, #96	@ 0x60
 800a8f2:	d8b2      	bhi.n	800a85a <_scanf_float+0x8e>
 800a8f4:	2b54      	cmp	r3, #84	@ 0x54
 800a8f6:	d07b      	beq.n	800a9f0 <_scanf_float+0x224>
 800a8f8:	2b59      	cmp	r3, #89	@ 0x59
 800a8fa:	d199      	bne.n	800a830 <_scanf_float+0x64>
 800a8fc:	2d07      	cmp	r5, #7
 800a8fe:	d197      	bne.n	800a830 <_scanf_float+0x64>
 800a900:	2508      	movs	r5, #8
 800a902:	e02c      	b.n	800a95e <_scanf_float+0x192>
 800a904:	2b74      	cmp	r3, #116	@ 0x74
 800a906:	d073      	beq.n	800a9f0 <_scanf_float+0x224>
 800a908:	2b79      	cmp	r3, #121	@ 0x79
 800a90a:	e7f6      	b.n	800a8fa <_scanf_float+0x12e>
 800a90c:	6821      	ldr	r1, [r4, #0]
 800a90e:	05c8      	lsls	r0, r1, #23
 800a910:	d51b      	bpl.n	800a94a <_scanf_float+0x17e>
 800a912:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a916:	6021      	str	r1, [r4, #0]
 800a918:	f109 0901 	add.w	r9, r9, #1
 800a91c:	f1bb 0f00 	cmp.w	fp, #0
 800a920:	d003      	beq.n	800a92a <_scanf_float+0x15e>
 800a922:	3201      	adds	r2, #1
 800a924:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a928:	60a2      	str	r2, [r4, #8]
 800a92a:	68a3      	ldr	r3, [r4, #8]
 800a92c:	3b01      	subs	r3, #1
 800a92e:	60a3      	str	r3, [r4, #8]
 800a930:	6923      	ldr	r3, [r4, #16]
 800a932:	3301      	adds	r3, #1
 800a934:	6123      	str	r3, [r4, #16]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	3b01      	subs	r3, #1
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	607b      	str	r3, [r7, #4]
 800a93e:	f340 8087 	ble.w	800aa50 <_scanf_float+0x284>
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	3301      	adds	r3, #1
 800a946:	603b      	str	r3, [r7, #0]
 800a948:	e765      	b.n	800a816 <_scanf_float+0x4a>
 800a94a:	eb1a 0105 	adds.w	r1, sl, r5
 800a94e:	f47f af6f 	bne.w	800a830 <_scanf_float+0x64>
 800a952:	6822      	ldr	r2, [r4, #0]
 800a954:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a958:	6022      	str	r2, [r4, #0]
 800a95a:	460d      	mov	r5, r1
 800a95c:	468a      	mov	sl, r1
 800a95e:	f806 3b01 	strb.w	r3, [r6], #1
 800a962:	e7e2      	b.n	800a92a <_scanf_float+0x15e>
 800a964:	6822      	ldr	r2, [r4, #0]
 800a966:	0610      	lsls	r0, r2, #24
 800a968:	f57f af62 	bpl.w	800a830 <_scanf_float+0x64>
 800a96c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a970:	6022      	str	r2, [r4, #0]
 800a972:	e7f4      	b.n	800a95e <_scanf_float+0x192>
 800a974:	f1ba 0f00 	cmp.w	sl, #0
 800a978:	d10e      	bne.n	800a998 <_scanf_float+0x1cc>
 800a97a:	f1b9 0f00 	cmp.w	r9, #0
 800a97e:	d10e      	bne.n	800a99e <_scanf_float+0x1d2>
 800a980:	6822      	ldr	r2, [r4, #0]
 800a982:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a986:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a98a:	d108      	bne.n	800a99e <_scanf_float+0x1d2>
 800a98c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a990:	6022      	str	r2, [r4, #0]
 800a992:	f04f 0a01 	mov.w	sl, #1
 800a996:	e7e2      	b.n	800a95e <_scanf_float+0x192>
 800a998:	f1ba 0f02 	cmp.w	sl, #2
 800a99c:	d055      	beq.n	800aa4a <_scanf_float+0x27e>
 800a99e:	2d01      	cmp	r5, #1
 800a9a0:	d002      	beq.n	800a9a8 <_scanf_float+0x1dc>
 800a9a2:	2d04      	cmp	r5, #4
 800a9a4:	f47f af44 	bne.w	800a830 <_scanf_float+0x64>
 800a9a8:	3501      	adds	r5, #1
 800a9aa:	b2ed      	uxtb	r5, r5
 800a9ac:	e7d7      	b.n	800a95e <_scanf_float+0x192>
 800a9ae:	f1ba 0f01 	cmp.w	sl, #1
 800a9b2:	f47f af3d 	bne.w	800a830 <_scanf_float+0x64>
 800a9b6:	f04f 0a02 	mov.w	sl, #2
 800a9ba:	e7d0      	b.n	800a95e <_scanf_float+0x192>
 800a9bc:	b97d      	cbnz	r5, 800a9de <_scanf_float+0x212>
 800a9be:	f1b9 0f00 	cmp.w	r9, #0
 800a9c2:	f47f af38 	bne.w	800a836 <_scanf_float+0x6a>
 800a9c6:	6822      	ldr	r2, [r4, #0]
 800a9c8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a9cc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a9d0:	f040 8108 	bne.w	800abe4 <_scanf_float+0x418>
 800a9d4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a9d8:	6022      	str	r2, [r4, #0]
 800a9da:	2501      	movs	r5, #1
 800a9dc:	e7bf      	b.n	800a95e <_scanf_float+0x192>
 800a9de:	2d03      	cmp	r5, #3
 800a9e0:	d0e2      	beq.n	800a9a8 <_scanf_float+0x1dc>
 800a9e2:	2d05      	cmp	r5, #5
 800a9e4:	e7de      	b.n	800a9a4 <_scanf_float+0x1d8>
 800a9e6:	2d02      	cmp	r5, #2
 800a9e8:	f47f af22 	bne.w	800a830 <_scanf_float+0x64>
 800a9ec:	2503      	movs	r5, #3
 800a9ee:	e7b6      	b.n	800a95e <_scanf_float+0x192>
 800a9f0:	2d06      	cmp	r5, #6
 800a9f2:	f47f af1d 	bne.w	800a830 <_scanf_float+0x64>
 800a9f6:	2507      	movs	r5, #7
 800a9f8:	e7b1      	b.n	800a95e <_scanf_float+0x192>
 800a9fa:	6822      	ldr	r2, [r4, #0]
 800a9fc:	0591      	lsls	r1, r2, #22
 800a9fe:	f57f af17 	bpl.w	800a830 <_scanf_float+0x64>
 800aa02:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800aa06:	6022      	str	r2, [r4, #0]
 800aa08:	f8cd 9008 	str.w	r9, [sp, #8]
 800aa0c:	e7a7      	b.n	800a95e <_scanf_float+0x192>
 800aa0e:	6822      	ldr	r2, [r4, #0]
 800aa10:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800aa14:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800aa18:	d006      	beq.n	800aa28 <_scanf_float+0x25c>
 800aa1a:	0550      	lsls	r0, r2, #21
 800aa1c:	f57f af08 	bpl.w	800a830 <_scanf_float+0x64>
 800aa20:	f1b9 0f00 	cmp.w	r9, #0
 800aa24:	f000 80de 	beq.w	800abe4 <_scanf_float+0x418>
 800aa28:	0591      	lsls	r1, r2, #22
 800aa2a:	bf58      	it	pl
 800aa2c:	9902      	ldrpl	r1, [sp, #8]
 800aa2e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800aa32:	bf58      	it	pl
 800aa34:	eba9 0101 	subpl.w	r1, r9, r1
 800aa38:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800aa3c:	bf58      	it	pl
 800aa3e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800aa42:	6022      	str	r2, [r4, #0]
 800aa44:	f04f 0900 	mov.w	r9, #0
 800aa48:	e789      	b.n	800a95e <_scanf_float+0x192>
 800aa4a:	f04f 0a03 	mov.w	sl, #3
 800aa4e:	e786      	b.n	800a95e <_scanf_float+0x192>
 800aa50:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800aa54:	4639      	mov	r1, r7
 800aa56:	4640      	mov	r0, r8
 800aa58:	4798      	blx	r3
 800aa5a:	2800      	cmp	r0, #0
 800aa5c:	f43f aedb 	beq.w	800a816 <_scanf_float+0x4a>
 800aa60:	e6e6      	b.n	800a830 <_scanf_float+0x64>
 800aa62:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aa6a:	463a      	mov	r2, r7
 800aa6c:	4640      	mov	r0, r8
 800aa6e:	4798      	blx	r3
 800aa70:	6923      	ldr	r3, [r4, #16]
 800aa72:	3b01      	subs	r3, #1
 800aa74:	6123      	str	r3, [r4, #16]
 800aa76:	e6e8      	b.n	800a84a <_scanf_float+0x7e>
 800aa78:	1e6b      	subs	r3, r5, #1
 800aa7a:	2b06      	cmp	r3, #6
 800aa7c:	d824      	bhi.n	800aac8 <_scanf_float+0x2fc>
 800aa7e:	2d02      	cmp	r5, #2
 800aa80:	d836      	bhi.n	800aaf0 <_scanf_float+0x324>
 800aa82:	9b01      	ldr	r3, [sp, #4]
 800aa84:	429e      	cmp	r6, r3
 800aa86:	f67f aee4 	bls.w	800a852 <_scanf_float+0x86>
 800aa8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aa92:	463a      	mov	r2, r7
 800aa94:	4640      	mov	r0, r8
 800aa96:	4798      	blx	r3
 800aa98:	6923      	ldr	r3, [r4, #16]
 800aa9a:	3b01      	subs	r3, #1
 800aa9c:	6123      	str	r3, [r4, #16]
 800aa9e:	e7f0      	b.n	800aa82 <_scanf_float+0x2b6>
 800aaa0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aaa4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800aaa8:	463a      	mov	r2, r7
 800aaaa:	4640      	mov	r0, r8
 800aaac:	4798      	blx	r3
 800aaae:	6923      	ldr	r3, [r4, #16]
 800aab0:	3b01      	subs	r3, #1
 800aab2:	6123      	str	r3, [r4, #16]
 800aab4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aab8:	fa5f fa8a 	uxtb.w	sl, sl
 800aabc:	f1ba 0f02 	cmp.w	sl, #2
 800aac0:	d1ee      	bne.n	800aaa0 <_scanf_float+0x2d4>
 800aac2:	3d03      	subs	r5, #3
 800aac4:	b2ed      	uxtb	r5, r5
 800aac6:	1b76      	subs	r6, r6, r5
 800aac8:	6823      	ldr	r3, [r4, #0]
 800aaca:	05da      	lsls	r2, r3, #23
 800aacc:	d530      	bpl.n	800ab30 <_scanf_float+0x364>
 800aace:	055b      	lsls	r3, r3, #21
 800aad0:	d511      	bpl.n	800aaf6 <_scanf_float+0x32a>
 800aad2:	9b01      	ldr	r3, [sp, #4]
 800aad4:	429e      	cmp	r6, r3
 800aad6:	f67f aebc 	bls.w	800a852 <_scanf_float+0x86>
 800aada:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aade:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aae2:	463a      	mov	r2, r7
 800aae4:	4640      	mov	r0, r8
 800aae6:	4798      	blx	r3
 800aae8:	6923      	ldr	r3, [r4, #16]
 800aaea:	3b01      	subs	r3, #1
 800aaec:	6123      	str	r3, [r4, #16]
 800aaee:	e7f0      	b.n	800aad2 <_scanf_float+0x306>
 800aaf0:	46aa      	mov	sl, r5
 800aaf2:	46b3      	mov	fp, r6
 800aaf4:	e7de      	b.n	800aab4 <_scanf_float+0x2e8>
 800aaf6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800aafa:	6923      	ldr	r3, [r4, #16]
 800aafc:	2965      	cmp	r1, #101	@ 0x65
 800aafe:	f103 33ff 	add.w	r3, r3, #4294967295
 800ab02:	f106 35ff 	add.w	r5, r6, #4294967295
 800ab06:	6123      	str	r3, [r4, #16]
 800ab08:	d00c      	beq.n	800ab24 <_scanf_float+0x358>
 800ab0a:	2945      	cmp	r1, #69	@ 0x45
 800ab0c:	d00a      	beq.n	800ab24 <_scanf_float+0x358>
 800ab0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ab12:	463a      	mov	r2, r7
 800ab14:	4640      	mov	r0, r8
 800ab16:	4798      	blx	r3
 800ab18:	6923      	ldr	r3, [r4, #16]
 800ab1a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ab1e:	3b01      	subs	r3, #1
 800ab20:	1eb5      	subs	r5, r6, #2
 800ab22:	6123      	str	r3, [r4, #16]
 800ab24:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ab28:	463a      	mov	r2, r7
 800ab2a:	4640      	mov	r0, r8
 800ab2c:	4798      	blx	r3
 800ab2e:	462e      	mov	r6, r5
 800ab30:	6822      	ldr	r2, [r4, #0]
 800ab32:	f012 0210 	ands.w	r2, r2, #16
 800ab36:	d001      	beq.n	800ab3c <_scanf_float+0x370>
 800ab38:	2000      	movs	r0, #0
 800ab3a:	e68b      	b.n	800a854 <_scanf_float+0x88>
 800ab3c:	7032      	strb	r2, [r6, #0]
 800ab3e:	6823      	ldr	r3, [r4, #0]
 800ab40:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ab44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab48:	d11c      	bne.n	800ab84 <_scanf_float+0x3b8>
 800ab4a:	9b02      	ldr	r3, [sp, #8]
 800ab4c:	454b      	cmp	r3, r9
 800ab4e:	eba3 0209 	sub.w	r2, r3, r9
 800ab52:	d123      	bne.n	800ab9c <_scanf_float+0x3d0>
 800ab54:	9901      	ldr	r1, [sp, #4]
 800ab56:	2200      	movs	r2, #0
 800ab58:	4640      	mov	r0, r8
 800ab5a:	f002 fca5 	bl	800d4a8 <_strtod_r>
 800ab5e:	9b03      	ldr	r3, [sp, #12]
 800ab60:	6821      	ldr	r1, [r4, #0]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f011 0f02 	tst.w	r1, #2
 800ab68:	ec57 6b10 	vmov	r6, r7, d0
 800ab6c:	f103 0204 	add.w	r2, r3, #4
 800ab70:	d01f      	beq.n	800abb2 <_scanf_float+0x3e6>
 800ab72:	9903      	ldr	r1, [sp, #12]
 800ab74:	600a      	str	r2, [r1, #0]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	e9c3 6700 	strd	r6, r7, [r3]
 800ab7c:	68e3      	ldr	r3, [r4, #12]
 800ab7e:	3301      	adds	r3, #1
 800ab80:	60e3      	str	r3, [r4, #12]
 800ab82:	e7d9      	b.n	800ab38 <_scanf_float+0x36c>
 800ab84:	9b04      	ldr	r3, [sp, #16]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d0e4      	beq.n	800ab54 <_scanf_float+0x388>
 800ab8a:	9905      	ldr	r1, [sp, #20]
 800ab8c:	230a      	movs	r3, #10
 800ab8e:	3101      	adds	r1, #1
 800ab90:	4640      	mov	r0, r8
 800ab92:	f7ff f9b7 	bl	8009f04 <_strtol_r>
 800ab96:	9b04      	ldr	r3, [sp, #16]
 800ab98:	9e05      	ldr	r6, [sp, #20]
 800ab9a:	1ac2      	subs	r2, r0, r3
 800ab9c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800aba0:	429e      	cmp	r6, r3
 800aba2:	bf28      	it	cs
 800aba4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800aba8:	4910      	ldr	r1, [pc, #64]	@ (800abec <_scanf_float+0x420>)
 800abaa:	4630      	mov	r0, r6
 800abac:	f000 f918 	bl	800ade0 <siprintf>
 800abb0:	e7d0      	b.n	800ab54 <_scanf_float+0x388>
 800abb2:	f011 0f04 	tst.w	r1, #4
 800abb6:	9903      	ldr	r1, [sp, #12]
 800abb8:	600a      	str	r2, [r1, #0]
 800abba:	d1dc      	bne.n	800ab76 <_scanf_float+0x3aa>
 800abbc:	681d      	ldr	r5, [r3, #0]
 800abbe:	4632      	mov	r2, r6
 800abc0:	463b      	mov	r3, r7
 800abc2:	4630      	mov	r0, r6
 800abc4:	4639      	mov	r1, r7
 800abc6:	f7f5 ffe9 	bl	8000b9c <__aeabi_dcmpun>
 800abca:	b128      	cbz	r0, 800abd8 <_scanf_float+0x40c>
 800abcc:	4808      	ldr	r0, [pc, #32]	@ (800abf0 <_scanf_float+0x424>)
 800abce:	f000 fa47 	bl	800b060 <nanf>
 800abd2:	ed85 0a00 	vstr	s0, [r5]
 800abd6:	e7d1      	b.n	800ab7c <_scanf_float+0x3b0>
 800abd8:	4630      	mov	r0, r6
 800abda:	4639      	mov	r1, r7
 800abdc:	f7f6 f83c 	bl	8000c58 <__aeabi_d2f>
 800abe0:	6028      	str	r0, [r5, #0]
 800abe2:	e7cb      	b.n	800ab7c <_scanf_float+0x3b0>
 800abe4:	f04f 0900 	mov.w	r9, #0
 800abe8:	e629      	b.n	800a83e <_scanf_float+0x72>
 800abea:	bf00      	nop
 800abec:	0800e869 	.word	0x0800e869
 800abf0:	0800e91a 	.word	0x0800e91a

0800abf4 <std>:
 800abf4:	2300      	movs	r3, #0
 800abf6:	b510      	push	{r4, lr}
 800abf8:	4604      	mov	r4, r0
 800abfa:	e9c0 3300 	strd	r3, r3, [r0]
 800abfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac02:	6083      	str	r3, [r0, #8]
 800ac04:	8181      	strh	r1, [r0, #12]
 800ac06:	6643      	str	r3, [r0, #100]	@ 0x64
 800ac08:	81c2      	strh	r2, [r0, #14]
 800ac0a:	6183      	str	r3, [r0, #24]
 800ac0c:	4619      	mov	r1, r3
 800ac0e:	2208      	movs	r2, #8
 800ac10:	305c      	adds	r0, #92	@ 0x5c
 800ac12:	f000 f948 	bl	800aea6 <memset>
 800ac16:	4b0d      	ldr	r3, [pc, #52]	@ (800ac4c <std+0x58>)
 800ac18:	6263      	str	r3, [r4, #36]	@ 0x24
 800ac1a:	4b0d      	ldr	r3, [pc, #52]	@ (800ac50 <std+0x5c>)
 800ac1c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ac1e:	4b0d      	ldr	r3, [pc, #52]	@ (800ac54 <std+0x60>)
 800ac20:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ac22:	4b0d      	ldr	r3, [pc, #52]	@ (800ac58 <std+0x64>)
 800ac24:	6323      	str	r3, [r4, #48]	@ 0x30
 800ac26:	4b0d      	ldr	r3, [pc, #52]	@ (800ac5c <std+0x68>)
 800ac28:	6224      	str	r4, [r4, #32]
 800ac2a:	429c      	cmp	r4, r3
 800ac2c:	d006      	beq.n	800ac3c <std+0x48>
 800ac2e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ac32:	4294      	cmp	r4, r2
 800ac34:	d002      	beq.n	800ac3c <std+0x48>
 800ac36:	33d0      	adds	r3, #208	@ 0xd0
 800ac38:	429c      	cmp	r4, r3
 800ac3a:	d105      	bne.n	800ac48 <std+0x54>
 800ac3c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ac40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac44:	f000 ba08 	b.w	800b058 <__retarget_lock_init_recursive>
 800ac48:	bd10      	pop	{r4, pc}
 800ac4a:	bf00      	nop
 800ac4c:	0800ae21 	.word	0x0800ae21
 800ac50:	0800ae43 	.word	0x0800ae43
 800ac54:	0800ae7b 	.word	0x0800ae7b
 800ac58:	0800ae9f 	.word	0x0800ae9f
 800ac5c:	200006bc 	.word	0x200006bc

0800ac60 <stdio_exit_handler>:
 800ac60:	4a02      	ldr	r2, [pc, #8]	@ (800ac6c <stdio_exit_handler+0xc>)
 800ac62:	4903      	ldr	r1, [pc, #12]	@ (800ac70 <stdio_exit_handler+0x10>)
 800ac64:	4803      	ldr	r0, [pc, #12]	@ (800ac74 <stdio_exit_handler+0x14>)
 800ac66:	f000 b869 	b.w	800ad3c <_fwalk_sglue>
 800ac6a:	bf00      	nop
 800ac6c:	200000c8 	.word	0x200000c8
 800ac70:	0800d86d 	.word	0x0800d86d
 800ac74:	200000d8 	.word	0x200000d8

0800ac78 <cleanup_stdio>:
 800ac78:	6841      	ldr	r1, [r0, #4]
 800ac7a:	4b0c      	ldr	r3, [pc, #48]	@ (800acac <cleanup_stdio+0x34>)
 800ac7c:	4299      	cmp	r1, r3
 800ac7e:	b510      	push	{r4, lr}
 800ac80:	4604      	mov	r4, r0
 800ac82:	d001      	beq.n	800ac88 <cleanup_stdio+0x10>
 800ac84:	f002 fdf2 	bl	800d86c <_fflush_r>
 800ac88:	68a1      	ldr	r1, [r4, #8]
 800ac8a:	4b09      	ldr	r3, [pc, #36]	@ (800acb0 <cleanup_stdio+0x38>)
 800ac8c:	4299      	cmp	r1, r3
 800ac8e:	d002      	beq.n	800ac96 <cleanup_stdio+0x1e>
 800ac90:	4620      	mov	r0, r4
 800ac92:	f002 fdeb 	bl	800d86c <_fflush_r>
 800ac96:	68e1      	ldr	r1, [r4, #12]
 800ac98:	4b06      	ldr	r3, [pc, #24]	@ (800acb4 <cleanup_stdio+0x3c>)
 800ac9a:	4299      	cmp	r1, r3
 800ac9c:	d004      	beq.n	800aca8 <cleanup_stdio+0x30>
 800ac9e:	4620      	mov	r0, r4
 800aca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aca4:	f002 bde2 	b.w	800d86c <_fflush_r>
 800aca8:	bd10      	pop	{r4, pc}
 800acaa:	bf00      	nop
 800acac:	200006bc 	.word	0x200006bc
 800acb0:	20000724 	.word	0x20000724
 800acb4:	2000078c 	.word	0x2000078c

0800acb8 <global_stdio_init.part.0>:
 800acb8:	b510      	push	{r4, lr}
 800acba:	4b0b      	ldr	r3, [pc, #44]	@ (800ace8 <global_stdio_init.part.0+0x30>)
 800acbc:	4c0b      	ldr	r4, [pc, #44]	@ (800acec <global_stdio_init.part.0+0x34>)
 800acbe:	4a0c      	ldr	r2, [pc, #48]	@ (800acf0 <global_stdio_init.part.0+0x38>)
 800acc0:	601a      	str	r2, [r3, #0]
 800acc2:	4620      	mov	r0, r4
 800acc4:	2200      	movs	r2, #0
 800acc6:	2104      	movs	r1, #4
 800acc8:	f7ff ff94 	bl	800abf4 <std>
 800accc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800acd0:	2201      	movs	r2, #1
 800acd2:	2109      	movs	r1, #9
 800acd4:	f7ff ff8e 	bl	800abf4 <std>
 800acd8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800acdc:	2202      	movs	r2, #2
 800acde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ace2:	2112      	movs	r1, #18
 800ace4:	f7ff bf86 	b.w	800abf4 <std>
 800ace8:	200007f4 	.word	0x200007f4
 800acec:	200006bc 	.word	0x200006bc
 800acf0:	0800ac61 	.word	0x0800ac61

0800acf4 <__sfp_lock_acquire>:
 800acf4:	4801      	ldr	r0, [pc, #4]	@ (800acfc <__sfp_lock_acquire+0x8>)
 800acf6:	f000 b9b0 	b.w	800b05a <__retarget_lock_acquire_recursive>
 800acfa:	bf00      	nop
 800acfc:	200007fd 	.word	0x200007fd

0800ad00 <__sfp_lock_release>:
 800ad00:	4801      	ldr	r0, [pc, #4]	@ (800ad08 <__sfp_lock_release+0x8>)
 800ad02:	f000 b9ab 	b.w	800b05c <__retarget_lock_release_recursive>
 800ad06:	bf00      	nop
 800ad08:	200007fd 	.word	0x200007fd

0800ad0c <__sinit>:
 800ad0c:	b510      	push	{r4, lr}
 800ad0e:	4604      	mov	r4, r0
 800ad10:	f7ff fff0 	bl	800acf4 <__sfp_lock_acquire>
 800ad14:	6a23      	ldr	r3, [r4, #32]
 800ad16:	b11b      	cbz	r3, 800ad20 <__sinit+0x14>
 800ad18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad1c:	f7ff bff0 	b.w	800ad00 <__sfp_lock_release>
 800ad20:	4b04      	ldr	r3, [pc, #16]	@ (800ad34 <__sinit+0x28>)
 800ad22:	6223      	str	r3, [r4, #32]
 800ad24:	4b04      	ldr	r3, [pc, #16]	@ (800ad38 <__sinit+0x2c>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d1f5      	bne.n	800ad18 <__sinit+0xc>
 800ad2c:	f7ff ffc4 	bl	800acb8 <global_stdio_init.part.0>
 800ad30:	e7f2      	b.n	800ad18 <__sinit+0xc>
 800ad32:	bf00      	nop
 800ad34:	0800ac79 	.word	0x0800ac79
 800ad38:	200007f4 	.word	0x200007f4

0800ad3c <_fwalk_sglue>:
 800ad3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad40:	4607      	mov	r7, r0
 800ad42:	4688      	mov	r8, r1
 800ad44:	4614      	mov	r4, r2
 800ad46:	2600      	movs	r6, #0
 800ad48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad4c:	f1b9 0901 	subs.w	r9, r9, #1
 800ad50:	d505      	bpl.n	800ad5e <_fwalk_sglue+0x22>
 800ad52:	6824      	ldr	r4, [r4, #0]
 800ad54:	2c00      	cmp	r4, #0
 800ad56:	d1f7      	bne.n	800ad48 <_fwalk_sglue+0xc>
 800ad58:	4630      	mov	r0, r6
 800ad5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad5e:	89ab      	ldrh	r3, [r5, #12]
 800ad60:	2b01      	cmp	r3, #1
 800ad62:	d907      	bls.n	800ad74 <_fwalk_sglue+0x38>
 800ad64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad68:	3301      	adds	r3, #1
 800ad6a:	d003      	beq.n	800ad74 <_fwalk_sglue+0x38>
 800ad6c:	4629      	mov	r1, r5
 800ad6e:	4638      	mov	r0, r7
 800ad70:	47c0      	blx	r8
 800ad72:	4306      	orrs	r6, r0
 800ad74:	3568      	adds	r5, #104	@ 0x68
 800ad76:	e7e9      	b.n	800ad4c <_fwalk_sglue+0x10>

0800ad78 <sniprintf>:
 800ad78:	b40c      	push	{r2, r3}
 800ad7a:	b530      	push	{r4, r5, lr}
 800ad7c:	4b17      	ldr	r3, [pc, #92]	@ (800addc <sniprintf+0x64>)
 800ad7e:	1e0c      	subs	r4, r1, #0
 800ad80:	681d      	ldr	r5, [r3, #0]
 800ad82:	b09d      	sub	sp, #116	@ 0x74
 800ad84:	da08      	bge.n	800ad98 <sniprintf+0x20>
 800ad86:	238b      	movs	r3, #139	@ 0x8b
 800ad88:	602b      	str	r3, [r5, #0]
 800ad8a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad8e:	b01d      	add	sp, #116	@ 0x74
 800ad90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad94:	b002      	add	sp, #8
 800ad96:	4770      	bx	lr
 800ad98:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ad9c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ada0:	bf14      	ite	ne
 800ada2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ada6:	4623      	moveq	r3, r4
 800ada8:	9304      	str	r3, [sp, #16]
 800adaa:	9307      	str	r3, [sp, #28]
 800adac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800adb0:	9002      	str	r0, [sp, #8]
 800adb2:	9006      	str	r0, [sp, #24]
 800adb4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800adb8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800adba:	ab21      	add	r3, sp, #132	@ 0x84
 800adbc:	a902      	add	r1, sp, #8
 800adbe:	4628      	mov	r0, r5
 800adc0:	9301      	str	r3, [sp, #4]
 800adc2:	f002 fbd3 	bl	800d56c <_svfiprintf_r>
 800adc6:	1c43      	adds	r3, r0, #1
 800adc8:	bfbc      	itt	lt
 800adca:	238b      	movlt	r3, #139	@ 0x8b
 800adcc:	602b      	strlt	r3, [r5, #0]
 800adce:	2c00      	cmp	r4, #0
 800add0:	d0dd      	beq.n	800ad8e <sniprintf+0x16>
 800add2:	9b02      	ldr	r3, [sp, #8]
 800add4:	2200      	movs	r2, #0
 800add6:	701a      	strb	r2, [r3, #0]
 800add8:	e7d9      	b.n	800ad8e <sniprintf+0x16>
 800adda:	bf00      	nop
 800addc:	200000d4 	.word	0x200000d4

0800ade0 <siprintf>:
 800ade0:	b40e      	push	{r1, r2, r3}
 800ade2:	b500      	push	{lr}
 800ade4:	b09c      	sub	sp, #112	@ 0x70
 800ade6:	ab1d      	add	r3, sp, #116	@ 0x74
 800ade8:	9002      	str	r0, [sp, #8]
 800adea:	9006      	str	r0, [sp, #24]
 800adec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800adf0:	4809      	ldr	r0, [pc, #36]	@ (800ae18 <siprintf+0x38>)
 800adf2:	9107      	str	r1, [sp, #28]
 800adf4:	9104      	str	r1, [sp, #16]
 800adf6:	4909      	ldr	r1, [pc, #36]	@ (800ae1c <siprintf+0x3c>)
 800adf8:	f853 2b04 	ldr.w	r2, [r3], #4
 800adfc:	9105      	str	r1, [sp, #20]
 800adfe:	6800      	ldr	r0, [r0, #0]
 800ae00:	9301      	str	r3, [sp, #4]
 800ae02:	a902      	add	r1, sp, #8
 800ae04:	f002 fbb2 	bl	800d56c <_svfiprintf_r>
 800ae08:	9b02      	ldr	r3, [sp, #8]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	701a      	strb	r2, [r3, #0]
 800ae0e:	b01c      	add	sp, #112	@ 0x70
 800ae10:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae14:	b003      	add	sp, #12
 800ae16:	4770      	bx	lr
 800ae18:	200000d4 	.word	0x200000d4
 800ae1c:	ffff0208 	.word	0xffff0208

0800ae20 <__sread>:
 800ae20:	b510      	push	{r4, lr}
 800ae22:	460c      	mov	r4, r1
 800ae24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae28:	f000 f8c8 	bl	800afbc <_read_r>
 800ae2c:	2800      	cmp	r0, #0
 800ae2e:	bfab      	itete	ge
 800ae30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ae32:	89a3      	ldrhlt	r3, [r4, #12]
 800ae34:	181b      	addge	r3, r3, r0
 800ae36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ae3a:	bfac      	ite	ge
 800ae3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ae3e:	81a3      	strhlt	r3, [r4, #12]
 800ae40:	bd10      	pop	{r4, pc}

0800ae42 <__swrite>:
 800ae42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae46:	461f      	mov	r7, r3
 800ae48:	898b      	ldrh	r3, [r1, #12]
 800ae4a:	05db      	lsls	r3, r3, #23
 800ae4c:	4605      	mov	r5, r0
 800ae4e:	460c      	mov	r4, r1
 800ae50:	4616      	mov	r6, r2
 800ae52:	d505      	bpl.n	800ae60 <__swrite+0x1e>
 800ae54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae58:	2302      	movs	r3, #2
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	f000 f89c 	bl	800af98 <_lseek_r>
 800ae60:	89a3      	ldrh	r3, [r4, #12]
 800ae62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ae6a:	81a3      	strh	r3, [r4, #12]
 800ae6c:	4632      	mov	r2, r6
 800ae6e:	463b      	mov	r3, r7
 800ae70:	4628      	mov	r0, r5
 800ae72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae76:	f000 b8b3 	b.w	800afe0 <_write_r>

0800ae7a <__sseek>:
 800ae7a:	b510      	push	{r4, lr}
 800ae7c:	460c      	mov	r4, r1
 800ae7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae82:	f000 f889 	bl	800af98 <_lseek_r>
 800ae86:	1c43      	adds	r3, r0, #1
 800ae88:	89a3      	ldrh	r3, [r4, #12]
 800ae8a:	bf15      	itete	ne
 800ae8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ae8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ae92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ae96:	81a3      	strheq	r3, [r4, #12]
 800ae98:	bf18      	it	ne
 800ae9a:	81a3      	strhne	r3, [r4, #12]
 800ae9c:	bd10      	pop	{r4, pc}

0800ae9e <__sclose>:
 800ae9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aea2:	f000 b869 	b.w	800af78 <_close_r>

0800aea6 <memset>:
 800aea6:	4402      	add	r2, r0
 800aea8:	4603      	mov	r3, r0
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d100      	bne.n	800aeb0 <memset+0xa>
 800aeae:	4770      	bx	lr
 800aeb0:	f803 1b01 	strb.w	r1, [r3], #1
 800aeb4:	e7f9      	b.n	800aeaa <memset+0x4>
	...

0800aeb8 <strtok>:
 800aeb8:	4b16      	ldr	r3, [pc, #88]	@ (800af14 <strtok+0x5c>)
 800aeba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aebe:	681f      	ldr	r7, [r3, #0]
 800aec0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800aec2:	4605      	mov	r5, r0
 800aec4:	460e      	mov	r6, r1
 800aec6:	b9ec      	cbnz	r4, 800af04 <strtok+0x4c>
 800aec8:	2050      	movs	r0, #80	@ 0x50
 800aeca:	f000 ff83 	bl	800bdd4 <malloc>
 800aece:	4602      	mov	r2, r0
 800aed0:	6478      	str	r0, [r7, #68]	@ 0x44
 800aed2:	b920      	cbnz	r0, 800aede <strtok+0x26>
 800aed4:	4b10      	ldr	r3, [pc, #64]	@ (800af18 <strtok+0x60>)
 800aed6:	4811      	ldr	r0, [pc, #68]	@ (800af1c <strtok+0x64>)
 800aed8:	215b      	movs	r1, #91	@ 0x5b
 800aeda:	f000 f8c7 	bl	800b06c <__assert_func>
 800aede:	e9c0 4400 	strd	r4, r4, [r0]
 800aee2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800aee6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800aeea:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800aeee:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800aef2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800aef6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800aefa:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800aefe:	6184      	str	r4, [r0, #24]
 800af00:	7704      	strb	r4, [r0, #28]
 800af02:	6244      	str	r4, [r0, #36]	@ 0x24
 800af04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800af06:	4631      	mov	r1, r6
 800af08:	4628      	mov	r0, r5
 800af0a:	2301      	movs	r3, #1
 800af0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af10:	f000 b806 	b.w	800af20 <__strtok_r>
 800af14:	200000d4 	.word	0x200000d4
 800af18:	0800e86e 	.word	0x0800e86e
 800af1c:	0800e885 	.word	0x0800e885

0800af20 <__strtok_r>:
 800af20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af22:	4604      	mov	r4, r0
 800af24:	b908      	cbnz	r0, 800af2a <__strtok_r+0xa>
 800af26:	6814      	ldr	r4, [r2, #0]
 800af28:	b144      	cbz	r4, 800af3c <__strtok_r+0x1c>
 800af2a:	4620      	mov	r0, r4
 800af2c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800af30:	460f      	mov	r7, r1
 800af32:	f817 6b01 	ldrb.w	r6, [r7], #1
 800af36:	b91e      	cbnz	r6, 800af40 <__strtok_r+0x20>
 800af38:	b965      	cbnz	r5, 800af54 <__strtok_r+0x34>
 800af3a:	6015      	str	r5, [r2, #0]
 800af3c:	2000      	movs	r0, #0
 800af3e:	e005      	b.n	800af4c <__strtok_r+0x2c>
 800af40:	42b5      	cmp	r5, r6
 800af42:	d1f6      	bne.n	800af32 <__strtok_r+0x12>
 800af44:	2b00      	cmp	r3, #0
 800af46:	d1f0      	bne.n	800af2a <__strtok_r+0xa>
 800af48:	6014      	str	r4, [r2, #0]
 800af4a:	7003      	strb	r3, [r0, #0]
 800af4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af4e:	461c      	mov	r4, r3
 800af50:	e00c      	b.n	800af6c <__strtok_r+0x4c>
 800af52:	b915      	cbnz	r5, 800af5a <__strtok_r+0x3a>
 800af54:	f814 3b01 	ldrb.w	r3, [r4], #1
 800af58:	460e      	mov	r6, r1
 800af5a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800af5e:	42ab      	cmp	r3, r5
 800af60:	d1f7      	bne.n	800af52 <__strtok_r+0x32>
 800af62:	2b00      	cmp	r3, #0
 800af64:	d0f3      	beq.n	800af4e <__strtok_r+0x2e>
 800af66:	2300      	movs	r3, #0
 800af68:	f804 3c01 	strb.w	r3, [r4, #-1]
 800af6c:	6014      	str	r4, [r2, #0]
 800af6e:	e7ed      	b.n	800af4c <__strtok_r+0x2c>

0800af70 <_localeconv_r>:
 800af70:	4800      	ldr	r0, [pc, #0]	@ (800af74 <_localeconv_r+0x4>)
 800af72:	4770      	bx	lr
 800af74:	20000214 	.word	0x20000214

0800af78 <_close_r>:
 800af78:	b538      	push	{r3, r4, r5, lr}
 800af7a:	4d06      	ldr	r5, [pc, #24]	@ (800af94 <_close_r+0x1c>)
 800af7c:	2300      	movs	r3, #0
 800af7e:	4604      	mov	r4, r0
 800af80:	4608      	mov	r0, r1
 800af82:	602b      	str	r3, [r5, #0]
 800af84:	f7f6 fd5a 	bl	8001a3c <_close>
 800af88:	1c43      	adds	r3, r0, #1
 800af8a:	d102      	bne.n	800af92 <_close_r+0x1a>
 800af8c:	682b      	ldr	r3, [r5, #0]
 800af8e:	b103      	cbz	r3, 800af92 <_close_r+0x1a>
 800af90:	6023      	str	r3, [r4, #0]
 800af92:	bd38      	pop	{r3, r4, r5, pc}
 800af94:	200007f8 	.word	0x200007f8

0800af98 <_lseek_r>:
 800af98:	b538      	push	{r3, r4, r5, lr}
 800af9a:	4d07      	ldr	r5, [pc, #28]	@ (800afb8 <_lseek_r+0x20>)
 800af9c:	4604      	mov	r4, r0
 800af9e:	4608      	mov	r0, r1
 800afa0:	4611      	mov	r1, r2
 800afa2:	2200      	movs	r2, #0
 800afa4:	602a      	str	r2, [r5, #0]
 800afa6:	461a      	mov	r2, r3
 800afa8:	f7f6 fd6f 	bl	8001a8a <_lseek>
 800afac:	1c43      	adds	r3, r0, #1
 800afae:	d102      	bne.n	800afb6 <_lseek_r+0x1e>
 800afb0:	682b      	ldr	r3, [r5, #0]
 800afb2:	b103      	cbz	r3, 800afb6 <_lseek_r+0x1e>
 800afb4:	6023      	str	r3, [r4, #0]
 800afb6:	bd38      	pop	{r3, r4, r5, pc}
 800afb8:	200007f8 	.word	0x200007f8

0800afbc <_read_r>:
 800afbc:	b538      	push	{r3, r4, r5, lr}
 800afbe:	4d07      	ldr	r5, [pc, #28]	@ (800afdc <_read_r+0x20>)
 800afc0:	4604      	mov	r4, r0
 800afc2:	4608      	mov	r0, r1
 800afc4:	4611      	mov	r1, r2
 800afc6:	2200      	movs	r2, #0
 800afc8:	602a      	str	r2, [r5, #0]
 800afca:	461a      	mov	r2, r3
 800afcc:	f7f6 fcfd 	bl	80019ca <_read>
 800afd0:	1c43      	adds	r3, r0, #1
 800afd2:	d102      	bne.n	800afda <_read_r+0x1e>
 800afd4:	682b      	ldr	r3, [r5, #0]
 800afd6:	b103      	cbz	r3, 800afda <_read_r+0x1e>
 800afd8:	6023      	str	r3, [r4, #0]
 800afda:	bd38      	pop	{r3, r4, r5, pc}
 800afdc:	200007f8 	.word	0x200007f8

0800afe0 <_write_r>:
 800afe0:	b538      	push	{r3, r4, r5, lr}
 800afe2:	4d07      	ldr	r5, [pc, #28]	@ (800b000 <_write_r+0x20>)
 800afe4:	4604      	mov	r4, r0
 800afe6:	4608      	mov	r0, r1
 800afe8:	4611      	mov	r1, r2
 800afea:	2200      	movs	r2, #0
 800afec:	602a      	str	r2, [r5, #0]
 800afee:	461a      	mov	r2, r3
 800aff0:	f7f6 fd08 	bl	8001a04 <_write>
 800aff4:	1c43      	adds	r3, r0, #1
 800aff6:	d102      	bne.n	800affe <_write_r+0x1e>
 800aff8:	682b      	ldr	r3, [r5, #0]
 800affa:	b103      	cbz	r3, 800affe <_write_r+0x1e>
 800affc:	6023      	str	r3, [r4, #0]
 800affe:	bd38      	pop	{r3, r4, r5, pc}
 800b000:	200007f8 	.word	0x200007f8

0800b004 <__errno>:
 800b004:	4b01      	ldr	r3, [pc, #4]	@ (800b00c <__errno+0x8>)
 800b006:	6818      	ldr	r0, [r3, #0]
 800b008:	4770      	bx	lr
 800b00a:	bf00      	nop
 800b00c:	200000d4 	.word	0x200000d4

0800b010 <__libc_init_array>:
 800b010:	b570      	push	{r4, r5, r6, lr}
 800b012:	4d0d      	ldr	r5, [pc, #52]	@ (800b048 <__libc_init_array+0x38>)
 800b014:	4c0d      	ldr	r4, [pc, #52]	@ (800b04c <__libc_init_array+0x3c>)
 800b016:	1b64      	subs	r4, r4, r5
 800b018:	10a4      	asrs	r4, r4, #2
 800b01a:	2600      	movs	r6, #0
 800b01c:	42a6      	cmp	r6, r4
 800b01e:	d109      	bne.n	800b034 <__libc_init_array+0x24>
 800b020:	4d0b      	ldr	r5, [pc, #44]	@ (800b050 <__libc_init_array+0x40>)
 800b022:	4c0c      	ldr	r4, [pc, #48]	@ (800b054 <__libc_init_array+0x44>)
 800b024:	f003 faf6 	bl	800e614 <_init>
 800b028:	1b64      	subs	r4, r4, r5
 800b02a:	10a4      	asrs	r4, r4, #2
 800b02c:	2600      	movs	r6, #0
 800b02e:	42a6      	cmp	r6, r4
 800b030:	d105      	bne.n	800b03e <__libc_init_array+0x2e>
 800b032:	bd70      	pop	{r4, r5, r6, pc}
 800b034:	f855 3b04 	ldr.w	r3, [r5], #4
 800b038:	4798      	blx	r3
 800b03a:	3601      	adds	r6, #1
 800b03c:	e7ee      	b.n	800b01c <__libc_init_array+0xc>
 800b03e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b042:	4798      	blx	r3
 800b044:	3601      	adds	r6, #1
 800b046:	e7f2      	b.n	800b02e <__libc_init_array+0x1e>
 800b048:	0800ebc4 	.word	0x0800ebc4
 800b04c:	0800ebc4 	.word	0x0800ebc4
 800b050:	0800ebc4 	.word	0x0800ebc4
 800b054:	0800ebc8 	.word	0x0800ebc8

0800b058 <__retarget_lock_init_recursive>:
 800b058:	4770      	bx	lr

0800b05a <__retarget_lock_acquire_recursive>:
 800b05a:	4770      	bx	lr

0800b05c <__retarget_lock_release_recursive>:
 800b05c:	4770      	bx	lr
	...

0800b060 <nanf>:
 800b060:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b068 <nanf+0x8>
 800b064:	4770      	bx	lr
 800b066:	bf00      	nop
 800b068:	7fc00000 	.word	0x7fc00000

0800b06c <__assert_func>:
 800b06c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b06e:	4614      	mov	r4, r2
 800b070:	461a      	mov	r2, r3
 800b072:	4b09      	ldr	r3, [pc, #36]	@ (800b098 <__assert_func+0x2c>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	4605      	mov	r5, r0
 800b078:	68d8      	ldr	r0, [r3, #12]
 800b07a:	b954      	cbnz	r4, 800b092 <__assert_func+0x26>
 800b07c:	4b07      	ldr	r3, [pc, #28]	@ (800b09c <__assert_func+0x30>)
 800b07e:	461c      	mov	r4, r3
 800b080:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b084:	9100      	str	r1, [sp, #0]
 800b086:	462b      	mov	r3, r5
 800b088:	4905      	ldr	r1, [pc, #20]	@ (800b0a0 <__assert_func+0x34>)
 800b08a:	f002 fc17 	bl	800d8bc <fiprintf>
 800b08e:	f002 fc7b 	bl	800d988 <abort>
 800b092:	4b04      	ldr	r3, [pc, #16]	@ (800b0a4 <__assert_func+0x38>)
 800b094:	e7f4      	b.n	800b080 <__assert_func+0x14>
 800b096:	bf00      	nop
 800b098:	200000d4 	.word	0x200000d4
 800b09c:	0800e91a 	.word	0x0800e91a
 800b0a0:	0800e8ec 	.word	0x0800e8ec
 800b0a4:	0800e8df 	.word	0x0800e8df

0800b0a8 <quorem>:
 800b0a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0ac:	6903      	ldr	r3, [r0, #16]
 800b0ae:	690c      	ldr	r4, [r1, #16]
 800b0b0:	42a3      	cmp	r3, r4
 800b0b2:	4607      	mov	r7, r0
 800b0b4:	db7e      	blt.n	800b1b4 <quorem+0x10c>
 800b0b6:	3c01      	subs	r4, #1
 800b0b8:	f101 0814 	add.w	r8, r1, #20
 800b0bc:	00a3      	lsls	r3, r4, #2
 800b0be:	f100 0514 	add.w	r5, r0, #20
 800b0c2:	9300      	str	r3, [sp, #0]
 800b0c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b0c8:	9301      	str	r3, [sp, #4]
 800b0ca:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b0ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b0d2:	3301      	adds	r3, #1
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b0da:	fbb2 f6f3 	udiv	r6, r2, r3
 800b0de:	d32e      	bcc.n	800b13e <quorem+0x96>
 800b0e0:	f04f 0a00 	mov.w	sl, #0
 800b0e4:	46c4      	mov	ip, r8
 800b0e6:	46ae      	mov	lr, r5
 800b0e8:	46d3      	mov	fp, sl
 800b0ea:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b0ee:	b298      	uxth	r0, r3
 800b0f0:	fb06 a000 	mla	r0, r6, r0, sl
 800b0f4:	0c02      	lsrs	r2, r0, #16
 800b0f6:	0c1b      	lsrs	r3, r3, #16
 800b0f8:	fb06 2303 	mla	r3, r6, r3, r2
 800b0fc:	f8de 2000 	ldr.w	r2, [lr]
 800b100:	b280      	uxth	r0, r0
 800b102:	b292      	uxth	r2, r2
 800b104:	1a12      	subs	r2, r2, r0
 800b106:	445a      	add	r2, fp
 800b108:	f8de 0000 	ldr.w	r0, [lr]
 800b10c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b110:	b29b      	uxth	r3, r3
 800b112:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b116:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b11a:	b292      	uxth	r2, r2
 800b11c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b120:	45e1      	cmp	r9, ip
 800b122:	f84e 2b04 	str.w	r2, [lr], #4
 800b126:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b12a:	d2de      	bcs.n	800b0ea <quorem+0x42>
 800b12c:	9b00      	ldr	r3, [sp, #0]
 800b12e:	58eb      	ldr	r3, [r5, r3]
 800b130:	b92b      	cbnz	r3, 800b13e <quorem+0x96>
 800b132:	9b01      	ldr	r3, [sp, #4]
 800b134:	3b04      	subs	r3, #4
 800b136:	429d      	cmp	r5, r3
 800b138:	461a      	mov	r2, r3
 800b13a:	d32f      	bcc.n	800b19c <quorem+0xf4>
 800b13c:	613c      	str	r4, [r7, #16]
 800b13e:	4638      	mov	r0, r7
 800b140:	f001 f9c2 	bl	800c4c8 <__mcmp>
 800b144:	2800      	cmp	r0, #0
 800b146:	db25      	blt.n	800b194 <quorem+0xec>
 800b148:	4629      	mov	r1, r5
 800b14a:	2000      	movs	r0, #0
 800b14c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b150:	f8d1 c000 	ldr.w	ip, [r1]
 800b154:	fa1f fe82 	uxth.w	lr, r2
 800b158:	fa1f f38c 	uxth.w	r3, ip
 800b15c:	eba3 030e 	sub.w	r3, r3, lr
 800b160:	4403      	add	r3, r0
 800b162:	0c12      	lsrs	r2, r2, #16
 800b164:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b168:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b16c:	b29b      	uxth	r3, r3
 800b16e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b172:	45c1      	cmp	r9, r8
 800b174:	f841 3b04 	str.w	r3, [r1], #4
 800b178:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b17c:	d2e6      	bcs.n	800b14c <quorem+0xa4>
 800b17e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b182:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b186:	b922      	cbnz	r2, 800b192 <quorem+0xea>
 800b188:	3b04      	subs	r3, #4
 800b18a:	429d      	cmp	r5, r3
 800b18c:	461a      	mov	r2, r3
 800b18e:	d30b      	bcc.n	800b1a8 <quorem+0x100>
 800b190:	613c      	str	r4, [r7, #16]
 800b192:	3601      	adds	r6, #1
 800b194:	4630      	mov	r0, r6
 800b196:	b003      	add	sp, #12
 800b198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b19c:	6812      	ldr	r2, [r2, #0]
 800b19e:	3b04      	subs	r3, #4
 800b1a0:	2a00      	cmp	r2, #0
 800b1a2:	d1cb      	bne.n	800b13c <quorem+0x94>
 800b1a4:	3c01      	subs	r4, #1
 800b1a6:	e7c6      	b.n	800b136 <quorem+0x8e>
 800b1a8:	6812      	ldr	r2, [r2, #0]
 800b1aa:	3b04      	subs	r3, #4
 800b1ac:	2a00      	cmp	r2, #0
 800b1ae:	d1ef      	bne.n	800b190 <quorem+0xe8>
 800b1b0:	3c01      	subs	r4, #1
 800b1b2:	e7ea      	b.n	800b18a <quorem+0xe2>
 800b1b4:	2000      	movs	r0, #0
 800b1b6:	e7ee      	b.n	800b196 <quorem+0xee>

0800b1b8 <_dtoa_r>:
 800b1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1bc:	69c7      	ldr	r7, [r0, #28]
 800b1be:	b099      	sub	sp, #100	@ 0x64
 800b1c0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b1c4:	ec55 4b10 	vmov	r4, r5, d0
 800b1c8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b1ca:	9109      	str	r1, [sp, #36]	@ 0x24
 800b1cc:	4683      	mov	fp, r0
 800b1ce:	920e      	str	r2, [sp, #56]	@ 0x38
 800b1d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b1d2:	b97f      	cbnz	r7, 800b1f4 <_dtoa_r+0x3c>
 800b1d4:	2010      	movs	r0, #16
 800b1d6:	f000 fdfd 	bl	800bdd4 <malloc>
 800b1da:	4602      	mov	r2, r0
 800b1dc:	f8cb 001c 	str.w	r0, [fp, #28]
 800b1e0:	b920      	cbnz	r0, 800b1ec <_dtoa_r+0x34>
 800b1e2:	4ba7      	ldr	r3, [pc, #668]	@ (800b480 <_dtoa_r+0x2c8>)
 800b1e4:	21ef      	movs	r1, #239	@ 0xef
 800b1e6:	48a7      	ldr	r0, [pc, #668]	@ (800b484 <_dtoa_r+0x2cc>)
 800b1e8:	f7ff ff40 	bl	800b06c <__assert_func>
 800b1ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b1f0:	6007      	str	r7, [r0, #0]
 800b1f2:	60c7      	str	r7, [r0, #12]
 800b1f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b1f8:	6819      	ldr	r1, [r3, #0]
 800b1fa:	b159      	cbz	r1, 800b214 <_dtoa_r+0x5c>
 800b1fc:	685a      	ldr	r2, [r3, #4]
 800b1fe:	604a      	str	r2, [r1, #4]
 800b200:	2301      	movs	r3, #1
 800b202:	4093      	lsls	r3, r2
 800b204:	608b      	str	r3, [r1, #8]
 800b206:	4658      	mov	r0, fp
 800b208:	f000 feda 	bl	800bfc0 <_Bfree>
 800b20c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b210:	2200      	movs	r2, #0
 800b212:	601a      	str	r2, [r3, #0]
 800b214:	1e2b      	subs	r3, r5, #0
 800b216:	bfb9      	ittee	lt
 800b218:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b21c:	9303      	strlt	r3, [sp, #12]
 800b21e:	2300      	movge	r3, #0
 800b220:	6033      	strge	r3, [r6, #0]
 800b222:	9f03      	ldr	r7, [sp, #12]
 800b224:	4b98      	ldr	r3, [pc, #608]	@ (800b488 <_dtoa_r+0x2d0>)
 800b226:	bfbc      	itt	lt
 800b228:	2201      	movlt	r2, #1
 800b22a:	6032      	strlt	r2, [r6, #0]
 800b22c:	43bb      	bics	r3, r7
 800b22e:	d112      	bne.n	800b256 <_dtoa_r+0x9e>
 800b230:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b232:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b236:	6013      	str	r3, [r2, #0]
 800b238:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b23c:	4323      	orrs	r3, r4
 800b23e:	f000 854d 	beq.w	800bcdc <_dtoa_r+0xb24>
 800b242:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b244:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b49c <_dtoa_r+0x2e4>
 800b248:	2b00      	cmp	r3, #0
 800b24a:	f000 854f 	beq.w	800bcec <_dtoa_r+0xb34>
 800b24e:	f10a 0303 	add.w	r3, sl, #3
 800b252:	f000 bd49 	b.w	800bce8 <_dtoa_r+0xb30>
 800b256:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b25a:	2200      	movs	r2, #0
 800b25c:	ec51 0b17 	vmov	r0, r1, d7
 800b260:	2300      	movs	r3, #0
 800b262:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b266:	f7f5 fc67 	bl	8000b38 <__aeabi_dcmpeq>
 800b26a:	4680      	mov	r8, r0
 800b26c:	b158      	cbz	r0, 800b286 <_dtoa_r+0xce>
 800b26e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b270:	2301      	movs	r3, #1
 800b272:	6013      	str	r3, [r2, #0]
 800b274:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b276:	b113      	cbz	r3, 800b27e <_dtoa_r+0xc6>
 800b278:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b27a:	4b84      	ldr	r3, [pc, #528]	@ (800b48c <_dtoa_r+0x2d4>)
 800b27c:	6013      	str	r3, [r2, #0]
 800b27e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b4a0 <_dtoa_r+0x2e8>
 800b282:	f000 bd33 	b.w	800bcec <_dtoa_r+0xb34>
 800b286:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b28a:	aa16      	add	r2, sp, #88	@ 0x58
 800b28c:	a917      	add	r1, sp, #92	@ 0x5c
 800b28e:	4658      	mov	r0, fp
 800b290:	f001 fa3a 	bl	800c708 <__d2b>
 800b294:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b298:	4681      	mov	r9, r0
 800b29a:	2e00      	cmp	r6, #0
 800b29c:	d077      	beq.n	800b38e <_dtoa_r+0x1d6>
 800b29e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b2a0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b2a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b2ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b2b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b2b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	4b74      	ldr	r3, [pc, #464]	@ (800b490 <_dtoa_r+0x2d8>)
 800b2be:	f7f5 f81b 	bl	80002f8 <__aeabi_dsub>
 800b2c2:	a369      	add	r3, pc, #420	@ (adr r3, 800b468 <_dtoa_r+0x2b0>)
 800b2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c8:	f7f5 f9ce 	bl	8000668 <__aeabi_dmul>
 800b2cc:	a368      	add	r3, pc, #416	@ (adr r3, 800b470 <_dtoa_r+0x2b8>)
 800b2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d2:	f7f5 f813 	bl	80002fc <__adddf3>
 800b2d6:	4604      	mov	r4, r0
 800b2d8:	4630      	mov	r0, r6
 800b2da:	460d      	mov	r5, r1
 800b2dc:	f7f5 f95a 	bl	8000594 <__aeabi_i2d>
 800b2e0:	a365      	add	r3, pc, #404	@ (adr r3, 800b478 <_dtoa_r+0x2c0>)
 800b2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e6:	f7f5 f9bf 	bl	8000668 <__aeabi_dmul>
 800b2ea:	4602      	mov	r2, r0
 800b2ec:	460b      	mov	r3, r1
 800b2ee:	4620      	mov	r0, r4
 800b2f0:	4629      	mov	r1, r5
 800b2f2:	f7f5 f803 	bl	80002fc <__adddf3>
 800b2f6:	4604      	mov	r4, r0
 800b2f8:	460d      	mov	r5, r1
 800b2fa:	f7f5 fc65 	bl	8000bc8 <__aeabi_d2iz>
 800b2fe:	2200      	movs	r2, #0
 800b300:	4607      	mov	r7, r0
 800b302:	2300      	movs	r3, #0
 800b304:	4620      	mov	r0, r4
 800b306:	4629      	mov	r1, r5
 800b308:	f7f5 fc20 	bl	8000b4c <__aeabi_dcmplt>
 800b30c:	b140      	cbz	r0, 800b320 <_dtoa_r+0x168>
 800b30e:	4638      	mov	r0, r7
 800b310:	f7f5 f940 	bl	8000594 <__aeabi_i2d>
 800b314:	4622      	mov	r2, r4
 800b316:	462b      	mov	r3, r5
 800b318:	f7f5 fc0e 	bl	8000b38 <__aeabi_dcmpeq>
 800b31c:	b900      	cbnz	r0, 800b320 <_dtoa_r+0x168>
 800b31e:	3f01      	subs	r7, #1
 800b320:	2f16      	cmp	r7, #22
 800b322:	d851      	bhi.n	800b3c8 <_dtoa_r+0x210>
 800b324:	4b5b      	ldr	r3, [pc, #364]	@ (800b494 <_dtoa_r+0x2dc>)
 800b326:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b32e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b332:	f7f5 fc0b 	bl	8000b4c <__aeabi_dcmplt>
 800b336:	2800      	cmp	r0, #0
 800b338:	d048      	beq.n	800b3cc <_dtoa_r+0x214>
 800b33a:	3f01      	subs	r7, #1
 800b33c:	2300      	movs	r3, #0
 800b33e:	9312      	str	r3, [sp, #72]	@ 0x48
 800b340:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b342:	1b9b      	subs	r3, r3, r6
 800b344:	1e5a      	subs	r2, r3, #1
 800b346:	bf44      	itt	mi
 800b348:	f1c3 0801 	rsbmi	r8, r3, #1
 800b34c:	2300      	movmi	r3, #0
 800b34e:	9208      	str	r2, [sp, #32]
 800b350:	bf54      	ite	pl
 800b352:	f04f 0800 	movpl.w	r8, #0
 800b356:	9308      	strmi	r3, [sp, #32]
 800b358:	2f00      	cmp	r7, #0
 800b35a:	db39      	blt.n	800b3d0 <_dtoa_r+0x218>
 800b35c:	9b08      	ldr	r3, [sp, #32]
 800b35e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b360:	443b      	add	r3, r7
 800b362:	9308      	str	r3, [sp, #32]
 800b364:	2300      	movs	r3, #0
 800b366:	930a      	str	r3, [sp, #40]	@ 0x28
 800b368:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b36a:	2b09      	cmp	r3, #9
 800b36c:	d864      	bhi.n	800b438 <_dtoa_r+0x280>
 800b36e:	2b05      	cmp	r3, #5
 800b370:	bfc4      	itt	gt
 800b372:	3b04      	subgt	r3, #4
 800b374:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b376:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b378:	f1a3 0302 	sub.w	r3, r3, #2
 800b37c:	bfcc      	ite	gt
 800b37e:	2400      	movgt	r4, #0
 800b380:	2401      	movle	r4, #1
 800b382:	2b03      	cmp	r3, #3
 800b384:	d863      	bhi.n	800b44e <_dtoa_r+0x296>
 800b386:	e8df f003 	tbb	[pc, r3]
 800b38a:	372a      	.short	0x372a
 800b38c:	5535      	.short	0x5535
 800b38e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b392:	441e      	add	r6, r3
 800b394:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b398:	2b20      	cmp	r3, #32
 800b39a:	bfc1      	itttt	gt
 800b39c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b3a0:	409f      	lslgt	r7, r3
 800b3a2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b3a6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b3aa:	bfd6      	itet	le
 800b3ac:	f1c3 0320 	rsble	r3, r3, #32
 800b3b0:	ea47 0003 	orrgt.w	r0, r7, r3
 800b3b4:	fa04 f003 	lslle.w	r0, r4, r3
 800b3b8:	f7f5 f8dc 	bl	8000574 <__aeabi_ui2d>
 800b3bc:	2201      	movs	r2, #1
 800b3be:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b3c2:	3e01      	subs	r6, #1
 800b3c4:	9214      	str	r2, [sp, #80]	@ 0x50
 800b3c6:	e777      	b.n	800b2b8 <_dtoa_r+0x100>
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	e7b8      	b.n	800b33e <_dtoa_r+0x186>
 800b3cc:	9012      	str	r0, [sp, #72]	@ 0x48
 800b3ce:	e7b7      	b.n	800b340 <_dtoa_r+0x188>
 800b3d0:	427b      	negs	r3, r7
 800b3d2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	eba8 0807 	sub.w	r8, r8, r7
 800b3da:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b3dc:	e7c4      	b.n	800b368 <_dtoa_r+0x1b0>
 800b3de:	2300      	movs	r3, #0
 800b3e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b3e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	dc35      	bgt.n	800b454 <_dtoa_r+0x29c>
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	9300      	str	r3, [sp, #0]
 800b3ec:	9307      	str	r3, [sp, #28]
 800b3ee:	461a      	mov	r2, r3
 800b3f0:	920e      	str	r2, [sp, #56]	@ 0x38
 800b3f2:	e00b      	b.n	800b40c <_dtoa_r+0x254>
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	e7f3      	b.n	800b3e0 <_dtoa_r+0x228>
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b3fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3fe:	18fb      	adds	r3, r7, r3
 800b400:	9300      	str	r3, [sp, #0]
 800b402:	3301      	adds	r3, #1
 800b404:	2b01      	cmp	r3, #1
 800b406:	9307      	str	r3, [sp, #28]
 800b408:	bfb8      	it	lt
 800b40a:	2301      	movlt	r3, #1
 800b40c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b410:	2100      	movs	r1, #0
 800b412:	2204      	movs	r2, #4
 800b414:	f102 0514 	add.w	r5, r2, #20
 800b418:	429d      	cmp	r5, r3
 800b41a:	d91f      	bls.n	800b45c <_dtoa_r+0x2a4>
 800b41c:	6041      	str	r1, [r0, #4]
 800b41e:	4658      	mov	r0, fp
 800b420:	f000 fd8e 	bl	800bf40 <_Balloc>
 800b424:	4682      	mov	sl, r0
 800b426:	2800      	cmp	r0, #0
 800b428:	d13c      	bne.n	800b4a4 <_dtoa_r+0x2ec>
 800b42a:	4b1b      	ldr	r3, [pc, #108]	@ (800b498 <_dtoa_r+0x2e0>)
 800b42c:	4602      	mov	r2, r0
 800b42e:	f240 11af 	movw	r1, #431	@ 0x1af
 800b432:	e6d8      	b.n	800b1e6 <_dtoa_r+0x2e>
 800b434:	2301      	movs	r3, #1
 800b436:	e7e0      	b.n	800b3fa <_dtoa_r+0x242>
 800b438:	2401      	movs	r4, #1
 800b43a:	2300      	movs	r3, #0
 800b43c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b43e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b440:	f04f 33ff 	mov.w	r3, #4294967295
 800b444:	9300      	str	r3, [sp, #0]
 800b446:	9307      	str	r3, [sp, #28]
 800b448:	2200      	movs	r2, #0
 800b44a:	2312      	movs	r3, #18
 800b44c:	e7d0      	b.n	800b3f0 <_dtoa_r+0x238>
 800b44e:	2301      	movs	r3, #1
 800b450:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b452:	e7f5      	b.n	800b440 <_dtoa_r+0x288>
 800b454:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b456:	9300      	str	r3, [sp, #0]
 800b458:	9307      	str	r3, [sp, #28]
 800b45a:	e7d7      	b.n	800b40c <_dtoa_r+0x254>
 800b45c:	3101      	adds	r1, #1
 800b45e:	0052      	lsls	r2, r2, #1
 800b460:	e7d8      	b.n	800b414 <_dtoa_r+0x25c>
 800b462:	bf00      	nop
 800b464:	f3af 8000 	nop.w
 800b468:	636f4361 	.word	0x636f4361
 800b46c:	3fd287a7 	.word	0x3fd287a7
 800b470:	8b60c8b3 	.word	0x8b60c8b3
 800b474:	3fc68a28 	.word	0x3fc68a28
 800b478:	509f79fb 	.word	0x509f79fb
 800b47c:	3fd34413 	.word	0x3fd34413
 800b480:	0800e86e 	.word	0x0800e86e
 800b484:	0800e928 	.word	0x0800e928
 800b488:	7ff00000 	.word	0x7ff00000
 800b48c:	0800e846 	.word	0x0800e846
 800b490:	3ff80000 	.word	0x3ff80000
 800b494:	0800ea20 	.word	0x0800ea20
 800b498:	0800e980 	.word	0x0800e980
 800b49c:	0800e924 	.word	0x0800e924
 800b4a0:	0800e845 	.word	0x0800e845
 800b4a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b4a8:	6018      	str	r0, [r3, #0]
 800b4aa:	9b07      	ldr	r3, [sp, #28]
 800b4ac:	2b0e      	cmp	r3, #14
 800b4ae:	f200 80a4 	bhi.w	800b5fa <_dtoa_r+0x442>
 800b4b2:	2c00      	cmp	r4, #0
 800b4b4:	f000 80a1 	beq.w	800b5fa <_dtoa_r+0x442>
 800b4b8:	2f00      	cmp	r7, #0
 800b4ba:	dd33      	ble.n	800b524 <_dtoa_r+0x36c>
 800b4bc:	4bad      	ldr	r3, [pc, #692]	@ (800b774 <_dtoa_r+0x5bc>)
 800b4be:	f007 020f 	and.w	r2, r7, #15
 800b4c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4c6:	ed93 7b00 	vldr	d7, [r3]
 800b4ca:	05f8      	lsls	r0, r7, #23
 800b4cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b4d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b4d4:	d516      	bpl.n	800b504 <_dtoa_r+0x34c>
 800b4d6:	4ba8      	ldr	r3, [pc, #672]	@ (800b778 <_dtoa_r+0x5c0>)
 800b4d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b4dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b4e0:	f7f5 f9ec 	bl	80008bc <__aeabi_ddiv>
 800b4e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4e8:	f004 040f 	and.w	r4, r4, #15
 800b4ec:	2603      	movs	r6, #3
 800b4ee:	4da2      	ldr	r5, [pc, #648]	@ (800b778 <_dtoa_r+0x5c0>)
 800b4f0:	b954      	cbnz	r4, 800b508 <_dtoa_r+0x350>
 800b4f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4fa:	f7f5 f9df 	bl	80008bc <__aeabi_ddiv>
 800b4fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b502:	e028      	b.n	800b556 <_dtoa_r+0x39e>
 800b504:	2602      	movs	r6, #2
 800b506:	e7f2      	b.n	800b4ee <_dtoa_r+0x336>
 800b508:	07e1      	lsls	r1, r4, #31
 800b50a:	d508      	bpl.n	800b51e <_dtoa_r+0x366>
 800b50c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b510:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b514:	f7f5 f8a8 	bl	8000668 <__aeabi_dmul>
 800b518:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b51c:	3601      	adds	r6, #1
 800b51e:	1064      	asrs	r4, r4, #1
 800b520:	3508      	adds	r5, #8
 800b522:	e7e5      	b.n	800b4f0 <_dtoa_r+0x338>
 800b524:	f000 80d2 	beq.w	800b6cc <_dtoa_r+0x514>
 800b528:	427c      	negs	r4, r7
 800b52a:	4b92      	ldr	r3, [pc, #584]	@ (800b774 <_dtoa_r+0x5bc>)
 800b52c:	4d92      	ldr	r5, [pc, #584]	@ (800b778 <_dtoa_r+0x5c0>)
 800b52e:	f004 020f 	and.w	r2, r4, #15
 800b532:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b53a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b53e:	f7f5 f893 	bl	8000668 <__aeabi_dmul>
 800b542:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b546:	1124      	asrs	r4, r4, #4
 800b548:	2300      	movs	r3, #0
 800b54a:	2602      	movs	r6, #2
 800b54c:	2c00      	cmp	r4, #0
 800b54e:	f040 80b2 	bne.w	800b6b6 <_dtoa_r+0x4fe>
 800b552:	2b00      	cmp	r3, #0
 800b554:	d1d3      	bne.n	800b4fe <_dtoa_r+0x346>
 800b556:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b558:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	f000 80b7 	beq.w	800b6d0 <_dtoa_r+0x518>
 800b562:	4b86      	ldr	r3, [pc, #536]	@ (800b77c <_dtoa_r+0x5c4>)
 800b564:	2200      	movs	r2, #0
 800b566:	4620      	mov	r0, r4
 800b568:	4629      	mov	r1, r5
 800b56a:	f7f5 faef 	bl	8000b4c <__aeabi_dcmplt>
 800b56e:	2800      	cmp	r0, #0
 800b570:	f000 80ae 	beq.w	800b6d0 <_dtoa_r+0x518>
 800b574:	9b07      	ldr	r3, [sp, #28]
 800b576:	2b00      	cmp	r3, #0
 800b578:	f000 80aa 	beq.w	800b6d0 <_dtoa_r+0x518>
 800b57c:	9b00      	ldr	r3, [sp, #0]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	dd37      	ble.n	800b5f2 <_dtoa_r+0x43a>
 800b582:	1e7b      	subs	r3, r7, #1
 800b584:	9304      	str	r3, [sp, #16]
 800b586:	4620      	mov	r0, r4
 800b588:	4b7d      	ldr	r3, [pc, #500]	@ (800b780 <_dtoa_r+0x5c8>)
 800b58a:	2200      	movs	r2, #0
 800b58c:	4629      	mov	r1, r5
 800b58e:	f7f5 f86b 	bl	8000668 <__aeabi_dmul>
 800b592:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b596:	9c00      	ldr	r4, [sp, #0]
 800b598:	3601      	adds	r6, #1
 800b59a:	4630      	mov	r0, r6
 800b59c:	f7f4 fffa 	bl	8000594 <__aeabi_i2d>
 800b5a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b5a4:	f7f5 f860 	bl	8000668 <__aeabi_dmul>
 800b5a8:	4b76      	ldr	r3, [pc, #472]	@ (800b784 <_dtoa_r+0x5cc>)
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	f7f4 fea6 	bl	80002fc <__adddf3>
 800b5b0:	4605      	mov	r5, r0
 800b5b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b5b6:	2c00      	cmp	r4, #0
 800b5b8:	f040 808d 	bne.w	800b6d6 <_dtoa_r+0x51e>
 800b5bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5c0:	4b71      	ldr	r3, [pc, #452]	@ (800b788 <_dtoa_r+0x5d0>)
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	f7f4 fe98 	bl	80002f8 <__aeabi_dsub>
 800b5c8:	4602      	mov	r2, r0
 800b5ca:	460b      	mov	r3, r1
 800b5cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b5d0:	462a      	mov	r2, r5
 800b5d2:	4633      	mov	r3, r6
 800b5d4:	f7f5 fad8 	bl	8000b88 <__aeabi_dcmpgt>
 800b5d8:	2800      	cmp	r0, #0
 800b5da:	f040 828b 	bne.w	800baf4 <_dtoa_r+0x93c>
 800b5de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5e2:	462a      	mov	r2, r5
 800b5e4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b5e8:	f7f5 fab0 	bl	8000b4c <__aeabi_dcmplt>
 800b5ec:	2800      	cmp	r0, #0
 800b5ee:	f040 8128 	bne.w	800b842 <_dtoa_r+0x68a>
 800b5f2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b5f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b5fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	f2c0 815a 	blt.w	800b8b6 <_dtoa_r+0x6fe>
 800b602:	2f0e      	cmp	r7, #14
 800b604:	f300 8157 	bgt.w	800b8b6 <_dtoa_r+0x6fe>
 800b608:	4b5a      	ldr	r3, [pc, #360]	@ (800b774 <_dtoa_r+0x5bc>)
 800b60a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b60e:	ed93 7b00 	vldr	d7, [r3]
 800b612:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b614:	2b00      	cmp	r3, #0
 800b616:	ed8d 7b00 	vstr	d7, [sp]
 800b61a:	da03      	bge.n	800b624 <_dtoa_r+0x46c>
 800b61c:	9b07      	ldr	r3, [sp, #28]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	f340 8101 	ble.w	800b826 <_dtoa_r+0x66e>
 800b624:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b628:	4656      	mov	r6, sl
 800b62a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b62e:	4620      	mov	r0, r4
 800b630:	4629      	mov	r1, r5
 800b632:	f7f5 f943 	bl	80008bc <__aeabi_ddiv>
 800b636:	f7f5 fac7 	bl	8000bc8 <__aeabi_d2iz>
 800b63a:	4680      	mov	r8, r0
 800b63c:	f7f4 ffaa 	bl	8000594 <__aeabi_i2d>
 800b640:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b644:	f7f5 f810 	bl	8000668 <__aeabi_dmul>
 800b648:	4602      	mov	r2, r0
 800b64a:	460b      	mov	r3, r1
 800b64c:	4620      	mov	r0, r4
 800b64e:	4629      	mov	r1, r5
 800b650:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b654:	f7f4 fe50 	bl	80002f8 <__aeabi_dsub>
 800b658:	f806 4b01 	strb.w	r4, [r6], #1
 800b65c:	9d07      	ldr	r5, [sp, #28]
 800b65e:	eba6 040a 	sub.w	r4, r6, sl
 800b662:	42a5      	cmp	r5, r4
 800b664:	4602      	mov	r2, r0
 800b666:	460b      	mov	r3, r1
 800b668:	f040 8117 	bne.w	800b89a <_dtoa_r+0x6e2>
 800b66c:	f7f4 fe46 	bl	80002fc <__adddf3>
 800b670:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b674:	4604      	mov	r4, r0
 800b676:	460d      	mov	r5, r1
 800b678:	f7f5 fa86 	bl	8000b88 <__aeabi_dcmpgt>
 800b67c:	2800      	cmp	r0, #0
 800b67e:	f040 80f9 	bne.w	800b874 <_dtoa_r+0x6bc>
 800b682:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b686:	4620      	mov	r0, r4
 800b688:	4629      	mov	r1, r5
 800b68a:	f7f5 fa55 	bl	8000b38 <__aeabi_dcmpeq>
 800b68e:	b118      	cbz	r0, 800b698 <_dtoa_r+0x4e0>
 800b690:	f018 0f01 	tst.w	r8, #1
 800b694:	f040 80ee 	bne.w	800b874 <_dtoa_r+0x6bc>
 800b698:	4649      	mov	r1, r9
 800b69a:	4658      	mov	r0, fp
 800b69c:	f000 fc90 	bl	800bfc0 <_Bfree>
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	7033      	strb	r3, [r6, #0]
 800b6a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b6a6:	3701      	adds	r7, #1
 800b6a8:	601f      	str	r7, [r3, #0]
 800b6aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	f000 831d 	beq.w	800bcec <_dtoa_r+0xb34>
 800b6b2:	601e      	str	r6, [r3, #0]
 800b6b4:	e31a      	b.n	800bcec <_dtoa_r+0xb34>
 800b6b6:	07e2      	lsls	r2, r4, #31
 800b6b8:	d505      	bpl.n	800b6c6 <_dtoa_r+0x50e>
 800b6ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b6be:	f7f4 ffd3 	bl	8000668 <__aeabi_dmul>
 800b6c2:	3601      	adds	r6, #1
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	1064      	asrs	r4, r4, #1
 800b6c8:	3508      	adds	r5, #8
 800b6ca:	e73f      	b.n	800b54c <_dtoa_r+0x394>
 800b6cc:	2602      	movs	r6, #2
 800b6ce:	e742      	b.n	800b556 <_dtoa_r+0x39e>
 800b6d0:	9c07      	ldr	r4, [sp, #28]
 800b6d2:	9704      	str	r7, [sp, #16]
 800b6d4:	e761      	b.n	800b59a <_dtoa_r+0x3e2>
 800b6d6:	4b27      	ldr	r3, [pc, #156]	@ (800b774 <_dtoa_r+0x5bc>)
 800b6d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b6da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b6de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b6e2:	4454      	add	r4, sl
 800b6e4:	2900      	cmp	r1, #0
 800b6e6:	d053      	beq.n	800b790 <_dtoa_r+0x5d8>
 800b6e8:	4928      	ldr	r1, [pc, #160]	@ (800b78c <_dtoa_r+0x5d4>)
 800b6ea:	2000      	movs	r0, #0
 800b6ec:	f7f5 f8e6 	bl	80008bc <__aeabi_ddiv>
 800b6f0:	4633      	mov	r3, r6
 800b6f2:	462a      	mov	r2, r5
 800b6f4:	f7f4 fe00 	bl	80002f8 <__aeabi_dsub>
 800b6f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b6fc:	4656      	mov	r6, sl
 800b6fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b702:	f7f5 fa61 	bl	8000bc8 <__aeabi_d2iz>
 800b706:	4605      	mov	r5, r0
 800b708:	f7f4 ff44 	bl	8000594 <__aeabi_i2d>
 800b70c:	4602      	mov	r2, r0
 800b70e:	460b      	mov	r3, r1
 800b710:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b714:	f7f4 fdf0 	bl	80002f8 <__aeabi_dsub>
 800b718:	3530      	adds	r5, #48	@ 0x30
 800b71a:	4602      	mov	r2, r0
 800b71c:	460b      	mov	r3, r1
 800b71e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b722:	f806 5b01 	strb.w	r5, [r6], #1
 800b726:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b72a:	f7f5 fa0f 	bl	8000b4c <__aeabi_dcmplt>
 800b72e:	2800      	cmp	r0, #0
 800b730:	d171      	bne.n	800b816 <_dtoa_r+0x65e>
 800b732:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b736:	4911      	ldr	r1, [pc, #68]	@ (800b77c <_dtoa_r+0x5c4>)
 800b738:	2000      	movs	r0, #0
 800b73a:	f7f4 fddd 	bl	80002f8 <__aeabi_dsub>
 800b73e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b742:	f7f5 fa03 	bl	8000b4c <__aeabi_dcmplt>
 800b746:	2800      	cmp	r0, #0
 800b748:	f040 8095 	bne.w	800b876 <_dtoa_r+0x6be>
 800b74c:	42a6      	cmp	r6, r4
 800b74e:	f43f af50 	beq.w	800b5f2 <_dtoa_r+0x43a>
 800b752:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b756:	4b0a      	ldr	r3, [pc, #40]	@ (800b780 <_dtoa_r+0x5c8>)
 800b758:	2200      	movs	r2, #0
 800b75a:	f7f4 ff85 	bl	8000668 <__aeabi_dmul>
 800b75e:	4b08      	ldr	r3, [pc, #32]	@ (800b780 <_dtoa_r+0x5c8>)
 800b760:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b764:	2200      	movs	r2, #0
 800b766:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b76a:	f7f4 ff7d 	bl	8000668 <__aeabi_dmul>
 800b76e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b772:	e7c4      	b.n	800b6fe <_dtoa_r+0x546>
 800b774:	0800ea20 	.word	0x0800ea20
 800b778:	0800e9f8 	.word	0x0800e9f8
 800b77c:	3ff00000 	.word	0x3ff00000
 800b780:	40240000 	.word	0x40240000
 800b784:	401c0000 	.word	0x401c0000
 800b788:	40140000 	.word	0x40140000
 800b78c:	3fe00000 	.word	0x3fe00000
 800b790:	4631      	mov	r1, r6
 800b792:	4628      	mov	r0, r5
 800b794:	f7f4 ff68 	bl	8000668 <__aeabi_dmul>
 800b798:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b79c:	9415      	str	r4, [sp, #84]	@ 0x54
 800b79e:	4656      	mov	r6, sl
 800b7a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7a4:	f7f5 fa10 	bl	8000bc8 <__aeabi_d2iz>
 800b7a8:	4605      	mov	r5, r0
 800b7aa:	f7f4 fef3 	bl	8000594 <__aeabi_i2d>
 800b7ae:	4602      	mov	r2, r0
 800b7b0:	460b      	mov	r3, r1
 800b7b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7b6:	f7f4 fd9f 	bl	80002f8 <__aeabi_dsub>
 800b7ba:	3530      	adds	r5, #48	@ 0x30
 800b7bc:	f806 5b01 	strb.w	r5, [r6], #1
 800b7c0:	4602      	mov	r2, r0
 800b7c2:	460b      	mov	r3, r1
 800b7c4:	42a6      	cmp	r6, r4
 800b7c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b7ca:	f04f 0200 	mov.w	r2, #0
 800b7ce:	d124      	bne.n	800b81a <_dtoa_r+0x662>
 800b7d0:	4bac      	ldr	r3, [pc, #688]	@ (800ba84 <_dtoa_r+0x8cc>)
 800b7d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b7d6:	f7f4 fd91 	bl	80002fc <__adddf3>
 800b7da:	4602      	mov	r2, r0
 800b7dc:	460b      	mov	r3, r1
 800b7de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7e2:	f7f5 f9d1 	bl	8000b88 <__aeabi_dcmpgt>
 800b7e6:	2800      	cmp	r0, #0
 800b7e8:	d145      	bne.n	800b876 <_dtoa_r+0x6be>
 800b7ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b7ee:	49a5      	ldr	r1, [pc, #660]	@ (800ba84 <_dtoa_r+0x8cc>)
 800b7f0:	2000      	movs	r0, #0
 800b7f2:	f7f4 fd81 	bl	80002f8 <__aeabi_dsub>
 800b7f6:	4602      	mov	r2, r0
 800b7f8:	460b      	mov	r3, r1
 800b7fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7fe:	f7f5 f9a5 	bl	8000b4c <__aeabi_dcmplt>
 800b802:	2800      	cmp	r0, #0
 800b804:	f43f aef5 	beq.w	800b5f2 <_dtoa_r+0x43a>
 800b808:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b80a:	1e73      	subs	r3, r6, #1
 800b80c:	9315      	str	r3, [sp, #84]	@ 0x54
 800b80e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b812:	2b30      	cmp	r3, #48	@ 0x30
 800b814:	d0f8      	beq.n	800b808 <_dtoa_r+0x650>
 800b816:	9f04      	ldr	r7, [sp, #16]
 800b818:	e73e      	b.n	800b698 <_dtoa_r+0x4e0>
 800b81a:	4b9b      	ldr	r3, [pc, #620]	@ (800ba88 <_dtoa_r+0x8d0>)
 800b81c:	f7f4 ff24 	bl	8000668 <__aeabi_dmul>
 800b820:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b824:	e7bc      	b.n	800b7a0 <_dtoa_r+0x5e8>
 800b826:	d10c      	bne.n	800b842 <_dtoa_r+0x68a>
 800b828:	4b98      	ldr	r3, [pc, #608]	@ (800ba8c <_dtoa_r+0x8d4>)
 800b82a:	2200      	movs	r2, #0
 800b82c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b830:	f7f4 ff1a 	bl	8000668 <__aeabi_dmul>
 800b834:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b838:	f7f5 f99c 	bl	8000b74 <__aeabi_dcmpge>
 800b83c:	2800      	cmp	r0, #0
 800b83e:	f000 8157 	beq.w	800baf0 <_dtoa_r+0x938>
 800b842:	2400      	movs	r4, #0
 800b844:	4625      	mov	r5, r4
 800b846:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b848:	43db      	mvns	r3, r3
 800b84a:	9304      	str	r3, [sp, #16]
 800b84c:	4656      	mov	r6, sl
 800b84e:	2700      	movs	r7, #0
 800b850:	4621      	mov	r1, r4
 800b852:	4658      	mov	r0, fp
 800b854:	f000 fbb4 	bl	800bfc0 <_Bfree>
 800b858:	2d00      	cmp	r5, #0
 800b85a:	d0dc      	beq.n	800b816 <_dtoa_r+0x65e>
 800b85c:	b12f      	cbz	r7, 800b86a <_dtoa_r+0x6b2>
 800b85e:	42af      	cmp	r7, r5
 800b860:	d003      	beq.n	800b86a <_dtoa_r+0x6b2>
 800b862:	4639      	mov	r1, r7
 800b864:	4658      	mov	r0, fp
 800b866:	f000 fbab 	bl	800bfc0 <_Bfree>
 800b86a:	4629      	mov	r1, r5
 800b86c:	4658      	mov	r0, fp
 800b86e:	f000 fba7 	bl	800bfc0 <_Bfree>
 800b872:	e7d0      	b.n	800b816 <_dtoa_r+0x65e>
 800b874:	9704      	str	r7, [sp, #16]
 800b876:	4633      	mov	r3, r6
 800b878:	461e      	mov	r6, r3
 800b87a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b87e:	2a39      	cmp	r2, #57	@ 0x39
 800b880:	d107      	bne.n	800b892 <_dtoa_r+0x6da>
 800b882:	459a      	cmp	sl, r3
 800b884:	d1f8      	bne.n	800b878 <_dtoa_r+0x6c0>
 800b886:	9a04      	ldr	r2, [sp, #16]
 800b888:	3201      	adds	r2, #1
 800b88a:	9204      	str	r2, [sp, #16]
 800b88c:	2230      	movs	r2, #48	@ 0x30
 800b88e:	f88a 2000 	strb.w	r2, [sl]
 800b892:	781a      	ldrb	r2, [r3, #0]
 800b894:	3201      	adds	r2, #1
 800b896:	701a      	strb	r2, [r3, #0]
 800b898:	e7bd      	b.n	800b816 <_dtoa_r+0x65e>
 800b89a:	4b7b      	ldr	r3, [pc, #492]	@ (800ba88 <_dtoa_r+0x8d0>)
 800b89c:	2200      	movs	r2, #0
 800b89e:	f7f4 fee3 	bl	8000668 <__aeabi_dmul>
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	4604      	mov	r4, r0
 800b8a8:	460d      	mov	r5, r1
 800b8aa:	f7f5 f945 	bl	8000b38 <__aeabi_dcmpeq>
 800b8ae:	2800      	cmp	r0, #0
 800b8b0:	f43f aebb 	beq.w	800b62a <_dtoa_r+0x472>
 800b8b4:	e6f0      	b.n	800b698 <_dtoa_r+0x4e0>
 800b8b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b8b8:	2a00      	cmp	r2, #0
 800b8ba:	f000 80db 	beq.w	800ba74 <_dtoa_r+0x8bc>
 800b8be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b8c0:	2a01      	cmp	r2, #1
 800b8c2:	f300 80bf 	bgt.w	800ba44 <_dtoa_r+0x88c>
 800b8c6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b8c8:	2a00      	cmp	r2, #0
 800b8ca:	f000 80b7 	beq.w	800ba3c <_dtoa_r+0x884>
 800b8ce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b8d2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b8d4:	4646      	mov	r6, r8
 800b8d6:	9a08      	ldr	r2, [sp, #32]
 800b8d8:	2101      	movs	r1, #1
 800b8da:	441a      	add	r2, r3
 800b8dc:	4658      	mov	r0, fp
 800b8de:	4498      	add	r8, r3
 800b8e0:	9208      	str	r2, [sp, #32]
 800b8e2:	f000 fc6b 	bl	800c1bc <__i2b>
 800b8e6:	4605      	mov	r5, r0
 800b8e8:	b15e      	cbz	r6, 800b902 <_dtoa_r+0x74a>
 800b8ea:	9b08      	ldr	r3, [sp, #32]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	dd08      	ble.n	800b902 <_dtoa_r+0x74a>
 800b8f0:	42b3      	cmp	r3, r6
 800b8f2:	9a08      	ldr	r2, [sp, #32]
 800b8f4:	bfa8      	it	ge
 800b8f6:	4633      	movge	r3, r6
 800b8f8:	eba8 0803 	sub.w	r8, r8, r3
 800b8fc:	1af6      	subs	r6, r6, r3
 800b8fe:	1ad3      	subs	r3, r2, r3
 800b900:	9308      	str	r3, [sp, #32]
 800b902:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b904:	b1f3      	cbz	r3, 800b944 <_dtoa_r+0x78c>
 800b906:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b908:	2b00      	cmp	r3, #0
 800b90a:	f000 80b7 	beq.w	800ba7c <_dtoa_r+0x8c4>
 800b90e:	b18c      	cbz	r4, 800b934 <_dtoa_r+0x77c>
 800b910:	4629      	mov	r1, r5
 800b912:	4622      	mov	r2, r4
 800b914:	4658      	mov	r0, fp
 800b916:	f000 fd11 	bl	800c33c <__pow5mult>
 800b91a:	464a      	mov	r2, r9
 800b91c:	4601      	mov	r1, r0
 800b91e:	4605      	mov	r5, r0
 800b920:	4658      	mov	r0, fp
 800b922:	f000 fc61 	bl	800c1e8 <__multiply>
 800b926:	4649      	mov	r1, r9
 800b928:	9004      	str	r0, [sp, #16]
 800b92a:	4658      	mov	r0, fp
 800b92c:	f000 fb48 	bl	800bfc0 <_Bfree>
 800b930:	9b04      	ldr	r3, [sp, #16]
 800b932:	4699      	mov	r9, r3
 800b934:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b936:	1b1a      	subs	r2, r3, r4
 800b938:	d004      	beq.n	800b944 <_dtoa_r+0x78c>
 800b93a:	4649      	mov	r1, r9
 800b93c:	4658      	mov	r0, fp
 800b93e:	f000 fcfd 	bl	800c33c <__pow5mult>
 800b942:	4681      	mov	r9, r0
 800b944:	2101      	movs	r1, #1
 800b946:	4658      	mov	r0, fp
 800b948:	f000 fc38 	bl	800c1bc <__i2b>
 800b94c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b94e:	4604      	mov	r4, r0
 800b950:	2b00      	cmp	r3, #0
 800b952:	f000 81cf 	beq.w	800bcf4 <_dtoa_r+0xb3c>
 800b956:	461a      	mov	r2, r3
 800b958:	4601      	mov	r1, r0
 800b95a:	4658      	mov	r0, fp
 800b95c:	f000 fcee 	bl	800c33c <__pow5mult>
 800b960:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b962:	2b01      	cmp	r3, #1
 800b964:	4604      	mov	r4, r0
 800b966:	f300 8095 	bgt.w	800ba94 <_dtoa_r+0x8dc>
 800b96a:	9b02      	ldr	r3, [sp, #8]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	f040 8087 	bne.w	800ba80 <_dtoa_r+0x8c8>
 800b972:	9b03      	ldr	r3, [sp, #12]
 800b974:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b978:	2b00      	cmp	r3, #0
 800b97a:	f040 8089 	bne.w	800ba90 <_dtoa_r+0x8d8>
 800b97e:	9b03      	ldr	r3, [sp, #12]
 800b980:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b984:	0d1b      	lsrs	r3, r3, #20
 800b986:	051b      	lsls	r3, r3, #20
 800b988:	b12b      	cbz	r3, 800b996 <_dtoa_r+0x7de>
 800b98a:	9b08      	ldr	r3, [sp, #32]
 800b98c:	3301      	adds	r3, #1
 800b98e:	9308      	str	r3, [sp, #32]
 800b990:	f108 0801 	add.w	r8, r8, #1
 800b994:	2301      	movs	r3, #1
 800b996:	930a      	str	r3, [sp, #40]	@ 0x28
 800b998:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	f000 81b0 	beq.w	800bd00 <_dtoa_r+0xb48>
 800b9a0:	6923      	ldr	r3, [r4, #16]
 800b9a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b9a6:	6918      	ldr	r0, [r3, #16]
 800b9a8:	f000 fbbc 	bl	800c124 <__hi0bits>
 800b9ac:	f1c0 0020 	rsb	r0, r0, #32
 800b9b0:	9b08      	ldr	r3, [sp, #32]
 800b9b2:	4418      	add	r0, r3
 800b9b4:	f010 001f 	ands.w	r0, r0, #31
 800b9b8:	d077      	beq.n	800baaa <_dtoa_r+0x8f2>
 800b9ba:	f1c0 0320 	rsb	r3, r0, #32
 800b9be:	2b04      	cmp	r3, #4
 800b9c0:	dd6b      	ble.n	800ba9a <_dtoa_r+0x8e2>
 800b9c2:	9b08      	ldr	r3, [sp, #32]
 800b9c4:	f1c0 001c 	rsb	r0, r0, #28
 800b9c8:	4403      	add	r3, r0
 800b9ca:	4480      	add	r8, r0
 800b9cc:	4406      	add	r6, r0
 800b9ce:	9308      	str	r3, [sp, #32]
 800b9d0:	f1b8 0f00 	cmp.w	r8, #0
 800b9d4:	dd05      	ble.n	800b9e2 <_dtoa_r+0x82a>
 800b9d6:	4649      	mov	r1, r9
 800b9d8:	4642      	mov	r2, r8
 800b9da:	4658      	mov	r0, fp
 800b9dc:	f000 fd08 	bl	800c3f0 <__lshift>
 800b9e0:	4681      	mov	r9, r0
 800b9e2:	9b08      	ldr	r3, [sp, #32]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	dd05      	ble.n	800b9f4 <_dtoa_r+0x83c>
 800b9e8:	4621      	mov	r1, r4
 800b9ea:	461a      	mov	r2, r3
 800b9ec:	4658      	mov	r0, fp
 800b9ee:	f000 fcff 	bl	800c3f0 <__lshift>
 800b9f2:	4604      	mov	r4, r0
 800b9f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d059      	beq.n	800baae <_dtoa_r+0x8f6>
 800b9fa:	4621      	mov	r1, r4
 800b9fc:	4648      	mov	r0, r9
 800b9fe:	f000 fd63 	bl	800c4c8 <__mcmp>
 800ba02:	2800      	cmp	r0, #0
 800ba04:	da53      	bge.n	800baae <_dtoa_r+0x8f6>
 800ba06:	1e7b      	subs	r3, r7, #1
 800ba08:	9304      	str	r3, [sp, #16]
 800ba0a:	4649      	mov	r1, r9
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	220a      	movs	r2, #10
 800ba10:	4658      	mov	r0, fp
 800ba12:	f000 faf7 	bl	800c004 <__multadd>
 800ba16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba18:	4681      	mov	r9, r0
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	f000 8172 	beq.w	800bd04 <_dtoa_r+0xb4c>
 800ba20:	2300      	movs	r3, #0
 800ba22:	4629      	mov	r1, r5
 800ba24:	220a      	movs	r2, #10
 800ba26:	4658      	mov	r0, fp
 800ba28:	f000 faec 	bl	800c004 <__multadd>
 800ba2c:	9b00      	ldr	r3, [sp, #0]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	4605      	mov	r5, r0
 800ba32:	dc67      	bgt.n	800bb04 <_dtoa_r+0x94c>
 800ba34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba36:	2b02      	cmp	r3, #2
 800ba38:	dc41      	bgt.n	800babe <_dtoa_r+0x906>
 800ba3a:	e063      	b.n	800bb04 <_dtoa_r+0x94c>
 800ba3c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ba3e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ba42:	e746      	b.n	800b8d2 <_dtoa_r+0x71a>
 800ba44:	9b07      	ldr	r3, [sp, #28]
 800ba46:	1e5c      	subs	r4, r3, #1
 800ba48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba4a:	42a3      	cmp	r3, r4
 800ba4c:	bfbf      	itttt	lt
 800ba4e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ba50:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ba52:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ba54:	1ae3      	sublt	r3, r4, r3
 800ba56:	bfb4      	ite	lt
 800ba58:	18d2      	addlt	r2, r2, r3
 800ba5a:	1b1c      	subge	r4, r3, r4
 800ba5c:	9b07      	ldr	r3, [sp, #28]
 800ba5e:	bfbc      	itt	lt
 800ba60:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ba62:	2400      	movlt	r4, #0
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	bfb5      	itete	lt
 800ba68:	eba8 0603 	sublt.w	r6, r8, r3
 800ba6c:	9b07      	ldrge	r3, [sp, #28]
 800ba6e:	2300      	movlt	r3, #0
 800ba70:	4646      	movge	r6, r8
 800ba72:	e730      	b.n	800b8d6 <_dtoa_r+0x71e>
 800ba74:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ba76:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ba78:	4646      	mov	r6, r8
 800ba7a:	e735      	b.n	800b8e8 <_dtoa_r+0x730>
 800ba7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ba7e:	e75c      	b.n	800b93a <_dtoa_r+0x782>
 800ba80:	2300      	movs	r3, #0
 800ba82:	e788      	b.n	800b996 <_dtoa_r+0x7de>
 800ba84:	3fe00000 	.word	0x3fe00000
 800ba88:	40240000 	.word	0x40240000
 800ba8c:	40140000 	.word	0x40140000
 800ba90:	9b02      	ldr	r3, [sp, #8]
 800ba92:	e780      	b.n	800b996 <_dtoa_r+0x7de>
 800ba94:	2300      	movs	r3, #0
 800ba96:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba98:	e782      	b.n	800b9a0 <_dtoa_r+0x7e8>
 800ba9a:	d099      	beq.n	800b9d0 <_dtoa_r+0x818>
 800ba9c:	9a08      	ldr	r2, [sp, #32]
 800ba9e:	331c      	adds	r3, #28
 800baa0:	441a      	add	r2, r3
 800baa2:	4498      	add	r8, r3
 800baa4:	441e      	add	r6, r3
 800baa6:	9208      	str	r2, [sp, #32]
 800baa8:	e792      	b.n	800b9d0 <_dtoa_r+0x818>
 800baaa:	4603      	mov	r3, r0
 800baac:	e7f6      	b.n	800ba9c <_dtoa_r+0x8e4>
 800baae:	9b07      	ldr	r3, [sp, #28]
 800bab0:	9704      	str	r7, [sp, #16]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	dc20      	bgt.n	800baf8 <_dtoa_r+0x940>
 800bab6:	9300      	str	r3, [sp, #0]
 800bab8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800baba:	2b02      	cmp	r3, #2
 800babc:	dd1e      	ble.n	800bafc <_dtoa_r+0x944>
 800babe:	9b00      	ldr	r3, [sp, #0]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	f47f aec0 	bne.w	800b846 <_dtoa_r+0x68e>
 800bac6:	4621      	mov	r1, r4
 800bac8:	2205      	movs	r2, #5
 800baca:	4658      	mov	r0, fp
 800bacc:	f000 fa9a 	bl	800c004 <__multadd>
 800bad0:	4601      	mov	r1, r0
 800bad2:	4604      	mov	r4, r0
 800bad4:	4648      	mov	r0, r9
 800bad6:	f000 fcf7 	bl	800c4c8 <__mcmp>
 800bada:	2800      	cmp	r0, #0
 800badc:	f77f aeb3 	ble.w	800b846 <_dtoa_r+0x68e>
 800bae0:	4656      	mov	r6, sl
 800bae2:	2331      	movs	r3, #49	@ 0x31
 800bae4:	f806 3b01 	strb.w	r3, [r6], #1
 800bae8:	9b04      	ldr	r3, [sp, #16]
 800baea:	3301      	adds	r3, #1
 800baec:	9304      	str	r3, [sp, #16]
 800baee:	e6ae      	b.n	800b84e <_dtoa_r+0x696>
 800baf0:	9c07      	ldr	r4, [sp, #28]
 800baf2:	9704      	str	r7, [sp, #16]
 800baf4:	4625      	mov	r5, r4
 800baf6:	e7f3      	b.n	800bae0 <_dtoa_r+0x928>
 800baf8:	9b07      	ldr	r3, [sp, #28]
 800bafa:	9300      	str	r3, [sp, #0]
 800bafc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	f000 8104 	beq.w	800bd0c <_dtoa_r+0xb54>
 800bb04:	2e00      	cmp	r6, #0
 800bb06:	dd05      	ble.n	800bb14 <_dtoa_r+0x95c>
 800bb08:	4629      	mov	r1, r5
 800bb0a:	4632      	mov	r2, r6
 800bb0c:	4658      	mov	r0, fp
 800bb0e:	f000 fc6f 	bl	800c3f0 <__lshift>
 800bb12:	4605      	mov	r5, r0
 800bb14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d05a      	beq.n	800bbd0 <_dtoa_r+0xa18>
 800bb1a:	6869      	ldr	r1, [r5, #4]
 800bb1c:	4658      	mov	r0, fp
 800bb1e:	f000 fa0f 	bl	800bf40 <_Balloc>
 800bb22:	4606      	mov	r6, r0
 800bb24:	b928      	cbnz	r0, 800bb32 <_dtoa_r+0x97a>
 800bb26:	4b84      	ldr	r3, [pc, #528]	@ (800bd38 <_dtoa_r+0xb80>)
 800bb28:	4602      	mov	r2, r0
 800bb2a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bb2e:	f7ff bb5a 	b.w	800b1e6 <_dtoa_r+0x2e>
 800bb32:	692a      	ldr	r2, [r5, #16]
 800bb34:	3202      	adds	r2, #2
 800bb36:	0092      	lsls	r2, r2, #2
 800bb38:	f105 010c 	add.w	r1, r5, #12
 800bb3c:	300c      	adds	r0, #12
 800bb3e:	f001 ff0b 	bl	800d958 <memcpy>
 800bb42:	2201      	movs	r2, #1
 800bb44:	4631      	mov	r1, r6
 800bb46:	4658      	mov	r0, fp
 800bb48:	f000 fc52 	bl	800c3f0 <__lshift>
 800bb4c:	f10a 0301 	add.w	r3, sl, #1
 800bb50:	9307      	str	r3, [sp, #28]
 800bb52:	9b00      	ldr	r3, [sp, #0]
 800bb54:	4453      	add	r3, sl
 800bb56:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb58:	9b02      	ldr	r3, [sp, #8]
 800bb5a:	f003 0301 	and.w	r3, r3, #1
 800bb5e:	462f      	mov	r7, r5
 800bb60:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb62:	4605      	mov	r5, r0
 800bb64:	9b07      	ldr	r3, [sp, #28]
 800bb66:	4621      	mov	r1, r4
 800bb68:	3b01      	subs	r3, #1
 800bb6a:	4648      	mov	r0, r9
 800bb6c:	9300      	str	r3, [sp, #0]
 800bb6e:	f7ff fa9b 	bl	800b0a8 <quorem>
 800bb72:	4639      	mov	r1, r7
 800bb74:	9002      	str	r0, [sp, #8]
 800bb76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bb7a:	4648      	mov	r0, r9
 800bb7c:	f000 fca4 	bl	800c4c8 <__mcmp>
 800bb80:	462a      	mov	r2, r5
 800bb82:	9008      	str	r0, [sp, #32]
 800bb84:	4621      	mov	r1, r4
 800bb86:	4658      	mov	r0, fp
 800bb88:	f000 fcba 	bl	800c500 <__mdiff>
 800bb8c:	68c2      	ldr	r2, [r0, #12]
 800bb8e:	4606      	mov	r6, r0
 800bb90:	bb02      	cbnz	r2, 800bbd4 <_dtoa_r+0xa1c>
 800bb92:	4601      	mov	r1, r0
 800bb94:	4648      	mov	r0, r9
 800bb96:	f000 fc97 	bl	800c4c8 <__mcmp>
 800bb9a:	4602      	mov	r2, r0
 800bb9c:	4631      	mov	r1, r6
 800bb9e:	4658      	mov	r0, fp
 800bba0:	920e      	str	r2, [sp, #56]	@ 0x38
 800bba2:	f000 fa0d 	bl	800bfc0 <_Bfree>
 800bba6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bba8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bbaa:	9e07      	ldr	r6, [sp, #28]
 800bbac:	ea43 0102 	orr.w	r1, r3, r2
 800bbb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bbb2:	4319      	orrs	r1, r3
 800bbb4:	d110      	bne.n	800bbd8 <_dtoa_r+0xa20>
 800bbb6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bbba:	d029      	beq.n	800bc10 <_dtoa_r+0xa58>
 800bbbc:	9b08      	ldr	r3, [sp, #32]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	dd02      	ble.n	800bbc8 <_dtoa_r+0xa10>
 800bbc2:	9b02      	ldr	r3, [sp, #8]
 800bbc4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bbc8:	9b00      	ldr	r3, [sp, #0]
 800bbca:	f883 8000 	strb.w	r8, [r3]
 800bbce:	e63f      	b.n	800b850 <_dtoa_r+0x698>
 800bbd0:	4628      	mov	r0, r5
 800bbd2:	e7bb      	b.n	800bb4c <_dtoa_r+0x994>
 800bbd4:	2201      	movs	r2, #1
 800bbd6:	e7e1      	b.n	800bb9c <_dtoa_r+0x9e4>
 800bbd8:	9b08      	ldr	r3, [sp, #32]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	db04      	blt.n	800bbe8 <_dtoa_r+0xa30>
 800bbde:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bbe0:	430b      	orrs	r3, r1
 800bbe2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bbe4:	430b      	orrs	r3, r1
 800bbe6:	d120      	bne.n	800bc2a <_dtoa_r+0xa72>
 800bbe8:	2a00      	cmp	r2, #0
 800bbea:	dded      	ble.n	800bbc8 <_dtoa_r+0xa10>
 800bbec:	4649      	mov	r1, r9
 800bbee:	2201      	movs	r2, #1
 800bbf0:	4658      	mov	r0, fp
 800bbf2:	f000 fbfd 	bl	800c3f0 <__lshift>
 800bbf6:	4621      	mov	r1, r4
 800bbf8:	4681      	mov	r9, r0
 800bbfa:	f000 fc65 	bl	800c4c8 <__mcmp>
 800bbfe:	2800      	cmp	r0, #0
 800bc00:	dc03      	bgt.n	800bc0a <_dtoa_r+0xa52>
 800bc02:	d1e1      	bne.n	800bbc8 <_dtoa_r+0xa10>
 800bc04:	f018 0f01 	tst.w	r8, #1
 800bc08:	d0de      	beq.n	800bbc8 <_dtoa_r+0xa10>
 800bc0a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bc0e:	d1d8      	bne.n	800bbc2 <_dtoa_r+0xa0a>
 800bc10:	9a00      	ldr	r2, [sp, #0]
 800bc12:	2339      	movs	r3, #57	@ 0x39
 800bc14:	7013      	strb	r3, [r2, #0]
 800bc16:	4633      	mov	r3, r6
 800bc18:	461e      	mov	r6, r3
 800bc1a:	3b01      	subs	r3, #1
 800bc1c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bc20:	2a39      	cmp	r2, #57	@ 0x39
 800bc22:	d052      	beq.n	800bcca <_dtoa_r+0xb12>
 800bc24:	3201      	adds	r2, #1
 800bc26:	701a      	strb	r2, [r3, #0]
 800bc28:	e612      	b.n	800b850 <_dtoa_r+0x698>
 800bc2a:	2a00      	cmp	r2, #0
 800bc2c:	dd07      	ble.n	800bc3e <_dtoa_r+0xa86>
 800bc2e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bc32:	d0ed      	beq.n	800bc10 <_dtoa_r+0xa58>
 800bc34:	9a00      	ldr	r2, [sp, #0]
 800bc36:	f108 0301 	add.w	r3, r8, #1
 800bc3a:	7013      	strb	r3, [r2, #0]
 800bc3c:	e608      	b.n	800b850 <_dtoa_r+0x698>
 800bc3e:	9b07      	ldr	r3, [sp, #28]
 800bc40:	9a07      	ldr	r2, [sp, #28]
 800bc42:	f803 8c01 	strb.w	r8, [r3, #-1]
 800bc46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	d028      	beq.n	800bc9e <_dtoa_r+0xae6>
 800bc4c:	4649      	mov	r1, r9
 800bc4e:	2300      	movs	r3, #0
 800bc50:	220a      	movs	r2, #10
 800bc52:	4658      	mov	r0, fp
 800bc54:	f000 f9d6 	bl	800c004 <__multadd>
 800bc58:	42af      	cmp	r7, r5
 800bc5a:	4681      	mov	r9, r0
 800bc5c:	f04f 0300 	mov.w	r3, #0
 800bc60:	f04f 020a 	mov.w	r2, #10
 800bc64:	4639      	mov	r1, r7
 800bc66:	4658      	mov	r0, fp
 800bc68:	d107      	bne.n	800bc7a <_dtoa_r+0xac2>
 800bc6a:	f000 f9cb 	bl	800c004 <__multadd>
 800bc6e:	4607      	mov	r7, r0
 800bc70:	4605      	mov	r5, r0
 800bc72:	9b07      	ldr	r3, [sp, #28]
 800bc74:	3301      	adds	r3, #1
 800bc76:	9307      	str	r3, [sp, #28]
 800bc78:	e774      	b.n	800bb64 <_dtoa_r+0x9ac>
 800bc7a:	f000 f9c3 	bl	800c004 <__multadd>
 800bc7e:	4629      	mov	r1, r5
 800bc80:	4607      	mov	r7, r0
 800bc82:	2300      	movs	r3, #0
 800bc84:	220a      	movs	r2, #10
 800bc86:	4658      	mov	r0, fp
 800bc88:	f000 f9bc 	bl	800c004 <__multadd>
 800bc8c:	4605      	mov	r5, r0
 800bc8e:	e7f0      	b.n	800bc72 <_dtoa_r+0xaba>
 800bc90:	9b00      	ldr	r3, [sp, #0]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	bfcc      	ite	gt
 800bc96:	461e      	movgt	r6, r3
 800bc98:	2601      	movle	r6, #1
 800bc9a:	4456      	add	r6, sl
 800bc9c:	2700      	movs	r7, #0
 800bc9e:	4649      	mov	r1, r9
 800bca0:	2201      	movs	r2, #1
 800bca2:	4658      	mov	r0, fp
 800bca4:	f000 fba4 	bl	800c3f0 <__lshift>
 800bca8:	4621      	mov	r1, r4
 800bcaa:	4681      	mov	r9, r0
 800bcac:	f000 fc0c 	bl	800c4c8 <__mcmp>
 800bcb0:	2800      	cmp	r0, #0
 800bcb2:	dcb0      	bgt.n	800bc16 <_dtoa_r+0xa5e>
 800bcb4:	d102      	bne.n	800bcbc <_dtoa_r+0xb04>
 800bcb6:	f018 0f01 	tst.w	r8, #1
 800bcba:	d1ac      	bne.n	800bc16 <_dtoa_r+0xa5e>
 800bcbc:	4633      	mov	r3, r6
 800bcbe:	461e      	mov	r6, r3
 800bcc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bcc4:	2a30      	cmp	r2, #48	@ 0x30
 800bcc6:	d0fa      	beq.n	800bcbe <_dtoa_r+0xb06>
 800bcc8:	e5c2      	b.n	800b850 <_dtoa_r+0x698>
 800bcca:	459a      	cmp	sl, r3
 800bccc:	d1a4      	bne.n	800bc18 <_dtoa_r+0xa60>
 800bcce:	9b04      	ldr	r3, [sp, #16]
 800bcd0:	3301      	adds	r3, #1
 800bcd2:	9304      	str	r3, [sp, #16]
 800bcd4:	2331      	movs	r3, #49	@ 0x31
 800bcd6:	f88a 3000 	strb.w	r3, [sl]
 800bcda:	e5b9      	b.n	800b850 <_dtoa_r+0x698>
 800bcdc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bcde:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bd3c <_dtoa_r+0xb84>
 800bce2:	b11b      	cbz	r3, 800bcec <_dtoa_r+0xb34>
 800bce4:	f10a 0308 	add.w	r3, sl, #8
 800bce8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bcea:	6013      	str	r3, [r2, #0]
 800bcec:	4650      	mov	r0, sl
 800bcee:	b019      	add	sp, #100	@ 0x64
 800bcf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcf6:	2b01      	cmp	r3, #1
 800bcf8:	f77f ae37 	ble.w	800b96a <_dtoa_r+0x7b2>
 800bcfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bcfe:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd00:	2001      	movs	r0, #1
 800bd02:	e655      	b.n	800b9b0 <_dtoa_r+0x7f8>
 800bd04:	9b00      	ldr	r3, [sp, #0]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	f77f aed6 	ble.w	800bab8 <_dtoa_r+0x900>
 800bd0c:	4656      	mov	r6, sl
 800bd0e:	4621      	mov	r1, r4
 800bd10:	4648      	mov	r0, r9
 800bd12:	f7ff f9c9 	bl	800b0a8 <quorem>
 800bd16:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bd1a:	f806 8b01 	strb.w	r8, [r6], #1
 800bd1e:	9b00      	ldr	r3, [sp, #0]
 800bd20:	eba6 020a 	sub.w	r2, r6, sl
 800bd24:	4293      	cmp	r3, r2
 800bd26:	ddb3      	ble.n	800bc90 <_dtoa_r+0xad8>
 800bd28:	4649      	mov	r1, r9
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	220a      	movs	r2, #10
 800bd2e:	4658      	mov	r0, fp
 800bd30:	f000 f968 	bl	800c004 <__multadd>
 800bd34:	4681      	mov	r9, r0
 800bd36:	e7ea      	b.n	800bd0e <_dtoa_r+0xb56>
 800bd38:	0800e980 	.word	0x0800e980
 800bd3c:	0800e91b 	.word	0x0800e91b

0800bd40 <_free_r>:
 800bd40:	b538      	push	{r3, r4, r5, lr}
 800bd42:	4605      	mov	r5, r0
 800bd44:	2900      	cmp	r1, #0
 800bd46:	d041      	beq.n	800bdcc <_free_r+0x8c>
 800bd48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd4c:	1f0c      	subs	r4, r1, #4
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	bfb8      	it	lt
 800bd52:	18e4      	addlt	r4, r4, r3
 800bd54:	f000 f8e8 	bl	800bf28 <__malloc_lock>
 800bd58:	4a1d      	ldr	r2, [pc, #116]	@ (800bdd0 <_free_r+0x90>)
 800bd5a:	6813      	ldr	r3, [r2, #0]
 800bd5c:	b933      	cbnz	r3, 800bd6c <_free_r+0x2c>
 800bd5e:	6063      	str	r3, [r4, #4]
 800bd60:	6014      	str	r4, [r2, #0]
 800bd62:	4628      	mov	r0, r5
 800bd64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd68:	f000 b8e4 	b.w	800bf34 <__malloc_unlock>
 800bd6c:	42a3      	cmp	r3, r4
 800bd6e:	d908      	bls.n	800bd82 <_free_r+0x42>
 800bd70:	6820      	ldr	r0, [r4, #0]
 800bd72:	1821      	adds	r1, r4, r0
 800bd74:	428b      	cmp	r3, r1
 800bd76:	bf01      	itttt	eq
 800bd78:	6819      	ldreq	r1, [r3, #0]
 800bd7a:	685b      	ldreq	r3, [r3, #4]
 800bd7c:	1809      	addeq	r1, r1, r0
 800bd7e:	6021      	streq	r1, [r4, #0]
 800bd80:	e7ed      	b.n	800bd5e <_free_r+0x1e>
 800bd82:	461a      	mov	r2, r3
 800bd84:	685b      	ldr	r3, [r3, #4]
 800bd86:	b10b      	cbz	r3, 800bd8c <_free_r+0x4c>
 800bd88:	42a3      	cmp	r3, r4
 800bd8a:	d9fa      	bls.n	800bd82 <_free_r+0x42>
 800bd8c:	6811      	ldr	r1, [r2, #0]
 800bd8e:	1850      	adds	r0, r2, r1
 800bd90:	42a0      	cmp	r0, r4
 800bd92:	d10b      	bne.n	800bdac <_free_r+0x6c>
 800bd94:	6820      	ldr	r0, [r4, #0]
 800bd96:	4401      	add	r1, r0
 800bd98:	1850      	adds	r0, r2, r1
 800bd9a:	4283      	cmp	r3, r0
 800bd9c:	6011      	str	r1, [r2, #0]
 800bd9e:	d1e0      	bne.n	800bd62 <_free_r+0x22>
 800bda0:	6818      	ldr	r0, [r3, #0]
 800bda2:	685b      	ldr	r3, [r3, #4]
 800bda4:	6053      	str	r3, [r2, #4]
 800bda6:	4408      	add	r0, r1
 800bda8:	6010      	str	r0, [r2, #0]
 800bdaa:	e7da      	b.n	800bd62 <_free_r+0x22>
 800bdac:	d902      	bls.n	800bdb4 <_free_r+0x74>
 800bdae:	230c      	movs	r3, #12
 800bdb0:	602b      	str	r3, [r5, #0]
 800bdb2:	e7d6      	b.n	800bd62 <_free_r+0x22>
 800bdb4:	6820      	ldr	r0, [r4, #0]
 800bdb6:	1821      	adds	r1, r4, r0
 800bdb8:	428b      	cmp	r3, r1
 800bdba:	bf04      	itt	eq
 800bdbc:	6819      	ldreq	r1, [r3, #0]
 800bdbe:	685b      	ldreq	r3, [r3, #4]
 800bdc0:	6063      	str	r3, [r4, #4]
 800bdc2:	bf04      	itt	eq
 800bdc4:	1809      	addeq	r1, r1, r0
 800bdc6:	6021      	streq	r1, [r4, #0]
 800bdc8:	6054      	str	r4, [r2, #4]
 800bdca:	e7ca      	b.n	800bd62 <_free_r+0x22>
 800bdcc:	bd38      	pop	{r3, r4, r5, pc}
 800bdce:	bf00      	nop
 800bdd0:	20000804 	.word	0x20000804

0800bdd4 <malloc>:
 800bdd4:	4b02      	ldr	r3, [pc, #8]	@ (800bde0 <malloc+0xc>)
 800bdd6:	4601      	mov	r1, r0
 800bdd8:	6818      	ldr	r0, [r3, #0]
 800bdda:	f000 b825 	b.w	800be28 <_malloc_r>
 800bdde:	bf00      	nop
 800bde0:	200000d4 	.word	0x200000d4

0800bde4 <sbrk_aligned>:
 800bde4:	b570      	push	{r4, r5, r6, lr}
 800bde6:	4e0f      	ldr	r6, [pc, #60]	@ (800be24 <sbrk_aligned+0x40>)
 800bde8:	460c      	mov	r4, r1
 800bdea:	6831      	ldr	r1, [r6, #0]
 800bdec:	4605      	mov	r5, r0
 800bdee:	b911      	cbnz	r1, 800bdf6 <sbrk_aligned+0x12>
 800bdf0:	f001 fda2 	bl	800d938 <_sbrk_r>
 800bdf4:	6030      	str	r0, [r6, #0]
 800bdf6:	4621      	mov	r1, r4
 800bdf8:	4628      	mov	r0, r5
 800bdfa:	f001 fd9d 	bl	800d938 <_sbrk_r>
 800bdfe:	1c43      	adds	r3, r0, #1
 800be00:	d103      	bne.n	800be0a <sbrk_aligned+0x26>
 800be02:	f04f 34ff 	mov.w	r4, #4294967295
 800be06:	4620      	mov	r0, r4
 800be08:	bd70      	pop	{r4, r5, r6, pc}
 800be0a:	1cc4      	adds	r4, r0, #3
 800be0c:	f024 0403 	bic.w	r4, r4, #3
 800be10:	42a0      	cmp	r0, r4
 800be12:	d0f8      	beq.n	800be06 <sbrk_aligned+0x22>
 800be14:	1a21      	subs	r1, r4, r0
 800be16:	4628      	mov	r0, r5
 800be18:	f001 fd8e 	bl	800d938 <_sbrk_r>
 800be1c:	3001      	adds	r0, #1
 800be1e:	d1f2      	bne.n	800be06 <sbrk_aligned+0x22>
 800be20:	e7ef      	b.n	800be02 <sbrk_aligned+0x1e>
 800be22:	bf00      	nop
 800be24:	20000800 	.word	0x20000800

0800be28 <_malloc_r>:
 800be28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be2c:	1ccd      	adds	r5, r1, #3
 800be2e:	f025 0503 	bic.w	r5, r5, #3
 800be32:	3508      	adds	r5, #8
 800be34:	2d0c      	cmp	r5, #12
 800be36:	bf38      	it	cc
 800be38:	250c      	movcc	r5, #12
 800be3a:	2d00      	cmp	r5, #0
 800be3c:	4606      	mov	r6, r0
 800be3e:	db01      	blt.n	800be44 <_malloc_r+0x1c>
 800be40:	42a9      	cmp	r1, r5
 800be42:	d904      	bls.n	800be4e <_malloc_r+0x26>
 800be44:	230c      	movs	r3, #12
 800be46:	6033      	str	r3, [r6, #0]
 800be48:	2000      	movs	r0, #0
 800be4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bf24 <_malloc_r+0xfc>
 800be52:	f000 f869 	bl	800bf28 <__malloc_lock>
 800be56:	f8d8 3000 	ldr.w	r3, [r8]
 800be5a:	461c      	mov	r4, r3
 800be5c:	bb44      	cbnz	r4, 800beb0 <_malloc_r+0x88>
 800be5e:	4629      	mov	r1, r5
 800be60:	4630      	mov	r0, r6
 800be62:	f7ff ffbf 	bl	800bde4 <sbrk_aligned>
 800be66:	1c43      	adds	r3, r0, #1
 800be68:	4604      	mov	r4, r0
 800be6a:	d158      	bne.n	800bf1e <_malloc_r+0xf6>
 800be6c:	f8d8 4000 	ldr.w	r4, [r8]
 800be70:	4627      	mov	r7, r4
 800be72:	2f00      	cmp	r7, #0
 800be74:	d143      	bne.n	800befe <_malloc_r+0xd6>
 800be76:	2c00      	cmp	r4, #0
 800be78:	d04b      	beq.n	800bf12 <_malloc_r+0xea>
 800be7a:	6823      	ldr	r3, [r4, #0]
 800be7c:	4639      	mov	r1, r7
 800be7e:	4630      	mov	r0, r6
 800be80:	eb04 0903 	add.w	r9, r4, r3
 800be84:	f001 fd58 	bl	800d938 <_sbrk_r>
 800be88:	4581      	cmp	r9, r0
 800be8a:	d142      	bne.n	800bf12 <_malloc_r+0xea>
 800be8c:	6821      	ldr	r1, [r4, #0]
 800be8e:	1a6d      	subs	r5, r5, r1
 800be90:	4629      	mov	r1, r5
 800be92:	4630      	mov	r0, r6
 800be94:	f7ff ffa6 	bl	800bde4 <sbrk_aligned>
 800be98:	3001      	adds	r0, #1
 800be9a:	d03a      	beq.n	800bf12 <_malloc_r+0xea>
 800be9c:	6823      	ldr	r3, [r4, #0]
 800be9e:	442b      	add	r3, r5
 800bea0:	6023      	str	r3, [r4, #0]
 800bea2:	f8d8 3000 	ldr.w	r3, [r8]
 800bea6:	685a      	ldr	r2, [r3, #4]
 800bea8:	bb62      	cbnz	r2, 800bf04 <_malloc_r+0xdc>
 800beaa:	f8c8 7000 	str.w	r7, [r8]
 800beae:	e00f      	b.n	800bed0 <_malloc_r+0xa8>
 800beb0:	6822      	ldr	r2, [r4, #0]
 800beb2:	1b52      	subs	r2, r2, r5
 800beb4:	d420      	bmi.n	800bef8 <_malloc_r+0xd0>
 800beb6:	2a0b      	cmp	r2, #11
 800beb8:	d917      	bls.n	800beea <_malloc_r+0xc2>
 800beba:	1961      	adds	r1, r4, r5
 800bebc:	42a3      	cmp	r3, r4
 800bebe:	6025      	str	r5, [r4, #0]
 800bec0:	bf18      	it	ne
 800bec2:	6059      	strne	r1, [r3, #4]
 800bec4:	6863      	ldr	r3, [r4, #4]
 800bec6:	bf08      	it	eq
 800bec8:	f8c8 1000 	streq.w	r1, [r8]
 800becc:	5162      	str	r2, [r4, r5]
 800bece:	604b      	str	r3, [r1, #4]
 800bed0:	4630      	mov	r0, r6
 800bed2:	f000 f82f 	bl	800bf34 <__malloc_unlock>
 800bed6:	f104 000b 	add.w	r0, r4, #11
 800beda:	1d23      	adds	r3, r4, #4
 800bedc:	f020 0007 	bic.w	r0, r0, #7
 800bee0:	1ac2      	subs	r2, r0, r3
 800bee2:	bf1c      	itt	ne
 800bee4:	1a1b      	subne	r3, r3, r0
 800bee6:	50a3      	strne	r3, [r4, r2]
 800bee8:	e7af      	b.n	800be4a <_malloc_r+0x22>
 800beea:	6862      	ldr	r2, [r4, #4]
 800beec:	42a3      	cmp	r3, r4
 800beee:	bf0c      	ite	eq
 800bef0:	f8c8 2000 	streq.w	r2, [r8]
 800bef4:	605a      	strne	r2, [r3, #4]
 800bef6:	e7eb      	b.n	800bed0 <_malloc_r+0xa8>
 800bef8:	4623      	mov	r3, r4
 800befa:	6864      	ldr	r4, [r4, #4]
 800befc:	e7ae      	b.n	800be5c <_malloc_r+0x34>
 800befe:	463c      	mov	r4, r7
 800bf00:	687f      	ldr	r7, [r7, #4]
 800bf02:	e7b6      	b.n	800be72 <_malloc_r+0x4a>
 800bf04:	461a      	mov	r2, r3
 800bf06:	685b      	ldr	r3, [r3, #4]
 800bf08:	42a3      	cmp	r3, r4
 800bf0a:	d1fb      	bne.n	800bf04 <_malloc_r+0xdc>
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	6053      	str	r3, [r2, #4]
 800bf10:	e7de      	b.n	800bed0 <_malloc_r+0xa8>
 800bf12:	230c      	movs	r3, #12
 800bf14:	6033      	str	r3, [r6, #0]
 800bf16:	4630      	mov	r0, r6
 800bf18:	f000 f80c 	bl	800bf34 <__malloc_unlock>
 800bf1c:	e794      	b.n	800be48 <_malloc_r+0x20>
 800bf1e:	6005      	str	r5, [r0, #0]
 800bf20:	e7d6      	b.n	800bed0 <_malloc_r+0xa8>
 800bf22:	bf00      	nop
 800bf24:	20000804 	.word	0x20000804

0800bf28 <__malloc_lock>:
 800bf28:	4801      	ldr	r0, [pc, #4]	@ (800bf30 <__malloc_lock+0x8>)
 800bf2a:	f7ff b896 	b.w	800b05a <__retarget_lock_acquire_recursive>
 800bf2e:	bf00      	nop
 800bf30:	200007fc 	.word	0x200007fc

0800bf34 <__malloc_unlock>:
 800bf34:	4801      	ldr	r0, [pc, #4]	@ (800bf3c <__malloc_unlock+0x8>)
 800bf36:	f7ff b891 	b.w	800b05c <__retarget_lock_release_recursive>
 800bf3a:	bf00      	nop
 800bf3c:	200007fc 	.word	0x200007fc

0800bf40 <_Balloc>:
 800bf40:	b570      	push	{r4, r5, r6, lr}
 800bf42:	69c6      	ldr	r6, [r0, #28]
 800bf44:	4604      	mov	r4, r0
 800bf46:	460d      	mov	r5, r1
 800bf48:	b976      	cbnz	r6, 800bf68 <_Balloc+0x28>
 800bf4a:	2010      	movs	r0, #16
 800bf4c:	f7ff ff42 	bl	800bdd4 <malloc>
 800bf50:	4602      	mov	r2, r0
 800bf52:	61e0      	str	r0, [r4, #28]
 800bf54:	b920      	cbnz	r0, 800bf60 <_Balloc+0x20>
 800bf56:	4b18      	ldr	r3, [pc, #96]	@ (800bfb8 <_Balloc+0x78>)
 800bf58:	4818      	ldr	r0, [pc, #96]	@ (800bfbc <_Balloc+0x7c>)
 800bf5a:	216b      	movs	r1, #107	@ 0x6b
 800bf5c:	f7ff f886 	bl	800b06c <__assert_func>
 800bf60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf64:	6006      	str	r6, [r0, #0]
 800bf66:	60c6      	str	r6, [r0, #12]
 800bf68:	69e6      	ldr	r6, [r4, #28]
 800bf6a:	68f3      	ldr	r3, [r6, #12]
 800bf6c:	b183      	cbz	r3, 800bf90 <_Balloc+0x50>
 800bf6e:	69e3      	ldr	r3, [r4, #28]
 800bf70:	68db      	ldr	r3, [r3, #12]
 800bf72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bf76:	b9b8      	cbnz	r0, 800bfa8 <_Balloc+0x68>
 800bf78:	2101      	movs	r1, #1
 800bf7a:	fa01 f605 	lsl.w	r6, r1, r5
 800bf7e:	1d72      	adds	r2, r6, #5
 800bf80:	0092      	lsls	r2, r2, #2
 800bf82:	4620      	mov	r0, r4
 800bf84:	f001 fd07 	bl	800d996 <_calloc_r>
 800bf88:	b160      	cbz	r0, 800bfa4 <_Balloc+0x64>
 800bf8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bf8e:	e00e      	b.n	800bfae <_Balloc+0x6e>
 800bf90:	2221      	movs	r2, #33	@ 0x21
 800bf92:	2104      	movs	r1, #4
 800bf94:	4620      	mov	r0, r4
 800bf96:	f001 fcfe 	bl	800d996 <_calloc_r>
 800bf9a:	69e3      	ldr	r3, [r4, #28]
 800bf9c:	60f0      	str	r0, [r6, #12]
 800bf9e:	68db      	ldr	r3, [r3, #12]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d1e4      	bne.n	800bf6e <_Balloc+0x2e>
 800bfa4:	2000      	movs	r0, #0
 800bfa6:	bd70      	pop	{r4, r5, r6, pc}
 800bfa8:	6802      	ldr	r2, [r0, #0]
 800bfaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bfae:	2300      	movs	r3, #0
 800bfb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bfb4:	e7f7      	b.n	800bfa6 <_Balloc+0x66>
 800bfb6:	bf00      	nop
 800bfb8:	0800e86e 	.word	0x0800e86e
 800bfbc:	0800e991 	.word	0x0800e991

0800bfc0 <_Bfree>:
 800bfc0:	b570      	push	{r4, r5, r6, lr}
 800bfc2:	69c6      	ldr	r6, [r0, #28]
 800bfc4:	4605      	mov	r5, r0
 800bfc6:	460c      	mov	r4, r1
 800bfc8:	b976      	cbnz	r6, 800bfe8 <_Bfree+0x28>
 800bfca:	2010      	movs	r0, #16
 800bfcc:	f7ff ff02 	bl	800bdd4 <malloc>
 800bfd0:	4602      	mov	r2, r0
 800bfd2:	61e8      	str	r0, [r5, #28]
 800bfd4:	b920      	cbnz	r0, 800bfe0 <_Bfree+0x20>
 800bfd6:	4b09      	ldr	r3, [pc, #36]	@ (800bffc <_Bfree+0x3c>)
 800bfd8:	4809      	ldr	r0, [pc, #36]	@ (800c000 <_Bfree+0x40>)
 800bfda:	218f      	movs	r1, #143	@ 0x8f
 800bfdc:	f7ff f846 	bl	800b06c <__assert_func>
 800bfe0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bfe4:	6006      	str	r6, [r0, #0]
 800bfe6:	60c6      	str	r6, [r0, #12]
 800bfe8:	b13c      	cbz	r4, 800bffa <_Bfree+0x3a>
 800bfea:	69eb      	ldr	r3, [r5, #28]
 800bfec:	6862      	ldr	r2, [r4, #4]
 800bfee:	68db      	ldr	r3, [r3, #12]
 800bff0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bff4:	6021      	str	r1, [r4, #0]
 800bff6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bffa:	bd70      	pop	{r4, r5, r6, pc}
 800bffc:	0800e86e 	.word	0x0800e86e
 800c000:	0800e991 	.word	0x0800e991

0800c004 <__multadd>:
 800c004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c008:	690d      	ldr	r5, [r1, #16]
 800c00a:	4607      	mov	r7, r0
 800c00c:	460c      	mov	r4, r1
 800c00e:	461e      	mov	r6, r3
 800c010:	f101 0c14 	add.w	ip, r1, #20
 800c014:	2000      	movs	r0, #0
 800c016:	f8dc 3000 	ldr.w	r3, [ip]
 800c01a:	b299      	uxth	r1, r3
 800c01c:	fb02 6101 	mla	r1, r2, r1, r6
 800c020:	0c1e      	lsrs	r6, r3, #16
 800c022:	0c0b      	lsrs	r3, r1, #16
 800c024:	fb02 3306 	mla	r3, r2, r6, r3
 800c028:	b289      	uxth	r1, r1
 800c02a:	3001      	adds	r0, #1
 800c02c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c030:	4285      	cmp	r5, r0
 800c032:	f84c 1b04 	str.w	r1, [ip], #4
 800c036:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c03a:	dcec      	bgt.n	800c016 <__multadd+0x12>
 800c03c:	b30e      	cbz	r6, 800c082 <__multadd+0x7e>
 800c03e:	68a3      	ldr	r3, [r4, #8]
 800c040:	42ab      	cmp	r3, r5
 800c042:	dc19      	bgt.n	800c078 <__multadd+0x74>
 800c044:	6861      	ldr	r1, [r4, #4]
 800c046:	4638      	mov	r0, r7
 800c048:	3101      	adds	r1, #1
 800c04a:	f7ff ff79 	bl	800bf40 <_Balloc>
 800c04e:	4680      	mov	r8, r0
 800c050:	b928      	cbnz	r0, 800c05e <__multadd+0x5a>
 800c052:	4602      	mov	r2, r0
 800c054:	4b0c      	ldr	r3, [pc, #48]	@ (800c088 <__multadd+0x84>)
 800c056:	480d      	ldr	r0, [pc, #52]	@ (800c08c <__multadd+0x88>)
 800c058:	21ba      	movs	r1, #186	@ 0xba
 800c05a:	f7ff f807 	bl	800b06c <__assert_func>
 800c05e:	6922      	ldr	r2, [r4, #16]
 800c060:	3202      	adds	r2, #2
 800c062:	f104 010c 	add.w	r1, r4, #12
 800c066:	0092      	lsls	r2, r2, #2
 800c068:	300c      	adds	r0, #12
 800c06a:	f001 fc75 	bl	800d958 <memcpy>
 800c06e:	4621      	mov	r1, r4
 800c070:	4638      	mov	r0, r7
 800c072:	f7ff ffa5 	bl	800bfc0 <_Bfree>
 800c076:	4644      	mov	r4, r8
 800c078:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c07c:	3501      	adds	r5, #1
 800c07e:	615e      	str	r6, [r3, #20]
 800c080:	6125      	str	r5, [r4, #16]
 800c082:	4620      	mov	r0, r4
 800c084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c088:	0800e980 	.word	0x0800e980
 800c08c:	0800e991 	.word	0x0800e991

0800c090 <__s2b>:
 800c090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c094:	460c      	mov	r4, r1
 800c096:	4615      	mov	r5, r2
 800c098:	461f      	mov	r7, r3
 800c09a:	2209      	movs	r2, #9
 800c09c:	3308      	adds	r3, #8
 800c09e:	4606      	mov	r6, r0
 800c0a0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c0a4:	2100      	movs	r1, #0
 800c0a6:	2201      	movs	r2, #1
 800c0a8:	429a      	cmp	r2, r3
 800c0aa:	db09      	blt.n	800c0c0 <__s2b+0x30>
 800c0ac:	4630      	mov	r0, r6
 800c0ae:	f7ff ff47 	bl	800bf40 <_Balloc>
 800c0b2:	b940      	cbnz	r0, 800c0c6 <__s2b+0x36>
 800c0b4:	4602      	mov	r2, r0
 800c0b6:	4b19      	ldr	r3, [pc, #100]	@ (800c11c <__s2b+0x8c>)
 800c0b8:	4819      	ldr	r0, [pc, #100]	@ (800c120 <__s2b+0x90>)
 800c0ba:	21d3      	movs	r1, #211	@ 0xd3
 800c0bc:	f7fe ffd6 	bl	800b06c <__assert_func>
 800c0c0:	0052      	lsls	r2, r2, #1
 800c0c2:	3101      	adds	r1, #1
 800c0c4:	e7f0      	b.n	800c0a8 <__s2b+0x18>
 800c0c6:	9b08      	ldr	r3, [sp, #32]
 800c0c8:	6143      	str	r3, [r0, #20]
 800c0ca:	2d09      	cmp	r5, #9
 800c0cc:	f04f 0301 	mov.w	r3, #1
 800c0d0:	6103      	str	r3, [r0, #16]
 800c0d2:	dd16      	ble.n	800c102 <__s2b+0x72>
 800c0d4:	f104 0909 	add.w	r9, r4, #9
 800c0d8:	46c8      	mov	r8, r9
 800c0da:	442c      	add	r4, r5
 800c0dc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c0e0:	4601      	mov	r1, r0
 800c0e2:	3b30      	subs	r3, #48	@ 0x30
 800c0e4:	220a      	movs	r2, #10
 800c0e6:	4630      	mov	r0, r6
 800c0e8:	f7ff ff8c 	bl	800c004 <__multadd>
 800c0ec:	45a0      	cmp	r8, r4
 800c0ee:	d1f5      	bne.n	800c0dc <__s2b+0x4c>
 800c0f0:	f1a5 0408 	sub.w	r4, r5, #8
 800c0f4:	444c      	add	r4, r9
 800c0f6:	1b2d      	subs	r5, r5, r4
 800c0f8:	1963      	adds	r3, r4, r5
 800c0fa:	42bb      	cmp	r3, r7
 800c0fc:	db04      	blt.n	800c108 <__s2b+0x78>
 800c0fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c102:	340a      	adds	r4, #10
 800c104:	2509      	movs	r5, #9
 800c106:	e7f6      	b.n	800c0f6 <__s2b+0x66>
 800c108:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c10c:	4601      	mov	r1, r0
 800c10e:	3b30      	subs	r3, #48	@ 0x30
 800c110:	220a      	movs	r2, #10
 800c112:	4630      	mov	r0, r6
 800c114:	f7ff ff76 	bl	800c004 <__multadd>
 800c118:	e7ee      	b.n	800c0f8 <__s2b+0x68>
 800c11a:	bf00      	nop
 800c11c:	0800e980 	.word	0x0800e980
 800c120:	0800e991 	.word	0x0800e991

0800c124 <__hi0bits>:
 800c124:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c128:	4603      	mov	r3, r0
 800c12a:	bf36      	itet	cc
 800c12c:	0403      	lslcc	r3, r0, #16
 800c12e:	2000      	movcs	r0, #0
 800c130:	2010      	movcc	r0, #16
 800c132:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c136:	bf3c      	itt	cc
 800c138:	021b      	lslcc	r3, r3, #8
 800c13a:	3008      	addcc	r0, #8
 800c13c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c140:	bf3c      	itt	cc
 800c142:	011b      	lslcc	r3, r3, #4
 800c144:	3004      	addcc	r0, #4
 800c146:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c14a:	bf3c      	itt	cc
 800c14c:	009b      	lslcc	r3, r3, #2
 800c14e:	3002      	addcc	r0, #2
 800c150:	2b00      	cmp	r3, #0
 800c152:	db05      	blt.n	800c160 <__hi0bits+0x3c>
 800c154:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c158:	f100 0001 	add.w	r0, r0, #1
 800c15c:	bf08      	it	eq
 800c15e:	2020      	moveq	r0, #32
 800c160:	4770      	bx	lr

0800c162 <__lo0bits>:
 800c162:	6803      	ldr	r3, [r0, #0]
 800c164:	4602      	mov	r2, r0
 800c166:	f013 0007 	ands.w	r0, r3, #7
 800c16a:	d00b      	beq.n	800c184 <__lo0bits+0x22>
 800c16c:	07d9      	lsls	r1, r3, #31
 800c16e:	d421      	bmi.n	800c1b4 <__lo0bits+0x52>
 800c170:	0798      	lsls	r0, r3, #30
 800c172:	bf49      	itett	mi
 800c174:	085b      	lsrmi	r3, r3, #1
 800c176:	089b      	lsrpl	r3, r3, #2
 800c178:	2001      	movmi	r0, #1
 800c17a:	6013      	strmi	r3, [r2, #0]
 800c17c:	bf5c      	itt	pl
 800c17e:	6013      	strpl	r3, [r2, #0]
 800c180:	2002      	movpl	r0, #2
 800c182:	4770      	bx	lr
 800c184:	b299      	uxth	r1, r3
 800c186:	b909      	cbnz	r1, 800c18c <__lo0bits+0x2a>
 800c188:	0c1b      	lsrs	r3, r3, #16
 800c18a:	2010      	movs	r0, #16
 800c18c:	b2d9      	uxtb	r1, r3
 800c18e:	b909      	cbnz	r1, 800c194 <__lo0bits+0x32>
 800c190:	3008      	adds	r0, #8
 800c192:	0a1b      	lsrs	r3, r3, #8
 800c194:	0719      	lsls	r1, r3, #28
 800c196:	bf04      	itt	eq
 800c198:	091b      	lsreq	r3, r3, #4
 800c19a:	3004      	addeq	r0, #4
 800c19c:	0799      	lsls	r1, r3, #30
 800c19e:	bf04      	itt	eq
 800c1a0:	089b      	lsreq	r3, r3, #2
 800c1a2:	3002      	addeq	r0, #2
 800c1a4:	07d9      	lsls	r1, r3, #31
 800c1a6:	d403      	bmi.n	800c1b0 <__lo0bits+0x4e>
 800c1a8:	085b      	lsrs	r3, r3, #1
 800c1aa:	f100 0001 	add.w	r0, r0, #1
 800c1ae:	d003      	beq.n	800c1b8 <__lo0bits+0x56>
 800c1b0:	6013      	str	r3, [r2, #0]
 800c1b2:	4770      	bx	lr
 800c1b4:	2000      	movs	r0, #0
 800c1b6:	4770      	bx	lr
 800c1b8:	2020      	movs	r0, #32
 800c1ba:	4770      	bx	lr

0800c1bc <__i2b>:
 800c1bc:	b510      	push	{r4, lr}
 800c1be:	460c      	mov	r4, r1
 800c1c0:	2101      	movs	r1, #1
 800c1c2:	f7ff febd 	bl	800bf40 <_Balloc>
 800c1c6:	4602      	mov	r2, r0
 800c1c8:	b928      	cbnz	r0, 800c1d6 <__i2b+0x1a>
 800c1ca:	4b05      	ldr	r3, [pc, #20]	@ (800c1e0 <__i2b+0x24>)
 800c1cc:	4805      	ldr	r0, [pc, #20]	@ (800c1e4 <__i2b+0x28>)
 800c1ce:	f240 1145 	movw	r1, #325	@ 0x145
 800c1d2:	f7fe ff4b 	bl	800b06c <__assert_func>
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	6144      	str	r4, [r0, #20]
 800c1da:	6103      	str	r3, [r0, #16]
 800c1dc:	bd10      	pop	{r4, pc}
 800c1de:	bf00      	nop
 800c1e0:	0800e980 	.word	0x0800e980
 800c1e4:	0800e991 	.word	0x0800e991

0800c1e8 <__multiply>:
 800c1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1ec:	4614      	mov	r4, r2
 800c1ee:	690a      	ldr	r2, [r1, #16]
 800c1f0:	6923      	ldr	r3, [r4, #16]
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	bfa8      	it	ge
 800c1f6:	4623      	movge	r3, r4
 800c1f8:	460f      	mov	r7, r1
 800c1fa:	bfa4      	itt	ge
 800c1fc:	460c      	movge	r4, r1
 800c1fe:	461f      	movge	r7, r3
 800c200:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c204:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c208:	68a3      	ldr	r3, [r4, #8]
 800c20a:	6861      	ldr	r1, [r4, #4]
 800c20c:	eb0a 0609 	add.w	r6, sl, r9
 800c210:	42b3      	cmp	r3, r6
 800c212:	b085      	sub	sp, #20
 800c214:	bfb8      	it	lt
 800c216:	3101      	addlt	r1, #1
 800c218:	f7ff fe92 	bl	800bf40 <_Balloc>
 800c21c:	b930      	cbnz	r0, 800c22c <__multiply+0x44>
 800c21e:	4602      	mov	r2, r0
 800c220:	4b44      	ldr	r3, [pc, #272]	@ (800c334 <__multiply+0x14c>)
 800c222:	4845      	ldr	r0, [pc, #276]	@ (800c338 <__multiply+0x150>)
 800c224:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c228:	f7fe ff20 	bl	800b06c <__assert_func>
 800c22c:	f100 0514 	add.w	r5, r0, #20
 800c230:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c234:	462b      	mov	r3, r5
 800c236:	2200      	movs	r2, #0
 800c238:	4543      	cmp	r3, r8
 800c23a:	d321      	bcc.n	800c280 <__multiply+0x98>
 800c23c:	f107 0114 	add.w	r1, r7, #20
 800c240:	f104 0214 	add.w	r2, r4, #20
 800c244:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c248:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c24c:	9302      	str	r3, [sp, #8]
 800c24e:	1b13      	subs	r3, r2, r4
 800c250:	3b15      	subs	r3, #21
 800c252:	f023 0303 	bic.w	r3, r3, #3
 800c256:	3304      	adds	r3, #4
 800c258:	f104 0715 	add.w	r7, r4, #21
 800c25c:	42ba      	cmp	r2, r7
 800c25e:	bf38      	it	cc
 800c260:	2304      	movcc	r3, #4
 800c262:	9301      	str	r3, [sp, #4]
 800c264:	9b02      	ldr	r3, [sp, #8]
 800c266:	9103      	str	r1, [sp, #12]
 800c268:	428b      	cmp	r3, r1
 800c26a:	d80c      	bhi.n	800c286 <__multiply+0x9e>
 800c26c:	2e00      	cmp	r6, #0
 800c26e:	dd03      	ble.n	800c278 <__multiply+0x90>
 800c270:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c274:	2b00      	cmp	r3, #0
 800c276:	d05b      	beq.n	800c330 <__multiply+0x148>
 800c278:	6106      	str	r6, [r0, #16]
 800c27a:	b005      	add	sp, #20
 800c27c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c280:	f843 2b04 	str.w	r2, [r3], #4
 800c284:	e7d8      	b.n	800c238 <__multiply+0x50>
 800c286:	f8b1 a000 	ldrh.w	sl, [r1]
 800c28a:	f1ba 0f00 	cmp.w	sl, #0
 800c28e:	d024      	beq.n	800c2da <__multiply+0xf2>
 800c290:	f104 0e14 	add.w	lr, r4, #20
 800c294:	46a9      	mov	r9, r5
 800c296:	f04f 0c00 	mov.w	ip, #0
 800c29a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c29e:	f8d9 3000 	ldr.w	r3, [r9]
 800c2a2:	fa1f fb87 	uxth.w	fp, r7
 800c2a6:	b29b      	uxth	r3, r3
 800c2a8:	fb0a 330b 	mla	r3, sl, fp, r3
 800c2ac:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c2b0:	f8d9 7000 	ldr.w	r7, [r9]
 800c2b4:	4463      	add	r3, ip
 800c2b6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c2ba:	fb0a c70b 	mla	r7, sl, fp, ip
 800c2be:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c2c2:	b29b      	uxth	r3, r3
 800c2c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c2c8:	4572      	cmp	r2, lr
 800c2ca:	f849 3b04 	str.w	r3, [r9], #4
 800c2ce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c2d2:	d8e2      	bhi.n	800c29a <__multiply+0xb2>
 800c2d4:	9b01      	ldr	r3, [sp, #4]
 800c2d6:	f845 c003 	str.w	ip, [r5, r3]
 800c2da:	9b03      	ldr	r3, [sp, #12]
 800c2dc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c2e0:	3104      	adds	r1, #4
 800c2e2:	f1b9 0f00 	cmp.w	r9, #0
 800c2e6:	d021      	beq.n	800c32c <__multiply+0x144>
 800c2e8:	682b      	ldr	r3, [r5, #0]
 800c2ea:	f104 0c14 	add.w	ip, r4, #20
 800c2ee:	46ae      	mov	lr, r5
 800c2f0:	f04f 0a00 	mov.w	sl, #0
 800c2f4:	f8bc b000 	ldrh.w	fp, [ip]
 800c2f8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c2fc:	fb09 770b 	mla	r7, r9, fp, r7
 800c300:	4457      	add	r7, sl
 800c302:	b29b      	uxth	r3, r3
 800c304:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c308:	f84e 3b04 	str.w	r3, [lr], #4
 800c30c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c310:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c314:	f8be 3000 	ldrh.w	r3, [lr]
 800c318:	fb09 330a 	mla	r3, r9, sl, r3
 800c31c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c320:	4562      	cmp	r2, ip
 800c322:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c326:	d8e5      	bhi.n	800c2f4 <__multiply+0x10c>
 800c328:	9f01      	ldr	r7, [sp, #4]
 800c32a:	51eb      	str	r3, [r5, r7]
 800c32c:	3504      	adds	r5, #4
 800c32e:	e799      	b.n	800c264 <__multiply+0x7c>
 800c330:	3e01      	subs	r6, #1
 800c332:	e79b      	b.n	800c26c <__multiply+0x84>
 800c334:	0800e980 	.word	0x0800e980
 800c338:	0800e991 	.word	0x0800e991

0800c33c <__pow5mult>:
 800c33c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c340:	4615      	mov	r5, r2
 800c342:	f012 0203 	ands.w	r2, r2, #3
 800c346:	4607      	mov	r7, r0
 800c348:	460e      	mov	r6, r1
 800c34a:	d007      	beq.n	800c35c <__pow5mult+0x20>
 800c34c:	4c25      	ldr	r4, [pc, #148]	@ (800c3e4 <__pow5mult+0xa8>)
 800c34e:	3a01      	subs	r2, #1
 800c350:	2300      	movs	r3, #0
 800c352:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c356:	f7ff fe55 	bl	800c004 <__multadd>
 800c35a:	4606      	mov	r6, r0
 800c35c:	10ad      	asrs	r5, r5, #2
 800c35e:	d03d      	beq.n	800c3dc <__pow5mult+0xa0>
 800c360:	69fc      	ldr	r4, [r7, #28]
 800c362:	b97c      	cbnz	r4, 800c384 <__pow5mult+0x48>
 800c364:	2010      	movs	r0, #16
 800c366:	f7ff fd35 	bl	800bdd4 <malloc>
 800c36a:	4602      	mov	r2, r0
 800c36c:	61f8      	str	r0, [r7, #28]
 800c36e:	b928      	cbnz	r0, 800c37c <__pow5mult+0x40>
 800c370:	4b1d      	ldr	r3, [pc, #116]	@ (800c3e8 <__pow5mult+0xac>)
 800c372:	481e      	ldr	r0, [pc, #120]	@ (800c3ec <__pow5mult+0xb0>)
 800c374:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c378:	f7fe fe78 	bl	800b06c <__assert_func>
 800c37c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c380:	6004      	str	r4, [r0, #0]
 800c382:	60c4      	str	r4, [r0, #12]
 800c384:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c388:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c38c:	b94c      	cbnz	r4, 800c3a2 <__pow5mult+0x66>
 800c38e:	f240 2171 	movw	r1, #625	@ 0x271
 800c392:	4638      	mov	r0, r7
 800c394:	f7ff ff12 	bl	800c1bc <__i2b>
 800c398:	2300      	movs	r3, #0
 800c39a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c39e:	4604      	mov	r4, r0
 800c3a0:	6003      	str	r3, [r0, #0]
 800c3a2:	f04f 0900 	mov.w	r9, #0
 800c3a6:	07eb      	lsls	r3, r5, #31
 800c3a8:	d50a      	bpl.n	800c3c0 <__pow5mult+0x84>
 800c3aa:	4631      	mov	r1, r6
 800c3ac:	4622      	mov	r2, r4
 800c3ae:	4638      	mov	r0, r7
 800c3b0:	f7ff ff1a 	bl	800c1e8 <__multiply>
 800c3b4:	4631      	mov	r1, r6
 800c3b6:	4680      	mov	r8, r0
 800c3b8:	4638      	mov	r0, r7
 800c3ba:	f7ff fe01 	bl	800bfc0 <_Bfree>
 800c3be:	4646      	mov	r6, r8
 800c3c0:	106d      	asrs	r5, r5, #1
 800c3c2:	d00b      	beq.n	800c3dc <__pow5mult+0xa0>
 800c3c4:	6820      	ldr	r0, [r4, #0]
 800c3c6:	b938      	cbnz	r0, 800c3d8 <__pow5mult+0x9c>
 800c3c8:	4622      	mov	r2, r4
 800c3ca:	4621      	mov	r1, r4
 800c3cc:	4638      	mov	r0, r7
 800c3ce:	f7ff ff0b 	bl	800c1e8 <__multiply>
 800c3d2:	6020      	str	r0, [r4, #0]
 800c3d4:	f8c0 9000 	str.w	r9, [r0]
 800c3d8:	4604      	mov	r4, r0
 800c3da:	e7e4      	b.n	800c3a6 <__pow5mult+0x6a>
 800c3dc:	4630      	mov	r0, r6
 800c3de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3e2:	bf00      	nop
 800c3e4:	0800e9ec 	.word	0x0800e9ec
 800c3e8:	0800e86e 	.word	0x0800e86e
 800c3ec:	0800e991 	.word	0x0800e991

0800c3f0 <__lshift>:
 800c3f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3f4:	460c      	mov	r4, r1
 800c3f6:	6849      	ldr	r1, [r1, #4]
 800c3f8:	6923      	ldr	r3, [r4, #16]
 800c3fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c3fe:	68a3      	ldr	r3, [r4, #8]
 800c400:	4607      	mov	r7, r0
 800c402:	4691      	mov	r9, r2
 800c404:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c408:	f108 0601 	add.w	r6, r8, #1
 800c40c:	42b3      	cmp	r3, r6
 800c40e:	db0b      	blt.n	800c428 <__lshift+0x38>
 800c410:	4638      	mov	r0, r7
 800c412:	f7ff fd95 	bl	800bf40 <_Balloc>
 800c416:	4605      	mov	r5, r0
 800c418:	b948      	cbnz	r0, 800c42e <__lshift+0x3e>
 800c41a:	4602      	mov	r2, r0
 800c41c:	4b28      	ldr	r3, [pc, #160]	@ (800c4c0 <__lshift+0xd0>)
 800c41e:	4829      	ldr	r0, [pc, #164]	@ (800c4c4 <__lshift+0xd4>)
 800c420:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c424:	f7fe fe22 	bl	800b06c <__assert_func>
 800c428:	3101      	adds	r1, #1
 800c42a:	005b      	lsls	r3, r3, #1
 800c42c:	e7ee      	b.n	800c40c <__lshift+0x1c>
 800c42e:	2300      	movs	r3, #0
 800c430:	f100 0114 	add.w	r1, r0, #20
 800c434:	f100 0210 	add.w	r2, r0, #16
 800c438:	4618      	mov	r0, r3
 800c43a:	4553      	cmp	r3, sl
 800c43c:	db33      	blt.n	800c4a6 <__lshift+0xb6>
 800c43e:	6920      	ldr	r0, [r4, #16]
 800c440:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c444:	f104 0314 	add.w	r3, r4, #20
 800c448:	f019 091f 	ands.w	r9, r9, #31
 800c44c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c450:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c454:	d02b      	beq.n	800c4ae <__lshift+0xbe>
 800c456:	f1c9 0e20 	rsb	lr, r9, #32
 800c45a:	468a      	mov	sl, r1
 800c45c:	2200      	movs	r2, #0
 800c45e:	6818      	ldr	r0, [r3, #0]
 800c460:	fa00 f009 	lsl.w	r0, r0, r9
 800c464:	4310      	orrs	r0, r2
 800c466:	f84a 0b04 	str.w	r0, [sl], #4
 800c46a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c46e:	459c      	cmp	ip, r3
 800c470:	fa22 f20e 	lsr.w	r2, r2, lr
 800c474:	d8f3      	bhi.n	800c45e <__lshift+0x6e>
 800c476:	ebac 0304 	sub.w	r3, ip, r4
 800c47a:	3b15      	subs	r3, #21
 800c47c:	f023 0303 	bic.w	r3, r3, #3
 800c480:	3304      	adds	r3, #4
 800c482:	f104 0015 	add.w	r0, r4, #21
 800c486:	4584      	cmp	ip, r0
 800c488:	bf38      	it	cc
 800c48a:	2304      	movcc	r3, #4
 800c48c:	50ca      	str	r2, [r1, r3]
 800c48e:	b10a      	cbz	r2, 800c494 <__lshift+0xa4>
 800c490:	f108 0602 	add.w	r6, r8, #2
 800c494:	3e01      	subs	r6, #1
 800c496:	4638      	mov	r0, r7
 800c498:	612e      	str	r6, [r5, #16]
 800c49a:	4621      	mov	r1, r4
 800c49c:	f7ff fd90 	bl	800bfc0 <_Bfree>
 800c4a0:	4628      	mov	r0, r5
 800c4a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4a6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c4aa:	3301      	adds	r3, #1
 800c4ac:	e7c5      	b.n	800c43a <__lshift+0x4a>
 800c4ae:	3904      	subs	r1, #4
 800c4b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4b4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c4b8:	459c      	cmp	ip, r3
 800c4ba:	d8f9      	bhi.n	800c4b0 <__lshift+0xc0>
 800c4bc:	e7ea      	b.n	800c494 <__lshift+0xa4>
 800c4be:	bf00      	nop
 800c4c0:	0800e980 	.word	0x0800e980
 800c4c4:	0800e991 	.word	0x0800e991

0800c4c8 <__mcmp>:
 800c4c8:	690a      	ldr	r2, [r1, #16]
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	6900      	ldr	r0, [r0, #16]
 800c4ce:	1a80      	subs	r0, r0, r2
 800c4d0:	b530      	push	{r4, r5, lr}
 800c4d2:	d10e      	bne.n	800c4f2 <__mcmp+0x2a>
 800c4d4:	3314      	adds	r3, #20
 800c4d6:	3114      	adds	r1, #20
 800c4d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c4dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c4e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c4e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c4e8:	4295      	cmp	r5, r2
 800c4ea:	d003      	beq.n	800c4f4 <__mcmp+0x2c>
 800c4ec:	d205      	bcs.n	800c4fa <__mcmp+0x32>
 800c4ee:	f04f 30ff 	mov.w	r0, #4294967295
 800c4f2:	bd30      	pop	{r4, r5, pc}
 800c4f4:	42a3      	cmp	r3, r4
 800c4f6:	d3f3      	bcc.n	800c4e0 <__mcmp+0x18>
 800c4f8:	e7fb      	b.n	800c4f2 <__mcmp+0x2a>
 800c4fa:	2001      	movs	r0, #1
 800c4fc:	e7f9      	b.n	800c4f2 <__mcmp+0x2a>
	...

0800c500 <__mdiff>:
 800c500:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c504:	4689      	mov	r9, r1
 800c506:	4606      	mov	r6, r0
 800c508:	4611      	mov	r1, r2
 800c50a:	4648      	mov	r0, r9
 800c50c:	4614      	mov	r4, r2
 800c50e:	f7ff ffdb 	bl	800c4c8 <__mcmp>
 800c512:	1e05      	subs	r5, r0, #0
 800c514:	d112      	bne.n	800c53c <__mdiff+0x3c>
 800c516:	4629      	mov	r1, r5
 800c518:	4630      	mov	r0, r6
 800c51a:	f7ff fd11 	bl	800bf40 <_Balloc>
 800c51e:	4602      	mov	r2, r0
 800c520:	b928      	cbnz	r0, 800c52e <__mdiff+0x2e>
 800c522:	4b3f      	ldr	r3, [pc, #252]	@ (800c620 <__mdiff+0x120>)
 800c524:	f240 2137 	movw	r1, #567	@ 0x237
 800c528:	483e      	ldr	r0, [pc, #248]	@ (800c624 <__mdiff+0x124>)
 800c52a:	f7fe fd9f 	bl	800b06c <__assert_func>
 800c52e:	2301      	movs	r3, #1
 800c530:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c534:	4610      	mov	r0, r2
 800c536:	b003      	add	sp, #12
 800c538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c53c:	bfbc      	itt	lt
 800c53e:	464b      	movlt	r3, r9
 800c540:	46a1      	movlt	r9, r4
 800c542:	4630      	mov	r0, r6
 800c544:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c548:	bfba      	itte	lt
 800c54a:	461c      	movlt	r4, r3
 800c54c:	2501      	movlt	r5, #1
 800c54e:	2500      	movge	r5, #0
 800c550:	f7ff fcf6 	bl	800bf40 <_Balloc>
 800c554:	4602      	mov	r2, r0
 800c556:	b918      	cbnz	r0, 800c560 <__mdiff+0x60>
 800c558:	4b31      	ldr	r3, [pc, #196]	@ (800c620 <__mdiff+0x120>)
 800c55a:	f240 2145 	movw	r1, #581	@ 0x245
 800c55e:	e7e3      	b.n	800c528 <__mdiff+0x28>
 800c560:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c564:	6926      	ldr	r6, [r4, #16]
 800c566:	60c5      	str	r5, [r0, #12]
 800c568:	f109 0310 	add.w	r3, r9, #16
 800c56c:	f109 0514 	add.w	r5, r9, #20
 800c570:	f104 0e14 	add.w	lr, r4, #20
 800c574:	f100 0b14 	add.w	fp, r0, #20
 800c578:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c57c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c580:	9301      	str	r3, [sp, #4]
 800c582:	46d9      	mov	r9, fp
 800c584:	f04f 0c00 	mov.w	ip, #0
 800c588:	9b01      	ldr	r3, [sp, #4]
 800c58a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c58e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c592:	9301      	str	r3, [sp, #4]
 800c594:	fa1f f38a 	uxth.w	r3, sl
 800c598:	4619      	mov	r1, r3
 800c59a:	b283      	uxth	r3, r0
 800c59c:	1acb      	subs	r3, r1, r3
 800c59e:	0c00      	lsrs	r0, r0, #16
 800c5a0:	4463      	add	r3, ip
 800c5a2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c5a6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c5aa:	b29b      	uxth	r3, r3
 800c5ac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c5b0:	4576      	cmp	r6, lr
 800c5b2:	f849 3b04 	str.w	r3, [r9], #4
 800c5b6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c5ba:	d8e5      	bhi.n	800c588 <__mdiff+0x88>
 800c5bc:	1b33      	subs	r3, r6, r4
 800c5be:	3b15      	subs	r3, #21
 800c5c0:	f023 0303 	bic.w	r3, r3, #3
 800c5c4:	3415      	adds	r4, #21
 800c5c6:	3304      	adds	r3, #4
 800c5c8:	42a6      	cmp	r6, r4
 800c5ca:	bf38      	it	cc
 800c5cc:	2304      	movcc	r3, #4
 800c5ce:	441d      	add	r5, r3
 800c5d0:	445b      	add	r3, fp
 800c5d2:	461e      	mov	r6, r3
 800c5d4:	462c      	mov	r4, r5
 800c5d6:	4544      	cmp	r4, r8
 800c5d8:	d30e      	bcc.n	800c5f8 <__mdiff+0xf8>
 800c5da:	f108 0103 	add.w	r1, r8, #3
 800c5de:	1b49      	subs	r1, r1, r5
 800c5e0:	f021 0103 	bic.w	r1, r1, #3
 800c5e4:	3d03      	subs	r5, #3
 800c5e6:	45a8      	cmp	r8, r5
 800c5e8:	bf38      	it	cc
 800c5ea:	2100      	movcc	r1, #0
 800c5ec:	440b      	add	r3, r1
 800c5ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c5f2:	b191      	cbz	r1, 800c61a <__mdiff+0x11a>
 800c5f4:	6117      	str	r7, [r2, #16]
 800c5f6:	e79d      	b.n	800c534 <__mdiff+0x34>
 800c5f8:	f854 1b04 	ldr.w	r1, [r4], #4
 800c5fc:	46e6      	mov	lr, ip
 800c5fe:	0c08      	lsrs	r0, r1, #16
 800c600:	fa1c fc81 	uxtah	ip, ip, r1
 800c604:	4471      	add	r1, lr
 800c606:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c60a:	b289      	uxth	r1, r1
 800c60c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c610:	f846 1b04 	str.w	r1, [r6], #4
 800c614:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c618:	e7dd      	b.n	800c5d6 <__mdiff+0xd6>
 800c61a:	3f01      	subs	r7, #1
 800c61c:	e7e7      	b.n	800c5ee <__mdiff+0xee>
 800c61e:	bf00      	nop
 800c620:	0800e980 	.word	0x0800e980
 800c624:	0800e991 	.word	0x0800e991

0800c628 <__ulp>:
 800c628:	b082      	sub	sp, #8
 800c62a:	ed8d 0b00 	vstr	d0, [sp]
 800c62e:	9a01      	ldr	r2, [sp, #4]
 800c630:	4b0f      	ldr	r3, [pc, #60]	@ (800c670 <__ulp+0x48>)
 800c632:	4013      	ands	r3, r2
 800c634:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c638:	2b00      	cmp	r3, #0
 800c63a:	dc08      	bgt.n	800c64e <__ulp+0x26>
 800c63c:	425b      	negs	r3, r3
 800c63e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c642:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c646:	da04      	bge.n	800c652 <__ulp+0x2a>
 800c648:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c64c:	4113      	asrs	r3, r2
 800c64e:	2200      	movs	r2, #0
 800c650:	e008      	b.n	800c664 <__ulp+0x3c>
 800c652:	f1a2 0314 	sub.w	r3, r2, #20
 800c656:	2b1e      	cmp	r3, #30
 800c658:	bfda      	itte	le
 800c65a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c65e:	40da      	lsrle	r2, r3
 800c660:	2201      	movgt	r2, #1
 800c662:	2300      	movs	r3, #0
 800c664:	4619      	mov	r1, r3
 800c666:	4610      	mov	r0, r2
 800c668:	ec41 0b10 	vmov	d0, r0, r1
 800c66c:	b002      	add	sp, #8
 800c66e:	4770      	bx	lr
 800c670:	7ff00000 	.word	0x7ff00000

0800c674 <__b2d>:
 800c674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c678:	6906      	ldr	r6, [r0, #16]
 800c67a:	f100 0814 	add.w	r8, r0, #20
 800c67e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c682:	1f37      	subs	r7, r6, #4
 800c684:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c688:	4610      	mov	r0, r2
 800c68a:	f7ff fd4b 	bl	800c124 <__hi0bits>
 800c68e:	f1c0 0320 	rsb	r3, r0, #32
 800c692:	280a      	cmp	r0, #10
 800c694:	600b      	str	r3, [r1, #0]
 800c696:	491b      	ldr	r1, [pc, #108]	@ (800c704 <__b2d+0x90>)
 800c698:	dc15      	bgt.n	800c6c6 <__b2d+0x52>
 800c69a:	f1c0 0c0b 	rsb	ip, r0, #11
 800c69e:	fa22 f30c 	lsr.w	r3, r2, ip
 800c6a2:	45b8      	cmp	r8, r7
 800c6a4:	ea43 0501 	orr.w	r5, r3, r1
 800c6a8:	bf34      	ite	cc
 800c6aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c6ae:	2300      	movcs	r3, #0
 800c6b0:	3015      	adds	r0, #21
 800c6b2:	fa02 f000 	lsl.w	r0, r2, r0
 800c6b6:	fa23 f30c 	lsr.w	r3, r3, ip
 800c6ba:	4303      	orrs	r3, r0
 800c6bc:	461c      	mov	r4, r3
 800c6be:	ec45 4b10 	vmov	d0, r4, r5
 800c6c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6c6:	45b8      	cmp	r8, r7
 800c6c8:	bf3a      	itte	cc
 800c6ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c6ce:	f1a6 0708 	subcc.w	r7, r6, #8
 800c6d2:	2300      	movcs	r3, #0
 800c6d4:	380b      	subs	r0, #11
 800c6d6:	d012      	beq.n	800c6fe <__b2d+0x8a>
 800c6d8:	f1c0 0120 	rsb	r1, r0, #32
 800c6dc:	fa23 f401 	lsr.w	r4, r3, r1
 800c6e0:	4082      	lsls	r2, r0
 800c6e2:	4322      	orrs	r2, r4
 800c6e4:	4547      	cmp	r7, r8
 800c6e6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c6ea:	bf8c      	ite	hi
 800c6ec:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c6f0:	2200      	movls	r2, #0
 800c6f2:	4083      	lsls	r3, r0
 800c6f4:	40ca      	lsrs	r2, r1
 800c6f6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c6fa:	4313      	orrs	r3, r2
 800c6fc:	e7de      	b.n	800c6bc <__b2d+0x48>
 800c6fe:	ea42 0501 	orr.w	r5, r2, r1
 800c702:	e7db      	b.n	800c6bc <__b2d+0x48>
 800c704:	3ff00000 	.word	0x3ff00000

0800c708 <__d2b>:
 800c708:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c70c:	460f      	mov	r7, r1
 800c70e:	2101      	movs	r1, #1
 800c710:	ec59 8b10 	vmov	r8, r9, d0
 800c714:	4616      	mov	r6, r2
 800c716:	f7ff fc13 	bl	800bf40 <_Balloc>
 800c71a:	4604      	mov	r4, r0
 800c71c:	b930      	cbnz	r0, 800c72c <__d2b+0x24>
 800c71e:	4602      	mov	r2, r0
 800c720:	4b23      	ldr	r3, [pc, #140]	@ (800c7b0 <__d2b+0xa8>)
 800c722:	4824      	ldr	r0, [pc, #144]	@ (800c7b4 <__d2b+0xac>)
 800c724:	f240 310f 	movw	r1, #783	@ 0x30f
 800c728:	f7fe fca0 	bl	800b06c <__assert_func>
 800c72c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c730:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c734:	b10d      	cbz	r5, 800c73a <__d2b+0x32>
 800c736:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c73a:	9301      	str	r3, [sp, #4]
 800c73c:	f1b8 0300 	subs.w	r3, r8, #0
 800c740:	d023      	beq.n	800c78a <__d2b+0x82>
 800c742:	4668      	mov	r0, sp
 800c744:	9300      	str	r3, [sp, #0]
 800c746:	f7ff fd0c 	bl	800c162 <__lo0bits>
 800c74a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c74e:	b1d0      	cbz	r0, 800c786 <__d2b+0x7e>
 800c750:	f1c0 0320 	rsb	r3, r0, #32
 800c754:	fa02 f303 	lsl.w	r3, r2, r3
 800c758:	430b      	orrs	r3, r1
 800c75a:	40c2      	lsrs	r2, r0
 800c75c:	6163      	str	r3, [r4, #20]
 800c75e:	9201      	str	r2, [sp, #4]
 800c760:	9b01      	ldr	r3, [sp, #4]
 800c762:	61a3      	str	r3, [r4, #24]
 800c764:	2b00      	cmp	r3, #0
 800c766:	bf0c      	ite	eq
 800c768:	2201      	moveq	r2, #1
 800c76a:	2202      	movne	r2, #2
 800c76c:	6122      	str	r2, [r4, #16]
 800c76e:	b1a5      	cbz	r5, 800c79a <__d2b+0x92>
 800c770:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c774:	4405      	add	r5, r0
 800c776:	603d      	str	r5, [r7, #0]
 800c778:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c77c:	6030      	str	r0, [r6, #0]
 800c77e:	4620      	mov	r0, r4
 800c780:	b003      	add	sp, #12
 800c782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c786:	6161      	str	r1, [r4, #20]
 800c788:	e7ea      	b.n	800c760 <__d2b+0x58>
 800c78a:	a801      	add	r0, sp, #4
 800c78c:	f7ff fce9 	bl	800c162 <__lo0bits>
 800c790:	9b01      	ldr	r3, [sp, #4]
 800c792:	6163      	str	r3, [r4, #20]
 800c794:	3020      	adds	r0, #32
 800c796:	2201      	movs	r2, #1
 800c798:	e7e8      	b.n	800c76c <__d2b+0x64>
 800c79a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c79e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c7a2:	6038      	str	r0, [r7, #0]
 800c7a4:	6918      	ldr	r0, [r3, #16]
 800c7a6:	f7ff fcbd 	bl	800c124 <__hi0bits>
 800c7aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c7ae:	e7e5      	b.n	800c77c <__d2b+0x74>
 800c7b0:	0800e980 	.word	0x0800e980
 800c7b4:	0800e991 	.word	0x0800e991

0800c7b8 <__ratio>:
 800c7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7bc:	b085      	sub	sp, #20
 800c7be:	e9cd 1000 	strd	r1, r0, [sp]
 800c7c2:	a902      	add	r1, sp, #8
 800c7c4:	f7ff ff56 	bl	800c674 <__b2d>
 800c7c8:	9800      	ldr	r0, [sp, #0]
 800c7ca:	a903      	add	r1, sp, #12
 800c7cc:	ec55 4b10 	vmov	r4, r5, d0
 800c7d0:	f7ff ff50 	bl	800c674 <__b2d>
 800c7d4:	9b01      	ldr	r3, [sp, #4]
 800c7d6:	6919      	ldr	r1, [r3, #16]
 800c7d8:	9b00      	ldr	r3, [sp, #0]
 800c7da:	691b      	ldr	r3, [r3, #16]
 800c7dc:	1ac9      	subs	r1, r1, r3
 800c7de:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c7e2:	1a9b      	subs	r3, r3, r2
 800c7e4:	ec5b ab10 	vmov	sl, fp, d0
 800c7e8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	bfce      	itee	gt
 800c7f0:	462a      	movgt	r2, r5
 800c7f2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c7f6:	465a      	movle	r2, fp
 800c7f8:	462f      	mov	r7, r5
 800c7fa:	46d9      	mov	r9, fp
 800c7fc:	bfcc      	ite	gt
 800c7fe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c802:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c806:	464b      	mov	r3, r9
 800c808:	4652      	mov	r2, sl
 800c80a:	4620      	mov	r0, r4
 800c80c:	4639      	mov	r1, r7
 800c80e:	f7f4 f855 	bl	80008bc <__aeabi_ddiv>
 800c812:	ec41 0b10 	vmov	d0, r0, r1
 800c816:	b005      	add	sp, #20
 800c818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c81c <__copybits>:
 800c81c:	3901      	subs	r1, #1
 800c81e:	b570      	push	{r4, r5, r6, lr}
 800c820:	1149      	asrs	r1, r1, #5
 800c822:	6914      	ldr	r4, [r2, #16]
 800c824:	3101      	adds	r1, #1
 800c826:	f102 0314 	add.w	r3, r2, #20
 800c82a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c82e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c832:	1f05      	subs	r5, r0, #4
 800c834:	42a3      	cmp	r3, r4
 800c836:	d30c      	bcc.n	800c852 <__copybits+0x36>
 800c838:	1aa3      	subs	r3, r4, r2
 800c83a:	3b11      	subs	r3, #17
 800c83c:	f023 0303 	bic.w	r3, r3, #3
 800c840:	3211      	adds	r2, #17
 800c842:	42a2      	cmp	r2, r4
 800c844:	bf88      	it	hi
 800c846:	2300      	movhi	r3, #0
 800c848:	4418      	add	r0, r3
 800c84a:	2300      	movs	r3, #0
 800c84c:	4288      	cmp	r0, r1
 800c84e:	d305      	bcc.n	800c85c <__copybits+0x40>
 800c850:	bd70      	pop	{r4, r5, r6, pc}
 800c852:	f853 6b04 	ldr.w	r6, [r3], #4
 800c856:	f845 6f04 	str.w	r6, [r5, #4]!
 800c85a:	e7eb      	b.n	800c834 <__copybits+0x18>
 800c85c:	f840 3b04 	str.w	r3, [r0], #4
 800c860:	e7f4      	b.n	800c84c <__copybits+0x30>

0800c862 <__any_on>:
 800c862:	f100 0214 	add.w	r2, r0, #20
 800c866:	6900      	ldr	r0, [r0, #16]
 800c868:	114b      	asrs	r3, r1, #5
 800c86a:	4298      	cmp	r0, r3
 800c86c:	b510      	push	{r4, lr}
 800c86e:	db11      	blt.n	800c894 <__any_on+0x32>
 800c870:	dd0a      	ble.n	800c888 <__any_on+0x26>
 800c872:	f011 011f 	ands.w	r1, r1, #31
 800c876:	d007      	beq.n	800c888 <__any_on+0x26>
 800c878:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c87c:	fa24 f001 	lsr.w	r0, r4, r1
 800c880:	fa00 f101 	lsl.w	r1, r0, r1
 800c884:	428c      	cmp	r4, r1
 800c886:	d10b      	bne.n	800c8a0 <__any_on+0x3e>
 800c888:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c88c:	4293      	cmp	r3, r2
 800c88e:	d803      	bhi.n	800c898 <__any_on+0x36>
 800c890:	2000      	movs	r0, #0
 800c892:	bd10      	pop	{r4, pc}
 800c894:	4603      	mov	r3, r0
 800c896:	e7f7      	b.n	800c888 <__any_on+0x26>
 800c898:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c89c:	2900      	cmp	r1, #0
 800c89e:	d0f5      	beq.n	800c88c <__any_on+0x2a>
 800c8a0:	2001      	movs	r0, #1
 800c8a2:	e7f6      	b.n	800c892 <__any_on+0x30>

0800c8a4 <sulp>:
 800c8a4:	b570      	push	{r4, r5, r6, lr}
 800c8a6:	4604      	mov	r4, r0
 800c8a8:	460d      	mov	r5, r1
 800c8aa:	ec45 4b10 	vmov	d0, r4, r5
 800c8ae:	4616      	mov	r6, r2
 800c8b0:	f7ff feba 	bl	800c628 <__ulp>
 800c8b4:	ec51 0b10 	vmov	r0, r1, d0
 800c8b8:	b17e      	cbz	r6, 800c8da <sulp+0x36>
 800c8ba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c8be:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	dd09      	ble.n	800c8da <sulp+0x36>
 800c8c6:	051b      	lsls	r3, r3, #20
 800c8c8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c8cc:	2400      	movs	r4, #0
 800c8ce:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c8d2:	4622      	mov	r2, r4
 800c8d4:	462b      	mov	r3, r5
 800c8d6:	f7f3 fec7 	bl	8000668 <__aeabi_dmul>
 800c8da:	ec41 0b10 	vmov	d0, r0, r1
 800c8de:	bd70      	pop	{r4, r5, r6, pc}

0800c8e0 <_strtod_l>:
 800c8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8e4:	b09f      	sub	sp, #124	@ 0x7c
 800c8e6:	460c      	mov	r4, r1
 800c8e8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	921a      	str	r2, [sp, #104]	@ 0x68
 800c8ee:	9005      	str	r0, [sp, #20]
 800c8f0:	f04f 0a00 	mov.w	sl, #0
 800c8f4:	f04f 0b00 	mov.w	fp, #0
 800c8f8:	460a      	mov	r2, r1
 800c8fa:	9219      	str	r2, [sp, #100]	@ 0x64
 800c8fc:	7811      	ldrb	r1, [r2, #0]
 800c8fe:	292b      	cmp	r1, #43	@ 0x2b
 800c900:	d04a      	beq.n	800c998 <_strtod_l+0xb8>
 800c902:	d838      	bhi.n	800c976 <_strtod_l+0x96>
 800c904:	290d      	cmp	r1, #13
 800c906:	d832      	bhi.n	800c96e <_strtod_l+0x8e>
 800c908:	2908      	cmp	r1, #8
 800c90a:	d832      	bhi.n	800c972 <_strtod_l+0x92>
 800c90c:	2900      	cmp	r1, #0
 800c90e:	d03b      	beq.n	800c988 <_strtod_l+0xa8>
 800c910:	2200      	movs	r2, #0
 800c912:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c914:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c916:	782a      	ldrb	r2, [r5, #0]
 800c918:	2a30      	cmp	r2, #48	@ 0x30
 800c91a:	f040 80b3 	bne.w	800ca84 <_strtod_l+0x1a4>
 800c91e:	786a      	ldrb	r2, [r5, #1]
 800c920:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c924:	2a58      	cmp	r2, #88	@ 0x58
 800c926:	d16e      	bne.n	800ca06 <_strtod_l+0x126>
 800c928:	9302      	str	r3, [sp, #8]
 800c92a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c92c:	9301      	str	r3, [sp, #4]
 800c92e:	ab1a      	add	r3, sp, #104	@ 0x68
 800c930:	9300      	str	r3, [sp, #0]
 800c932:	4a8e      	ldr	r2, [pc, #568]	@ (800cb6c <_strtod_l+0x28c>)
 800c934:	9805      	ldr	r0, [sp, #20]
 800c936:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c938:	a919      	add	r1, sp, #100	@ 0x64
 800c93a:	f001 f8a7 	bl	800da8c <__gethex>
 800c93e:	f010 060f 	ands.w	r6, r0, #15
 800c942:	4604      	mov	r4, r0
 800c944:	d005      	beq.n	800c952 <_strtod_l+0x72>
 800c946:	2e06      	cmp	r6, #6
 800c948:	d128      	bne.n	800c99c <_strtod_l+0xbc>
 800c94a:	3501      	adds	r5, #1
 800c94c:	2300      	movs	r3, #0
 800c94e:	9519      	str	r5, [sp, #100]	@ 0x64
 800c950:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c952:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c954:	2b00      	cmp	r3, #0
 800c956:	f040 858e 	bne.w	800d476 <_strtod_l+0xb96>
 800c95a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c95c:	b1cb      	cbz	r3, 800c992 <_strtod_l+0xb2>
 800c95e:	4652      	mov	r2, sl
 800c960:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c964:	ec43 2b10 	vmov	d0, r2, r3
 800c968:	b01f      	add	sp, #124	@ 0x7c
 800c96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c96e:	2920      	cmp	r1, #32
 800c970:	d1ce      	bne.n	800c910 <_strtod_l+0x30>
 800c972:	3201      	adds	r2, #1
 800c974:	e7c1      	b.n	800c8fa <_strtod_l+0x1a>
 800c976:	292d      	cmp	r1, #45	@ 0x2d
 800c978:	d1ca      	bne.n	800c910 <_strtod_l+0x30>
 800c97a:	2101      	movs	r1, #1
 800c97c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c97e:	1c51      	adds	r1, r2, #1
 800c980:	9119      	str	r1, [sp, #100]	@ 0x64
 800c982:	7852      	ldrb	r2, [r2, #1]
 800c984:	2a00      	cmp	r2, #0
 800c986:	d1c5      	bne.n	800c914 <_strtod_l+0x34>
 800c988:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c98a:	9419      	str	r4, [sp, #100]	@ 0x64
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	f040 8570 	bne.w	800d472 <_strtod_l+0xb92>
 800c992:	4652      	mov	r2, sl
 800c994:	465b      	mov	r3, fp
 800c996:	e7e5      	b.n	800c964 <_strtod_l+0x84>
 800c998:	2100      	movs	r1, #0
 800c99a:	e7ef      	b.n	800c97c <_strtod_l+0x9c>
 800c99c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c99e:	b13a      	cbz	r2, 800c9b0 <_strtod_l+0xd0>
 800c9a0:	2135      	movs	r1, #53	@ 0x35
 800c9a2:	a81c      	add	r0, sp, #112	@ 0x70
 800c9a4:	f7ff ff3a 	bl	800c81c <__copybits>
 800c9a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c9aa:	9805      	ldr	r0, [sp, #20]
 800c9ac:	f7ff fb08 	bl	800bfc0 <_Bfree>
 800c9b0:	3e01      	subs	r6, #1
 800c9b2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c9b4:	2e04      	cmp	r6, #4
 800c9b6:	d806      	bhi.n	800c9c6 <_strtod_l+0xe6>
 800c9b8:	e8df f006 	tbb	[pc, r6]
 800c9bc:	201d0314 	.word	0x201d0314
 800c9c0:	14          	.byte	0x14
 800c9c1:	00          	.byte	0x00
 800c9c2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c9c6:	05e1      	lsls	r1, r4, #23
 800c9c8:	bf48      	it	mi
 800c9ca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c9ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c9d2:	0d1b      	lsrs	r3, r3, #20
 800c9d4:	051b      	lsls	r3, r3, #20
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d1bb      	bne.n	800c952 <_strtod_l+0x72>
 800c9da:	f7fe fb13 	bl	800b004 <__errno>
 800c9de:	2322      	movs	r3, #34	@ 0x22
 800c9e0:	6003      	str	r3, [r0, #0]
 800c9e2:	e7b6      	b.n	800c952 <_strtod_l+0x72>
 800c9e4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c9e8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c9ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c9f0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c9f4:	e7e7      	b.n	800c9c6 <_strtod_l+0xe6>
 800c9f6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800cb74 <_strtod_l+0x294>
 800c9fa:	e7e4      	b.n	800c9c6 <_strtod_l+0xe6>
 800c9fc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ca00:	f04f 3aff 	mov.w	sl, #4294967295
 800ca04:	e7df      	b.n	800c9c6 <_strtod_l+0xe6>
 800ca06:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ca08:	1c5a      	adds	r2, r3, #1
 800ca0a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ca0c:	785b      	ldrb	r3, [r3, #1]
 800ca0e:	2b30      	cmp	r3, #48	@ 0x30
 800ca10:	d0f9      	beq.n	800ca06 <_strtod_l+0x126>
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d09d      	beq.n	800c952 <_strtod_l+0x72>
 800ca16:	2301      	movs	r3, #1
 800ca18:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ca1c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ca1e:	2300      	movs	r3, #0
 800ca20:	9308      	str	r3, [sp, #32]
 800ca22:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca24:	461f      	mov	r7, r3
 800ca26:	220a      	movs	r2, #10
 800ca28:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ca2a:	7805      	ldrb	r5, [r0, #0]
 800ca2c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ca30:	b2d9      	uxtb	r1, r3
 800ca32:	2909      	cmp	r1, #9
 800ca34:	d928      	bls.n	800ca88 <_strtod_l+0x1a8>
 800ca36:	494e      	ldr	r1, [pc, #312]	@ (800cb70 <_strtod_l+0x290>)
 800ca38:	2201      	movs	r2, #1
 800ca3a:	f000 ff6b 	bl	800d914 <strncmp>
 800ca3e:	2800      	cmp	r0, #0
 800ca40:	d032      	beq.n	800caa8 <_strtod_l+0x1c8>
 800ca42:	2000      	movs	r0, #0
 800ca44:	462a      	mov	r2, r5
 800ca46:	4681      	mov	r9, r0
 800ca48:	463d      	mov	r5, r7
 800ca4a:	4603      	mov	r3, r0
 800ca4c:	2a65      	cmp	r2, #101	@ 0x65
 800ca4e:	d001      	beq.n	800ca54 <_strtod_l+0x174>
 800ca50:	2a45      	cmp	r2, #69	@ 0x45
 800ca52:	d114      	bne.n	800ca7e <_strtod_l+0x19e>
 800ca54:	b91d      	cbnz	r5, 800ca5e <_strtod_l+0x17e>
 800ca56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca58:	4302      	orrs	r2, r0
 800ca5a:	d095      	beq.n	800c988 <_strtod_l+0xa8>
 800ca5c:	2500      	movs	r5, #0
 800ca5e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ca60:	1c62      	adds	r2, r4, #1
 800ca62:	9219      	str	r2, [sp, #100]	@ 0x64
 800ca64:	7862      	ldrb	r2, [r4, #1]
 800ca66:	2a2b      	cmp	r2, #43	@ 0x2b
 800ca68:	d077      	beq.n	800cb5a <_strtod_l+0x27a>
 800ca6a:	2a2d      	cmp	r2, #45	@ 0x2d
 800ca6c:	d07b      	beq.n	800cb66 <_strtod_l+0x286>
 800ca6e:	f04f 0c00 	mov.w	ip, #0
 800ca72:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ca76:	2909      	cmp	r1, #9
 800ca78:	f240 8082 	bls.w	800cb80 <_strtod_l+0x2a0>
 800ca7c:	9419      	str	r4, [sp, #100]	@ 0x64
 800ca7e:	f04f 0800 	mov.w	r8, #0
 800ca82:	e0a2      	b.n	800cbca <_strtod_l+0x2ea>
 800ca84:	2300      	movs	r3, #0
 800ca86:	e7c7      	b.n	800ca18 <_strtod_l+0x138>
 800ca88:	2f08      	cmp	r7, #8
 800ca8a:	bfd5      	itete	le
 800ca8c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ca8e:	9908      	ldrgt	r1, [sp, #32]
 800ca90:	fb02 3301 	mlale	r3, r2, r1, r3
 800ca94:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ca98:	f100 0001 	add.w	r0, r0, #1
 800ca9c:	bfd4      	ite	le
 800ca9e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800caa0:	9308      	strgt	r3, [sp, #32]
 800caa2:	3701      	adds	r7, #1
 800caa4:	9019      	str	r0, [sp, #100]	@ 0x64
 800caa6:	e7bf      	b.n	800ca28 <_strtod_l+0x148>
 800caa8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800caaa:	1c5a      	adds	r2, r3, #1
 800caac:	9219      	str	r2, [sp, #100]	@ 0x64
 800caae:	785a      	ldrb	r2, [r3, #1]
 800cab0:	b37f      	cbz	r7, 800cb12 <_strtod_l+0x232>
 800cab2:	4681      	mov	r9, r0
 800cab4:	463d      	mov	r5, r7
 800cab6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800caba:	2b09      	cmp	r3, #9
 800cabc:	d912      	bls.n	800cae4 <_strtod_l+0x204>
 800cabe:	2301      	movs	r3, #1
 800cac0:	e7c4      	b.n	800ca4c <_strtod_l+0x16c>
 800cac2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cac4:	1c5a      	adds	r2, r3, #1
 800cac6:	9219      	str	r2, [sp, #100]	@ 0x64
 800cac8:	785a      	ldrb	r2, [r3, #1]
 800caca:	3001      	adds	r0, #1
 800cacc:	2a30      	cmp	r2, #48	@ 0x30
 800cace:	d0f8      	beq.n	800cac2 <_strtod_l+0x1e2>
 800cad0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800cad4:	2b08      	cmp	r3, #8
 800cad6:	f200 84d3 	bhi.w	800d480 <_strtod_l+0xba0>
 800cada:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cadc:	930c      	str	r3, [sp, #48]	@ 0x30
 800cade:	4681      	mov	r9, r0
 800cae0:	2000      	movs	r0, #0
 800cae2:	4605      	mov	r5, r0
 800cae4:	3a30      	subs	r2, #48	@ 0x30
 800cae6:	f100 0301 	add.w	r3, r0, #1
 800caea:	d02a      	beq.n	800cb42 <_strtod_l+0x262>
 800caec:	4499      	add	r9, r3
 800caee:	eb00 0c05 	add.w	ip, r0, r5
 800caf2:	462b      	mov	r3, r5
 800caf4:	210a      	movs	r1, #10
 800caf6:	4563      	cmp	r3, ip
 800caf8:	d10d      	bne.n	800cb16 <_strtod_l+0x236>
 800cafa:	1c69      	adds	r1, r5, #1
 800cafc:	4401      	add	r1, r0
 800cafe:	4428      	add	r0, r5
 800cb00:	2808      	cmp	r0, #8
 800cb02:	dc16      	bgt.n	800cb32 <_strtod_l+0x252>
 800cb04:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cb06:	230a      	movs	r3, #10
 800cb08:	fb03 2300 	mla	r3, r3, r0, r2
 800cb0c:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb0e:	2300      	movs	r3, #0
 800cb10:	e018      	b.n	800cb44 <_strtod_l+0x264>
 800cb12:	4638      	mov	r0, r7
 800cb14:	e7da      	b.n	800cacc <_strtod_l+0x1ec>
 800cb16:	2b08      	cmp	r3, #8
 800cb18:	f103 0301 	add.w	r3, r3, #1
 800cb1c:	dc03      	bgt.n	800cb26 <_strtod_l+0x246>
 800cb1e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800cb20:	434e      	muls	r6, r1
 800cb22:	960a      	str	r6, [sp, #40]	@ 0x28
 800cb24:	e7e7      	b.n	800caf6 <_strtod_l+0x216>
 800cb26:	2b10      	cmp	r3, #16
 800cb28:	bfde      	ittt	le
 800cb2a:	9e08      	ldrle	r6, [sp, #32]
 800cb2c:	434e      	mulle	r6, r1
 800cb2e:	9608      	strle	r6, [sp, #32]
 800cb30:	e7e1      	b.n	800caf6 <_strtod_l+0x216>
 800cb32:	280f      	cmp	r0, #15
 800cb34:	dceb      	bgt.n	800cb0e <_strtod_l+0x22e>
 800cb36:	9808      	ldr	r0, [sp, #32]
 800cb38:	230a      	movs	r3, #10
 800cb3a:	fb03 2300 	mla	r3, r3, r0, r2
 800cb3e:	9308      	str	r3, [sp, #32]
 800cb40:	e7e5      	b.n	800cb0e <_strtod_l+0x22e>
 800cb42:	4629      	mov	r1, r5
 800cb44:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cb46:	1c50      	adds	r0, r2, #1
 800cb48:	9019      	str	r0, [sp, #100]	@ 0x64
 800cb4a:	7852      	ldrb	r2, [r2, #1]
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	460d      	mov	r5, r1
 800cb50:	e7b1      	b.n	800cab6 <_strtod_l+0x1d6>
 800cb52:	f04f 0900 	mov.w	r9, #0
 800cb56:	2301      	movs	r3, #1
 800cb58:	e77d      	b.n	800ca56 <_strtod_l+0x176>
 800cb5a:	f04f 0c00 	mov.w	ip, #0
 800cb5e:	1ca2      	adds	r2, r4, #2
 800cb60:	9219      	str	r2, [sp, #100]	@ 0x64
 800cb62:	78a2      	ldrb	r2, [r4, #2]
 800cb64:	e785      	b.n	800ca72 <_strtod_l+0x192>
 800cb66:	f04f 0c01 	mov.w	ip, #1
 800cb6a:	e7f8      	b.n	800cb5e <_strtod_l+0x27e>
 800cb6c:	0800eb00 	.word	0x0800eb00
 800cb70:	0800eae8 	.word	0x0800eae8
 800cb74:	7ff00000 	.word	0x7ff00000
 800cb78:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cb7a:	1c51      	adds	r1, r2, #1
 800cb7c:	9119      	str	r1, [sp, #100]	@ 0x64
 800cb7e:	7852      	ldrb	r2, [r2, #1]
 800cb80:	2a30      	cmp	r2, #48	@ 0x30
 800cb82:	d0f9      	beq.n	800cb78 <_strtod_l+0x298>
 800cb84:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800cb88:	2908      	cmp	r1, #8
 800cb8a:	f63f af78 	bhi.w	800ca7e <_strtod_l+0x19e>
 800cb8e:	3a30      	subs	r2, #48	@ 0x30
 800cb90:	920e      	str	r2, [sp, #56]	@ 0x38
 800cb92:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cb94:	920f      	str	r2, [sp, #60]	@ 0x3c
 800cb96:	f04f 080a 	mov.w	r8, #10
 800cb9a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cb9c:	1c56      	adds	r6, r2, #1
 800cb9e:	9619      	str	r6, [sp, #100]	@ 0x64
 800cba0:	7852      	ldrb	r2, [r2, #1]
 800cba2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800cba6:	f1be 0f09 	cmp.w	lr, #9
 800cbaa:	d939      	bls.n	800cc20 <_strtod_l+0x340>
 800cbac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cbae:	1a76      	subs	r6, r6, r1
 800cbb0:	2e08      	cmp	r6, #8
 800cbb2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800cbb6:	dc03      	bgt.n	800cbc0 <_strtod_l+0x2e0>
 800cbb8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cbba:	4588      	cmp	r8, r1
 800cbbc:	bfa8      	it	ge
 800cbbe:	4688      	movge	r8, r1
 800cbc0:	f1bc 0f00 	cmp.w	ip, #0
 800cbc4:	d001      	beq.n	800cbca <_strtod_l+0x2ea>
 800cbc6:	f1c8 0800 	rsb	r8, r8, #0
 800cbca:	2d00      	cmp	r5, #0
 800cbcc:	d14e      	bne.n	800cc6c <_strtod_l+0x38c>
 800cbce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cbd0:	4308      	orrs	r0, r1
 800cbd2:	f47f aebe 	bne.w	800c952 <_strtod_l+0x72>
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	f47f aed6 	bne.w	800c988 <_strtod_l+0xa8>
 800cbdc:	2a69      	cmp	r2, #105	@ 0x69
 800cbde:	d028      	beq.n	800cc32 <_strtod_l+0x352>
 800cbe0:	dc25      	bgt.n	800cc2e <_strtod_l+0x34e>
 800cbe2:	2a49      	cmp	r2, #73	@ 0x49
 800cbe4:	d025      	beq.n	800cc32 <_strtod_l+0x352>
 800cbe6:	2a4e      	cmp	r2, #78	@ 0x4e
 800cbe8:	f47f aece 	bne.w	800c988 <_strtod_l+0xa8>
 800cbec:	499b      	ldr	r1, [pc, #620]	@ (800ce5c <_strtod_l+0x57c>)
 800cbee:	a819      	add	r0, sp, #100	@ 0x64
 800cbf0:	f001 f96e 	bl	800ded0 <__match>
 800cbf4:	2800      	cmp	r0, #0
 800cbf6:	f43f aec7 	beq.w	800c988 <_strtod_l+0xa8>
 800cbfa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cbfc:	781b      	ldrb	r3, [r3, #0]
 800cbfe:	2b28      	cmp	r3, #40	@ 0x28
 800cc00:	d12e      	bne.n	800cc60 <_strtod_l+0x380>
 800cc02:	4997      	ldr	r1, [pc, #604]	@ (800ce60 <_strtod_l+0x580>)
 800cc04:	aa1c      	add	r2, sp, #112	@ 0x70
 800cc06:	a819      	add	r0, sp, #100	@ 0x64
 800cc08:	f001 f976 	bl	800def8 <__hexnan>
 800cc0c:	2805      	cmp	r0, #5
 800cc0e:	d127      	bne.n	800cc60 <_strtod_l+0x380>
 800cc10:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cc12:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800cc16:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800cc1a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800cc1e:	e698      	b.n	800c952 <_strtod_l+0x72>
 800cc20:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cc22:	fb08 2101 	mla	r1, r8, r1, r2
 800cc26:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800cc2a:	920e      	str	r2, [sp, #56]	@ 0x38
 800cc2c:	e7b5      	b.n	800cb9a <_strtod_l+0x2ba>
 800cc2e:	2a6e      	cmp	r2, #110	@ 0x6e
 800cc30:	e7da      	b.n	800cbe8 <_strtod_l+0x308>
 800cc32:	498c      	ldr	r1, [pc, #560]	@ (800ce64 <_strtod_l+0x584>)
 800cc34:	a819      	add	r0, sp, #100	@ 0x64
 800cc36:	f001 f94b 	bl	800ded0 <__match>
 800cc3a:	2800      	cmp	r0, #0
 800cc3c:	f43f aea4 	beq.w	800c988 <_strtod_l+0xa8>
 800cc40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc42:	4989      	ldr	r1, [pc, #548]	@ (800ce68 <_strtod_l+0x588>)
 800cc44:	3b01      	subs	r3, #1
 800cc46:	a819      	add	r0, sp, #100	@ 0x64
 800cc48:	9319      	str	r3, [sp, #100]	@ 0x64
 800cc4a:	f001 f941 	bl	800ded0 <__match>
 800cc4e:	b910      	cbnz	r0, 800cc56 <_strtod_l+0x376>
 800cc50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc52:	3301      	adds	r3, #1
 800cc54:	9319      	str	r3, [sp, #100]	@ 0x64
 800cc56:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800ce78 <_strtod_l+0x598>
 800cc5a:	f04f 0a00 	mov.w	sl, #0
 800cc5e:	e678      	b.n	800c952 <_strtod_l+0x72>
 800cc60:	4882      	ldr	r0, [pc, #520]	@ (800ce6c <_strtod_l+0x58c>)
 800cc62:	f000 fe89 	bl	800d978 <nan>
 800cc66:	ec5b ab10 	vmov	sl, fp, d0
 800cc6a:	e672      	b.n	800c952 <_strtod_l+0x72>
 800cc6c:	eba8 0309 	sub.w	r3, r8, r9
 800cc70:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cc72:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc74:	2f00      	cmp	r7, #0
 800cc76:	bf08      	it	eq
 800cc78:	462f      	moveq	r7, r5
 800cc7a:	2d10      	cmp	r5, #16
 800cc7c:	462c      	mov	r4, r5
 800cc7e:	bfa8      	it	ge
 800cc80:	2410      	movge	r4, #16
 800cc82:	f7f3 fc77 	bl	8000574 <__aeabi_ui2d>
 800cc86:	2d09      	cmp	r5, #9
 800cc88:	4682      	mov	sl, r0
 800cc8a:	468b      	mov	fp, r1
 800cc8c:	dc13      	bgt.n	800ccb6 <_strtod_l+0x3d6>
 800cc8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	f43f ae5e 	beq.w	800c952 <_strtod_l+0x72>
 800cc96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc98:	dd78      	ble.n	800cd8c <_strtod_l+0x4ac>
 800cc9a:	2b16      	cmp	r3, #22
 800cc9c:	dc5f      	bgt.n	800cd5e <_strtod_l+0x47e>
 800cc9e:	4974      	ldr	r1, [pc, #464]	@ (800ce70 <_strtod_l+0x590>)
 800cca0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cca4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cca8:	4652      	mov	r2, sl
 800ccaa:	465b      	mov	r3, fp
 800ccac:	f7f3 fcdc 	bl	8000668 <__aeabi_dmul>
 800ccb0:	4682      	mov	sl, r0
 800ccb2:	468b      	mov	fp, r1
 800ccb4:	e64d      	b.n	800c952 <_strtod_l+0x72>
 800ccb6:	4b6e      	ldr	r3, [pc, #440]	@ (800ce70 <_strtod_l+0x590>)
 800ccb8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ccbc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ccc0:	f7f3 fcd2 	bl	8000668 <__aeabi_dmul>
 800ccc4:	4682      	mov	sl, r0
 800ccc6:	9808      	ldr	r0, [sp, #32]
 800ccc8:	468b      	mov	fp, r1
 800ccca:	f7f3 fc53 	bl	8000574 <__aeabi_ui2d>
 800ccce:	4602      	mov	r2, r0
 800ccd0:	460b      	mov	r3, r1
 800ccd2:	4650      	mov	r0, sl
 800ccd4:	4659      	mov	r1, fp
 800ccd6:	f7f3 fb11 	bl	80002fc <__adddf3>
 800ccda:	2d0f      	cmp	r5, #15
 800ccdc:	4682      	mov	sl, r0
 800ccde:	468b      	mov	fp, r1
 800cce0:	ddd5      	ble.n	800cc8e <_strtod_l+0x3ae>
 800cce2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cce4:	1b2c      	subs	r4, r5, r4
 800cce6:	441c      	add	r4, r3
 800cce8:	2c00      	cmp	r4, #0
 800ccea:	f340 8096 	ble.w	800ce1a <_strtod_l+0x53a>
 800ccee:	f014 030f 	ands.w	r3, r4, #15
 800ccf2:	d00a      	beq.n	800cd0a <_strtod_l+0x42a>
 800ccf4:	495e      	ldr	r1, [pc, #376]	@ (800ce70 <_strtod_l+0x590>)
 800ccf6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ccfa:	4652      	mov	r2, sl
 800ccfc:	465b      	mov	r3, fp
 800ccfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd02:	f7f3 fcb1 	bl	8000668 <__aeabi_dmul>
 800cd06:	4682      	mov	sl, r0
 800cd08:	468b      	mov	fp, r1
 800cd0a:	f034 040f 	bics.w	r4, r4, #15
 800cd0e:	d073      	beq.n	800cdf8 <_strtod_l+0x518>
 800cd10:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800cd14:	dd48      	ble.n	800cda8 <_strtod_l+0x4c8>
 800cd16:	2400      	movs	r4, #0
 800cd18:	46a0      	mov	r8, r4
 800cd1a:	940a      	str	r4, [sp, #40]	@ 0x28
 800cd1c:	46a1      	mov	r9, r4
 800cd1e:	9a05      	ldr	r2, [sp, #20]
 800cd20:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800ce78 <_strtod_l+0x598>
 800cd24:	2322      	movs	r3, #34	@ 0x22
 800cd26:	6013      	str	r3, [r2, #0]
 800cd28:	f04f 0a00 	mov.w	sl, #0
 800cd2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	f43f ae0f 	beq.w	800c952 <_strtod_l+0x72>
 800cd34:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cd36:	9805      	ldr	r0, [sp, #20]
 800cd38:	f7ff f942 	bl	800bfc0 <_Bfree>
 800cd3c:	9805      	ldr	r0, [sp, #20]
 800cd3e:	4649      	mov	r1, r9
 800cd40:	f7ff f93e 	bl	800bfc0 <_Bfree>
 800cd44:	9805      	ldr	r0, [sp, #20]
 800cd46:	4641      	mov	r1, r8
 800cd48:	f7ff f93a 	bl	800bfc0 <_Bfree>
 800cd4c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cd4e:	9805      	ldr	r0, [sp, #20]
 800cd50:	f7ff f936 	bl	800bfc0 <_Bfree>
 800cd54:	9805      	ldr	r0, [sp, #20]
 800cd56:	4621      	mov	r1, r4
 800cd58:	f7ff f932 	bl	800bfc0 <_Bfree>
 800cd5c:	e5f9      	b.n	800c952 <_strtod_l+0x72>
 800cd5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd60:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800cd64:	4293      	cmp	r3, r2
 800cd66:	dbbc      	blt.n	800cce2 <_strtod_l+0x402>
 800cd68:	4c41      	ldr	r4, [pc, #260]	@ (800ce70 <_strtod_l+0x590>)
 800cd6a:	f1c5 050f 	rsb	r5, r5, #15
 800cd6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cd72:	4652      	mov	r2, sl
 800cd74:	465b      	mov	r3, fp
 800cd76:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd7a:	f7f3 fc75 	bl	8000668 <__aeabi_dmul>
 800cd7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd80:	1b5d      	subs	r5, r3, r5
 800cd82:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cd86:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cd8a:	e78f      	b.n	800ccac <_strtod_l+0x3cc>
 800cd8c:	3316      	adds	r3, #22
 800cd8e:	dba8      	blt.n	800cce2 <_strtod_l+0x402>
 800cd90:	4b37      	ldr	r3, [pc, #220]	@ (800ce70 <_strtod_l+0x590>)
 800cd92:	eba9 0808 	sub.w	r8, r9, r8
 800cd96:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800cd9a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800cd9e:	4650      	mov	r0, sl
 800cda0:	4659      	mov	r1, fp
 800cda2:	f7f3 fd8b 	bl	80008bc <__aeabi_ddiv>
 800cda6:	e783      	b.n	800ccb0 <_strtod_l+0x3d0>
 800cda8:	4b32      	ldr	r3, [pc, #200]	@ (800ce74 <_strtod_l+0x594>)
 800cdaa:	9308      	str	r3, [sp, #32]
 800cdac:	2300      	movs	r3, #0
 800cdae:	1124      	asrs	r4, r4, #4
 800cdb0:	4650      	mov	r0, sl
 800cdb2:	4659      	mov	r1, fp
 800cdb4:	461e      	mov	r6, r3
 800cdb6:	2c01      	cmp	r4, #1
 800cdb8:	dc21      	bgt.n	800cdfe <_strtod_l+0x51e>
 800cdba:	b10b      	cbz	r3, 800cdc0 <_strtod_l+0x4e0>
 800cdbc:	4682      	mov	sl, r0
 800cdbe:	468b      	mov	fp, r1
 800cdc0:	492c      	ldr	r1, [pc, #176]	@ (800ce74 <_strtod_l+0x594>)
 800cdc2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800cdc6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800cdca:	4652      	mov	r2, sl
 800cdcc:	465b      	mov	r3, fp
 800cdce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cdd2:	f7f3 fc49 	bl	8000668 <__aeabi_dmul>
 800cdd6:	4b28      	ldr	r3, [pc, #160]	@ (800ce78 <_strtod_l+0x598>)
 800cdd8:	460a      	mov	r2, r1
 800cdda:	400b      	ands	r3, r1
 800cddc:	4927      	ldr	r1, [pc, #156]	@ (800ce7c <_strtod_l+0x59c>)
 800cdde:	428b      	cmp	r3, r1
 800cde0:	4682      	mov	sl, r0
 800cde2:	d898      	bhi.n	800cd16 <_strtod_l+0x436>
 800cde4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800cde8:	428b      	cmp	r3, r1
 800cdea:	bf86      	itte	hi
 800cdec:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800ce80 <_strtod_l+0x5a0>
 800cdf0:	f04f 3aff 	movhi.w	sl, #4294967295
 800cdf4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	9308      	str	r3, [sp, #32]
 800cdfc:	e07a      	b.n	800cef4 <_strtod_l+0x614>
 800cdfe:	07e2      	lsls	r2, r4, #31
 800ce00:	d505      	bpl.n	800ce0e <_strtod_l+0x52e>
 800ce02:	9b08      	ldr	r3, [sp, #32]
 800ce04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce08:	f7f3 fc2e 	bl	8000668 <__aeabi_dmul>
 800ce0c:	2301      	movs	r3, #1
 800ce0e:	9a08      	ldr	r2, [sp, #32]
 800ce10:	3208      	adds	r2, #8
 800ce12:	3601      	adds	r6, #1
 800ce14:	1064      	asrs	r4, r4, #1
 800ce16:	9208      	str	r2, [sp, #32]
 800ce18:	e7cd      	b.n	800cdb6 <_strtod_l+0x4d6>
 800ce1a:	d0ed      	beq.n	800cdf8 <_strtod_l+0x518>
 800ce1c:	4264      	negs	r4, r4
 800ce1e:	f014 020f 	ands.w	r2, r4, #15
 800ce22:	d00a      	beq.n	800ce3a <_strtod_l+0x55a>
 800ce24:	4b12      	ldr	r3, [pc, #72]	@ (800ce70 <_strtod_l+0x590>)
 800ce26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce2a:	4650      	mov	r0, sl
 800ce2c:	4659      	mov	r1, fp
 800ce2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce32:	f7f3 fd43 	bl	80008bc <__aeabi_ddiv>
 800ce36:	4682      	mov	sl, r0
 800ce38:	468b      	mov	fp, r1
 800ce3a:	1124      	asrs	r4, r4, #4
 800ce3c:	d0dc      	beq.n	800cdf8 <_strtod_l+0x518>
 800ce3e:	2c1f      	cmp	r4, #31
 800ce40:	dd20      	ble.n	800ce84 <_strtod_l+0x5a4>
 800ce42:	2400      	movs	r4, #0
 800ce44:	46a0      	mov	r8, r4
 800ce46:	940a      	str	r4, [sp, #40]	@ 0x28
 800ce48:	46a1      	mov	r9, r4
 800ce4a:	9a05      	ldr	r2, [sp, #20]
 800ce4c:	2322      	movs	r3, #34	@ 0x22
 800ce4e:	f04f 0a00 	mov.w	sl, #0
 800ce52:	f04f 0b00 	mov.w	fp, #0
 800ce56:	6013      	str	r3, [r2, #0]
 800ce58:	e768      	b.n	800cd2c <_strtod_l+0x44c>
 800ce5a:	bf00      	nop
 800ce5c:	0800e842 	.word	0x0800e842
 800ce60:	0800eaec 	.word	0x0800eaec
 800ce64:	0800e83a 	.word	0x0800e83a
 800ce68:	0800e91e 	.word	0x0800e91e
 800ce6c:	0800e91a 	.word	0x0800e91a
 800ce70:	0800ea20 	.word	0x0800ea20
 800ce74:	0800e9f8 	.word	0x0800e9f8
 800ce78:	7ff00000 	.word	0x7ff00000
 800ce7c:	7ca00000 	.word	0x7ca00000
 800ce80:	7fefffff 	.word	0x7fefffff
 800ce84:	f014 0310 	ands.w	r3, r4, #16
 800ce88:	bf18      	it	ne
 800ce8a:	236a      	movne	r3, #106	@ 0x6a
 800ce8c:	4ea9      	ldr	r6, [pc, #676]	@ (800d134 <_strtod_l+0x854>)
 800ce8e:	9308      	str	r3, [sp, #32]
 800ce90:	4650      	mov	r0, sl
 800ce92:	4659      	mov	r1, fp
 800ce94:	2300      	movs	r3, #0
 800ce96:	07e2      	lsls	r2, r4, #31
 800ce98:	d504      	bpl.n	800cea4 <_strtod_l+0x5c4>
 800ce9a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ce9e:	f7f3 fbe3 	bl	8000668 <__aeabi_dmul>
 800cea2:	2301      	movs	r3, #1
 800cea4:	1064      	asrs	r4, r4, #1
 800cea6:	f106 0608 	add.w	r6, r6, #8
 800ceaa:	d1f4      	bne.n	800ce96 <_strtod_l+0x5b6>
 800ceac:	b10b      	cbz	r3, 800ceb2 <_strtod_l+0x5d2>
 800ceae:	4682      	mov	sl, r0
 800ceb0:	468b      	mov	fp, r1
 800ceb2:	9b08      	ldr	r3, [sp, #32]
 800ceb4:	b1b3      	cbz	r3, 800cee4 <_strtod_l+0x604>
 800ceb6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ceba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	4659      	mov	r1, fp
 800cec2:	dd0f      	ble.n	800cee4 <_strtod_l+0x604>
 800cec4:	2b1f      	cmp	r3, #31
 800cec6:	dd55      	ble.n	800cf74 <_strtod_l+0x694>
 800cec8:	2b34      	cmp	r3, #52	@ 0x34
 800ceca:	bfde      	ittt	le
 800cecc:	f04f 33ff 	movle.w	r3, #4294967295
 800ced0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ced4:	4093      	lslle	r3, r2
 800ced6:	f04f 0a00 	mov.w	sl, #0
 800ceda:	bfcc      	ite	gt
 800cedc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800cee0:	ea03 0b01 	andle.w	fp, r3, r1
 800cee4:	2200      	movs	r2, #0
 800cee6:	2300      	movs	r3, #0
 800cee8:	4650      	mov	r0, sl
 800ceea:	4659      	mov	r1, fp
 800ceec:	f7f3 fe24 	bl	8000b38 <__aeabi_dcmpeq>
 800cef0:	2800      	cmp	r0, #0
 800cef2:	d1a6      	bne.n	800ce42 <_strtod_l+0x562>
 800cef4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cef6:	9300      	str	r3, [sp, #0]
 800cef8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cefa:	9805      	ldr	r0, [sp, #20]
 800cefc:	462b      	mov	r3, r5
 800cefe:	463a      	mov	r2, r7
 800cf00:	f7ff f8c6 	bl	800c090 <__s2b>
 800cf04:	900a      	str	r0, [sp, #40]	@ 0x28
 800cf06:	2800      	cmp	r0, #0
 800cf08:	f43f af05 	beq.w	800cd16 <_strtod_l+0x436>
 800cf0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf0e:	2a00      	cmp	r2, #0
 800cf10:	eba9 0308 	sub.w	r3, r9, r8
 800cf14:	bfa8      	it	ge
 800cf16:	2300      	movge	r3, #0
 800cf18:	9312      	str	r3, [sp, #72]	@ 0x48
 800cf1a:	2400      	movs	r4, #0
 800cf1c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800cf20:	9316      	str	r3, [sp, #88]	@ 0x58
 800cf22:	46a0      	mov	r8, r4
 800cf24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf26:	9805      	ldr	r0, [sp, #20]
 800cf28:	6859      	ldr	r1, [r3, #4]
 800cf2a:	f7ff f809 	bl	800bf40 <_Balloc>
 800cf2e:	4681      	mov	r9, r0
 800cf30:	2800      	cmp	r0, #0
 800cf32:	f43f aef4 	beq.w	800cd1e <_strtod_l+0x43e>
 800cf36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf38:	691a      	ldr	r2, [r3, #16]
 800cf3a:	3202      	adds	r2, #2
 800cf3c:	f103 010c 	add.w	r1, r3, #12
 800cf40:	0092      	lsls	r2, r2, #2
 800cf42:	300c      	adds	r0, #12
 800cf44:	f000 fd08 	bl	800d958 <memcpy>
 800cf48:	ec4b ab10 	vmov	d0, sl, fp
 800cf4c:	9805      	ldr	r0, [sp, #20]
 800cf4e:	aa1c      	add	r2, sp, #112	@ 0x70
 800cf50:	a91b      	add	r1, sp, #108	@ 0x6c
 800cf52:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800cf56:	f7ff fbd7 	bl	800c708 <__d2b>
 800cf5a:	901a      	str	r0, [sp, #104]	@ 0x68
 800cf5c:	2800      	cmp	r0, #0
 800cf5e:	f43f aede 	beq.w	800cd1e <_strtod_l+0x43e>
 800cf62:	9805      	ldr	r0, [sp, #20]
 800cf64:	2101      	movs	r1, #1
 800cf66:	f7ff f929 	bl	800c1bc <__i2b>
 800cf6a:	4680      	mov	r8, r0
 800cf6c:	b948      	cbnz	r0, 800cf82 <_strtod_l+0x6a2>
 800cf6e:	f04f 0800 	mov.w	r8, #0
 800cf72:	e6d4      	b.n	800cd1e <_strtod_l+0x43e>
 800cf74:	f04f 32ff 	mov.w	r2, #4294967295
 800cf78:	fa02 f303 	lsl.w	r3, r2, r3
 800cf7c:	ea03 0a0a 	and.w	sl, r3, sl
 800cf80:	e7b0      	b.n	800cee4 <_strtod_l+0x604>
 800cf82:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800cf84:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800cf86:	2d00      	cmp	r5, #0
 800cf88:	bfab      	itete	ge
 800cf8a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800cf8c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800cf8e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800cf90:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800cf92:	bfac      	ite	ge
 800cf94:	18ef      	addge	r7, r5, r3
 800cf96:	1b5e      	sublt	r6, r3, r5
 800cf98:	9b08      	ldr	r3, [sp, #32]
 800cf9a:	1aed      	subs	r5, r5, r3
 800cf9c:	4415      	add	r5, r2
 800cf9e:	4b66      	ldr	r3, [pc, #408]	@ (800d138 <_strtod_l+0x858>)
 800cfa0:	3d01      	subs	r5, #1
 800cfa2:	429d      	cmp	r5, r3
 800cfa4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800cfa8:	da50      	bge.n	800d04c <_strtod_l+0x76c>
 800cfaa:	1b5b      	subs	r3, r3, r5
 800cfac:	2b1f      	cmp	r3, #31
 800cfae:	eba2 0203 	sub.w	r2, r2, r3
 800cfb2:	f04f 0101 	mov.w	r1, #1
 800cfb6:	dc3d      	bgt.n	800d034 <_strtod_l+0x754>
 800cfb8:	fa01 f303 	lsl.w	r3, r1, r3
 800cfbc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	9310      	str	r3, [sp, #64]	@ 0x40
 800cfc2:	18bd      	adds	r5, r7, r2
 800cfc4:	9b08      	ldr	r3, [sp, #32]
 800cfc6:	42af      	cmp	r7, r5
 800cfc8:	4416      	add	r6, r2
 800cfca:	441e      	add	r6, r3
 800cfcc:	463b      	mov	r3, r7
 800cfce:	bfa8      	it	ge
 800cfd0:	462b      	movge	r3, r5
 800cfd2:	42b3      	cmp	r3, r6
 800cfd4:	bfa8      	it	ge
 800cfd6:	4633      	movge	r3, r6
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	bfc2      	ittt	gt
 800cfdc:	1aed      	subgt	r5, r5, r3
 800cfde:	1af6      	subgt	r6, r6, r3
 800cfe0:	1aff      	subgt	r7, r7, r3
 800cfe2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	dd16      	ble.n	800d016 <_strtod_l+0x736>
 800cfe8:	4641      	mov	r1, r8
 800cfea:	9805      	ldr	r0, [sp, #20]
 800cfec:	461a      	mov	r2, r3
 800cfee:	f7ff f9a5 	bl	800c33c <__pow5mult>
 800cff2:	4680      	mov	r8, r0
 800cff4:	2800      	cmp	r0, #0
 800cff6:	d0ba      	beq.n	800cf6e <_strtod_l+0x68e>
 800cff8:	4601      	mov	r1, r0
 800cffa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cffc:	9805      	ldr	r0, [sp, #20]
 800cffe:	f7ff f8f3 	bl	800c1e8 <__multiply>
 800d002:	900e      	str	r0, [sp, #56]	@ 0x38
 800d004:	2800      	cmp	r0, #0
 800d006:	f43f ae8a 	beq.w	800cd1e <_strtod_l+0x43e>
 800d00a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d00c:	9805      	ldr	r0, [sp, #20]
 800d00e:	f7fe ffd7 	bl	800bfc0 <_Bfree>
 800d012:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d014:	931a      	str	r3, [sp, #104]	@ 0x68
 800d016:	2d00      	cmp	r5, #0
 800d018:	dc1d      	bgt.n	800d056 <_strtod_l+0x776>
 800d01a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	dd23      	ble.n	800d068 <_strtod_l+0x788>
 800d020:	4649      	mov	r1, r9
 800d022:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d024:	9805      	ldr	r0, [sp, #20]
 800d026:	f7ff f989 	bl	800c33c <__pow5mult>
 800d02a:	4681      	mov	r9, r0
 800d02c:	b9e0      	cbnz	r0, 800d068 <_strtod_l+0x788>
 800d02e:	f04f 0900 	mov.w	r9, #0
 800d032:	e674      	b.n	800cd1e <_strtod_l+0x43e>
 800d034:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d038:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d03c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d040:	35e2      	adds	r5, #226	@ 0xe2
 800d042:	fa01 f305 	lsl.w	r3, r1, r5
 800d046:	9310      	str	r3, [sp, #64]	@ 0x40
 800d048:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d04a:	e7ba      	b.n	800cfc2 <_strtod_l+0x6e2>
 800d04c:	2300      	movs	r3, #0
 800d04e:	9310      	str	r3, [sp, #64]	@ 0x40
 800d050:	2301      	movs	r3, #1
 800d052:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d054:	e7b5      	b.n	800cfc2 <_strtod_l+0x6e2>
 800d056:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d058:	9805      	ldr	r0, [sp, #20]
 800d05a:	462a      	mov	r2, r5
 800d05c:	f7ff f9c8 	bl	800c3f0 <__lshift>
 800d060:	901a      	str	r0, [sp, #104]	@ 0x68
 800d062:	2800      	cmp	r0, #0
 800d064:	d1d9      	bne.n	800d01a <_strtod_l+0x73a>
 800d066:	e65a      	b.n	800cd1e <_strtod_l+0x43e>
 800d068:	2e00      	cmp	r6, #0
 800d06a:	dd07      	ble.n	800d07c <_strtod_l+0x79c>
 800d06c:	4649      	mov	r1, r9
 800d06e:	9805      	ldr	r0, [sp, #20]
 800d070:	4632      	mov	r2, r6
 800d072:	f7ff f9bd 	bl	800c3f0 <__lshift>
 800d076:	4681      	mov	r9, r0
 800d078:	2800      	cmp	r0, #0
 800d07a:	d0d8      	beq.n	800d02e <_strtod_l+0x74e>
 800d07c:	2f00      	cmp	r7, #0
 800d07e:	dd08      	ble.n	800d092 <_strtod_l+0x7b2>
 800d080:	4641      	mov	r1, r8
 800d082:	9805      	ldr	r0, [sp, #20]
 800d084:	463a      	mov	r2, r7
 800d086:	f7ff f9b3 	bl	800c3f0 <__lshift>
 800d08a:	4680      	mov	r8, r0
 800d08c:	2800      	cmp	r0, #0
 800d08e:	f43f ae46 	beq.w	800cd1e <_strtod_l+0x43e>
 800d092:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d094:	9805      	ldr	r0, [sp, #20]
 800d096:	464a      	mov	r2, r9
 800d098:	f7ff fa32 	bl	800c500 <__mdiff>
 800d09c:	4604      	mov	r4, r0
 800d09e:	2800      	cmp	r0, #0
 800d0a0:	f43f ae3d 	beq.w	800cd1e <_strtod_l+0x43e>
 800d0a4:	68c3      	ldr	r3, [r0, #12]
 800d0a6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	60c3      	str	r3, [r0, #12]
 800d0ac:	4641      	mov	r1, r8
 800d0ae:	f7ff fa0b 	bl	800c4c8 <__mcmp>
 800d0b2:	2800      	cmp	r0, #0
 800d0b4:	da46      	bge.n	800d144 <_strtod_l+0x864>
 800d0b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0b8:	ea53 030a 	orrs.w	r3, r3, sl
 800d0bc:	d16c      	bne.n	800d198 <_strtod_l+0x8b8>
 800d0be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d168      	bne.n	800d198 <_strtod_l+0x8b8>
 800d0c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d0ca:	0d1b      	lsrs	r3, r3, #20
 800d0cc:	051b      	lsls	r3, r3, #20
 800d0ce:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d0d2:	d961      	bls.n	800d198 <_strtod_l+0x8b8>
 800d0d4:	6963      	ldr	r3, [r4, #20]
 800d0d6:	b913      	cbnz	r3, 800d0de <_strtod_l+0x7fe>
 800d0d8:	6923      	ldr	r3, [r4, #16]
 800d0da:	2b01      	cmp	r3, #1
 800d0dc:	dd5c      	ble.n	800d198 <_strtod_l+0x8b8>
 800d0de:	4621      	mov	r1, r4
 800d0e0:	2201      	movs	r2, #1
 800d0e2:	9805      	ldr	r0, [sp, #20]
 800d0e4:	f7ff f984 	bl	800c3f0 <__lshift>
 800d0e8:	4641      	mov	r1, r8
 800d0ea:	4604      	mov	r4, r0
 800d0ec:	f7ff f9ec 	bl	800c4c8 <__mcmp>
 800d0f0:	2800      	cmp	r0, #0
 800d0f2:	dd51      	ble.n	800d198 <_strtod_l+0x8b8>
 800d0f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d0f8:	9a08      	ldr	r2, [sp, #32]
 800d0fa:	0d1b      	lsrs	r3, r3, #20
 800d0fc:	051b      	lsls	r3, r3, #20
 800d0fe:	2a00      	cmp	r2, #0
 800d100:	d06b      	beq.n	800d1da <_strtod_l+0x8fa>
 800d102:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d106:	d868      	bhi.n	800d1da <_strtod_l+0x8fa>
 800d108:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d10c:	f67f ae9d 	bls.w	800ce4a <_strtod_l+0x56a>
 800d110:	4b0a      	ldr	r3, [pc, #40]	@ (800d13c <_strtod_l+0x85c>)
 800d112:	4650      	mov	r0, sl
 800d114:	4659      	mov	r1, fp
 800d116:	2200      	movs	r2, #0
 800d118:	f7f3 faa6 	bl	8000668 <__aeabi_dmul>
 800d11c:	4b08      	ldr	r3, [pc, #32]	@ (800d140 <_strtod_l+0x860>)
 800d11e:	400b      	ands	r3, r1
 800d120:	4682      	mov	sl, r0
 800d122:	468b      	mov	fp, r1
 800d124:	2b00      	cmp	r3, #0
 800d126:	f47f ae05 	bne.w	800cd34 <_strtod_l+0x454>
 800d12a:	9a05      	ldr	r2, [sp, #20]
 800d12c:	2322      	movs	r3, #34	@ 0x22
 800d12e:	6013      	str	r3, [r2, #0]
 800d130:	e600      	b.n	800cd34 <_strtod_l+0x454>
 800d132:	bf00      	nop
 800d134:	0800eb18 	.word	0x0800eb18
 800d138:	fffffc02 	.word	0xfffffc02
 800d13c:	39500000 	.word	0x39500000
 800d140:	7ff00000 	.word	0x7ff00000
 800d144:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d148:	d165      	bne.n	800d216 <_strtod_l+0x936>
 800d14a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d14c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d150:	b35a      	cbz	r2, 800d1aa <_strtod_l+0x8ca>
 800d152:	4a9f      	ldr	r2, [pc, #636]	@ (800d3d0 <_strtod_l+0xaf0>)
 800d154:	4293      	cmp	r3, r2
 800d156:	d12b      	bne.n	800d1b0 <_strtod_l+0x8d0>
 800d158:	9b08      	ldr	r3, [sp, #32]
 800d15a:	4651      	mov	r1, sl
 800d15c:	b303      	cbz	r3, 800d1a0 <_strtod_l+0x8c0>
 800d15e:	4b9d      	ldr	r3, [pc, #628]	@ (800d3d4 <_strtod_l+0xaf4>)
 800d160:	465a      	mov	r2, fp
 800d162:	4013      	ands	r3, r2
 800d164:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d168:	f04f 32ff 	mov.w	r2, #4294967295
 800d16c:	d81b      	bhi.n	800d1a6 <_strtod_l+0x8c6>
 800d16e:	0d1b      	lsrs	r3, r3, #20
 800d170:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d174:	fa02 f303 	lsl.w	r3, r2, r3
 800d178:	4299      	cmp	r1, r3
 800d17a:	d119      	bne.n	800d1b0 <_strtod_l+0x8d0>
 800d17c:	4b96      	ldr	r3, [pc, #600]	@ (800d3d8 <_strtod_l+0xaf8>)
 800d17e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d180:	429a      	cmp	r2, r3
 800d182:	d102      	bne.n	800d18a <_strtod_l+0x8aa>
 800d184:	3101      	adds	r1, #1
 800d186:	f43f adca 	beq.w	800cd1e <_strtod_l+0x43e>
 800d18a:	4b92      	ldr	r3, [pc, #584]	@ (800d3d4 <_strtod_l+0xaf4>)
 800d18c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d18e:	401a      	ands	r2, r3
 800d190:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d194:	f04f 0a00 	mov.w	sl, #0
 800d198:	9b08      	ldr	r3, [sp, #32]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d1b8      	bne.n	800d110 <_strtod_l+0x830>
 800d19e:	e5c9      	b.n	800cd34 <_strtod_l+0x454>
 800d1a0:	f04f 33ff 	mov.w	r3, #4294967295
 800d1a4:	e7e8      	b.n	800d178 <_strtod_l+0x898>
 800d1a6:	4613      	mov	r3, r2
 800d1a8:	e7e6      	b.n	800d178 <_strtod_l+0x898>
 800d1aa:	ea53 030a 	orrs.w	r3, r3, sl
 800d1ae:	d0a1      	beq.n	800d0f4 <_strtod_l+0x814>
 800d1b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d1b2:	b1db      	cbz	r3, 800d1ec <_strtod_l+0x90c>
 800d1b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d1b6:	4213      	tst	r3, r2
 800d1b8:	d0ee      	beq.n	800d198 <_strtod_l+0x8b8>
 800d1ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d1bc:	9a08      	ldr	r2, [sp, #32]
 800d1be:	4650      	mov	r0, sl
 800d1c0:	4659      	mov	r1, fp
 800d1c2:	b1bb      	cbz	r3, 800d1f4 <_strtod_l+0x914>
 800d1c4:	f7ff fb6e 	bl	800c8a4 <sulp>
 800d1c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d1cc:	ec53 2b10 	vmov	r2, r3, d0
 800d1d0:	f7f3 f894 	bl	80002fc <__adddf3>
 800d1d4:	4682      	mov	sl, r0
 800d1d6:	468b      	mov	fp, r1
 800d1d8:	e7de      	b.n	800d198 <_strtod_l+0x8b8>
 800d1da:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d1de:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d1e2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d1e6:	f04f 3aff 	mov.w	sl, #4294967295
 800d1ea:	e7d5      	b.n	800d198 <_strtod_l+0x8b8>
 800d1ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d1ee:	ea13 0f0a 	tst.w	r3, sl
 800d1f2:	e7e1      	b.n	800d1b8 <_strtod_l+0x8d8>
 800d1f4:	f7ff fb56 	bl	800c8a4 <sulp>
 800d1f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d1fc:	ec53 2b10 	vmov	r2, r3, d0
 800d200:	f7f3 f87a 	bl	80002f8 <__aeabi_dsub>
 800d204:	2200      	movs	r2, #0
 800d206:	2300      	movs	r3, #0
 800d208:	4682      	mov	sl, r0
 800d20a:	468b      	mov	fp, r1
 800d20c:	f7f3 fc94 	bl	8000b38 <__aeabi_dcmpeq>
 800d210:	2800      	cmp	r0, #0
 800d212:	d0c1      	beq.n	800d198 <_strtod_l+0x8b8>
 800d214:	e619      	b.n	800ce4a <_strtod_l+0x56a>
 800d216:	4641      	mov	r1, r8
 800d218:	4620      	mov	r0, r4
 800d21a:	f7ff facd 	bl	800c7b8 <__ratio>
 800d21e:	ec57 6b10 	vmov	r6, r7, d0
 800d222:	2200      	movs	r2, #0
 800d224:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d228:	4630      	mov	r0, r6
 800d22a:	4639      	mov	r1, r7
 800d22c:	f7f3 fc98 	bl	8000b60 <__aeabi_dcmple>
 800d230:	2800      	cmp	r0, #0
 800d232:	d06f      	beq.n	800d314 <_strtod_l+0xa34>
 800d234:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d236:	2b00      	cmp	r3, #0
 800d238:	d17a      	bne.n	800d330 <_strtod_l+0xa50>
 800d23a:	f1ba 0f00 	cmp.w	sl, #0
 800d23e:	d158      	bne.n	800d2f2 <_strtod_l+0xa12>
 800d240:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d242:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d246:	2b00      	cmp	r3, #0
 800d248:	d15a      	bne.n	800d300 <_strtod_l+0xa20>
 800d24a:	4b64      	ldr	r3, [pc, #400]	@ (800d3dc <_strtod_l+0xafc>)
 800d24c:	2200      	movs	r2, #0
 800d24e:	4630      	mov	r0, r6
 800d250:	4639      	mov	r1, r7
 800d252:	f7f3 fc7b 	bl	8000b4c <__aeabi_dcmplt>
 800d256:	2800      	cmp	r0, #0
 800d258:	d159      	bne.n	800d30e <_strtod_l+0xa2e>
 800d25a:	4630      	mov	r0, r6
 800d25c:	4639      	mov	r1, r7
 800d25e:	4b60      	ldr	r3, [pc, #384]	@ (800d3e0 <_strtod_l+0xb00>)
 800d260:	2200      	movs	r2, #0
 800d262:	f7f3 fa01 	bl	8000668 <__aeabi_dmul>
 800d266:	4606      	mov	r6, r0
 800d268:	460f      	mov	r7, r1
 800d26a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d26e:	9606      	str	r6, [sp, #24]
 800d270:	9307      	str	r3, [sp, #28]
 800d272:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d276:	4d57      	ldr	r5, [pc, #348]	@ (800d3d4 <_strtod_l+0xaf4>)
 800d278:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d27c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d27e:	401d      	ands	r5, r3
 800d280:	4b58      	ldr	r3, [pc, #352]	@ (800d3e4 <_strtod_l+0xb04>)
 800d282:	429d      	cmp	r5, r3
 800d284:	f040 80b2 	bne.w	800d3ec <_strtod_l+0xb0c>
 800d288:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d28a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d28e:	ec4b ab10 	vmov	d0, sl, fp
 800d292:	f7ff f9c9 	bl	800c628 <__ulp>
 800d296:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d29a:	ec51 0b10 	vmov	r0, r1, d0
 800d29e:	f7f3 f9e3 	bl	8000668 <__aeabi_dmul>
 800d2a2:	4652      	mov	r2, sl
 800d2a4:	465b      	mov	r3, fp
 800d2a6:	f7f3 f829 	bl	80002fc <__adddf3>
 800d2aa:	460b      	mov	r3, r1
 800d2ac:	4949      	ldr	r1, [pc, #292]	@ (800d3d4 <_strtod_l+0xaf4>)
 800d2ae:	4a4e      	ldr	r2, [pc, #312]	@ (800d3e8 <_strtod_l+0xb08>)
 800d2b0:	4019      	ands	r1, r3
 800d2b2:	4291      	cmp	r1, r2
 800d2b4:	4682      	mov	sl, r0
 800d2b6:	d942      	bls.n	800d33e <_strtod_l+0xa5e>
 800d2b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d2ba:	4b47      	ldr	r3, [pc, #284]	@ (800d3d8 <_strtod_l+0xaf8>)
 800d2bc:	429a      	cmp	r2, r3
 800d2be:	d103      	bne.n	800d2c8 <_strtod_l+0x9e8>
 800d2c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d2c2:	3301      	adds	r3, #1
 800d2c4:	f43f ad2b 	beq.w	800cd1e <_strtod_l+0x43e>
 800d2c8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d3d8 <_strtod_l+0xaf8>
 800d2cc:	f04f 3aff 	mov.w	sl, #4294967295
 800d2d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d2d2:	9805      	ldr	r0, [sp, #20]
 800d2d4:	f7fe fe74 	bl	800bfc0 <_Bfree>
 800d2d8:	9805      	ldr	r0, [sp, #20]
 800d2da:	4649      	mov	r1, r9
 800d2dc:	f7fe fe70 	bl	800bfc0 <_Bfree>
 800d2e0:	9805      	ldr	r0, [sp, #20]
 800d2e2:	4641      	mov	r1, r8
 800d2e4:	f7fe fe6c 	bl	800bfc0 <_Bfree>
 800d2e8:	9805      	ldr	r0, [sp, #20]
 800d2ea:	4621      	mov	r1, r4
 800d2ec:	f7fe fe68 	bl	800bfc0 <_Bfree>
 800d2f0:	e618      	b.n	800cf24 <_strtod_l+0x644>
 800d2f2:	f1ba 0f01 	cmp.w	sl, #1
 800d2f6:	d103      	bne.n	800d300 <_strtod_l+0xa20>
 800d2f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	f43f ada5 	beq.w	800ce4a <_strtod_l+0x56a>
 800d300:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d3b0 <_strtod_l+0xad0>
 800d304:	4f35      	ldr	r7, [pc, #212]	@ (800d3dc <_strtod_l+0xafc>)
 800d306:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d30a:	2600      	movs	r6, #0
 800d30c:	e7b1      	b.n	800d272 <_strtod_l+0x992>
 800d30e:	4f34      	ldr	r7, [pc, #208]	@ (800d3e0 <_strtod_l+0xb00>)
 800d310:	2600      	movs	r6, #0
 800d312:	e7aa      	b.n	800d26a <_strtod_l+0x98a>
 800d314:	4b32      	ldr	r3, [pc, #200]	@ (800d3e0 <_strtod_l+0xb00>)
 800d316:	4630      	mov	r0, r6
 800d318:	4639      	mov	r1, r7
 800d31a:	2200      	movs	r2, #0
 800d31c:	f7f3 f9a4 	bl	8000668 <__aeabi_dmul>
 800d320:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d322:	4606      	mov	r6, r0
 800d324:	460f      	mov	r7, r1
 800d326:	2b00      	cmp	r3, #0
 800d328:	d09f      	beq.n	800d26a <_strtod_l+0x98a>
 800d32a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d32e:	e7a0      	b.n	800d272 <_strtod_l+0x992>
 800d330:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d3b8 <_strtod_l+0xad8>
 800d334:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d338:	ec57 6b17 	vmov	r6, r7, d7
 800d33c:	e799      	b.n	800d272 <_strtod_l+0x992>
 800d33e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d342:	9b08      	ldr	r3, [sp, #32]
 800d344:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d1c1      	bne.n	800d2d0 <_strtod_l+0x9f0>
 800d34c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d350:	0d1b      	lsrs	r3, r3, #20
 800d352:	051b      	lsls	r3, r3, #20
 800d354:	429d      	cmp	r5, r3
 800d356:	d1bb      	bne.n	800d2d0 <_strtod_l+0x9f0>
 800d358:	4630      	mov	r0, r6
 800d35a:	4639      	mov	r1, r7
 800d35c:	f7f3 fce4 	bl	8000d28 <__aeabi_d2lz>
 800d360:	f7f3 f954 	bl	800060c <__aeabi_l2d>
 800d364:	4602      	mov	r2, r0
 800d366:	460b      	mov	r3, r1
 800d368:	4630      	mov	r0, r6
 800d36a:	4639      	mov	r1, r7
 800d36c:	f7f2 ffc4 	bl	80002f8 <__aeabi_dsub>
 800d370:	460b      	mov	r3, r1
 800d372:	4602      	mov	r2, r0
 800d374:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d378:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d37c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d37e:	ea46 060a 	orr.w	r6, r6, sl
 800d382:	431e      	orrs	r6, r3
 800d384:	d06f      	beq.n	800d466 <_strtod_l+0xb86>
 800d386:	a30e      	add	r3, pc, #56	@ (adr r3, 800d3c0 <_strtod_l+0xae0>)
 800d388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d38c:	f7f3 fbde 	bl	8000b4c <__aeabi_dcmplt>
 800d390:	2800      	cmp	r0, #0
 800d392:	f47f accf 	bne.w	800cd34 <_strtod_l+0x454>
 800d396:	a30c      	add	r3, pc, #48	@ (adr r3, 800d3c8 <_strtod_l+0xae8>)
 800d398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d39c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d3a0:	f7f3 fbf2 	bl	8000b88 <__aeabi_dcmpgt>
 800d3a4:	2800      	cmp	r0, #0
 800d3a6:	d093      	beq.n	800d2d0 <_strtod_l+0x9f0>
 800d3a8:	e4c4      	b.n	800cd34 <_strtod_l+0x454>
 800d3aa:	bf00      	nop
 800d3ac:	f3af 8000 	nop.w
 800d3b0:	00000000 	.word	0x00000000
 800d3b4:	bff00000 	.word	0xbff00000
 800d3b8:	00000000 	.word	0x00000000
 800d3bc:	3ff00000 	.word	0x3ff00000
 800d3c0:	94a03595 	.word	0x94a03595
 800d3c4:	3fdfffff 	.word	0x3fdfffff
 800d3c8:	35afe535 	.word	0x35afe535
 800d3cc:	3fe00000 	.word	0x3fe00000
 800d3d0:	000fffff 	.word	0x000fffff
 800d3d4:	7ff00000 	.word	0x7ff00000
 800d3d8:	7fefffff 	.word	0x7fefffff
 800d3dc:	3ff00000 	.word	0x3ff00000
 800d3e0:	3fe00000 	.word	0x3fe00000
 800d3e4:	7fe00000 	.word	0x7fe00000
 800d3e8:	7c9fffff 	.word	0x7c9fffff
 800d3ec:	9b08      	ldr	r3, [sp, #32]
 800d3ee:	b323      	cbz	r3, 800d43a <_strtod_l+0xb5a>
 800d3f0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d3f4:	d821      	bhi.n	800d43a <_strtod_l+0xb5a>
 800d3f6:	a328      	add	r3, pc, #160	@ (adr r3, 800d498 <_strtod_l+0xbb8>)
 800d3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3fc:	4630      	mov	r0, r6
 800d3fe:	4639      	mov	r1, r7
 800d400:	f7f3 fbae 	bl	8000b60 <__aeabi_dcmple>
 800d404:	b1a0      	cbz	r0, 800d430 <_strtod_l+0xb50>
 800d406:	4639      	mov	r1, r7
 800d408:	4630      	mov	r0, r6
 800d40a:	f7f3 fc05 	bl	8000c18 <__aeabi_d2uiz>
 800d40e:	2801      	cmp	r0, #1
 800d410:	bf38      	it	cc
 800d412:	2001      	movcc	r0, #1
 800d414:	f7f3 f8ae 	bl	8000574 <__aeabi_ui2d>
 800d418:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d41a:	4606      	mov	r6, r0
 800d41c:	460f      	mov	r7, r1
 800d41e:	b9fb      	cbnz	r3, 800d460 <_strtod_l+0xb80>
 800d420:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d424:	9014      	str	r0, [sp, #80]	@ 0x50
 800d426:	9315      	str	r3, [sp, #84]	@ 0x54
 800d428:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d42c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d430:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d432:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d436:	1b5b      	subs	r3, r3, r5
 800d438:	9311      	str	r3, [sp, #68]	@ 0x44
 800d43a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d43e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d442:	f7ff f8f1 	bl	800c628 <__ulp>
 800d446:	4650      	mov	r0, sl
 800d448:	ec53 2b10 	vmov	r2, r3, d0
 800d44c:	4659      	mov	r1, fp
 800d44e:	f7f3 f90b 	bl	8000668 <__aeabi_dmul>
 800d452:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d456:	f7f2 ff51 	bl	80002fc <__adddf3>
 800d45a:	4682      	mov	sl, r0
 800d45c:	468b      	mov	fp, r1
 800d45e:	e770      	b.n	800d342 <_strtod_l+0xa62>
 800d460:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d464:	e7e0      	b.n	800d428 <_strtod_l+0xb48>
 800d466:	a30e      	add	r3, pc, #56	@ (adr r3, 800d4a0 <_strtod_l+0xbc0>)
 800d468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d46c:	f7f3 fb6e 	bl	8000b4c <__aeabi_dcmplt>
 800d470:	e798      	b.n	800d3a4 <_strtod_l+0xac4>
 800d472:	2300      	movs	r3, #0
 800d474:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d476:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d478:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d47a:	6013      	str	r3, [r2, #0]
 800d47c:	f7ff ba6d 	b.w	800c95a <_strtod_l+0x7a>
 800d480:	2a65      	cmp	r2, #101	@ 0x65
 800d482:	f43f ab66 	beq.w	800cb52 <_strtod_l+0x272>
 800d486:	2a45      	cmp	r2, #69	@ 0x45
 800d488:	f43f ab63 	beq.w	800cb52 <_strtod_l+0x272>
 800d48c:	2301      	movs	r3, #1
 800d48e:	f7ff bb9e 	b.w	800cbce <_strtod_l+0x2ee>
 800d492:	bf00      	nop
 800d494:	f3af 8000 	nop.w
 800d498:	ffc00000 	.word	0xffc00000
 800d49c:	41dfffff 	.word	0x41dfffff
 800d4a0:	94a03595 	.word	0x94a03595
 800d4a4:	3fcfffff 	.word	0x3fcfffff

0800d4a8 <_strtod_r>:
 800d4a8:	4b01      	ldr	r3, [pc, #4]	@ (800d4b0 <_strtod_r+0x8>)
 800d4aa:	f7ff ba19 	b.w	800c8e0 <_strtod_l>
 800d4ae:	bf00      	nop
 800d4b0:	20000124 	.word	0x20000124

0800d4b4 <__ssputs_r>:
 800d4b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4b8:	688e      	ldr	r6, [r1, #8]
 800d4ba:	461f      	mov	r7, r3
 800d4bc:	42be      	cmp	r6, r7
 800d4be:	680b      	ldr	r3, [r1, #0]
 800d4c0:	4682      	mov	sl, r0
 800d4c2:	460c      	mov	r4, r1
 800d4c4:	4690      	mov	r8, r2
 800d4c6:	d82d      	bhi.n	800d524 <__ssputs_r+0x70>
 800d4c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d4cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d4d0:	d026      	beq.n	800d520 <__ssputs_r+0x6c>
 800d4d2:	6965      	ldr	r5, [r4, #20]
 800d4d4:	6909      	ldr	r1, [r1, #16]
 800d4d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d4da:	eba3 0901 	sub.w	r9, r3, r1
 800d4de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d4e2:	1c7b      	adds	r3, r7, #1
 800d4e4:	444b      	add	r3, r9
 800d4e6:	106d      	asrs	r5, r5, #1
 800d4e8:	429d      	cmp	r5, r3
 800d4ea:	bf38      	it	cc
 800d4ec:	461d      	movcc	r5, r3
 800d4ee:	0553      	lsls	r3, r2, #21
 800d4f0:	d527      	bpl.n	800d542 <__ssputs_r+0x8e>
 800d4f2:	4629      	mov	r1, r5
 800d4f4:	f7fe fc98 	bl	800be28 <_malloc_r>
 800d4f8:	4606      	mov	r6, r0
 800d4fa:	b360      	cbz	r0, 800d556 <__ssputs_r+0xa2>
 800d4fc:	6921      	ldr	r1, [r4, #16]
 800d4fe:	464a      	mov	r2, r9
 800d500:	f000 fa2a 	bl	800d958 <memcpy>
 800d504:	89a3      	ldrh	r3, [r4, #12]
 800d506:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d50a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d50e:	81a3      	strh	r3, [r4, #12]
 800d510:	6126      	str	r6, [r4, #16]
 800d512:	6165      	str	r5, [r4, #20]
 800d514:	444e      	add	r6, r9
 800d516:	eba5 0509 	sub.w	r5, r5, r9
 800d51a:	6026      	str	r6, [r4, #0]
 800d51c:	60a5      	str	r5, [r4, #8]
 800d51e:	463e      	mov	r6, r7
 800d520:	42be      	cmp	r6, r7
 800d522:	d900      	bls.n	800d526 <__ssputs_r+0x72>
 800d524:	463e      	mov	r6, r7
 800d526:	6820      	ldr	r0, [r4, #0]
 800d528:	4632      	mov	r2, r6
 800d52a:	4641      	mov	r1, r8
 800d52c:	f000 f9d8 	bl	800d8e0 <memmove>
 800d530:	68a3      	ldr	r3, [r4, #8]
 800d532:	1b9b      	subs	r3, r3, r6
 800d534:	60a3      	str	r3, [r4, #8]
 800d536:	6823      	ldr	r3, [r4, #0]
 800d538:	4433      	add	r3, r6
 800d53a:	6023      	str	r3, [r4, #0]
 800d53c:	2000      	movs	r0, #0
 800d53e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d542:	462a      	mov	r2, r5
 800d544:	f000 fd85 	bl	800e052 <_realloc_r>
 800d548:	4606      	mov	r6, r0
 800d54a:	2800      	cmp	r0, #0
 800d54c:	d1e0      	bne.n	800d510 <__ssputs_r+0x5c>
 800d54e:	6921      	ldr	r1, [r4, #16]
 800d550:	4650      	mov	r0, sl
 800d552:	f7fe fbf5 	bl	800bd40 <_free_r>
 800d556:	230c      	movs	r3, #12
 800d558:	f8ca 3000 	str.w	r3, [sl]
 800d55c:	89a3      	ldrh	r3, [r4, #12]
 800d55e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d562:	81a3      	strh	r3, [r4, #12]
 800d564:	f04f 30ff 	mov.w	r0, #4294967295
 800d568:	e7e9      	b.n	800d53e <__ssputs_r+0x8a>
	...

0800d56c <_svfiprintf_r>:
 800d56c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d570:	4698      	mov	r8, r3
 800d572:	898b      	ldrh	r3, [r1, #12]
 800d574:	061b      	lsls	r3, r3, #24
 800d576:	b09d      	sub	sp, #116	@ 0x74
 800d578:	4607      	mov	r7, r0
 800d57a:	460d      	mov	r5, r1
 800d57c:	4614      	mov	r4, r2
 800d57e:	d510      	bpl.n	800d5a2 <_svfiprintf_r+0x36>
 800d580:	690b      	ldr	r3, [r1, #16]
 800d582:	b973      	cbnz	r3, 800d5a2 <_svfiprintf_r+0x36>
 800d584:	2140      	movs	r1, #64	@ 0x40
 800d586:	f7fe fc4f 	bl	800be28 <_malloc_r>
 800d58a:	6028      	str	r0, [r5, #0]
 800d58c:	6128      	str	r0, [r5, #16]
 800d58e:	b930      	cbnz	r0, 800d59e <_svfiprintf_r+0x32>
 800d590:	230c      	movs	r3, #12
 800d592:	603b      	str	r3, [r7, #0]
 800d594:	f04f 30ff 	mov.w	r0, #4294967295
 800d598:	b01d      	add	sp, #116	@ 0x74
 800d59a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d59e:	2340      	movs	r3, #64	@ 0x40
 800d5a0:	616b      	str	r3, [r5, #20]
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5a6:	2320      	movs	r3, #32
 800d5a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d5ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5b0:	2330      	movs	r3, #48	@ 0x30
 800d5b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d750 <_svfiprintf_r+0x1e4>
 800d5b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d5ba:	f04f 0901 	mov.w	r9, #1
 800d5be:	4623      	mov	r3, r4
 800d5c0:	469a      	mov	sl, r3
 800d5c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5c6:	b10a      	cbz	r2, 800d5cc <_svfiprintf_r+0x60>
 800d5c8:	2a25      	cmp	r2, #37	@ 0x25
 800d5ca:	d1f9      	bne.n	800d5c0 <_svfiprintf_r+0x54>
 800d5cc:	ebba 0b04 	subs.w	fp, sl, r4
 800d5d0:	d00b      	beq.n	800d5ea <_svfiprintf_r+0x7e>
 800d5d2:	465b      	mov	r3, fp
 800d5d4:	4622      	mov	r2, r4
 800d5d6:	4629      	mov	r1, r5
 800d5d8:	4638      	mov	r0, r7
 800d5da:	f7ff ff6b 	bl	800d4b4 <__ssputs_r>
 800d5de:	3001      	adds	r0, #1
 800d5e0:	f000 80a7 	beq.w	800d732 <_svfiprintf_r+0x1c6>
 800d5e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d5e6:	445a      	add	r2, fp
 800d5e8:	9209      	str	r2, [sp, #36]	@ 0x24
 800d5ea:	f89a 3000 	ldrb.w	r3, [sl]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	f000 809f 	beq.w	800d732 <_svfiprintf_r+0x1c6>
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	f04f 32ff 	mov.w	r2, #4294967295
 800d5fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d5fe:	f10a 0a01 	add.w	sl, sl, #1
 800d602:	9304      	str	r3, [sp, #16]
 800d604:	9307      	str	r3, [sp, #28]
 800d606:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d60a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d60c:	4654      	mov	r4, sl
 800d60e:	2205      	movs	r2, #5
 800d610:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d614:	484e      	ldr	r0, [pc, #312]	@ (800d750 <_svfiprintf_r+0x1e4>)
 800d616:	f7f2 fe13 	bl	8000240 <memchr>
 800d61a:	9a04      	ldr	r2, [sp, #16]
 800d61c:	b9d8      	cbnz	r0, 800d656 <_svfiprintf_r+0xea>
 800d61e:	06d0      	lsls	r0, r2, #27
 800d620:	bf44      	itt	mi
 800d622:	2320      	movmi	r3, #32
 800d624:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d628:	0711      	lsls	r1, r2, #28
 800d62a:	bf44      	itt	mi
 800d62c:	232b      	movmi	r3, #43	@ 0x2b
 800d62e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d632:	f89a 3000 	ldrb.w	r3, [sl]
 800d636:	2b2a      	cmp	r3, #42	@ 0x2a
 800d638:	d015      	beq.n	800d666 <_svfiprintf_r+0xfa>
 800d63a:	9a07      	ldr	r2, [sp, #28]
 800d63c:	4654      	mov	r4, sl
 800d63e:	2000      	movs	r0, #0
 800d640:	f04f 0c0a 	mov.w	ip, #10
 800d644:	4621      	mov	r1, r4
 800d646:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d64a:	3b30      	subs	r3, #48	@ 0x30
 800d64c:	2b09      	cmp	r3, #9
 800d64e:	d94b      	bls.n	800d6e8 <_svfiprintf_r+0x17c>
 800d650:	b1b0      	cbz	r0, 800d680 <_svfiprintf_r+0x114>
 800d652:	9207      	str	r2, [sp, #28]
 800d654:	e014      	b.n	800d680 <_svfiprintf_r+0x114>
 800d656:	eba0 0308 	sub.w	r3, r0, r8
 800d65a:	fa09 f303 	lsl.w	r3, r9, r3
 800d65e:	4313      	orrs	r3, r2
 800d660:	9304      	str	r3, [sp, #16]
 800d662:	46a2      	mov	sl, r4
 800d664:	e7d2      	b.n	800d60c <_svfiprintf_r+0xa0>
 800d666:	9b03      	ldr	r3, [sp, #12]
 800d668:	1d19      	adds	r1, r3, #4
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	9103      	str	r1, [sp, #12]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	bfbb      	ittet	lt
 800d672:	425b      	neglt	r3, r3
 800d674:	f042 0202 	orrlt.w	r2, r2, #2
 800d678:	9307      	strge	r3, [sp, #28]
 800d67a:	9307      	strlt	r3, [sp, #28]
 800d67c:	bfb8      	it	lt
 800d67e:	9204      	strlt	r2, [sp, #16]
 800d680:	7823      	ldrb	r3, [r4, #0]
 800d682:	2b2e      	cmp	r3, #46	@ 0x2e
 800d684:	d10a      	bne.n	800d69c <_svfiprintf_r+0x130>
 800d686:	7863      	ldrb	r3, [r4, #1]
 800d688:	2b2a      	cmp	r3, #42	@ 0x2a
 800d68a:	d132      	bne.n	800d6f2 <_svfiprintf_r+0x186>
 800d68c:	9b03      	ldr	r3, [sp, #12]
 800d68e:	1d1a      	adds	r2, r3, #4
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	9203      	str	r2, [sp, #12]
 800d694:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d698:	3402      	adds	r4, #2
 800d69a:	9305      	str	r3, [sp, #20]
 800d69c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d760 <_svfiprintf_r+0x1f4>
 800d6a0:	7821      	ldrb	r1, [r4, #0]
 800d6a2:	2203      	movs	r2, #3
 800d6a4:	4650      	mov	r0, sl
 800d6a6:	f7f2 fdcb 	bl	8000240 <memchr>
 800d6aa:	b138      	cbz	r0, 800d6bc <_svfiprintf_r+0x150>
 800d6ac:	9b04      	ldr	r3, [sp, #16]
 800d6ae:	eba0 000a 	sub.w	r0, r0, sl
 800d6b2:	2240      	movs	r2, #64	@ 0x40
 800d6b4:	4082      	lsls	r2, r0
 800d6b6:	4313      	orrs	r3, r2
 800d6b8:	3401      	adds	r4, #1
 800d6ba:	9304      	str	r3, [sp, #16]
 800d6bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6c0:	4824      	ldr	r0, [pc, #144]	@ (800d754 <_svfiprintf_r+0x1e8>)
 800d6c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d6c6:	2206      	movs	r2, #6
 800d6c8:	f7f2 fdba 	bl	8000240 <memchr>
 800d6cc:	2800      	cmp	r0, #0
 800d6ce:	d036      	beq.n	800d73e <_svfiprintf_r+0x1d2>
 800d6d0:	4b21      	ldr	r3, [pc, #132]	@ (800d758 <_svfiprintf_r+0x1ec>)
 800d6d2:	bb1b      	cbnz	r3, 800d71c <_svfiprintf_r+0x1b0>
 800d6d4:	9b03      	ldr	r3, [sp, #12]
 800d6d6:	3307      	adds	r3, #7
 800d6d8:	f023 0307 	bic.w	r3, r3, #7
 800d6dc:	3308      	adds	r3, #8
 800d6de:	9303      	str	r3, [sp, #12]
 800d6e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6e2:	4433      	add	r3, r6
 800d6e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6e6:	e76a      	b.n	800d5be <_svfiprintf_r+0x52>
 800d6e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d6ec:	460c      	mov	r4, r1
 800d6ee:	2001      	movs	r0, #1
 800d6f0:	e7a8      	b.n	800d644 <_svfiprintf_r+0xd8>
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	3401      	adds	r4, #1
 800d6f6:	9305      	str	r3, [sp, #20]
 800d6f8:	4619      	mov	r1, r3
 800d6fa:	f04f 0c0a 	mov.w	ip, #10
 800d6fe:	4620      	mov	r0, r4
 800d700:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d704:	3a30      	subs	r2, #48	@ 0x30
 800d706:	2a09      	cmp	r2, #9
 800d708:	d903      	bls.n	800d712 <_svfiprintf_r+0x1a6>
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d0c6      	beq.n	800d69c <_svfiprintf_r+0x130>
 800d70e:	9105      	str	r1, [sp, #20]
 800d710:	e7c4      	b.n	800d69c <_svfiprintf_r+0x130>
 800d712:	fb0c 2101 	mla	r1, ip, r1, r2
 800d716:	4604      	mov	r4, r0
 800d718:	2301      	movs	r3, #1
 800d71a:	e7f0      	b.n	800d6fe <_svfiprintf_r+0x192>
 800d71c:	ab03      	add	r3, sp, #12
 800d71e:	9300      	str	r3, [sp, #0]
 800d720:	462a      	mov	r2, r5
 800d722:	4b0e      	ldr	r3, [pc, #56]	@ (800d75c <_svfiprintf_r+0x1f0>)
 800d724:	a904      	add	r1, sp, #16
 800d726:	4638      	mov	r0, r7
 800d728:	f7fc fc98 	bl	800a05c <_printf_float>
 800d72c:	1c42      	adds	r2, r0, #1
 800d72e:	4606      	mov	r6, r0
 800d730:	d1d6      	bne.n	800d6e0 <_svfiprintf_r+0x174>
 800d732:	89ab      	ldrh	r3, [r5, #12]
 800d734:	065b      	lsls	r3, r3, #25
 800d736:	f53f af2d 	bmi.w	800d594 <_svfiprintf_r+0x28>
 800d73a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d73c:	e72c      	b.n	800d598 <_svfiprintf_r+0x2c>
 800d73e:	ab03      	add	r3, sp, #12
 800d740:	9300      	str	r3, [sp, #0]
 800d742:	462a      	mov	r2, r5
 800d744:	4b05      	ldr	r3, [pc, #20]	@ (800d75c <_svfiprintf_r+0x1f0>)
 800d746:	a904      	add	r1, sp, #16
 800d748:	4638      	mov	r0, r7
 800d74a:	f7fc ff1f 	bl	800a58c <_printf_i>
 800d74e:	e7ed      	b.n	800d72c <_svfiprintf_r+0x1c0>
 800d750:	0800eb40 	.word	0x0800eb40
 800d754:	0800eb4a 	.word	0x0800eb4a
 800d758:	0800a05d 	.word	0x0800a05d
 800d75c:	0800d4b5 	.word	0x0800d4b5
 800d760:	0800eb46 	.word	0x0800eb46

0800d764 <__sflush_r>:
 800d764:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d76c:	0716      	lsls	r6, r2, #28
 800d76e:	4605      	mov	r5, r0
 800d770:	460c      	mov	r4, r1
 800d772:	d454      	bmi.n	800d81e <__sflush_r+0xba>
 800d774:	684b      	ldr	r3, [r1, #4]
 800d776:	2b00      	cmp	r3, #0
 800d778:	dc02      	bgt.n	800d780 <__sflush_r+0x1c>
 800d77a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	dd48      	ble.n	800d812 <__sflush_r+0xae>
 800d780:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d782:	2e00      	cmp	r6, #0
 800d784:	d045      	beq.n	800d812 <__sflush_r+0xae>
 800d786:	2300      	movs	r3, #0
 800d788:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d78c:	682f      	ldr	r7, [r5, #0]
 800d78e:	6a21      	ldr	r1, [r4, #32]
 800d790:	602b      	str	r3, [r5, #0]
 800d792:	d030      	beq.n	800d7f6 <__sflush_r+0x92>
 800d794:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d796:	89a3      	ldrh	r3, [r4, #12]
 800d798:	0759      	lsls	r1, r3, #29
 800d79a:	d505      	bpl.n	800d7a8 <__sflush_r+0x44>
 800d79c:	6863      	ldr	r3, [r4, #4]
 800d79e:	1ad2      	subs	r2, r2, r3
 800d7a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d7a2:	b10b      	cbz	r3, 800d7a8 <__sflush_r+0x44>
 800d7a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d7a6:	1ad2      	subs	r2, r2, r3
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d7ac:	6a21      	ldr	r1, [r4, #32]
 800d7ae:	4628      	mov	r0, r5
 800d7b0:	47b0      	blx	r6
 800d7b2:	1c43      	adds	r3, r0, #1
 800d7b4:	89a3      	ldrh	r3, [r4, #12]
 800d7b6:	d106      	bne.n	800d7c6 <__sflush_r+0x62>
 800d7b8:	6829      	ldr	r1, [r5, #0]
 800d7ba:	291d      	cmp	r1, #29
 800d7bc:	d82b      	bhi.n	800d816 <__sflush_r+0xb2>
 800d7be:	4a2a      	ldr	r2, [pc, #168]	@ (800d868 <__sflush_r+0x104>)
 800d7c0:	410a      	asrs	r2, r1
 800d7c2:	07d6      	lsls	r6, r2, #31
 800d7c4:	d427      	bmi.n	800d816 <__sflush_r+0xb2>
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	6062      	str	r2, [r4, #4]
 800d7ca:	04d9      	lsls	r1, r3, #19
 800d7cc:	6922      	ldr	r2, [r4, #16]
 800d7ce:	6022      	str	r2, [r4, #0]
 800d7d0:	d504      	bpl.n	800d7dc <__sflush_r+0x78>
 800d7d2:	1c42      	adds	r2, r0, #1
 800d7d4:	d101      	bne.n	800d7da <__sflush_r+0x76>
 800d7d6:	682b      	ldr	r3, [r5, #0]
 800d7d8:	b903      	cbnz	r3, 800d7dc <__sflush_r+0x78>
 800d7da:	6560      	str	r0, [r4, #84]	@ 0x54
 800d7dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d7de:	602f      	str	r7, [r5, #0]
 800d7e0:	b1b9      	cbz	r1, 800d812 <__sflush_r+0xae>
 800d7e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d7e6:	4299      	cmp	r1, r3
 800d7e8:	d002      	beq.n	800d7f0 <__sflush_r+0x8c>
 800d7ea:	4628      	mov	r0, r5
 800d7ec:	f7fe faa8 	bl	800bd40 <_free_r>
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	6363      	str	r3, [r4, #52]	@ 0x34
 800d7f4:	e00d      	b.n	800d812 <__sflush_r+0xae>
 800d7f6:	2301      	movs	r3, #1
 800d7f8:	4628      	mov	r0, r5
 800d7fa:	47b0      	blx	r6
 800d7fc:	4602      	mov	r2, r0
 800d7fe:	1c50      	adds	r0, r2, #1
 800d800:	d1c9      	bne.n	800d796 <__sflush_r+0x32>
 800d802:	682b      	ldr	r3, [r5, #0]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d0c6      	beq.n	800d796 <__sflush_r+0x32>
 800d808:	2b1d      	cmp	r3, #29
 800d80a:	d001      	beq.n	800d810 <__sflush_r+0xac>
 800d80c:	2b16      	cmp	r3, #22
 800d80e:	d11e      	bne.n	800d84e <__sflush_r+0xea>
 800d810:	602f      	str	r7, [r5, #0]
 800d812:	2000      	movs	r0, #0
 800d814:	e022      	b.n	800d85c <__sflush_r+0xf8>
 800d816:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d81a:	b21b      	sxth	r3, r3
 800d81c:	e01b      	b.n	800d856 <__sflush_r+0xf2>
 800d81e:	690f      	ldr	r7, [r1, #16]
 800d820:	2f00      	cmp	r7, #0
 800d822:	d0f6      	beq.n	800d812 <__sflush_r+0xae>
 800d824:	0793      	lsls	r3, r2, #30
 800d826:	680e      	ldr	r6, [r1, #0]
 800d828:	bf08      	it	eq
 800d82a:	694b      	ldreq	r3, [r1, #20]
 800d82c:	600f      	str	r7, [r1, #0]
 800d82e:	bf18      	it	ne
 800d830:	2300      	movne	r3, #0
 800d832:	eba6 0807 	sub.w	r8, r6, r7
 800d836:	608b      	str	r3, [r1, #8]
 800d838:	f1b8 0f00 	cmp.w	r8, #0
 800d83c:	dde9      	ble.n	800d812 <__sflush_r+0xae>
 800d83e:	6a21      	ldr	r1, [r4, #32]
 800d840:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d842:	4643      	mov	r3, r8
 800d844:	463a      	mov	r2, r7
 800d846:	4628      	mov	r0, r5
 800d848:	47b0      	blx	r6
 800d84a:	2800      	cmp	r0, #0
 800d84c:	dc08      	bgt.n	800d860 <__sflush_r+0xfc>
 800d84e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d852:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d856:	81a3      	strh	r3, [r4, #12]
 800d858:	f04f 30ff 	mov.w	r0, #4294967295
 800d85c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d860:	4407      	add	r7, r0
 800d862:	eba8 0800 	sub.w	r8, r8, r0
 800d866:	e7e7      	b.n	800d838 <__sflush_r+0xd4>
 800d868:	dfbffffe 	.word	0xdfbffffe

0800d86c <_fflush_r>:
 800d86c:	b538      	push	{r3, r4, r5, lr}
 800d86e:	690b      	ldr	r3, [r1, #16]
 800d870:	4605      	mov	r5, r0
 800d872:	460c      	mov	r4, r1
 800d874:	b913      	cbnz	r3, 800d87c <_fflush_r+0x10>
 800d876:	2500      	movs	r5, #0
 800d878:	4628      	mov	r0, r5
 800d87a:	bd38      	pop	{r3, r4, r5, pc}
 800d87c:	b118      	cbz	r0, 800d886 <_fflush_r+0x1a>
 800d87e:	6a03      	ldr	r3, [r0, #32]
 800d880:	b90b      	cbnz	r3, 800d886 <_fflush_r+0x1a>
 800d882:	f7fd fa43 	bl	800ad0c <__sinit>
 800d886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d0f3      	beq.n	800d876 <_fflush_r+0xa>
 800d88e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d890:	07d0      	lsls	r0, r2, #31
 800d892:	d404      	bmi.n	800d89e <_fflush_r+0x32>
 800d894:	0599      	lsls	r1, r3, #22
 800d896:	d402      	bmi.n	800d89e <_fflush_r+0x32>
 800d898:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d89a:	f7fd fbde 	bl	800b05a <__retarget_lock_acquire_recursive>
 800d89e:	4628      	mov	r0, r5
 800d8a0:	4621      	mov	r1, r4
 800d8a2:	f7ff ff5f 	bl	800d764 <__sflush_r>
 800d8a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d8a8:	07da      	lsls	r2, r3, #31
 800d8aa:	4605      	mov	r5, r0
 800d8ac:	d4e4      	bmi.n	800d878 <_fflush_r+0xc>
 800d8ae:	89a3      	ldrh	r3, [r4, #12]
 800d8b0:	059b      	lsls	r3, r3, #22
 800d8b2:	d4e1      	bmi.n	800d878 <_fflush_r+0xc>
 800d8b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d8b6:	f7fd fbd1 	bl	800b05c <__retarget_lock_release_recursive>
 800d8ba:	e7dd      	b.n	800d878 <_fflush_r+0xc>

0800d8bc <fiprintf>:
 800d8bc:	b40e      	push	{r1, r2, r3}
 800d8be:	b503      	push	{r0, r1, lr}
 800d8c0:	4601      	mov	r1, r0
 800d8c2:	ab03      	add	r3, sp, #12
 800d8c4:	4805      	ldr	r0, [pc, #20]	@ (800d8dc <fiprintf+0x20>)
 800d8c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8ca:	6800      	ldr	r0, [r0, #0]
 800d8cc:	9301      	str	r3, [sp, #4]
 800d8ce:	f000 fc25 	bl	800e11c <_vfiprintf_r>
 800d8d2:	b002      	add	sp, #8
 800d8d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d8d8:	b003      	add	sp, #12
 800d8da:	4770      	bx	lr
 800d8dc:	200000d4 	.word	0x200000d4

0800d8e0 <memmove>:
 800d8e0:	4288      	cmp	r0, r1
 800d8e2:	b510      	push	{r4, lr}
 800d8e4:	eb01 0402 	add.w	r4, r1, r2
 800d8e8:	d902      	bls.n	800d8f0 <memmove+0x10>
 800d8ea:	4284      	cmp	r4, r0
 800d8ec:	4623      	mov	r3, r4
 800d8ee:	d807      	bhi.n	800d900 <memmove+0x20>
 800d8f0:	1e43      	subs	r3, r0, #1
 800d8f2:	42a1      	cmp	r1, r4
 800d8f4:	d008      	beq.n	800d908 <memmove+0x28>
 800d8f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d8fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d8fe:	e7f8      	b.n	800d8f2 <memmove+0x12>
 800d900:	4402      	add	r2, r0
 800d902:	4601      	mov	r1, r0
 800d904:	428a      	cmp	r2, r1
 800d906:	d100      	bne.n	800d90a <memmove+0x2a>
 800d908:	bd10      	pop	{r4, pc}
 800d90a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d90e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d912:	e7f7      	b.n	800d904 <memmove+0x24>

0800d914 <strncmp>:
 800d914:	b510      	push	{r4, lr}
 800d916:	b16a      	cbz	r2, 800d934 <strncmp+0x20>
 800d918:	3901      	subs	r1, #1
 800d91a:	1884      	adds	r4, r0, r2
 800d91c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d920:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d924:	429a      	cmp	r2, r3
 800d926:	d103      	bne.n	800d930 <strncmp+0x1c>
 800d928:	42a0      	cmp	r0, r4
 800d92a:	d001      	beq.n	800d930 <strncmp+0x1c>
 800d92c:	2a00      	cmp	r2, #0
 800d92e:	d1f5      	bne.n	800d91c <strncmp+0x8>
 800d930:	1ad0      	subs	r0, r2, r3
 800d932:	bd10      	pop	{r4, pc}
 800d934:	4610      	mov	r0, r2
 800d936:	e7fc      	b.n	800d932 <strncmp+0x1e>

0800d938 <_sbrk_r>:
 800d938:	b538      	push	{r3, r4, r5, lr}
 800d93a:	4d06      	ldr	r5, [pc, #24]	@ (800d954 <_sbrk_r+0x1c>)
 800d93c:	2300      	movs	r3, #0
 800d93e:	4604      	mov	r4, r0
 800d940:	4608      	mov	r0, r1
 800d942:	602b      	str	r3, [r5, #0]
 800d944:	f7f4 f8ae 	bl	8001aa4 <_sbrk>
 800d948:	1c43      	adds	r3, r0, #1
 800d94a:	d102      	bne.n	800d952 <_sbrk_r+0x1a>
 800d94c:	682b      	ldr	r3, [r5, #0]
 800d94e:	b103      	cbz	r3, 800d952 <_sbrk_r+0x1a>
 800d950:	6023      	str	r3, [r4, #0]
 800d952:	bd38      	pop	{r3, r4, r5, pc}
 800d954:	200007f8 	.word	0x200007f8

0800d958 <memcpy>:
 800d958:	440a      	add	r2, r1
 800d95a:	4291      	cmp	r1, r2
 800d95c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d960:	d100      	bne.n	800d964 <memcpy+0xc>
 800d962:	4770      	bx	lr
 800d964:	b510      	push	{r4, lr}
 800d966:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d96a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d96e:	4291      	cmp	r1, r2
 800d970:	d1f9      	bne.n	800d966 <memcpy+0xe>
 800d972:	bd10      	pop	{r4, pc}
 800d974:	0000      	movs	r0, r0
	...

0800d978 <nan>:
 800d978:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d980 <nan+0x8>
 800d97c:	4770      	bx	lr
 800d97e:	bf00      	nop
 800d980:	00000000 	.word	0x00000000
 800d984:	7ff80000 	.word	0x7ff80000

0800d988 <abort>:
 800d988:	b508      	push	{r3, lr}
 800d98a:	2006      	movs	r0, #6
 800d98c:	f000 fd9a 	bl	800e4c4 <raise>
 800d990:	2001      	movs	r0, #1
 800d992:	f7f4 f80f 	bl	80019b4 <_exit>

0800d996 <_calloc_r>:
 800d996:	b570      	push	{r4, r5, r6, lr}
 800d998:	fba1 5402 	umull	r5, r4, r1, r2
 800d99c:	b93c      	cbnz	r4, 800d9ae <_calloc_r+0x18>
 800d99e:	4629      	mov	r1, r5
 800d9a0:	f7fe fa42 	bl	800be28 <_malloc_r>
 800d9a4:	4606      	mov	r6, r0
 800d9a6:	b928      	cbnz	r0, 800d9b4 <_calloc_r+0x1e>
 800d9a8:	2600      	movs	r6, #0
 800d9aa:	4630      	mov	r0, r6
 800d9ac:	bd70      	pop	{r4, r5, r6, pc}
 800d9ae:	220c      	movs	r2, #12
 800d9b0:	6002      	str	r2, [r0, #0]
 800d9b2:	e7f9      	b.n	800d9a8 <_calloc_r+0x12>
 800d9b4:	462a      	mov	r2, r5
 800d9b6:	4621      	mov	r1, r4
 800d9b8:	f7fd fa75 	bl	800aea6 <memset>
 800d9bc:	e7f5      	b.n	800d9aa <_calloc_r+0x14>

0800d9be <rshift>:
 800d9be:	6903      	ldr	r3, [r0, #16]
 800d9c0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d9c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d9c8:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d9cc:	f100 0414 	add.w	r4, r0, #20
 800d9d0:	dd45      	ble.n	800da5e <rshift+0xa0>
 800d9d2:	f011 011f 	ands.w	r1, r1, #31
 800d9d6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d9da:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d9de:	d10c      	bne.n	800d9fa <rshift+0x3c>
 800d9e0:	f100 0710 	add.w	r7, r0, #16
 800d9e4:	4629      	mov	r1, r5
 800d9e6:	42b1      	cmp	r1, r6
 800d9e8:	d334      	bcc.n	800da54 <rshift+0x96>
 800d9ea:	1a9b      	subs	r3, r3, r2
 800d9ec:	009b      	lsls	r3, r3, #2
 800d9ee:	1eea      	subs	r2, r5, #3
 800d9f0:	4296      	cmp	r6, r2
 800d9f2:	bf38      	it	cc
 800d9f4:	2300      	movcc	r3, #0
 800d9f6:	4423      	add	r3, r4
 800d9f8:	e015      	b.n	800da26 <rshift+0x68>
 800d9fa:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d9fe:	f1c1 0820 	rsb	r8, r1, #32
 800da02:	40cf      	lsrs	r7, r1
 800da04:	f105 0e04 	add.w	lr, r5, #4
 800da08:	46a1      	mov	r9, r4
 800da0a:	4576      	cmp	r6, lr
 800da0c:	46f4      	mov	ip, lr
 800da0e:	d815      	bhi.n	800da3c <rshift+0x7e>
 800da10:	1a9a      	subs	r2, r3, r2
 800da12:	0092      	lsls	r2, r2, #2
 800da14:	3a04      	subs	r2, #4
 800da16:	3501      	adds	r5, #1
 800da18:	42ae      	cmp	r6, r5
 800da1a:	bf38      	it	cc
 800da1c:	2200      	movcc	r2, #0
 800da1e:	18a3      	adds	r3, r4, r2
 800da20:	50a7      	str	r7, [r4, r2]
 800da22:	b107      	cbz	r7, 800da26 <rshift+0x68>
 800da24:	3304      	adds	r3, #4
 800da26:	1b1a      	subs	r2, r3, r4
 800da28:	42a3      	cmp	r3, r4
 800da2a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800da2e:	bf08      	it	eq
 800da30:	2300      	moveq	r3, #0
 800da32:	6102      	str	r2, [r0, #16]
 800da34:	bf08      	it	eq
 800da36:	6143      	streq	r3, [r0, #20]
 800da38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da3c:	f8dc c000 	ldr.w	ip, [ip]
 800da40:	fa0c fc08 	lsl.w	ip, ip, r8
 800da44:	ea4c 0707 	orr.w	r7, ip, r7
 800da48:	f849 7b04 	str.w	r7, [r9], #4
 800da4c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800da50:	40cf      	lsrs	r7, r1
 800da52:	e7da      	b.n	800da0a <rshift+0x4c>
 800da54:	f851 cb04 	ldr.w	ip, [r1], #4
 800da58:	f847 cf04 	str.w	ip, [r7, #4]!
 800da5c:	e7c3      	b.n	800d9e6 <rshift+0x28>
 800da5e:	4623      	mov	r3, r4
 800da60:	e7e1      	b.n	800da26 <rshift+0x68>

0800da62 <__hexdig_fun>:
 800da62:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800da66:	2b09      	cmp	r3, #9
 800da68:	d802      	bhi.n	800da70 <__hexdig_fun+0xe>
 800da6a:	3820      	subs	r0, #32
 800da6c:	b2c0      	uxtb	r0, r0
 800da6e:	4770      	bx	lr
 800da70:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800da74:	2b05      	cmp	r3, #5
 800da76:	d801      	bhi.n	800da7c <__hexdig_fun+0x1a>
 800da78:	3847      	subs	r0, #71	@ 0x47
 800da7a:	e7f7      	b.n	800da6c <__hexdig_fun+0xa>
 800da7c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800da80:	2b05      	cmp	r3, #5
 800da82:	d801      	bhi.n	800da88 <__hexdig_fun+0x26>
 800da84:	3827      	subs	r0, #39	@ 0x27
 800da86:	e7f1      	b.n	800da6c <__hexdig_fun+0xa>
 800da88:	2000      	movs	r0, #0
 800da8a:	4770      	bx	lr

0800da8c <__gethex>:
 800da8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da90:	b085      	sub	sp, #20
 800da92:	468a      	mov	sl, r1
 800da94:	9302      	str	r3, [sp, #8]
 800da96:	680b      	ldr	r3, [r1, #0]
 800da98:	9001      	str	r0, [sp, #4]
 800da9a:	4690      	mov	r8, r2
 800da9c:	1c9c      	adds	r4, r3, #2
 800da9e:	46a1      	mov	r9, r4
 800daa0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800daa4:	2830      	cmp	r0, #48	@ 0x30
 800daa6:	d0fa      	beq.n	800da9e <__gethex+0x12>
 800daa8:	eba9 0303 	sub.w	r3, r9, r3
 800daac:	f1a3 0b02 	sub.w	fp, r3, #2
 800dab0:	f7ff ffd7 	bl	800da62 <__hexdig_fun>
 800dab4:	4605      	mov	r5, r0
 800dab6:	2800      	cmp	r0, #0
 800dab8:	d168      	bne.n	800db8c <__gethex+0x100>
 800daba:	49a0      	ldr	r1, [pc, #640]	@ (800dd3c <__gethex+0x2b0>)
 800dabc:	2201      	movs	r2, #1
 800dabe:	4648      	mov	r0, r9
 800dac0:	f7ff ff28 	bl	800d914 <strncmp>
 800dac4:	4607      	mov	r7, r0
 800dac6:	2800      	cmp	r0, #0
 800dac8:	d167      	bne.n	800db9a <__gethex+0x10e>
 800daca:	f899 0001 	ldrb.w	r0, [r9, #1]
 800dace:	4626      	mov	r6, r4
 800dad0:	f7ff ffc7 	bl	800da62 <__hexdig_fun>
 800dad4:	2800      	cmp	r0, #0
 800dad6:	d062      	beq.n	800db9e <__gethex+0x112>
 800dad8:	4623      	mov	r3, r4
 800dada:	7818      	ldrb	r0, [r3, #0]
 800dadc:	2830      	cmp	r0, #48	@ 0x30
 800dade:	4699      	mov	r9, r3
 800dae0:	f103 0301 	add.w	r3, r3, #1
 800dae4:	d0f9      	beq.n	800dada <__gethex+0x4e>
 800dae6:	f7ff ffbc 	bl	800da62 <__hexdig_fun>
 800daea:	fab0 f580 	clz	r5, r0
 800daee:	096d      	lsrs	r5, r5, #5
 800daf0:	f04f 0b01 	mov.w	fp, #1
 800daf4:	464a      	mov	r2, r9
 800daf6:	4616      	mov	r6, r2
 800daf8:	3201      	adds	r2, #1
 800dafa:	7830      	ldrb	r0, [r6, #0]
 800dafc:	f7ff ffb1 	bl	800da62 <__hexdig_fun>
 800db00:	2800      	cmp	r0, #0
 800db02:	d1f8      	bne.n	800daf6 <__gethex+0x6a>
 800db04:	498d      	ldr	r1, [pc, #564]	@ (800dd3c <__gethex+0x2b0>)
 800db06:	2201      	movs	r2, #1
 800db08:	4630      	mov	r0, r6
 800db0a:	f7ff ff03 	bl	800d914 <strncmp>
 800db0e:	2800      	cmp	r0, #0
 800db10:	d13f      	bne.n	800db92 <__gethex+0x106>
 800db12:	b944      	cbnz	r4, 800db26 <__gethex+0x9a>
 800db14:	1c74      	adds	r4, r6, #1
 800db16:	4622      	mov	r2, r4
 800db18:	4616      	mov	r6, r2
 800db1a:	3201      	adds	r2, #1
 800db1c:	7830      	ldrb	r0, [r6, #0]
 800db1e:	f7ff ffa0 	bl	800da62 <__hexdig_fun>
 800db22:	2800      	cmp	r0, #0
 800db24:	d1f8      	bne.n	800db18 <__gethex+0x8c>
 800db26:	1ba4      	subs	r4, r4, r6
 800db28:	00a7      	lsls	r7, r4, #2
 800db2a:	7833      	ldrb	r3, [r6, #0]
 800db2c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800db30:	2b50      	cmp	r3, #80	@ 0x50
 800db32:	d13e      	bne.n	800dbb2 <__gethex+0x126>
 800db34:	7873      	ldrb	r3, [r6, #1]
 800db36:	2b2b      	cmp	r3, #43	@ 0x2b
 800db38:	d033      	beq.n	800dba2 <__gethex+0x116>
 800db3a:	2b2d      	cmp	r3, #45	@ 0x2d
 800db3c:	d034      	beq.n	800dba8 <__gethex+0x11c>
 800db3e:	1c71      	adds	r1, r6, #1
 800db40:	2400      	movs	r4, #0
 800db42:	7808      	ldrb	r0, [r1, #0]
 800db44:	f7ff ff8d 	bl	800da62 <__hexdig_fun>
 800db48:	1e43      	subs	r3, r0, #1
 800db4a:	b2db      	uxtb	r3, r3
 800db4c:	2b18      	cmp	r3, #24
 800db4e:	d830      	bhi.n	800dbb2 <__gethex+0x126>
 800db50:	f1a0 0210 	sub.w	r2, r0, #16
 800db54:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800db58:	f7ff ff83 	bl	800da62 <__hexdig_fun>
 800db5c:	f100 3cff 	add.w	ip, r0, #4294967295
 800db60:	fa5f fc8c 	uxtb.w	ip, ip
 800db64:	f1bc 0f18 	cmp.w	ip, #24
 800db68:	f04f 030a 	mov.w	r3, #10
 800db6c:	d91e      	bls.n	800dbac <__gethex+0x120>
 800db6e:	b104      	cbz	r4, 800db72 <__gethex+0xe6>
 800db70:	4252      	negs	r2, r2
 800db72:	4417      	add	r7, r2
 800db74:	f8ca 1000 	str.w	r1, [sl]
 800db78:	b1ed      	cbz	r5, 800dbb6 <__gethex+0x12a>
 800db7a:	f1bb 0f00 	cmp.w	fp, #0
 800db7e:	bf0c      	ite	eq
 800db80:	2506      	moveq	r5, #6
 800db82:	2500      	movne	r5, #0
 800db84:	4628      	mov	r0, r5
 800db86:	b005      	add	sp, #20
 800db88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db8c:	2500      	movs	r5, #0
 800db8e:	462c      	mov	r4, r5
 800db90:	e7b0      	b.n	800daf4 <__gethex+0x68>
 800db92:	2c00      	cmp	r4, #0
 800db94:	d1c7      	bne.n	800db26 <__gethex+0x9a>
 800db96:	4627      	mov	r7, r4
 800db98:	e7c7      	b.n	800db2a <__gethex+0x9e>
 800db9a:	464e      	mov	r6, r9
 800db9c:	462f      	mov	r7, r5
 800db9e:	2501      	movs	r5, #1
 800dba0:	e7c3      	b.n	800db2a <__gethex+0x9e>
 800dba2:	2400      	movs	r4, #0
 800dba4:	1cb1      	adds	r1, r6, #2
 800dba6:	e7cc      	b.n	800db42 <__gethex+0xb6>
 800dba8:	2401      	movs	r4, #1
 800dbaa:	e7fb      	b.n	800dba4 <__gethex+0x118>
 800dbac:	fb03 0002 	mla	r0, r3, r2, r0
 800dbb0:	e7ce      	b.n	800db50 <__gethex+0xc4>
 800dbb2:	4631      	mov	r1, r6
 800dbb4:	e7de      	b.n	800db74 <__gethex+0xe8>
 800dbb6:	eba6 0309 	sub.w	r3, r6, r9
 800dbba:	3b01      	subs	r3, #1
 800dbbc:	4629      	mov	r1, r5
 800dbbe:	2b07      	cmp	r3, #7
 800dbc0:	dc0a      	bgt.n	800dbd8 <__gethex+0x14c>
 800dbc2:	9801      	ldr	r0, [sp, #4]
 800dbc4:	f7fe f9bc 	bl	800bf40 <_Balloc>
 800dbc8:	4604      	mov	r4, r0
 800dbca:	b940      	cbnz	r0, 800dbde <__gethex+0x152>
 800dbcc:	4b5c      	ldr	r3, [pc, #368]	@ (800dd40 <__gethex+0x2b4>)
 800dbce:	4602      	mov	r2, r0
 800dbd0:	21e4      	movs	r1, #228	@ 0xe4
 800dbd2:	485c      	ldr	r0, [pc, #368]	@ (800dd44 <__gethex+0x2b8>)
 800dbd4:	f7fd fa4a 	bl	800b06c <__assert_func>
 800dbd8:	3101      	adds	r1, #1
 800dbda:	105b      	asrs	r3, r3, #1
 800dbdc:	e7ef      	b.n	800dbbe <__gethex+0x132>
 800dbde:	f100 0a14 	add.w	sl, r0, #20
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	4655      	mov	r5, sl
 800dbe6:	469b      	mov	fp, r3
 800dbe8:	45b1      	cmp	r9, r6
 800dbea:	d337      	bcc.n	800dc5c <__gethex+0x1d0>
 800dbec:	f845 bb04 	str.w	fp, [r5], #4
 800dbf0:	eba5 050a 	sub.w	r5, r5, sl
 800dbf4:	10ad      	asrs	r5, r5, #2
 800dbf6:	6125      	str	r5, [r4, #16]
 800dbf8:	4658      	mov	r0, fp
 800dbfa:	f7fe fa93 	bl	800c124 <__hi0bits>
 800dbfe:	016d      	lsls	r5, r5, #5
 800dc00:	f8d8 6000 	ldr.w	r6, [r8]
 800dc04:	1a2d      	subs	r5, r5, r0
 800dc06:	42b5      	cmp	r5, r6
 800dc08:	dd54      	ble.n	800dcb4 <__gethex+0x228>
 800dc0a:	1bad      	subs	r5, r5, r6
 800dc0c:	4629      	mov	r1, r5
 800dc0e:	4620      	mov	r0, r4
 800dc10:	f7fe fe27 	bl	800c862 <__any_on>
 800dc14:	4681      	mov	r9, r0
 800dc16:	b178      	cbz	r0, 800dc38 <__gethex+0x1ac>
 800dc18:	1e6b      	subs	r3, r5, #1
 800dc1a:	1159      	asrs	r1, r3, #5
 800dc1c:	f003 021f 	and.w	r2, r3, #31
 800dc20:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800dc24:	f04f 0901 	mov.w	r9, #1
 800dc28:	fa09 f202 	lsl.w	r2, r9, r2
 800dc2c:	420a      	tst	r2, r1
 800dc2e:	d003      	beq.n	800dc38 <__gethex+0x1ac>
 800dc30:	454b      	cmp	r3, r9
 800dc32:	dc36      	bgt.n	800dca2 <__gethex+0x216>
 800dc34:	f04f 0902 	mov.w	r9, #2
 800dc38:	4629      	mov	r1, r5
 800dc3a:	4620      	mov	r0, r4
 800dc3c:	f7ff febf 	bl	800d9be <rshift>
 800dc40:	442f      	add	r7, r5
 800dc42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dc46:	42bb      	cmp	r3, r7
 800dc48:	da42      	bge.n	800dcd0 <__gethex+0x244>
 800dc4a:	9801      	ldr	r0, [sp, #4]
 800dc4c:	4621      	mov	r1, r4
 800dc4e:	f7fe f9b7 	bl	800bfc0 <_Bfree>
 800dc52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dc54:	2300      	movs	r3, #0
 800dc56:	6013      	str	r3, [r2, #0]
 800dc58:	25a3      	movs	r5, #163	@ 0xa3
 800dc5a:	e793      	b.n	800db84 <__gethex+0xf8>
 800dc5c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800dc60:	2a2e      	cmp	r2, #46	@ 0x2e
 800dc62:	d012      	beq.n	800dc8a <__gethex+0x1fe>
 800dc64:	2b20      	cmp	r3, #32
 800dc66:	d104      	bne.n	800dc72 <__gethex+0x1e6>
 800dc68:	f845 bb04 	str.w	fp, [r5], #4
 800dc6c:	f04f 0b00 	mov.w	fp, #0
 800dc70:	465b      	mov	r3, fp
 800dc72:	7830      	ldrb	r0, [r6, #0]
 800dc74:	9303      	str	r3, [sp, #12]
 800dc76:	f7ff fef4 	bl	800da62 <__hexdig_fun>
 800dc7a:	9b03      	ldr	r3, [sp, #12]
 800dc7c:	f000 000f 	and.w	r0, r0, #15
 800dc80:	4098      	lsls	r0, r3
 800dc82:	ea4b 0b00 	orr.w	fp, fp, r0
 800dc86:	3304      	adds	r3, #4
 800dc88:	e7ae      	b.n	800dbe8 <__gethex+0x15c>
 800dc8a:	45b1      	cmp	r9, r6
 800dc8c:	d8ea      	bhi.n	800dc64 <__gethex+0x1d8>
 800dc8e:	492b      	ldr	r1, [pc, #172]	@ (800dd3c <__gethex+0x2b0>)
 800dc90:	9303      	str	r3, [sp, #12]
 800dc92:	2201      	movs	r2, #1
 800dc94:	4630      	mov	r0, r6
 800dc96:	f7ff fe3d 	bl	800d914 <strncmp>
 800dc9a:	9b03      	ldr	r3, [sp, #12]
 800dc9c:	2800      	cmp	r0, #0
 800dc9e:	d1e1      	bne.n	800dc64 <__gethex+0x1d8>
 800dca0:	e7a2      	b.n	800dbe8 <__gethex+0x15c>
 800dca2:	1ea9      	subs	r1, r5, #2
 800dca4:	4620      	mov	r0, r4
 800dca6:	f7fe fddc 	bl	800c862 <__any_on>
 800dcaa:	2800      	cmp	r0, #0
 800dcac:	d0c2      	beq.n	800dc34 <__gethex+0x1a8>
 800dcae:	f04f 0903 	mov.w	r9, #3
 800dcb2:	e7c1      	b.n	800dc38 <__gethex+0x1ac>
 800dcb4:	da09      	bge.n	800dcca <__gethex+0x23e>
 800dcb6:	1b75      	subs	r5, r6, r5
 800dcb8:	4621      	mov	r1, r4
 800dcba:	9801      	ldr	r0, [sp, #4]
 800dcbc:	462a      	mov	r2, r5
 800dcbe:	f7fe fb97 	bl	800c3f0 <__lshift>
 800dcc2:	1b7f      	subs	r7, r7, r5
 800dcc4:	4604      	mov	r4, r0
 800dcc6:	f100 0a14 	add.w	sl, r0, #20
 800dcca:	f04f 0900 	mov.w	r9, #0
 800dcce:	e7b8      	b.n	800dc42 <__gethex+0x1b6>
 800dcd0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800dcd4:	42bd      	cmp	r5, r7
 800dcd6:	dd6f      	ble.n	800ddb8 <__gethex+0x32c>
 800dcd8:	1bed      	subs	r5, r5, r7
 800dcda:	42ae      	cmp	r6, r5
 800dcdc:	dc34      	bgt.n	800dd48 <__gethex+0x2bc>
 800dcde:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dce2:	2b02      	cmp	r3, #2
 800dce4:	d022      	beq.n	800dd2c <__gethex+0x2a0>
 800dce6:	2b03      	cmp	r3, #3
 800dce8:	d024      	beq.n	800dd34 <__gethex+0x2a8>
 800dcea:	2b01      	cmp	r3, #1
 800dcec:	d115      	bne.n	800dd1a <__gethex+0x28e>
 800dcee:	42ae      	cmp	r6, r5
 800dcf0:	d113      	bne.n	800dd1a <__gethex+0x28e>
 800dcf2:	2e01      	cmp	r6, #1
 800dcf4:	d10b      	bne.n	800dd0e <__gethex+0x282>
 800dcf6:	9a02      	ldr	r2, [sp, #8]
 800dcf8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dcfc:	6013      	str	r3, [r2, #0]
 800dcfe:	2301      	movs	r3, #1
 800dd00:	6123      	str	r3, [r4, #16]
 800dd02:	f8ca 3000 	str.w	r3, [sl]
 800dd06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dd08:	2562      	movs	r5, #98	@ 0x62
 800dd0a:	601c      	str	r4, [r3, #0]
 800dd0c:	e73a      	b.n	800db84 <__gethex+0xf8>
 800dd0e:	1e71      	subs	r1, r6, #1
 800dd10:	4620      	mov	r0, r4
 800dd12:	f7fe fda6 	bl	800c862 <__any_on>
 800dd16:	2800      	cmp	r0, #0
 800dd18:	d1ed      	bne.n	800dcf6 <__gethex+0x26a>
 800dd1a:	9801      	ldr	r0, [sp, #4]
 800dd1c:	4621      	mov	r1, r4
 800dd1e:	f7fe f94f 	bl	800bfc0 <_Bfree>
 800dd22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dd24:	2300      	movs	r3, #0
 800dd26:	6013      	str	r3, [r2, #0]
 800dd28:	2550      	movs	r5, #80	@ 0x50
 800dd2a:	e72b      	b.n	800db84 <__gethex+0xf8>
 800dd2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d1f3      	bne.n	800dd1a <__gethex+0x28e>
 800dd32:	e7e0      	b.n	800dcf6 <__gethex+0x26a>
 800dd34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d1dd      	bne.n	800dcf6 <__gethex+0x26a>
 800dd3a:	e7ee      	b.n	800dd1a <__gethex+0x28e>
 800dd3c:	0800eae8 	.word	0x0800eae8
 800dd40:	0800e980 	.word	0x0800e980
 800dd44:	0800eb59 	.word	0x0800eb59
 800dd48:	1e6f      	subs	r7, r5, #1
 800dd4a:	f1b9 0f00 	cmp.w	r9, #0
 800dd4e:	d130      	bne.n	800ddb2 <__gethex+0x326>
 800dd50:	b127      	cbz	r7, 800dd5c <__gethex+0x2d0>
 800dd52:	4639      	mov	r1, r7
 800dd54:	4620      	mov	r0, r4
 800dd56:	f7fe fd84 	bl	800c862 <__any_on>
 800dd5a:	4681      	mov	r9, r0
 800dd5c:	117a      	asrs	r2, r7, #5
 800dd5e:	2301      	movs	r3, #1
 800dd60:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800dd64:	f007 071f 	and.w	r7, r7, #31
 800dd68:	40bb      	lsls	r3, r7
 800dd6a:	4213      	tst	r3, r2
 800dd6c:	4629      	mov	r1, r5
 800dd6e:	4620      	mov	r0, r4
 800dd70:	bf18      	it	ne
 800dd72:	f049 0902 	orrne.w	r9, r9, #2
 800dd76:	f7ff fe22 	bl	800d9be <rshift>
 800dd7a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800dd7e:	1b76      	subs	r6, r6, r5
 800dd80:	2502      	movs	r5, #2
 800dd82:	f1b9 0f00 	cmp.w	r9, #0
 800dd86:	d047      	beq.n	800de18 <__gethex+0x38c>
 800dd88:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dd8c:	2b02      	cmp	r3, #2
 800dd8e:	d015      	beq.n	800ddbc <__gethex+0x330>
 800dd90:	2b03      	cmp	r3, #3
 800dd92:	d017      	beq.n	800ddc4 <__gethex+0x338>
 800dd94:	2b01      	cmp	r3, #1
 800dd96:	d109      	bne.n	800ddac <__gethex+0x320>
 800dd98:	f019 0f02 	tst.w	r9, #2
 800dd9c:	d006      	beq.n	800ddac <__gethex+0x320>
 800dd9e:	f8da 3000 	ldr.w	r3, [sl]
 800dda2:	ea49 0903 	orr.w	r9, r9, r3
 800dda6:	f019 0f01 	tst.w	r9, #1
 800ddaa:	d10e      	bne.n	800ddca <__gethex+0x33e>
 800ddac:	f045 0510 	orr.w	r5, r5, #16
 800ddb0:	e032      	b.n	800de18 <__gethex+0x38c>
 800ddb2:	f04f 0901 	mov.w	r9, #1
 800ddb6:	e7d1      	b.n	800dd5c <__gethex+0x2d0>
 800ddb8:	2501      	movs	r5, #1
 800ddba:	e7e2      	b.n	800dd82 <__gethex+0x2f6>
 800ddbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ddbe:	f1c3 0301 	rsb	r3, r3, #1
 800ddc2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ddc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d0f0      	beq.n	800ddac <__gethex+0x320>
 800ddca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ddce:	f104 0314 	add.w	r3, r4, #20
 800ddd2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ddd6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ddda:	f04f 0c00 	mov.w	ip, #0
 800ddde:	4618      	mov	r0, r3
 800dde0:	f853 2b04 	ldr.w	r2, [r3], #4
 800dde4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dde8:	d01b      	beq.n	800de22 <__gethex+0x396>
 800ddea:	3201      	adds	r2, #1
 800ddec:	6002      	str	r2, [r0, #0]
 800ddee:	2d02      	cmp	r5, #2
 800ddf0:	f104 0314 	add.w	r3, r4, #20
 800ddf4:	d13c      	bne.n	800de70 <__gethex+0x3e4>
 800ddf6:	f8d8 2000 	ldr.w	r2, [r8]
 800ddfa:	3a01      	subs	r2, #1
 800ddfc:	42b2      	cmp	r2, r6
 800ddfe:	d109      	bne.n	800de14 <__gethex+0x388>
 800de00:	1171      	asrs	r1, r6, #5
 800de02:	2201      	movs	r2, #1
 800de04:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800de08:	f006 061f 	and.w	r6, r6, #31
 800de0c:	fa02 f606 	lsl.w	r6, r2, r6
 800de10:	421e      	tst	r6, r3
 800de12:	d13a      	bne.n	800de8a <__gethex+0x3fe>
 800de14:	f045 0520 	orr.w	r5, r5, #32
 800de18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de1a:	601c      	str	r4, [r3, #0]
 800de1c:	9b02      	ldr	r3, [sp, #8]
 800de1e:	601f      	str	r7, [r3, #0]
 800de20:	e6b0      	b.n	800db84 <__gethex+0xf8>
 800de22:	4299      	cmp	r1, r3
 800de24:	f843 cc04 	str.w	ip, [r3, #-4]
 800de28:	d8d9      	bhi.n	800ddde <__gethex+0x352>
 800de2a:	68a3      	ldr	r3, [r4, #8]
 800de2c:	459b      	cmp	fp, r3
 800de2e:	db17      	blt.n	800de60 <__gethex+0x3d4>
 800de30:	6861      	ldr	r1, [r4, #4]
 800de32:	9801      	ldr	r0, [sp, #4]
 800de34:	3101      	adds	r1, #1
 800de36:	f7fe f883 	bl	800bf40 <_Balloc>
 800de3a:	4681      	mov	r9, r0
 800de3c:	b918      	cbnz	r0, 800de46 <__gethex+0x3ba>
 800de3e:	4b1a      	ldr	r3, [pc, #104]	@ (800dea8 <__gethex+0x41c>)
 800de40:	4602      	mov	r2, r0
 800de42:	2184      	movs	r1, #132	@ 0x84
 800de44:	e6c5      	b.n	800dbd2 <__gethex+0x146>
 800de46:	6922      	ldr	r2, [r4, #16]
 800de48:	3202      	adds	r2, #2
 800de4a:	f104 010c 	add.w	r1, r4, #12
 800de4e:	0092      	lsls	r2, r2, #2
 800de50:	300c      	adds	r0, #12
 800de52:	f7ff fd81 	bl	800d958 <memcpy>
 800de56:	4621      	mov	r1, r4
 800de58:	9801      	ldr	r0, [sp, #4]
 800de5a:	f7fe f8b1 	bl	800bfc0 <_Bfree>
 800de5e:	464c      	mov	r4, r9
 800de60:	6923      	ldr	r3, [r4, #16]
 800de62:	1c5a      	adds	r2, r3, #1
 800de64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800de68:	6122      	str	r2, [r4, #16]
 800de6a:	2201      	movs	r2, #1
 800de6c:	615a      	str	r2, [r3, #20]
 800de6e:	e7be      	b.n	800ddee <__gethex+0x362>
 800de70:	6922      	ldr	r2, [r4, #16]
 800de72:	455a      	cmp	r2, fp
 800de74:	dd0b      	ble.n	800de8e <__gethex+0x402>
 800de76:	2101      	movs	r1, #1
 800de78:	4620      	mov	r0, r4
 800de7a:	f7ff fda0 	bl	800d9be <rshift>
 800de7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800de82:	3701      	adds	r7, #1
 800de84:	42bb      	cmp	r3, r7
 800de86:	f6ff aee0 	blt.w	800dc4a <__gethex+0x1be>
 800de8a:	2501      	movs	r5, #1
 800de8c:	e7c2      	b.n	800de14 <__gethex+0x388>
 800de8e:	f016 061f 	ands.w	r6, r6, #31
 800de92:	d0fa      	beq.n	800de8a <__gethex+0x3fe>
 800de94:	4453      	add	r3, sl
 800de96:	f1c6 0620 	rsb	r6, r6, #32
 800de9a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800de9e:	f7fe f941 	bl	800c124 <__hi0bits>
 800dea2:	42b0      	cmp	r0, r6
 800dea4:	dbe7      	blt.n	800de76 <__gethex+0x3ea>
 800dea6:	e7f0      	b.n	800de8a <__gethex+0x3fe>
 800dea8:	0800e980 	.word	0x0800e980

0800deac <L_shift>:
 800deac:	f1c2 0208 	rsb	r2, r2, #8
 800deb0:	0092      	lsls	r2, r2, #2
 800deb2:	b570      	push	{r4, r5, r6, lr}
 800deb4:	f1c2 0620 	rsb	r6, r2, #32
 800deb8:	6843      	ldr	r3, [r0, #4]
 800deba:	6804      	ldr	r4, [r0, #0]
 800debc:	fa03 f506 	lsl.w	r5, r3, r6
 800dec0:	432c      	orrs	r4, r5
 800dec2:	40d3      	lsrs	r3, r2
 800dec4:	6004      	str	r4, [r0, #0]
 800dec6:	f840 3f04 	str.w	r3, [r0, #4]!
 800deca:	4288      	cmp	r0, r1
 800decc:	d3f4      	bcc.n	800deb8 <L_shift+0xc>
 800dece:	bd70      	pop	{r4, r5, r6, pc}

0800ded0 <__match>:
 800ded0:	b530      	push	{r4, r5, lr}
 800ded2:	6803      	ldr	r3, [r0, #0]
 800ded4:	3301      	adds	r3, #1
 800ded6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800deda:	b914      	cbnz	r4, 800dee2 <__match+0x12>
 800dedc:	6003      	str	r3, [r0, #0]
 800dede:	2001      	movs	r0, #1
 800dee0:	bd30      	pop	{r4, r5, pc}
 800dee2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dee6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800deea:	2d19      	cmp	r5, #25
 800deec:	bf98      	it	ls
 800deee:	3220      	addls	r2, #32
 800def0:	42a2      	cmp	r2, r4
 800def2:	d0f0      	beq.n	800ded6 <__match+0x6>
 800def4:	2000      	movs	r0, #0
 800def6:	e7f3      	b.n	800dee0 <__match+0x10>

0800def8 <__hexnan>:
 800def8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800defc:	680b      	ldr	r3, [r1, #0]
 800defe:	6801      	ldr	r1, [r0, #0]
 800df00:	115e      	asrs	r6, r3, #5
 800df02:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800df06:	f013 031f 	ands.w	r3, r3, #31
 800df0a:	b087      	sub	sp, #28
 800df0c:	bf18      	it	ne
 800df0e:	3604      	addne	r6, #4
 800df10:	2500      	movs	r5, #0
 800df12:	1f37      	subs	r7, r6, #4
 800df14:	4682      	mov	sl, r0
 800df16:	4690      	mov	r8, r2
 800df18:	9301      	str	r3, [sp, #4]
 800df1a:	f846 5c04 	str.w	r5, [r6, #-4]
 800df1e:	46b9      	mov	r9, r7
 800df20:	463c      	mov	r4, r7
 800df22:	9502      	str	r5, [sp, #8]
 800df24:	46ab      	mov	fp, r5
 800df26:	784a      	ldrb	r2, [r1, #1]
 800df28:	1c4b      	adds	r3, r1, #1
 800df2a:	9303      	str	r3, [sp, #12]
 800df2c:	b342      	cbz	r2, 800df80 <__hexnan+0x88>
 800df2e:	4610      	mov	r0, r2
 800df30:	9105      	str	r1, [sp, #20]
 800df32:	9204      	str	r2, [sp, #16]
 800df34:	f7ff fd95 	bl	800da62 <__hexdig_fun>
 800df38:	2800      	cmp	r0, #0
 800df3a:	d151      	bne.n	800dfe0 <__hexnan+0xe8>
 800df3c:	9a04      	ldr	r2, [sp, #16]
 800df3e:	9905      	ldr	r1, [sp, #20]
 800df40:	2a20      	cmp	r2, #32
 800df42:	d818      	bhi.n	800df76 <__hexnan+0x7e>
 800df44:	9b02      	ldr	r3, [sp, #8]
 800df46:	459b      	cmp	fp, r3
 800df48:	dd13      	ble.n	800df72 <__hexnan+0x7a>
 800df4a:	454c      	cmp	r4, r9
 800df4c:	d206      	bcs.n	800df5c <__hexnan+0x64>
 800df4e:	2d07      	cmp	r5, #7
 800df50:	dc04      	bgt.n	800df5c <__hexnan+0x64>
 800df52:	462a      	mov	r2, r5
 800df54:	4649      	mov	r1, r9
 800df56:	4620      	mov	r0, r4
 800df58:	f7ff ffa8 	bl	800deac <L_shift>
 800df5c:	4544      	cmp	r4, r8
 800df5e:	d952      	bls.n	800e006 <__hexnan+0x10e>
 800df60:	2300      	movs	r3, #0
 800df62:	f1a4 0904 	sub.w	r9, r4, #4
 800df66:	f844 3c04 	str.w	r3, [r4, #-4]
 800df6a:	f8cd b008 	str.w	fp, [sp, #8]
 800df6e:	464c      	mov	r4, r9
 800df70:	461d      	mov	r5, r3
 800df72:	9903      	ldr	r1, [sp, #12]
 800df74:	e7d7      	b.n	800df26 <__hexnan+0x2e>
 800df76:	2a29      	cmp	r2, #41	@ 0x29
 800df78:	d157      	bne.n	800e02a <__hexnan+0x132>
 800df7a:	3102      	adds	r1, #2
 800df7c:	f8ca 1000 	str.w	r1, [sl]
 800df80:	f1bb 0f00 	cmp.w	fp, #0
 800df84:	d051      	beq.n	800e02a <__hexnan+0x132>
 800df86:	454c      	cmp	r4, r9
 800df88:	d206      	bcs.n	800df98 <__hexnan+0xa0>
 800df8a:	2d07      	cmp	r5, #7
 800df8c:	dc04      	bgt.n	800df98 <__hexnan+0xa0>
 800df8e:	462a      	mov	r2, r5
 800df90:	4649      	mov	r1, r9
 800df92:	4620      	mov	r0, r4
 800df94:	f7ff ff8a 	bl	800deac <L_shift>
 800df98:	4544      	cmp	r4, r8
 800df9a:	d936      	bls.n	800e00a <__hexnan+0x112>
 800df9c:	f1a8 0204 	sub.w	r2, r8, #4
 800dfa0:	4623      	mov	r3, r4
 800dfa2:	f853 1b04 	ldr.w	r1, [r3], #4
 800dfa6:	f842 1f04 	str.w	r1, [r2, #4]!
 800dfaa:	429f      	cmp	r7, r3
 800dfac:	d2f9      	bcs.n	800dfa2 <__hexnan+0xaa>
 800dfae:	1b3b      	subs	r3, r7, r4
 800dfb0:	f023 0303 	bic.w	r3, r3, #3
 800dfb4:	3304      	adds	r3, #4
 800dfb6:	3401      	adds	r4, #1
 800dfb8:	3e03      	subs	r6, #3
 800dfba:	42b4      	cmp	r4, r6
 800dfbc:	bf88      	it	hi
 800dfbe:	2304      	movhi	r3, #4
 800dfc0:	4443      	add	r3, r8
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	f843 2b04 	str.w	r2, [r3], #4
 800dfc8:	429f      	cmp	r7, r3
 800dfca:	d2fb      	bcs.n	800dfc4 <__hexnan+0xcc>
 800dfcc:	683b      	ldr	r3, [r7, #0]
 800dfce:	b91b      	cbnz	r3, 800dfd8 <__hexnan+0xe0>
 800dfd0:	4547      	cmp	r7, r8
 800dfd2:	d128      	bne.n	800e026 <__hexnan+0x12e>
 800dfd4:	2301      	movs	r3, #1
 800dfd6:	603b      	str	r3, [r7, #0]
 800dfd8:	2005      	movs	r0, #5
 800dfda:	b007      	add	sp, #28
 800dfdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfe0:	3501      	adds	r5, #1
 800dfe2:	2d08      	cmp	r5, #8
 800dfe4:	f10b 0b01 	add.w	fp, fp, #1
 800dfe8:	dd06      	ble.n	800dff8 <__hexnan+0x100>
 800dfea:	4544      	cmp	r4, r8
 800dfec:	d9c1      	bls.n	800df72 <__hexnan+0x7a>
 800dfee:	2300      	movs	r3, #0
 800dff0:	f844 3c04 	str.w	r3, [r4, #-4]
 800dff4:	2501      	movs	r5, #1
 800dff6:	3c04      	subs	r4, #4
 800dff8:	6822      	ldr	r2, [r4, #0]
 800dffa:	f000 000f 	and.w	r0, r0, #15
 800dffe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e002:	6020      	str	r0, [r4, #0]
 800e004:	e7b5      	b.n	800df72 <__hexnan+0x7a>
 800e006:	2508      	movs	r5, #8
 800e008:	e7b3      	b.n	800df72 <__hexnan+0x7a>
 800e00a:	9b01      	ldr	r3, [sp, #4]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d0dd      	beq.n	800dfcc <__hexnan+0xd4>
 800e010:	f1c3 0320 	rsb	r3, r3, #32
 800e014:	f04f 32ff 	mov.w	r2, #4294967295
 800e018:	40da      	lsrs	r2, r3
 800e01a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e01e:	4013      	ands	r3, r2
 800e020:	f846 3c04 	str.w	r3, [r6, #-4]
 800e024:	e7d2      	b.n	800dfcc <__hexnan+0xd4>
 800e026:	3f04      	subs	r7, #4
 800e028:	e7d0      	b.n	800dfcc <__hexnan+0xd4>
 800e02a:	2004      	movs	r0, #4
 800e02c:	e7d5      	b.n	800dfda <__hexnan+0xe2>

0800e02e <__ascii_mbtowc>:
 800e02e:	b082      	sub	sp, #8
 800e030:	b901      	cbnz	r1, 800e034 <__ascii_mbtowc+0x6>
 800e032:	a901      	add	r1, sp, #4
 800e034:	b142      	cbz	r2, 800e048 <__ascii_mbtowc+0x1a>
 800e036:	b14b      	cbz	r3, 800e04c <__ascii_mbtowc+0x1e>
 800e038:	7813      	ldrb	r3, [r2, #0]
 800e03a:	600b      	str	r3, [r1, #0]
 800e03c:	7812      	ldrb	r2, [r2, #0]
 800e03e:	1e10      	subs	r0, r2, #0
 800e040:	bf18      	it	ne
 800e042:	2001      	movne	r0, #1
 800e044:	b002      	add	sp, #8
 800e046:	4770      	bx	lr
 800e048:	4610      	mov	r0, r2
 800e04a:	e7fb      	b.n	800e044 <__ascii_mbtowc+0x16>
 800e04c:	f06f 0001 	mvn.w	r0, #1
 800e050:	e7f8      	b.n	800e044 <__ascii_mbtowc+0x16>

0800e052 <_realloc_r>:
 800e052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e056:	4680      	mov	r8, r0
 800e058:	4615      	mov	r5, r2
 800e05a:	460c      	mov	r4, r1
 800e05c:	b921      	cbnz	r1, 800e068 <_realloc_r+0x16>
 800e05e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e062:	4611      	mov	r1, r2
 800e064:	f7fd bee0 	b.w	800be28 <_malloc_r>
 800e068:	b92a      	cbnz	r2, 800e076 <_realloc_r+0x24>
 800e06a:	f7fd fe69 	bl	800bd40 <_free_r>
 800e06e:	2400      	movs	r4, #0
 800e070:	4620      	mov	r0, r4
 800e072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e076:	f000 fa41 	bl	800e4fc <_malloc_usable_size_r>
 800e07a:	4285      	cmp	r5, r0
 800e07c:	4606      	mov	r6, r0
 800e07e:	d802      	bhi.n	800e086 <_realloc_r+0x34>
 800e080:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e084:	d8f4      	bhi.n	800e070 <_realloc_r+0x1e>
 800e086:	4629      	mov	r1, r5
 800e088:	4640      	mov	r0, r8
 800e08a:	f7fd fecd 	bl	800be28 <_malloc_r>
 800e08e:	4607      	mov	r7, r0
 800e090:	2800      	cmp	r0, #0
 800e092:	d0ec      	beq.n	800e06e <_realloc_r+0x1c>
 800e094:	42b5      	cmp	r5, r6
 800e096:	462a      	mov	r2, r5
 800e098:	4621      	mov	r1, r4
 800e09a:	bf28      	it	cs
 800e09c:	4632      	movcs	r2, r6
 800e09e:	f7ff fc5b 	bl	800d958 <memcpy>
 800e0a2:	4621      	mov	r1, r4
 800e0a4:	4640      	mov	r0, r8
 800e0a6:	f7fd fe4b 	bl	800bd40 <_free_r>
 800e0aa:	463c      	mov	r4, r7
 800e0ac:	e7e0      	b.n	800e070 <_realloc_r+0x1e>

0800e0ae <__ascii_wctomb>:
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	4608      	mov	r0, r1
 800e0b2:	b141      	cbz	r1, 800e0c6 <__ascii_wctomb+0x18>
 800e0b4:	2aff      	cmp	r2, #255	@ 0xff
 800e0b6:	d904      	bls.n	800e0c2 <__ascii_wctomb+0x14>
 800e0b8:	228a      	movs	r2, #138	@ 0x8a
 800e0ba:	601a      	str	r2, [r3, #0]
 800e0bc:	f04f 30ff 	mov.w	r0, #4294967295
 800e0c0:	4770      	bx	lr
 800e0c2:	700a      	strb	r2, [r1, #0]
 800e0c4:	2001      	movs	r0, #1
 800e0c6:	4770      	bx	lr

0800e0c8 <__sfputc_r>:
 800e0c8:	6893      	ldr	r3, [r2, #8]
 800e0ca:	3b01      	subs	r3, #1
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	b410      	push	{r4}
 800e0d0:	6093      	str	r3, [r2, #8]
 800e0d2:	da08      	bge.n	800e0e6 <__sfputc_r+0x1e>
 800e0d4:	6994      	ldr	r4, [r2, #24]
 800e0d6:	42a3      	cmp	r3, r4
 800e0d8:	db01      	blt.n	800e0de <__sfputc_r+0x16>
 800e0da:	290a      	cmp	r1, #10
 800e0dc:	d103      	bne.n	800e0e6 <__sfputc_r+0x1e>
 800e0de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0e2:	f000 b933 	b.w	800e34c <__swbuf_r>
 800e0e6:	6813      	ldr	r3, [r2, #0]
 800e0e8:	1c58      	adds	r0, r3, #1
 800e0ea:	6010      	str	r0, [r2, #0]
 800e0ec:	7019      	strb	r1, [r3, #0]
 800e0ee:	4608      	mov	r0, r1
 800e0f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0f4:	4770      	bx	lr

0800e0f6 <__sfputs_r>:
 800e0f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0f8:	4606      	mov	r6, r0
 800e0fa:	460f      	mov	r7, r1
 800e0fc:	4614      	mov	r4, r2
 800e0fe:	18d5      	adds	r5, r2, r3
 800e100:	42ac      	cmp	r4, r5
 800e102:	d101      	bne.n	800e108 <__sfputs_r+0x12>
 800e104:	2000      	movs	r0, #0
 800e106:	e007      	b.n	800e118 <__sfputs_r+0x22>
 800e108:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e10c:	463a      	mov	r2, r7
 800e10e:	4630      	mov	r0, r6
 800e110:	f7ff ffda 	bl	800e0c8 <__sfputc_r>
 800e114:	1c43      	adds	r3, r0, #1
 800e116:	d1f3      	bne.n	800e100 <__sfputs_r+0xa>
 800e118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e11c <_vfiprintf_r>:
 800e11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e120:	460d      	mov	r5, r1
 800e122:	b09d      	sub	sp, #116	@ 0x74
 800e124:	4614      	mov	r4, r2
 800e126:	4698      	mov	r8, r3
 800e128:	4606      	mov	r6, r0
 800e12a:	b118      	cbz	r0, 800e134 <_vfiprintf_r+0x18>
 800e12c:	6a03      	ldr	r3, [r0, #32]
 800e12e:	b90b      	cbnz	r3, 800e134 <_vfiprintf_r+0x18>
 800e130:	f7fc fdec 	bl	800ad0c <__sinit>
 800e134:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e136:	07d9      	lsls	r1, r3, #31
 800e138:	d405      	bmi.n	800e146 <_vfiprintf_r+0x2a>
 800e13a:	89ab      	ldrh	r3, [r5, #12]
 800e13c:	059a      	lsls	r2, r3, #22
 800e13e:	d402      	bmi.n	800e146 <_vfiprintf_r+0x2a>
 800e140:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e142:	f7fc ff8a 	bl	800b05a <__retarget_lock_acquire_recursive>
 800e146:	89ab      	ldrh	r3, [r5, #12]
 800e148:	071b      	lsls	r3, r3, #28
 800e14a:	d501      	bpl.n	800e150 <_vfiprintf_r+0x34>
 800e14c:	692b      	ldr	r3, [r5, #16]
 800e14e:	b99b      	cbnz	r3, 800e178 <_vfiprintf_r+0x5c>
 800e150:	4629      	mov	r1, r5
 800e152:	4630      	mov	r0, r6
 800e154:	f000 f938 	bl	800e3c8 <__swsetup_r>
 800e158:	b170      	cbz	r0, 800e178 <_vfiprintf_r+0x5c>
 800e15a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e15c:	07dc      	lsls	r4, r3, #31
 800e15e:	d504      	bpl.n	800e16a <_vfiprintf_r+0x4e>
 800e160:	f04f 30ff 	mov.w	r0, #4294967295
 800e164:	b01d      	add	sp, #116	@ 0x74
 800e166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e16a:	89ab      	ldrh	r3, [r5, #12]
 800e16c:	0598      	lsls	r0, r3, #22
 800e16e:	d4f7      	bmi.n	800e160 <_vfiprintf_r+0x44>
 800e170:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e172:	f7fc ff73 	bl	800b05c <__retarget_lock_release_recursive>
 800e176:	e7f3      	b.n	800e160 <_vfiprintf_r+0x44>
 800e178:	2300      	movs	r3, #0
 800e17a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e17c:	2320      	movs	r3, #32
 800e17e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e182:	f8cd 800c 	str.w	r8, [sp, #12]
 800e186:	2330      	movs	r3, #48	@ 0x30
 800e188:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e338 <_vfiprintf_r+0x21c>
 800e18c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e190:	f04f 0901 	mov.w	r9, #1
 800e194:	4623      	mov	r3, r4
 800e196:	469a      	mov	sl, r3
 800e198:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e19c:	b10a      	cbz	r2, 800e1a2 <_vfiprintf_r+0x86>
 800e19e:	2a25      	cmp	r2, #37	@ 0x25
 800e1a0:	d1f9      	bne.n	800e196 <_vfiprintf_r+0x7a>
 800e1a2:	ebba 0b04 	subs.w	fp, sl, r4
 800e1a6:	d00b      	beq.n	800e1c0 <_vfiprintf_r+0xa4>
 800e1a8:	465b      	mov	r3, fp
 800e1aa:	4622      	mov	r2, r4
 800e1ac:	4629      	mov	r1, r5
 800e1ae:	4630      	mov	r0, r6
 800e1b0:	f7ff ffa1 	bl	800e0f6 <__sfputs_r>
 800e1b4:	3001      	adds	r0, #1
 800e1b6:	f000 80a7 	beq.w	800e308 <_vfiprintf_r+0x1ec>
 800e1ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e1bc:	445a      	add	r2, fp
 800e1be:	9209      	str	r2, [sp, #36]	@ 0x24
 800e1c0:	f89a 3000 	ldrb.w	r3, [sl]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	f000 809f 	beq.w	800e308 <_vfiprintf_r+0x1ec>
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	f04f 32ff 	mov.w	r2, #4294967295
 800e1d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e1d4:	f10a 0a01 	add.w	sl, sl, #1
 800e1d8:	9304      	str	r3, [sp, #16]
 800e1da:	9307      	str	r3, [sp, #28]
 800e1dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e1e0:	931a      	str	r3, [sp, #104]	@ 0x68
 800e1e2:	4654      	mov	r4, sl
 800e1e4:	2205      	movs	r2, #5
 800e1e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1ea:	4853      	ldr	r0, [pc, #332]	@ (800e338 <_vfiprintf_r+0x21c>)
 800e1ec:	f7f2 f828 	bl	8000240 <memchr>
 800e1f0:	9a04      	ldr	r2, [sp, #16]
 800e1f2:	b9d8      	cbnz	r0, 800e22c <_vfiprintf_r+0x110>
 800e1f4:	06d1      	lsls	r1, r2, #27
 800e1f6:	bf44      	itt	mi
 800e1f8:	2320      	movmi	r3, #32
 800e1fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e1fe:	0713      	lsls	r3, r2, #28
 800e200:	bf44      	itt	mi
 800e202:	232b      	movmi	r3, #43	@ 0x2b
 800e204:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e208:	f89a 3000 	ldrb.w	r3, [sl]
 800e20c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e20e:	d015      	beq.n	800e23c <_vfiprintf_r+0x120>
 800e210:	9a07      	ldr	r2, [sp, #28]
 800e212:	4654      	mov	r4, sl
 800e214:	2000      	movs	r0, #0
 800e216:	f04f 0c0a 	mov.w	ip, #10
 800e21a:	4621      	mov	r1, r4
 800e21c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e220:	3b30      	subs	r3, #48	@ 0x30
 800e222:	2b09      	cmp	r3, #9
 800e224:	d94b      	bls.n	800e2be <_vfiprintf_r+0x1a2>
 800e226:	b1b0      	cbz	r0, 800e256 <_vfiprintf_r+0x13a>
 800e228:	9207      	str	r2, [sp, #28]
 800e22a:	e014      	b.n	800e256 <_vfiprintf_r+0x13a>
 800e22c:	eba0 0308 	sub.w	r3, r0, r8
 800e230:	fa09 f303 	lsl.w	r3, r9, r3
 800e234:	4313      	orrs	r3, r2
 800e236:	9304      	str	r3, [sp, #16]
 800e238:	46a2      	mov	sl, r4
 800e23a:	e7d2      	b.n	800e1e2 <_vfiprintf_r+0xc6>
 800e23c:	9b03      	ldr	r3, [sp, #12]
 800e23e:	1d19      	adds	r1, r3, #4
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	9103      	str	r1, [sp, #12]
 800e244:	2b00      	cmp	r3, #0
 800e246:	bfbb      	ittet	lt
 800e248:	425b      	neglt	r3, r3
 800e24a:	f042 0202 	orrlt.w	r2, r2, #2
 800e24e:	9307      	strge	r3, [sp, #28]
 800e250:	9307      	strlt	r3, [sp, #28]
 800e252:	bfb8      	it	lt
 800e254:	9204      	strlt	r2, [sp, #16]
 800e256:	7823      	ldrb	r3, [r4, #0]
 800e258:	2b2e      	cmp	r3, #46	@ 0x2e
 800e25a:	d10a      	bne.n	800e272 <_vfiprintf_r+0x156>
 800e25c:	7863      	ldrb	r3, [r4, #1]
 800e25e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e260:	d132      	bne.n	800e2c8 <_vfiprintf_r+0x1ac>
 800e262:	9b03      	ldr	r3, [sp, #12]
 800e264:	1d1a      	adds	r2, r3, #4
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	9203      	str	r2, [sp, #12]
 800e26a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e26e:	3402      	adds	r4, #2
 800e270:	9305      	str	r3, [sp, #20]
 800e272:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e348 <_vfiprintf_r+0x22c>
 800e276:	7821      	ldrb	r1, [r4, #0]
 800e278:	2203      	movs	r2, #3
 800e27a:	4650      	mov	r0, sl
 800e27c:	f7f1 ffe0 	bl	8000240 <memchr>
 800e280:	b138      	cbz	r0, 800e292 <_vfiprintf_r+0x176>
 800e282:	9b04      	ldr	r3, [sp, #16]
 800e284:	eba0 000a 	sub.w	r0, r0, sl
 800e288:	2240      	movs	r2, #64	@ 0x40
 800e28a:	4082      	lsls	r2, r0
 800e28c:	4313      	orrs	r3, r2
 800e28e:	3401      	adds	r4, #1
 800e290:	9304      	str	r3, [sp, #16]
 800e292:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e296:	4829      	ldr	r0, [pc, #164]	@ (800e33c <_vfiprintf_r+0x220>)
 800e298:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e29c:	2206      	movs	r2, #6
 800e29e:	f7f1 ffcf 	bl	8000240 <memchr>
 800e2a2:	2800      	cmp	r0, #0
 800e2a4:	d03f      	beq.n	800e326 <_vfiprintf_r+0x20a>
 800e2a6:	4b26      	ldr	r3, [pc, #152]	@ (800e340 <_vfiprintf_r+0x224>)
 800e2a8:	bb1b      	cbnz	r3, 800e2f2 <_vfiprintf_r+0x1d6>
 800e2aa:	9b03      	ldr	r3, [sp, #12]
 800e2ac:	3307      	adds	r3, #7
 800e2ae:	f023 0307 	bic.w	r3, r3, #7
 800e2b2:	3308      	adds	r3, #8
 800e2b4:	9303      	str	r3, [sp, #12]
 800e2b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2b8:	443b      	add	r3, r7
 800e2ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2bc:	e76a      	b.n	800e194 <_vfiprintf_r+0x78>
 800e2be:	fb0c 3202 	mla	r2, ip, r2, r3
 800e2c2:	460c      	mov	r4, r1
 800e2c4:	2001      	movs	r0, #1
 800e2c6:	e7a8      	b.n	800e21a <_vfiprintf_r+0xfe>
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	3401      	adds	r4, #1
 800e2cc:	9305      	str	r3, [sp, #20]
 800e2ce:	4619      	mov	r1, r3
 800e2d0:	f04f 0c0a 	mov.w	ip, #10
 800e2d4:	4620      	mov	r0, r4
 800e2d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e2da:	3a30      	subs	r2, #48	@ 0x30
 800e2dc:	2a09      	cmp	r2, #9
 800e2de:	d903      	bls.n	800e2e8 <_vfiprintf_r+0x1cc>
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d0c6      	beq.n	800e272 <_vfiprintf_r+0x156>
 800e2e4:	9105      	str	r1, [sp, #20]
 800e2e6:	e7c4      	b.n	800e272 <_vfiprintf_r+0x156>
 800e2e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800e2ec:	4604      	mov	r4, r0
 800e2ee:	2301      	movs	r3, #1
 800e2f0:	e7f0      	b.n	800e2d4 <_vfiprintf_r+0x1b8>
 800e2f2:	ab03      	add	r3, sp, #12
 800e2f4:	9300      	str	r3, [sp, #0]
 800e2f6:	462a      	mov	r2, r5
 800e2f8:	4b12      	ldr	r3, [pc, #72]	@ (800e344 <_vfiprintf_r+0x228>)
 800e2fa:	a904      	add	r1, sp, #16
 800e2fc:	4630      	mov	r0, r6
 800e2fe:	f7fb fead 	bl	800a05c <_printf_float>
 800e302:	4607      	mov	r7, r0
 800e304:	1c78      	adds	r0, r7, #1
 800e306:	d1d6      	bne.n	800e2b6 <_vfiprintf_r+0x19a>
 800e308:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e30a:	07d9      	lsls	r1, r3, #31
 800e30c:	d405      	bmi.n	800e31a <_vfiprintf_r+0x1fe>
 800e30e:	89ab      	ldrh	r3, [r5, #12]
 800e310:	059a      	lsls	r2, r3, #22
 800e312:	d402      	bmi.n	800e31a <_vfiprintf_r+0x1fe>
 800e314:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e316:	f7fc fea1 	bl	800b05c <__retarget_lock_release_recursive>
 800e31a:	89ab      	ldrh	r3, [r5, #12]
 800e31c:	065b      	lsls	r3, r3, #25
 800e31e:	f53f af1f 	bmi.w	800e160 <_vfiprintf_r+0x44>
 800e322:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e324:	e71e      	b.n	800e164 <_vfiprintf_r+0x48>
 800e326:	ab03      	add	r3, sp, #12
 800e328:	9300      	str	r3, [sp, #0]
 800e32a:	462a      	mov	r2, r5
 800e32c:	4b05      	ldr	r3, [pc, #20]	@ (800e344 <_vfiprintf_r+0x228>)
 800e32e:	a904      	add	r1, sp, #16
 800e330:	4630      	mov	r0, r6
 800e332:	f7fc f92b 	bl	800a58c <_printf_i>
 800e336:	e7e4      	b.n	800e302 <_vfiprintf_r+0x1e6>
 800e338:	0800eb40 	.word	0x0800eb40
 800e33c:	0800eb4a 	.word	0x0800eb4a
 800e340:	0800a05d 	.word	0x0800a05d
 800e344:	0800e0f7 	.word	0x0800e0f7
 800e348:	0800eb46 	.word	0x0800eb46

0800e34c <__swbuf_r>:
 800e34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e34e:	460e      	mov	r6, r1
 800e350:	4614      	mov	r4, r2
 800e352:	4605      	mov	r5, r0
 800e354:	b118      	cbz	r0, 800e35e <__swbuf_r+0x12>
 800e356:	6a03      	ldr	r3, [r0, #32]
 800e358:	b90b      	cbnz	r3, 800e35e <__swbuf_r+0x12>
 800e35a:	f7fc fcd7 	bl	800ad0c <__sinit>
 800e35e:	69a3      	ldr	r3, [r4, #24]
 800e360:	60a3      	str	r3, [r4, #8]
 800e362:	89a3      	ldrh	r3, [r4, #12]
 800e364:	071a      	lsls	r2, r3, #28
 800e366:	d501      	bpl.n	800e36c <__swbuf_r+0x20>
 800e368:	6923      	ldr	r3, [r4, #16]
 800e36a:	b943      	cbnz	r3, 800e37e <__swbuf_r+0x32>
 800e36c:	4621      	mov	r1, r4
 800e36e:	4628      	mov	r0, r5
 800e370:	f000 f82a 	bl	800e3c8 <__swsetup_r>
 800e374:	b118      	cbz	r0, 800e37e <__swbuf_r+0x32>
 800e376:	f04f 37ff 	mov.w	r7, #4294967295
 800e37a:	4638      	mov	r0, r7
 800e37c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e37e:	6823      	ldr	r3, [r4, #0]
 800e380:	6922      	ldr	r2, [r4, #16]
 800e382:	1a98      	subs	r0, r3, r2
 800e384:	6963      	ldr	r3, [r4, #20]
 800e386:	b2f6      	uxtb	r6, r6
 800e388:	4283      	cmp	r3, r0
 800e38a:	4637      	mov	r7, r6
 800e38c:	dc05      	bgt.n	800e39a <__swbuf_r+0x4e>
 800e38e:	4621      	mov	r1, r4
 800e390:	4628      	mov	r0, r5
 800e392:	f7ff fa6b 	bl	800d86c <_fflush_r>
 800e396:	2800      	cmp	r0, #0
 800e398:	d1ed      	bne.n	800e376 <__swbuf_r+0x2a>
 800e39a:	68a3      	ldr	r3, [r4, #8]
 800e39c:	3b01      	subs	r3, #1
 800e39e:	60a3      	str	r3, [r4, #8]
 800e3a0:	6823      	ldr	r3, [r4, #0]
 800e3a2:	1c5a      	adds	r2, r3, #1
 800e3a4:	6022      	str	r2, [r4, #0]
 800e3a6:	701e      	strb	r6, [r3, #0]
 800e3a8:	6962      	ldr	r2, [r4, #20]
 800e3aa:	1c43      	adds	r3, r0, #1
 800e3ac:	429a      	cmp	r2, r3
 800e3ae:	d004      	beq.n	800e3ba <__swbuf_r+0x6e>
 800e3b0:	89a3      	ldrh	r3, [r4, #12]
 800e3b2:	07db      	lsls	r3, r3, #31
 800e3b4:	d5e1      	bpl.n	800e37a <__swbuf_r+0x2e>
 800e3b6:	2e0a      	cmp	r6, #10
 800e3b8:	d1df      	bne.n	800e37a <__swbuf_r+0x2e>
 800e3ba:	4621      	mov	r1, r4
 800e3bc:	4628      	mov	r0, r5
 800e3be:	f7ff fa55 	bl	800d86c <_fflush_r>
 800e3c2:	2800      	cmp	r0, #0
 800e3c4:	d0d9      	beq.n	800e37a <__swbuf_r+0x2e>
 800e3c6:	e7d6      	b.n	800e376 <__swbuf_r+0x2a>

0800e3c8 <__swsetup_r>:
 800e3c8:	b538      	push	{r3, r4, r5, lr}
 800e3ca:	4b29      	ldr	r3, [pc, #164]	@ (800e470 <__swsetup_r+0xa8>)
 800e3cc:	4605      	mov	r5, r0
 800e3ce:	6818      	ldr	r0, [r3, #0]
 800e3d0:	460c      	mov	r4, r1
 800e3d2:	b118      	cbz	r0, 800e3dc <__swsetup_r+0x14>
 800e3d4:	6a03      	ldr	r3, [r0, #32]
 800e3d6:	b90b      	cbnz	r3, 800e3dc <__swsetup_r+0x14>
 800e3d8:	f7fc fc98 	bl	800ad0c <__sinit>
 800e3dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3e0:	0719      	lsls	r1, r3, #28
 800e3e2:	d422      	bmi.n	800e42a <__swsetup_r+0x62>
 800e3e4:	06da      	lsls	r2, r3, #27
 800e3e6:	d407      	bmi.n	800e3f8 <__swsetup_r+0x30>
 800e3e8:	2209      	movs	r2, #9
 800e3ea:	602a      	str	r2, [r5, #0]
 800e3ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e3f0:	81a3      	strh	r3, [r4, #12]
 800e3f2:	f04f 30ff 	mov.w	r0, #4294967295
 800e3f6:	e033      	b.n	800e460 <__swsetup_r+0x98>
 800e3f8:	0758      	lsls	r0, r3, #29
 800e3fa:	d512      	bpl.n	800e422 <__swsetup_r+0x5a>
 800e3fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e3fe:	b141      	cbz	r1, 800e412 <__swsetup_r+0x4a>
 800e400:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e404:	4299      	cmp	r1, r3
 800e406:	d002      	beq.n	800e40e <__swsetup_r+0x46>
 800e408:	4628      	mov	r0, r5
 800e40a:	f7fd fc99 	bl	800bd40 <_free_r>
 800e40e:	2300      	movs	r3, #0
 800e410:	6363      	str	r3, [r4, #52]	@ 0x34
 800e412:	89a3      	ldrh	r3, [r4, #12]
 800e414:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e418:	81a3      	strh	r3, [r4, #12]
 800e41a:	2300      	movs	r3, #0
 800e41c:	6063      	str	r3, [r4, #4]
 800e41e:	6923      	ldr	r3, [r4, #16]
 800e420:	6023      	str	r3, [r4, #0]
 800e422:	89a3      	ldrh	r3, [r4, #12]
 800e424:	f043 0308 	orr.w	r3, r3, #8
 800e428:	81a3      	strh	r3, [r4, #12]
 800e42a:	6923      	ldr	r3, [r4, #16]
 800e42c:	b94b      	cbnz	r3, 800e442 <__swsetup_r+0x7a>
 800e42e:	89a3      	ldrh	r3, [r4, #12]
 800e430:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e434:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e438:	d003      	beq.n	800e442 <__swsetup_r+0x7a>
 800e43a:	4621      	mov	r1, r4
 800e43c:	4628      	mov	r0, r5
 800e43e:	f000 f88b 	bl	800e558 <__smakebuf_r>
 800e442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e446:	f013 0201 	ands.w	r2, r3, #1
 800e44a:	d00a      	beq.n	800e462 <__swsetup_r+0x9a>
 800e44c:	2200      	movs	r2, #0
 800e44e:	60a2      	str	r2, [r4, #8]
 800e450:	6962      	ldr	r2, [r4, #20]
 800e452:	4252      	negs	r2, r2
 800e454:	61a2      	str	r2, [r4, #24]
 800e456:	6922      	ldr	r2, [r4, #16]
 800e458:	b942      	cbnz	r2, 800e46c <__swsetup_r+0xa4>
 800e45a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e45e:	d1c5      	bne.n	800e3ec <__swsetup_r+0x24>
 800e460:	bd38      	pop	{r3, r4, r5, pc}
 800e462:	0799      	lsls	r1, r3, #30
 800e464:	bf58      	it	pl
 800e466:	6962      	ldrpl	r2, [r4, #20]
 800e468:	60a2      	str	r2, [r4, #8]
 800e46a:	e7f4      	b.n	800e456 <__swsetup_r+0x8e>
 800e46c:	2000      	movs	r0, #0
 800e46e:	e7f7      	b.n	800e460 <__swsetup_r+0x98>
 800e470:	200000d4 	.word	0x200000d4

0800e474 <_raise_r>:
 800e474:	291f      	cmp	r1, #31
 800e476:	b538      	push	{r3, r4, r5, lr}
 800e478:	4605      	mov	r5, r0
 800e47a:	460c      	mov	r4, r1
 800e47c:	d904      	bls.n	800e488 <_raise_r+0x14>
 800e47e:	2316      	movs	r3, #22
 800e480:	6003      	str	r3, [r0, #0]
 800e482:	f04f 30ff 	mov.w	r0, #4294967295
 800e486:	bd38      	pop	{r3, r4, r5, pc}
 800e488:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e48a:	b112      	cbz	r2, 800e492 <_raise_r+0x1e>
 800e48c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e490:	b94b      	cbnz	r3, 800e4a6 <_raise_r+0x32>
 800e492:	4628      	mov	r0, r5
 800e494:	f000 f830 	bl	800e4f8 <_getpid_r>
 800e498:	4622      	mov	r2, r4
 800e49a:	4601      	mov	r1, r0
 800e49c:	4628      	mov	r0, r5
 800e49e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e4a2:	f000 b817 	b.w	800e4d4 <_kill_r>
 800e4a6:	2b01      	cmp	r3, #1
 800e4a8:	d00a      	beq.n	800e4c0 <_raise_r+0x4c>
 800e4aa:	1c59      	adds	r1, r3, #1
 800e4ac:	d103      	bne.n	800e4b6 <_raise_r+0x42>
 800e4ae:	2316      	movs	r3, #22
 800e4b0:	6003      	str	r3, [r0, #0]
 800e4b2:	2001      	movs	r0, #1
 800e4b4:	e7e7      	b.n	800e486 <_raise_r+0x12>
 800e4b6:	2100      	movs	r1, #0
 800e4b8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e4bc:	4620      	mov	r0, r4
 800e4be:	4798      	blx	r3
 800e4c0:	2000      	movs	r0, #0
 800e4c2:	e7e0      	b.n	800e486 <_raise_r+0x12>

0800e4c4 <raise>:
 800e4c4:	4b02      	ldr	r3, [pc, #8]	@ (800e4d0 <raise+0xc>)
 800e4c6:	4601      	mov	r1, r0
 800e4c8:	6818      	ldr	r0, [r3, #0]
 800e4ca:	f7ff bfd3 	b.w	800e474 <_raise_r>
 800e4ce:	bf00      	nop
 800e4d0:	200000d4 	.word	0x200000d4

0800e4d4 <_kill_r>:
 800e4d4:	b538      	push	{r3, r4, r5, lr}
 800e4d6:	4d07      	ldr	r5, [pc, #28]	@ (800e4f4 <_kill_r+0x20>)
 800e4d8:	2300      	movs	r3, #0
 800e4da:	4604      	mov	r4, r0
 800e4dc:	4608      	mov	r0, r1
 800e4de:	4611      	mov	r1, r2
 800e4e0:	602b      	str	r3, [r5, #0]
 800e4e2:	f7f3 fa57 	bl	8001994 <_kill>
 800e4e6:	1c43      	adds	r3, r0, #1
 800e4e8:	d102      	bne.n	800e4f0 <_kill_r+0x1c>
 800e4ea:	682b      	ldr	r3, [r5, #0]
 800e4ec:	b103      	cbz	r3, 800e4f0 <_kill_r+0x1c>
 800e4ee:	6023      	str	r3, [r4, #0]
 800e4f0:	bd38      	pop	{r3, r4, r5, pc}
 800e4f2:	bf00      	nop
 800e4f4:	200007f8 	.word	0x200007f8

0800e4f8 <_getpid_r>:
 800e4f8:	f7f3 ba44 	b.w	8001984 <_getpid>

0800e4fc <_malloc_usable_size_r>:
 800e4fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e500:	1f18      	subs	r0, r3, #4
 800e502:	2b00      	cmp	r3, #0
 800e504:	bfbc      	itt	lt
 800e506:	580b      	ldrlt	r3, [r1, r0]
 800e508:	18c0      	addlt	r0, r0, r3
 800e50a:	4770      	bx	lr

0800e50c <__swhatbuf_r>:
 800e50c:	b570      	push	{r4, r5, r6, lr}
 800e50e:	460c      	mov	r4, r1
 800e510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e514:	2900      	cmp	r1, #0
 800e516:	b096      	sub	sp, #88	@ 0x58
 800e518:	4615      	mov	r5, r2
 800e51a:	461e      	mov	r6, r3
 800e51c:	da0d      	bge.n	800e53a <__swhatbuf_r+0x2e>
 800e51e:	89a3      	ldrh	r3, [r4, #12]
 800e520:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e524:	f04f 0100 	mov.w	r1, #0
 800e528:	bf14      	ite	ne
 800e52a:	2340      	movne	r3, #64	@ 0x40
 800e52c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e530:	2000      	movs	r0, #0
 800e532:	6031      	str	r1, [r6, #0]
 800e534:	602b      	str	r3, [r5, #0]
 800e536:	b016      	add	sp, #88	@ 0x58
 800e538:	bd70      	pop	{r4, r5, r6, pc}
 800e53a:	466a      	mov	r2, sp
 800e53c:	f000 f848 	bl	800e5d0 <_fstat_r>
 800e540:	2800      	cmp	r0, #0
 800e542:	dbec      	blt.n	800e51e <__swhatbuf_r+0x12>
 800e544:	9901      	ldr	r1, [sp, #4]
 800e546:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e54a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e54e:	4259      	negs	r1, r3
 800e550:	4159      	adcs	r1, r3
 800e552:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e556:	e7eb      	b.n	800e530 <__swhatbuf_r+0x24>

0800e558 <__smakebuf_r>:
 800e558:	898b      	ldrh	r3, [r1, #12]
 800e55a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e55c:	079d      	lsls	r5, r3, #30
 800e55e:	4606      	mov	r6, r0
 800e560:	460c      	mov	r4, r1
 800e562:	d507      	bpl.n	800e574 <__smakebuf_r+0x1c>
 800e564:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e568:	6023      	str	r3, [r4, #0]
 800e56a:	6123      	str	r3, [r4, #16]
 800e56c:	2301      	movs	r3, #1
 800e56e:	6163      	str	r3, [r4, #20]
 800e570:	b003      	add	sp, #12
 800e572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e574:	ab01      	add	r3, sp, #4
 800e576:	466a      	mov	r2, sp
 800e578:	f7ff ffc8 	bl	800e50c <__swhatbuf_r>
 800e57c:	9f00      	ldr	r7, [sp, #0]
 800e57e:	4605      	mov	r5, r0
 800e580:	4639      	mov	r1, r7
 800e582:	4630      	mov	r0, r6
 800e584:	f7fd fc50 	bl	800be28 <_malloc_r>
 800e588:	b948      	cbnz	r0, 800e59e <__smakebuf_r+0x46>
 800e58a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e58e:	059a      	lsls	r2, r3, #22
 800e590:	d4ee      	bmi.n	800e570 <__smakebuf_r+0x18>
 800e592:	f023 0303 	bic.w	r3, r3, #3
 800e596:	f043 0302 	orr.w	r3, r3, #2
 800e59a:	81a3      	strh	r3, [r4, #12]
 800e59c:	e7e2      	b.n	800e564 <__smakebuf_r+0xc>
 800e59e:	89a3      	ldrh	r3, [r4, #12]
 800e5a0:	6020      	str	r0, [r4, #0]
 800e5a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e5a6:	81a3      	strh	r3, [r4, #12]
 800e5a8:	9b01      	ldr	r3, [sp, #4]
 800e5aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e5ae:	b15b      	cbz	r3, 800e5c8 <__smakebuf_r+0x70>
 800e5b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e5b4:	4630      	mov	r0, r6
 800e5b6:	f000 f81d 	bl	800e5f4 <_isatty_r>
 800e5ba:	b128      	cbz	r0, 800e5c8 <__smakebuf_r+0x70>
 800e5bc:	89a3      	ldrh	r3, [r4, #12]
 800e5be:	f023 0303 	bic.w	r3, r3, #3
 800e5c2:	f043 0301 	orr.w	r3, r3, #1
 800e5c6:	81a3      	strh	r3, [r4, #12]
 800e5c8:	89a3      	ldrh	r3, [r4, #12]
 800e5ca:	431d      	orrs	r5, r3
 800e5cc:	81a5      	strh	r5, [r4, #12]
 800e5ce:	e7cf      	b.n	800e570 <__smakebuf_r+0x18>

0800e5d0 <_fstat_r>:
 800e5d0:	b538      	push	{r3, r4, r5, lr}
 800e5d2:	4d07      	ldr	r5, [pc, #28]	@ (800e5f0 <_fstat_r+0x20>)
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	4604      	mov	r4, r0
 800e5d8:	4608      	mov	r0, r1
 800e5da:	4611      	mov	r1, r2
 800e5dc:	602b      	str	r3, [r5, #0]
 800e5de:	f7f3 fa39 	bl	8001a54 <_fstat>
 800e5e2:	1c43      	adds	r3, r0, #1
 800e5e4:	d102      	bne.n	800e5ec <_fstat_r+0x1c>
 800e5e6:	682b      	ldr	r3, [r5, #0]
 800e5e8:	b103      	cbz	r3, 800e5ec <_fstat_r+0x1c>
 800e5ea:	6023      	str	r3, [r4, #0]
 800e5ec:	bd38      	pop	{r3, r4, r5, pc}
 800e5ee:	bf00      	nop
 800e5f0:	200007f8 	.word	0x200007f8

0800e5f4 <_isatty_r>:
 800e5f4:	b538      	push	{r3, r4, r5, lr}
 800e5f6:	4d06      	ldr	r5, [pc, #24]	@ (800e610 <_isatty_r+0x1c>)
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	4604      	mov	r4, r0
 800e5fc:	4608      	mov	r0, r1
 800e5fe:	602b      	str	r3, [r5, #0]
 800e600:	f7f3 fa38 	bl	8001a74 <_isatty>
 800e604:	1c43      	adds	r3, r0, #1
 800e606:	d102      	bne.n	800e60e <_isatty_r+0x1a>
 800e608:	682b      	ldr	r3, [r5, #0]
 800e60a:	b103      	cbz	r3, 800e60e <_isatty_r+0x1a>
 800e60c:	6023      	str	r3, [r4, #0]
 800e60e:	bd38      	pop	{r3, r4, r5, pc}
 800e610:	200007f8 	.word	0x200007f8

0800e614 <_init>:
 800e614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e616:	bf00      	nop
 800e618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e61a:	bc08      	pop	{r3}
 800e61c:	469e      	mov	lr, r3
 800e61e:	4770      	bx	lr

0800e620 <_fini>:
 800e620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e622:	bf00      	nop
 800e624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e626:	bc08      	pop	{r3}
 800e628:	469e      	mov	lr, r3
 800e62a:	4770      	bx	lr
