
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b58  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  08009d38  08009d38  0000ad38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a014  0800a014  0000c124  2**0
                  CONTENTS
  4 .ARM          00000008  0800a014  0800a014  0000b014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a01c  0800a01c  0000c124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a01c  0800a01c  0000b01c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a020  0800a020  0000b020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000124  20000000  0800a024  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  20000124  0800a148  0000c124  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000630  0800a148  0000c630  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c124  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b25c  00000000  00000000  0000c154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003847  00000000  00000000  000273b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001620  00000000  00000000  0002abf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001115  00000000  00000000  0002c218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a55c  00000000  00000000  0002d32d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bd09  00000000  00000000  00057889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011467d  00000000  00000000  00073592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00187c0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a00  00000000  00000000  00187c54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  0018e654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000124 	.word	0x20000124
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009d20 	.word	0x08009d20

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000128 	.word	0x20000128
 800021c:	08009d20 	.word	0x08009d20

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b96a 	b.w	8000954 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f806 	bl	8000698 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__udivmoddi4>:
 8000698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800069c:	9d08      	ldr	r5, [sp, #32]
 800069e:	460c      	mov	r4, r1
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d14e      	bne.n	8000742 <__udivmoddi4+0xaa>
 80006a4:	4694      	mov	ip, r2
 80006a6:	458c      	cmp	ip, r1
 80006a8:	4686      	mov	lr, r0
 80006aa:	fab2 f282 	clz	r2, r2
 80006ae:	d962      	bls.n	8000776 <__udivmoddi4+0xde>
 80006b0:	b14a      	cbz	r2, 80006c6 <__udivmoddi4+0x2e>
 80006b2:	f1c2 0320 	rsb	r3, r2, #32
 80006b6:	4091      	lsls	r1, r2
 80006b8:	fa20 f303 	lsr.w	r3, r0, r3
 80006bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80006c0:	4319      	orrs	r1, r3
 80006c2:	fa00 fe02 	lsl.w	lr, r0, r2
 80006c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006ca:	fa1f f68c 	uxth.w	r6, ip
 80006ce:	fbb1 f4f7 	udiv	r4, r1, r7
 80006d2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006d6:	fb07 1114 	mls	r1, r7, r4, r1
 80006da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006de:	fb04 f106 	mul.w	r1, r4, r6
 80006e2:	4299      	cmp	r1, r3
 80006e4:	d90a      	bls.n	80006fc <__udivmoddi4+0x64>
 80006e6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ea:	f104 30ff 	add.w	r0, r4, #4294967295
 80006ee:	f080 8112 	bcs.w	8000916 <__udivmoddi4+0x27e>
 80006f2:	4299      	cmp	r1, r3
 80006f4:	f240 810f 	bls.w	8000916 <__udivmoddi4+0x27e>
 80006f8:	3c02      	subs	r4, #2
 80006fa:	4463      	add	r3, ip
 80006fc:	1a59      	subs	r1, r3, r1
 80006fe:	fa1f f38e 	uxth.w	r3, lr
 8000702:	fbb1 f0f7 	udiv	r0, r1, r7
 8000706:	fb07 1110 	mls	r1, r7, r0, r1
 800070a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800070e:	fb00 f606 	mul.w	r6, r0, r6
 8000712:	429e      	cmp	r6, r3
 8000714:	d90a      	bls.n	800072c <__udivmoddi4+0x94>
 8000716:	eb1c 0303 	adds.w	r3, ip, r3
 800071a:	f100 31ff 	add.w	r1, r0, #4294967295
 800071e:	f080 80fc 	bcs.w	800091a <__udivmoddi4+0x282>
 8000722:	429e      	cmp	r6, r3
 8000724:	f240 80f9 	bls.w	800091a <__udivmoddi4+0x282>
 8000728:	4463      	add	r3, ip
 800072a:	3802      	subs	r0, #2
 800072c:	1b9b      	subs	r3, r3, r6
 800072e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000732:	2100      	movs	r1, #0
 8000734:	b11d      	cbz	r5, 800073e <__udivmoddi4+0xa6>
 8000736:	40d3      	lsrs	r3, r2
 8000738:	2200      	movs	r2, #0
 800073a:	e9c5 3200 	strd	r3, r2, [r5]
 800073e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000742:	428b      	cmp	r3, r1
 8000744:	d905      	bls.n	8000752 <__udivmoddi4+0xba>
 8000746:	b10d      	cbz	r5, 800074c <__udivmoddi4+0xb4>
 8000748:	e9c5 0100 	strd	r0, r1, [r5]
 800074c:	2100      	movs	r1, #0
 800074e:	4608      	mov	r0, r1
 8000750:	e7f5      	b.n	800073e <__udivmoddi4+0xa6>
 8000752:	fab3 f183 	clz	r1, r3
 8000756:	2900      	cmp	r1, #0
 8000758:	d146      	bne.n	80007e8 <__udivmoddi4+0x150>
 800075a:	42a3      	cmp	r3, r4
 800075c:	d302      	bcc.n	8000764 <__udivmoddi4+0xcc>
 800075e:	4290      	cmp	r0, r2
 8000760:	f0c0 80f0 	bcc.w	8000944 <__udivmoddi4+0x2ac>
 8000764:	1a86      	subs	r6, r0, r2
 8000766:	eb64 0303 	sbc.w	r3, r4, r3
 800076a:	2001      	movs	r0, #1
 800076c:	2d00      	cmp	r5, #0
 800076e:	d0e6      	beq.n	800073e <__udivmoddi4+0xa6>
 8000770:	e9c5 6300 	strd	r6, r3, [r5]
 8000774:	e7e3      	b.n	800073e <__udivmoddi4+0xa6>
 8000776:	2a00      	cmp	r2, #0
 8000778:	f040 8090 	bne.w	800089c <__udivmoddi4+0x204>
 800077c:	eba1 040c 	sub.w	r4, r1, ip
 8000780:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000784:	fa1f f78c 	uxth.w	r7, ip
 8000788:	2101      	movs	r1, #1
 800078a:	fbb4 f6f8 	udiv	r6, r4, r8
 800078e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000792:	fb08 4416 	mls	r4, r8, r6, r4
 8000796:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800079a:	fb07 f006 	mul.w	r0, r7, r6
 800079e:	4298      	cmp	r0, r3
 80007a0:	d908      	bls.n	80007b4 <__udivmoddi4+0x11c>
 80007a2:	eb1c 0303 	adds.w	r3, ip, r3
 80007a6:	f106 34ff 	add.w	r4, r6, #4294967295
 80007aa:	d202      	bcs.n	80007b2 <__udivmoddi4+0x11a>
 80007ac:	4298      	cmp	r0, r3
 80007ae:	f200 80cd 	bhi.w	800094c <__udivmoddi4+0x2b4>
 80007b2:	4626      	mov	r6, r4
 80007b4:	1a1c      	subs	r4, r3, r0
 80007b6:	fa1f f38e 	uxth.w	r3, lr
 80007ba:	fbb4 f0f8 	udiv	r0, r4, r8
 80007be:	fb08 4410 	mls	r4, r8, r0, r4
 80007c2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007c6:	fb00 f707 	mul.w	r7, r0, r7
 80007ca:	429f      	cmp	r7, r3
 80007cc:	d908      	bls.n	80007e0 <__udivmoddi4+0x148>
 80007ce:	eb1c 0303 	adds.w	r3, ip, r3
 80007d2:	f100 34ff 	add.w	r4, r0, #4294967295
 80007d6:	d202      	bcs.n	80007de <__udivmoddi4+0x146>
 80007d8:	429f      	cmp	r7, r3
 80007da:	f200 80b0 	bhi.w	800093e <__udivmoddi4+0x2a6>
 80007de:	4620      	mov	r0, r4
 80007e0:	1bdb      	subs	r3, r3, r7
 80007e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007e6:	e7a5      	b.n	8000734 <__udivmoddi4+0x9c>
 80007e8:	f1c1 0620 	rsb	r6, r1, #32
 80007ec:	408b      	lsls	r3, r1
 80007ee:	fa22 f706 	lsr.w	r7, r2, r6
 80007f2:	431f      	orrs	r7, r3
 80007f4:	fa20 fc06 	lsr.w	ip, r0, r6
 80007f8:	fa04 f301 	lsl.w	r3, r4, r1
 80007fc:	ea43 030c 	orr.w	r3, r3, ip
 8000800:	40f4      	lsrs	r4, r6
 8000802:	fa00 f801 	lsl.w	r8, r0, r1
 8000806:	0c38      	lsrs	r0, r7, #16
 8000808:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800080c:	fbb4 fef0 	udiv	lr, r4, r0
 8000810:	fa1f fc87 	uxth.w	ip, r7
 8000814:	fb00 441e 	mls	r4, r0, lr, r4
 8000818:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800081c:	fb0e f90c 	mul.w	r9, lr, ip
 8000820:	45a1      	cmp	r9, r4
 8000822:	fa02 f201 	lsl.w	r2, r2, r1
 8000826:	d90a      	bls.n	800083e <__udivmoddi4+0x1a6>
 8000828:	193c      	adds	r4, r7, r4
 800082a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800082e:	f080 8084 	bcs.w	800093a <__udivmoddi4+0x2a2>
 8000832:	45a1      	cmp	r9, r4
 8000834:	f240 8081 	bls.w	800093a <__udivmoddi4+0x2a2>
 8000838:	f1ae 0e02 	sub.w	lr, lr, #2
 800083c:	443c      	add	r4, r7
 800083e:	eba4 0409 	sub.w	r4, r4, r9
 8000842:	fa1f f983 	uxth.w	r9, r3
 8000846:	fbb4 f3f0 	udiv	r3, r4, r0
 800084a:	fb00 4413 	mls	r4, r0, r3, r4
 800084e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000852:	fb03 fc0c 	mul.w	ip, r3, ip
 8000856:	45a4      	cmp	ip, r4
 8000858:	d907      	bls.n	800086a <__udivmoddi4+0x1d2>
 800085a:	193c      	adds	r4, r7, r4
 800085c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000860:	d267      	bcs.n	8000932 <__udivmoddi4+0x29a>
 8000862:	45a4      	cmp	ip, r4
 8000864:	d965      	bls.n	8000932 <__udivmoddi4+0x29a>
 8000866:	3b02      	subs	r3, #2
 8000868:	443c      	add	r4, r7
 800086a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800086e:	fba0 9302 	umull	r9, r3, r0, r2
 8000872:	eba4 040c 	sub.w	r4, r4, ip
 8000876:	429c      	cmp	r4, r3
 8000878:	46ce      	mov	lr, r9
 800087a:	469c      	mov	ip, r3
 800087c:	d351      	bcc.n	8000922 <__udivmoddi4+0x28a>
 800087e:	d04e      	beq.n	800091e <__udivmoddi4+0x286>
 8000880:	b155      	cbz	r5, 8000898 <__udivmoddi4+0x200>
 8000882:	ebb8 030e 	subs.w	r3, r8, lr
 8000886:	eb64 040c 	sbc.w	r4, r4, ip
 800088a:	fa04 f606 	lsl.w	r6, r4, r6
 800088e:	40cb      	lsrs	r3, r1
 8000890:	431e      	orrs	r6, r3
 8000892:	40cc      	lsrs	r4, r1
 8000894:	e9c5 6400 	strd	r6, r4, [r5]
 8000898:	2100      	movs	r1, #0
 800089a:	e750      	b.n	800073e <__udivmoddi4+0xa6>
 800089c:	f1c2 0320 	rsb	r3, r2, #32
 80008a0:	fa20 f103 	lsr.w	r1, r0, r3
 80008a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80008a8:	fa24 f303 	lsr.w	r3, r4, r3
 80008ac:	4094      	lsls	r4, r2
 80008ae:	430c      	orrs	r4, r1
 80008b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008b4:	fa00 fe02 	lsl.w	lr, r0, r2
 80008b8:	fa1f f78c 	uxth.w	r7, ip
 80008bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80008c0:	fb08 3110 	mls	r1, r8, r0, r3
 80008c4:	0c23      	lsrs	r3, r4, #16
 80008c6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ca:	fb00 f107 	mul.w	r1, r0, r7
 80008ce:	4299      	cmp	r1, r3
 80008d0:	d908      	bls.n	80008e4 <__udivmoddi4+0x24c>
 80008d2:	eb1c 0303 	adds.w	r3, ip, r3
 80008d6:	f100 36ff 	add.w	r6, r0, #4294967295
 80008da:	d22c      	bcs.n	8000936 <__udivmoddi4+0x29e>
 80008dc:	4299      	cmp	r1, r3
 80008de:	d92a      	bls.n	8000936 <__udivmoddi4+0x29e>
 80008e0:	3802      	subs	r0, #2
 80008e2:	4463      	add	r3, ip
 80008e4:	1a5b      	subs	r3, r3, r1
 80008e6:	b2a4      	uxth	r4, r4
 80008e8:	fbb3 f1f8 	udiv	r1, r3, r8
 80008ec:	fb08 3311 	mls	r3, r8, r1, r3
 80008f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f4:	fb01 f307 	mul.w	r3, r1, r7
 80008f8:	42a3      	cmp	r3, r4
 80008fa:	d908      	bls.n	800090e <__udivmoddi4+0x276>
 80008fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000900:	f101 36ff 	add.w	r6, r1, #4294967295
 8000904:	d213      	bcs.n	800092e <__udivmoddi4+0x296>
 8000906:	42a3      	cmp	r3, r4
 8000908:	d911      	bls.n	800092e <__udivmoddi4+0x296>
 800090a:	3902      	subs	r1, #2
 800090c:	4464      	add	r4, ip
 800090e:	1ae4      	subs	r4, r4, r3
 8000910:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000914:	e739      	b.n	800078a <__udivmoddi4+0xf2>
 8000916:	4604      	mov	r4, r0
 8000918:	e6f0      	b.n	80006fc <__udivmoddi4+0x64>
 800091a:	4608      	mov	r0, r1
 800091c:	e706      	b.n	800072c <__udivmoddi4+0x94>
 800091e:	45c8      	cmp	r8, r9
 8000920:	d2ae      	bcs.n	8000880 <__udivmoddi4+0x1e8>
 8000922:	ebb9 0e02 	subs.w	lr, r9, r2
 8000926:	eb63 0c07 	sbc.w	ip, r3, r7
 800092a:	3801      	subs	r0, #1
 800092c:	e7a8      	b.n	8000880 <__udivmoddi4+0x1e8>
 800092e:	4631      	mov	r1, r6
 8000930:	e7ed      	b.n	800090e <__udivmoddi4+0x276>
 8000932:	4603      	mov	r3, r0
 8000934:	e799      	b.n	800086a <__udivmoddi4+0x1d2>
 8000936:	4630      	mov	r0, r6
 8000938:	e7d4      	b.n	80008e4 <__udivmoddi4+0x24c>
 800093a:	46d6      	mov	lr, sl
 800093c:	e77f      	b.n	800083e <__udivmoddi4+0x1a6>
 800093e:	4463      	add	r3, ip
 8000940:	3802      	subs	r0, #2
 8000942:	e74d      	b.n	80007e0 <__udivmoddi4+0x148>
 8000944:	4606      	mov	r6, r0
 8000946:	4623      	mov	r3, r4
 8000948:	4608      	mov	r0, r1
 800094a:	e70f      	b.n	800076c <__udivmoddi4+0xd4>
 800094c:	3e02      	subs	r6, #2
 800094e:	4463      	add	r3, ip
 8000950:	e730      	b.n	80007b4 <__udivmoddi4+0x11c>
 8000952:	bf00      	nop

08000954 <__aeabi_idiv0>:
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop

08000958 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08c      	sub	sp, #48	@ 0x30
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800095e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	2220      	movs	r2, #32
 800096e:	2100      	movs	r1, #0
 8000970:	4618      	mov	r0, r3
 8000972:	f008 f928 	bl	8008bc6 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000976:	4b32      	ldr	r3, [pc, #200]	@ (8000a40 <MX_ADC1_Init+0xe8>)
 8000978:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800097c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800097e:	4b30      	ldr	r3, [pc, #192]	@ (8000a40 <MX_ADC1_Init+0xe8>)
 8000980:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000984:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000986:	4b2e      	ldr	r3, [pc, #184]	@ (8000a40 <MX_ADC1_Init+0xe8>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800098c:	4b2c      	ldr	r3, [pc, #176]	@ (8000a40 <MX_ADC1_Init+0xe8>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000992:	4b2b      	ldr	r3, [pc, #172]	@ (8000a40 <MX_ADC1_Init+0xe8>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000998:	4b29      	ldr	r3, [pc, #164]	@ (8000a40 <MX_ADC1_Init+0xe8>)
 800099a:	2200      	movs	r2, #0
 800099c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800099e:	4b28      	ldr	r3, [pc, #160]	@ (8000a40 <MX_ADC1_Init+0xe8>)
 80009a0:	2204      	movs	r2, #4
 80009a2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009a4:	4b26      	ldr	r3, [pc, #152]	@ (8000a40 <MX_ADC1_Init+0xe8>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009aa:	4b25      	ldr	r3, [pc, #148]	@ (8000a40 <MX_ADC1_Init+0xe8>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80009b0:	4b23      	ldr	r3, [pc, #140]	@ (8000a40 <MX_ADC1_Init+0xe8>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009b6:	4b22      	ldr	r3, [pc, #136]	@ (8000a40 <MX_ADC1_Init+0xe8>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009be:	4b20      	ldr	r3, [pc, #128]	@ (8000a40 <MX_ADC1_Init+0xe8>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a40 <MX_ADC1_Init+0xe8>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000a40 <MX_ADC1_Init+0xe8>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a40 <MX_ADC1_Init+0xe8>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80009d8:	4b19      	ldr	r3, [pc, #100]	@ (8000a40 <MX_ADC1_Init+0xe8>)
 80009da:	2200      	movs	r2, #0
 80009dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009e0:	4817      	ldr	r0, [pc, #92]	@ (8000a40 <MX_ADC1_Init+0xe8>)
 80009e2:	f001 fc7b 	bl	80022dc <HAL_ADC_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80009ec:	f000 faa4 	bl	8000f38 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009f0:	2300      	movs	r3, #0
 80009f2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4811      	ldr	r0, [pc, #68]	@ (8000a40 <MX_ADC1_Init+0xe8>)
 80009fc:	f002 fcf0 	bl	80033e0 <HAL_ADCEx_MultiModeConfigChannel>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000a06:	f000 fa97 	bl	8000f38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a44 <MX_ADC1_Init+0xec>)
 8000a0c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a0e:	2306      	movs	r3, #6
 8000a10:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a16:	237f      	movs	r3, #127	@ 0x7f
 8000a18:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a1a:	2304      	movs	r3, #4
 8000a1c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	4619      	mov	r1, r3
 8000a26:	4806      	ldr	r0, [pc, #24]	@ (8000a40 <MX_ADC1_Init+0xe8>)
 8000a28:	f002 f812 	bl	8002a50 <HAL_ADC_ConfigChannel>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000a32:	f000 fa81 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	3730      	adds	r7, #48	@ 0x30
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000140 	.word	0x20000140
 8000a44:	21800100 	.word	0x21800100

08000a48 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b088      	sub	sp, #32
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a4e:	463b      	mov	r3, r7
 8000a50:	2220      	movs	r2, #32
 8000a52:	2100      	movs	r1, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f008 f8b6 	bl	8008bc6 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a5a:	4b2b      	ldr	r3, [pc, #172]	@ (8000b08 <MX_ADC2_Init+0xc0>)
 8000a5c:	4a2b      	ldr	r2, [pc, #172]	@ (8000b0c <MX_ADC2_Init+0xc4>)
 8000a5e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a60:	4b29      	ldr	r3, [pc, #164]	@ (8000b08 <MX_ADC2_Init+0xc0>)
 8000a62:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000a66:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000a68:	4b27      	ldr	r3, [pc, #156]	@ (8000b08 <MX_ADC2_Init+0xc0>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a6e:	4b26      	ldr	r3, [pc, #152]	@ (8000b08 <MX_ADC2_Init+0xc0>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000a74:	4b24      	ldr	r3, [pc, #144]	@ (8000b08 <MX_ADC2_Init+0xc0>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a7a:	4b23      	ldr	r3, [pc, #140]	@ (8000b08 <MX_ADC2_Init+0xc0>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a80:	4b21      	ldr	r3, [pc, #132]	@ (8000b08 <MX_ADC2_Init+0xc0>)
 8000a82:	2204      	movs	r2, #4
 8000a84:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000a86:	4b20      	ldr	r3, [pc, #128]	@ (8000b08 <MX_ADC2_Init+0xc0>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000b08 <MX_ADC2_Init+0xc0>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000a92:	4b1d      	ldr	r3, [pc, #116]	@ (8000b08 <MX_ADC2_Init+0xc0>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a98:	4b1b      	ldr	r3, [pc, #108]	@ (8000b08 <MX_ADC2_Init+0xc0>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aa0:	4b19      	ldr	r3, [pc, #100]	@ (8000b08 <MX_ADC2_Init+0xc0>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000aa6:	4b18      	ldr	r3, [pc, #96]	@ (8000b08 <MX_ADC2_Init+0xc0>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000aac:	4b16      	ldr	r3, [pc, #88]	@ (8000b08 <MX_ADC2_Init+0xc0>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ab4:	4b14      	ldr	r3, [pc, #80]	@ (8000b08 <MX_ADC2_Init+0xc0>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000aba:	4b13      	ldr	r3, [pc, #76]	@ (8000b08 <MX_ADC2_Init+0xc0>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ac2:	4811      	ldr	r0, [pc, #68]	@ (8000b08 <MX_ADC2_Init+0xc0>)
 8000ac4:	f001 fc0a 	bl	80022dc <HAL_ADC_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000ace:	f000 fa33 	bl	8000f38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b10 <MX_ADC2_Init+0xc8>)
 8000ad4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ad6:	2306      	movs	r3, #6
 8000ad8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ada:	2300      	movs	r3, #0
 8000adc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ade:	237f      	movs	r3, #127	@ 0x7f
 8000ae0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ae2:	2304      	movs	r3, #4
 8000ae4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000aea:	463b      	mov	r3, r7
 8000aec:	4619      	mov	r1, r3
 8000aee:	4806      	ldr	r0, [pc, #24]	@ (8000b08 <MX_ADC2_Init+0xc0>)
 8000af0:	f001 ffae 	bl	8002a50 <HAL_ADC_ConfigChannel>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000afa:	f000 fa1d 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	3720      	adds	r7, #32
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	200001ac 	.word	0x200001ac
 8000b0c:	50000100 	.word	0x50000100
 8000b10:	19200040 	.word	0x19200040

08000b14 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b0a4      	sub	sp, #144	@ 0x90
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b2c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b30:	2254      	movs	r2, #84	@ 0x54
 8000b32:	2100      	movs	r1, #0
 8000b34:	4618      	mov	r0, r3
 8000b36:	f008 f846 	bl	8008bc6 <memset>
  if(adcHandle->Instance==ADC1)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000b42:	d174      	bne.n	8000c2e <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000b44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b48:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000b4a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000b4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b50:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b54:	4618      	mov	r0, r3
 8000b56:	f003 fec3 	bl	80048e0 <HAL_RCCEx_PeriphCLKConfig>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000b60:	f000 f9ea 	bl	8000f38 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000b64:	4b63      	ldr	r3, [pc, #396]	@ (8000cf4 <HAL_ADC_MspInit+0x1e0>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	4a62      	ldr	r2, [pc, #392]	@ (8000cf4 <HAL_ADC_MspInit+0x1e0>)
 8000b6c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000b6e:	4b61      	ldr	r3, [pc, #388]	@ (8000cf4 <HAL_ADC_MspInit+0x1e0>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d10b      	bne.n	8000b8e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000b76:	4b60      	ldr	r3, [pc, #384]	@ (8000cf8 <HAL_ADC_MspInit+0x1e4>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7a:	4a5f      	ldr	r2, [pc, #380]	@ (8000cf8 <HAL_ADC_MspInit+0x1e4>)
 8000b7c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000b80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b82:	4b5d      	ldr	r3, [pc, #372]	@ (8000cf8 <HAL_ADC_MspInit+0x1e4>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8e:	4b5a      	ldr	r3, [pc, #360]	@ (8000cf8 <HAL_ADC_MspInit+0x1e4>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b92:	4a59      	ldr	r2, [pc, #356]	@ (8000cf8 <HAL_ADC_MspInit+0x1e4>)
 8000b94:	f043 0304 	orr.w	r3, r3, #4
 8000b98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b9a:	4b57      	ldr	r3, [pc, #348]	@ (8000cf8 <HAL_ADC_MspInit+0x1e4>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b9e:	f003 0304 	and.w	r3, r3, #4
 8000ba2:	623b      	str	r3, [r7, #32]
 8000ba4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	4b54      	ldr	r3, [pc, #336]	@ (8000cf8 <HAL_ADC_MspInit+0x1e4>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000baa:	4a53      	ldr	r2, [pc, #332]	@ (8000cf8 <HAL_ADC_MspInit+0x1e4>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bb2:	4b51      	ldr	r3, [pc, #324]	@ (8000cf8 <HAL_ADC_MspInit+0x1e4>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	61fb      	str	r3, [r7, #28]
 8000bbc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	4b4e      	ldr	r3, [pc, #312]	@ (8000cf8 <HAL_ADC_MspInit+0x1e4>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc2:	4a4d      	ldr	r2, [pc, #308]	@ (8000cf8 <HAL_ADC_MspInit+0x1e4>)
 8000bc4:	f043 0302 	orr.w	r3, r3, #2
 8000bc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bca:	4b4b      	ldr	r3, [pc, #300]	@ (8000cf8 <HAL_ADC_MspInit+0x1e4>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bce:	f003 0302 	and.w	r3, r3, #2
 8000bd2:	61bb      	str	r3, [r7, #24]
 8000bd4:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 8000bd6:	2304      	movs	r3, #4
 8000bd8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 8000be6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000bea:	4619      	mov	r1, r3
 8000bec:	4843      	ldr	r0, [pc, #268]	@ (8000cfc <HAL_ADC_MspInit+0x1e8>)
 8000bee:	f002 fe9f 	bl	8003930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 8000c02:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000c06:	4619      	mov	r1, r3
 8000c08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c0c:	f002 fe90 	bl	8003930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c10:	2303      	movs	r3, #3
 8000c12:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c14:	2303      	movs	r3, #3
 8000c16:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c20:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000c24:	4619      	mov	r1, r3
 8000c26:	4836      	ldr	r0, [pc, #216]	@ (8000d00 <HAL_ADC_MspInit+0x1ec>)
 8000c28:	f002 fe82 	bl	8003930 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000c2c:	e05e      	b.n	8000cec <HAL_ADC_MspInit+0x1d8>
  else if(adcHandle->Instance==ADC2)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a34      	ldr	r2, [pc, #208]	@ (8000d04 <HAL_ADC_MspInit+0x1f0>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d159      	bne.n	8000cec <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000c38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000c3e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000c42:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c44:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f003 fe49 	bl	80048e0 <HAL_RCCEx_PeriphCLKConfig>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <HAL_ADC_MspInit+0x144>
      Error_Handler();
 8000c54:	f000 f970 	bl	8000f38 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000c58:	4b26      	ldr	r3, [pc, #152]	@ (8000cf4 <HAL_ADC_MspInit+0x1e0>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	4a25      	ldr	r2, [pc, #148]	@ (8000cf4 <HAL_ADC_MspInit+0x1e0>)
 8000c60:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000c62:	4b24      	ldr	r3, [pc, #144]	@ (8000cf4 <HAL_ADC_MspInit+0x1e0>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d10b      	bne.n	8000c82 <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000c6a:	4b23      	ldr	r3, [pc, #140]	@ (8000cf8 <HAL_ADC_MspInit+0x1e4>)
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c6e:	4a22      	ldr	r2, [pc, #136]	@ (8000cf8 <HAL_ADC_MspInit+0x1e4>)
 8000c70:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c76:	4b20      	ldr	r3, [pc, #128]	@ (8000cf8 <HAL_ADC_MspInit+0x1e4>)
 8000c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c82:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf8 <HAL_ADC_MspInit+0x1e4>)
 8000c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c86:	4a1c      	ldr	r2, [pc, #112]	@ (8000cf8 <HAL_ADC_MspInit+0x1e4>)
 8000c88:	f043 0304 	orr.w	r3, r3, #4
 8000c8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf8 <HAL_ADC_MspInit+0x1e4>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c92:	f003 0304 	and.w	r3, r3, #4
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	4b17      	ldr	r3, [pc, #92]	@ (8000cf8 <HAL_ADC_MspInit+0x1e4>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c9e:	4a16      	ldr	r2, [pc, #88]	@ (8000cf8 <HAL_ADC_MspInit+0x1e4>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ca6:	4b14      	ldr	r3, [pc, #80]	@ (8000cf8 <HAL_ADC_MspInit+0x1e4>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 8000cb2:	230b      	movs	r3, #11
 8000cb4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	480c      	ldr	r0, [pc, #48]	@ (8000cfc <HAL_ADC_MspInit+0x1e8>)
 8000cca:	f002 fe31 	bl	8003930 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8000cde:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ce8:	f002 fe22 	bl	8003930 <HAL_GPIO_Init>
}
 8000cec:	bf00      	nop
 8000cee:	3790      	adds	r7, #144	@ 0x90
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000218 	.word	0x20000218
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	48000800 	.word	0x48000800
 8000d00:	48000400 	.word	0x48000400
 8000d04:	50000100 	.word	0x50000100

08000d08 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	@ 0x28
 8000d0c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0e:	f107 0314 	add.w	r3, r7, #20
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	60da      	str	r2, [r3, #12]
 8000d1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1e:	4b3f      	ldr	r3, [pc, #252]	@ (8000e1c <MX_GPIO_Init+0x114>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d22:	4a3e      	ldr	r2, [pc, #248]	@ (8000e1c <MX_GPIO_Init+0x114>)
 8000d24:	f043 0304 	orr.w	r3, r3, #4
 8000d28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d2a:	4b3c      	ldr	r3, [pc, #240]	@ (8000e1c <MX_GPIO_Init+0x114>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d2e:	f003 0304 	and.w	r3, r3, #4
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d36:	4b39      	ldr	r3, [pc, #228]	@ (8000e1c <MX_GPIO_Init+0x114>)
 8000d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d3a:	4a38      	ldr	r2, [pc, #224]	@ (8000e1c <MX_GPIO_Init+0x114>)
 8000d3c:	f043 0320 	orr.w	r3, r3, #32
 8000d40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d42:	4b36      	ldr	r3, [pc, #216]	@ (8000e1c <MX_GPIO_Init+0x114>)
 8000d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d46:	f003 0320 	and.w	r3, r3, #32
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4e:	4b33      	ldr	r3, [pc, #204]	@ (8000e1c <MX_GPIO_Init+0x114>)
 8000d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d52:	4a32      	ldr	r2, [pc, #200]	@ (8000e1c <MX_GPIO_Init+0x114>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d5a:	4b30      	ldr	r3, [pc, #192]	@ (8000e1c <MX_GPIO_Init+0x114>)
 8000d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d66:	4b2d      	ldr	r3, [pc, #180]	@ (8000e1c <MX_GPIO_Init+0x114>)
 8000d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6a:	4a2c      	ldr	r2, [pc, #176]	@ (8000e1c <MX_GPIO_Init+0x114>)
 8000d6c:	f043 0302 	orr.w	r3, r3, #2
 8000d70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d72:	4b2a      	ldr	r3, [pc, #168]	@ (8000e1c <MX_GPIO_Init+0x114>)
 8000d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d76:	f003 0302 	and.w	r3, r3, #2
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d7e:	4b27      	ldr	r3, [pc, #156]	@ (8000e1c <MX_GPIO_Init+0x114>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d82:	4a26      	ldr	r2, [pc, #152]	@ (8000e1c <MX_GPIO_Init+0x114>)
 8000d84:	f043 0308 	orr.w	r3, r3, #8
 8000d88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d8a:	4b24      	ldr	r3, [pc, #144]	@ (8000e1c <MX_GPIO_Init+0x114>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8e:	f003 0308 	and.w	r3, r3, #8
 8000d92:	603b      	str	r3, [r7, #0]
 8000d94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2120      	movs	r1, #32
 8000d9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d9e:	f002 ff49 	bl	8003c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2104      	movs	r1, #4
 8000da6:	481e      	ldr	r0, [pc, #120]	@ (8000e20 <MX_GPIO_Init+0x118>)
 8000da8:	f002 ff44 	bl	8003c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000dac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000db0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000db2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000db6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4818      	ldr	r0, [pc, #96]	@ (8000e24 <MX_GPIO_Init+0x11c>)
 8000dc4:	f002 fdb4 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000dc8:	2320      	movs	r3, #32
 8000dca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000de2:	f002 fda5 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8000de6:	2304      	movs	r3, #4
 8000de8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dea:	2301      	movs	r3, #1
 8000dec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	2300      	movs	r3, #0
 8000df4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4808      	ldr	r0, [pc, #32]	@ (8000e20 <MX_GPIO_Init+0x118>)
 8000dfe:	f002 fd97 	bl	8003930 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2100      	movs	r1, #0
 8000e06:	2028      	movs	r0, #40	@ 0x28
 8000e08:	f002 fcaa 	bl	8003760 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e0c:	2028      	movs	r0, #40	@ 0x28
 8000e0e:	f002 fcc1 	bl	8003794 <HAL_NVIC_EnableIRQ>

}
 8000e12:	bf00      	nop
 8000e14:	3728      	adds	r7, #40	@ 0x28
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	48000c00 	.word	0x48000c00
 8000e24:	48000800 	.word	0x48000800

08000e28 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e2c:	f000 ffef 	bl	8001e0e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e30:	f000 f826 	bl	8000e80 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000e34:	f7ff ff68 	bl	8000d08 <MX_GPIO_Init>
	MX_ADC2_Init();
 8000e38:	f7ff fe06 	bl	8000a48 <MX_ADC2_Init>
	MX_ADC1_Init();
 8000e3c:	f7ff fd8c 	bl	8000958 <MX_ADC1_Init>
	MX_TIM1_Init();
 8000e40:	f000 fa3e 	bl	80012c0 <MX_TIM1_Init>
	MX_TIM3_Init();
 8000e44:	f000 fae8 	bl	8001418 <MX_TIM3_Init>
	MX_USART2_UART_Init();
 8000e48:	f000 fc1c 	bl	8001684 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8000e4c:	f000 fc66 	bl	800171c <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	Shell_Init();
 8000e50:	f000 fda6 	bl	80019a0 <Shell_Init>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000e54:	2100      	movs	r1, #0
 8000e56:	4809      	ldr	r0, [pc, #36]	@ (8000e7c <main+0x54>)
 8000e58:	f004 f8c2 	bl	8004fe0 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4807      	ldr	r0, [pc, #28]	@ (8000e7c <main+0x54>)
 8000e60:	f005 f9a6 	bl	80061b0 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000e64:	2104      	movs	r1, #4
 8000e66:	4805      	ldr	r0, [pc, #20]	@ (8000e7c <main+0x54>)
 8000e68:	f004 f8ba 	bl	8004fe0 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000e6c:	2104      	movs	r1, #4
 8000e6e:	4803      	ldr	r0, [pc, #12]	@ (8000e7c <main+0x54>)
 8000e70:	f005 f99e 	bl	80061b0 <HAL_TIMEx_PWMN_Start>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		Shell_Loop();
 8000e74:	f000 fdd4 	bl	8001a20 <Shell_Loop>
 8000e78:	e7fc      	b.n	8000e74 <main+0x4c>
 8000e7a:	bf00      	nop
 8000e7c:	2000026c 	.word	0x2000026c

08000e80 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b094      	sub	sp, #80	@ 0x50
 8000e84:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e86:	f107 0318 	add.w	r3, r7, #24
 8000e8a:	2238      	movs	r2, #56	@ 0x38
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f007 fe99 	bl	8008bc6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
 8000ea0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f002 ff02 	bl	8003cac <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000eac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000eb0:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000eba:	2306      	movs	r3, #6
 8000ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8000ebe:	2355      	movs	r3, #85	@ 0x55
 8000ec0:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ece:	f107 0318 	add.w	r3, r7, #24
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f002 ff9e 	bl	8003e14 <HAL_RCC_OscConfig>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <SystemClock_Config+0x62>
	{
		Error_Handler();
 8000ede:	f000 f82b 	bl	8000f38 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee2:	230f      	movs	r3, #15
 8000ee4:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	2104      	movs	r1, #4
 8000efa:	4618      	mov	r0, r3
 8000efc:	f003 faa2 	bl	8004444 <HAL_RCC_ClockConfig>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <SystemClock_Config+0x8a>
	{
		Error_Handler();
 8000f06:	f000 f817 	bl	8000f38 <Error_Handler>
	}
}
 8000f0a:	bf00      	nop
 8000f0c:	3750      	adds	r7, #80	@ 0x50
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a04      	ldr	r2, [pc, #16]	@ (8000f34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d101      	bne.n	8000f2a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000f26:	f000 ff8b 	bl	8001e40 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40001000 	.word	0x40001000

08000f38 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f3c:	b672      	cpsid	i
}
 8000f3e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <Error_Handler+0x8>

08000f44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f88 <HAL_MspInit+0x44>)
 8000f4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f4e:	4a0e      	ldr	r2, [pc, #56]	@ (8000f88 <HAL_MspInit+0x44>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f56:	4b0c      	ldr	r3, [pc, #48]	@ (8000f88 <HAL_MspInit+0x44>)
 8000f58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f62:	4b09      	ldr	r3, [pc, #36]	@ (8000f88 <HAL_MspInit+0x44>)
 8000f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f66:	4a08      	ldr	r2, [pc, #32]	@ (8000f88 <HAL_MspInit+0x44>)
 8000f68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f6e:	4b06      	ldr	r3, [pc, #24]	@ (8000f88 <HAL_MspInit+0x44>)
 8000f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f76:	603b      	str	r3, [r7, #0]
 8000f78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000f7a:	f002 ff3b 	bl	8003df4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40021000 	.word	0x40021000

08000f8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08c      	sub	sp, #48	@ 0x30
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f9c:	4b2c      	ldr	r3, [pc, #176]	@ (8001050 <HAL_InitTick+0xc4>)
 8000f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fa0:	4a2b      	ldr	r2, [pc, #172]	@ (8001050 <HAL_InitTick+0xc4>)
 8000fa2:	f043 0310 	orr.w	r3, r3, #16
 8000fa6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fa8:	4b29      	ldr	r3, [pc, #164]	@ (8001050 <HAL_InitTick+0xc4>)
 8000faa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fac:	f003 0310 	and.w	r3, r3, #16
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fb4:	f107 020c 	add.w	r2, r7, #12
 8000fb8:	f107 0310 	add.w	r3, r7, #16
 8000fbc:	4611      	mov	r1, r2
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f003 fc16 	bl	80047f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000fc4:	f003 fbe8 	bl	8004798 <HAL_RCC_GetPCLK1Freq>
 8000fc8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fcc:	4a21      	ldr	r2, [pc, #132]	@ (8001054 <HAL_InitTick+0xc8>)
 8000fce:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd2:	0c9b      	lsrs	r3, r3, #18
 8000fd4:	3b01      	subs	r3, #1
 8000fd6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	@ (8001058 <HAL_InitTick+0xcc>)
 8000fda:	4a20      	ldr	r2, [pc, #128]	@ (800105c <HAL_InitTick+0xd0>)
 8000fdc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000fde:	4b1e      	ldr	r3, [pc, #120]	@ (8001058 <HAL_InitTick+0xcc>)
 8000fe0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000fe4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000fe6:	4a1c      	ldr	r2, [pc, #112]	@ (8001058 <HAL_InitTick+0xcc>)
 8000fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fea:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000fec:	4b1a      	ldr	r3, [pc, #104]	@ (8001058 <HAL_InitTick+0xcc>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff2:	4b19      	ldr	r3, [pc, #100]	@ (8001058 <HAL_InitTick+0xcc>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000ff8:	4817      	ldr	r0, [pc, #92]	@ (8001058 <HAL_InitTick+0xcc>)
 8000ffa:	f003 febf 	bl	8004d7c <HAL_TIM_Base_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001004:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001008:	2b00      	cmp	r3, #0
 800100a:	d11b      	bne.n	8001044 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800100c:	4812      	ldr	r0, [pc, #72]	@ (8001058 <HAL_InitTick+0xcc>)
 800100e:	f003 ff17 	bl	8004e40 <HAL_TIM_Base_Start_IT>
 8001012:	4603      	mov	r3, r0
 8001014:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001018:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800101c:	2b00      	cmp	r3, #0
 800101e:	d111      	bne.n	8001044 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001020:	2036      	movs	r0, #54	@ 0x36
 8001022:	f002 fbb7 	bl	8003794 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2b0f      	cmp	r3, #15
 800102a:	d808      	bhi.n	800103e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800102c:	2200      	movs	r2, #0
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	2036      	movs	r0, #54	@ 0x36
 8001032:	f002 fb95 	bl	8003760 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001036:	4a0a      	ldr	r2, [pc, #40]	@ (8001060 <HAL_InitTick+0xd4>)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	e002      	b.n	8001044 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001044:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001048:	4618      	mov	r0, r3
 800104a:	3730      	adds	r7, #48	@ 0x30
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40021000 	.word	0x40021000
 8001054:	431bde83 	.word	0x431bde83
 8001058:	2000021c 	.word	0x2000021c
 800105c:	40001000 	.word	0x40001000
 8001060:	200000c0 	.word	0x200000c0

08001064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <NMI_Handler+0x4>

0800106c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <HardFault_Handler+0x4>

08001074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001078:	bf00      	nop
 800107a:	e7fd      	b.n	8001078 <MemManage_Handler+0x4>

0800107c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001080:	bf00      	nop
 8001082:	e7fd      	b.n	8001080 <BusFault_Handler+0x4>

08001084 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001088:	bf00      	nop
 800108a:	e7fd      	b.n	8001088 <UsageFault_Handler+0x4>

0800108c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010c8:	4802      	ldr	r0, [pc, #8]	@ (80010d4 <USART2_IRQHandler+0x10>)
 80010ca:	f005 fc81 	bl	80069d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000304 	.word	0x20000304

080010d8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80010dc:	4802      	ldr	r0, [pc, #8]	@ (80010e8 <USART3_IRQHandler+0x10>)
 80010de:	f005 fc77 	bl	80069d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000394 	.word	0x20000394

080010ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 80010f0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80010f4:	f002 fdb6 	bl	8003c64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}

080010fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001100:	4802      	ldr	r0, [pc, #8]	@ (800110c <TIM6_DAC_IRQHandler+0x10>)
 8001102:	f004 f87f 	bl	8005204 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	2000021c 	.word	0x2000021c

08001110 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return 1;
 8001114:	2301      	movs	r3, #1
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <_kill>:

int _kill(int pid, int sig)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800112a:	f007 fdf7 	bl	8008d1c <__errno>
 800112e:	4603      	mov	r3, r0
 8001130:	2216      	movs	r2, #22
 8001132:	601a      	str	r2, [r3, #0]
  return -1;
 8001134:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001138:	4618      	mov	r0, r3
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <_exit>:

void _exit (int status)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001148:	f04f 31ff 	mov.w	r1, #4294967295
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff ffe7 	bl	8001120 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001152:	bf00      	nop
 8001154:	e7fd      	b.n	8001152 <_exit+0x12>

08001156 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b086      	sub	sp, #24
 800115a:	af00      	add	r7, sp, #0
 800115c:	60f8      	str	r0, [r7, #12]
 800115e:	60b9      	str	r1, [r7, #8]
 8001160:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
 8001166:	e00a      	b.n	800117e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001168:	f3af 8000 	nop.w
 800116c:	4601      	mov	r1, r0
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	1c5a      	adds	r2, r3, #1
 8001172:	60ba      	str	r2, [r7, #8]
 8001174:	b2ca      	uxtb	r2, r1
 8001176:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	3301      	adds	r3, #1
 800117c:	617b      	str	r3, [r7, #20]
 800117e:	697a      	ldr	r2, [r7, #20]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	429a      	cmp	r2, r3
 8001184:	dbf0      	blt.n	8001168 <_read+0x12>
  }

  return len;
 8001186:	687b      	ldr	r3, [r7, #4]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]
 80011a0:	e009      	b.n	80011b6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	1c5a      	adds	r2, r3, #1
 80011a6:	60ba      	str	r2, [r7, #8]
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	3301      	adds	r3, #1
 80011b4:	617b      	str	r3, [r7, #20]
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	dbf1      	blt.n	80011a2 <_write+0x12>
  }
  return len;
 80011be:	687b      	ldr	r3, [r7, #4]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <_close>:

int _close(int file)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011f0:	605a      	str	r2, [r3, #4]
  return 0;
 80011f2:	2300      	movs	r3, #0
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <_isatty>:

int _isatty(int file)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001208:	2301      	movs	r3, #1
}
 800120a:	4618      	mov	r0, r3
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001216:	b480      	push	{r7}
 8001218:	b085      	sub	sp, #20
 800121a:	af00      	add	r7, sp, #0
 800121c:	60f8      	str	r0, [r7, #12]
 800121e:	60b9      	str	r1, [r7, #8]
 8001220:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001222:	2300      	movs	r3, #0
}
 8001224:	4618      	mov	r0, r3
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001238:	4a14      	ldr	r2, [pc, #80]	@ (800128c <_sbrk+0x5c>)
 800123a:	4b15      	ldr	r3, [pc, #84]	@ (8001290 <_sbrk+0x60>)
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001244:	4b13      	ldr	r3, [pc, #76]	@ (8001294 <_sbrk+0x64>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d102      	bne.n	8001252 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800124c:	4b11      	ldr	r3, [pc, #68]	@ (8001294 <_sbrk+0x64>)
 800124e:	4a12      	ldr	r2, [pc, #72]	@ (8001298 <_sbrk+0x68>)
 8001250:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001252:	4b10      	ldr	r3, [pc, #64]	@ (8001294 <_sbrk+0x64>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4413      	add	r3, r2
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	429a      	cmp	r2, r3
 800125e:	d207      	bcs.n	8001270 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001260:	f007 fd5c 	bl	8008d1c <__errno>
 8001264:	4603      	mov	r3, r0
 8001266:	220c      	movs	r2, #12
 8001268:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800126a:	f04f 33ff 	mov.w	r3, #4294967295
 800126e:	e009      	b.n	8001284 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001270:	4b08      	ldr	r3, [pc, #32]	@ (8001294 <_sbrk+0x64>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001276:	4b07      	ldr	r3, [pc, #28]	@ (8001294 <_sbrk+0x64>)
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4413      	add	r3, r2
 800127e:	4a05      	ldr	r2, [pc, #20]	@ (8001294 <_sbrk+0x64>)
 8001280:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001282:	68fb      	ldr	r3, [r7, #12]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20020000 	.word	0x20020000
 8001290:	00000400 	.word	0x00000400
 8001294:	20000268 	.word	0x20000268
 8001298:	20000630 	.word	0x20000630

0800129c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012a0:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <SystemInit+0x20>)
 80012a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012a6:	4a05      	ldr	r2, [pc, #20]	@ (80012bc <SystemInit+0x20>)
 80012a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b098      	sub	sp, #96	@ 0x60
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012d2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
 80012e0:	611a      	str	r2, [r3, #16]
 80012e2:	615a      	str	r2, [r3, #20]
 80012e4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	2234      	movs	r2, #52	@ 0x34
 80012ea:	2100      	movs	r1, #0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f007 fc6a 	bl	8008bc6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012f2:	4b47      	ldr	r3, [pc, #284]	@ (8001410 <MX_TIM1_Init+0x150>)
 80012f4:	4a47      	ldr	r2, [pc, #284]	@ (8001414 <MX_TIM1_Init+0x154>)
 80012f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 80012f8:	4b45      	ldr	r3, [pc, #276]	@ (8001410 <MX_TIM1_Init+0x150>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80012fe:	4b44      	ldr	r3, [pc, #272]	@ (8001410 <MX_TIM1_Init+0x150>)
 8001300:	2220      	movs	r2, #32
 8001302:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2125;
 8001304:	4b42      	ldr	r3, [pc, #264]	@ (8001410 <MX_TIM1_Init+0x150>)
 8001306:	f640 024d 	movw	r2, #2125	@ 0x84d
 800130a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130c:	4b40      	ldr	r3, [pc, #256]	@ (8001410 <MX_TIM1_Init+0x150>)
 800130e:	2200      	movs	r2, #0
 8001310:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001312:	4b3f      	ldr	r3, [pc, #252]	@ (8001410 <MX_TIM1_Init+0x150>)
 8001314:	2200      	movs	r2, #0
 8001316:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001318:	4b3d      	ldr	r3, [pc, #244]	@ (8001410 <MX_TIM1_Init+0x150>)
 800131a:	2200      	movs	r2, #0
 800131c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800131e:	483c      	ldr	r0, [pc, #240]	@ (8001410 <MX_TIM1_Init+0x150>)
 8001320:	f003 fe06 	bl	8004f30 <HAL_TIM_PWM_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800132a:	f7ff fe05 	bl	8000f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800132e:	2300      	movs	r3, #0
 8001330:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001332:	2300      	movs	r3, #0
 8001334:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001336:	2300      	movs	r3, #0
 8001338:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800133a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800133e:	4619      	mov	r1, r3
 8001340:	4833      	ldr	r0, [pc, #204]	@ (8001410 <MX_TIM1_Init+0x150>)
 8001342:	f005 f855 	bl	80063f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800134c:	f7ff fdf4 	bl	8000f38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001350:	2360      	movs	r3, #96	@ 0x60
 8001352:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 1063;
 8001354:	f240 4327 	movw	r3, #1063	@ 0x427
 8001358:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800135a:	2300      	movs	r3, #0
 800135c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800135e:	2300      	movs	r3, #0
 8001360:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001362:	2300      	movs	r3, #0
 8001364:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001366:	2300      	movs	r3, #0
 8001368:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800136a:	2300      	movs	r3, #0
 800136c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800136e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001372:	2200      	movs	r2, #0
 8001374:	4619      	mov	r1, r3
 8001376:	4826      	ldr	r0, [pc, #152]	@ (8001410 <MX_TIM1_Init+0x150>)
 8001378:	f004 f8c4 	bl	8005504 <HAL_TIM_PWM_ConfigChannel>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001382:	f7ff fdd9 	bl	8000f38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001386:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800138a:	2204      	movs	r2, #4
 800138c:	4619      	mov	r1, r3
 800138e:	4820      	ldr	r0, [pc, #128]	@ (8001410 <MX_TIM1_Init+0x150>)
 8001390:	f004 f8b8 	bl	8005504 <HAL_TIM_PWM_ConfigChannel>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 800139a:	f7ff fdcd 	bl	8000f38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800139e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80013a2:	2208      	movs	r2, #8
 80013a4:	4619      	mov	r1, r3
 80013a6:	481a      	ldr	r0, [pc, #104]	@ (8001410 <MX_TIM1_Init+0x150>)
 80013a8:	f004 f8ac 	bl	8005504 <HAL_TIM_PWM_ConfigChannel>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80013b2:	f7ff fdc1 	bl	8000f38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013b6:	2300      	movs	r3, #0
 80013b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 17;
 80013c2:	2311      	movs	r3, #17
 80013c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013ce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80013d4:	2300      	movs	r3, #0
 80013d6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80013d8:	2300      	movs	r3, #0
 80013da:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80013dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80013e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80013e6:	2300      	movs	r3, #0
 80013e8:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	4619      	mov	r1, r3
 80013f2:	4807      	ldr	r0, [pc, #28]	@ (8001410 <MX_TIM1_Init+0x150>)
 80013f4:	f005 f892 	bl	800651c <HAL_TIMEx_ConfigBreakDeadTime>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80013fe:	f7ff fd9b 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001402:	4803      	ldr	r0, [pc, #12]	@ (8001410 <MX_TIM1_Init+0x150>)
 8001404:	f000 f8d6 	bl	80015b4 <HAL_TIM_MspPostInit>

}
 8001408:	bf00      	nop
 800140a:	3760      	adds	r7, #96	@ 0x60
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	2000026c 	.word	0x2000026c
 8001414:	40012c00 	.word	0x40012c00

08001418 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b088      	sub	sp, #32
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 800141e:	f107 0310 	add.w	r3, r7, #16
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001436:	4b1c      	ldr	r3, [pc, #112]	@ (80014a8 <MX_TIM3_Init+0x90>)
 8001438:	4a1c      	ldr	r2, [pc, #112]	@ (80014ac <MX_TIM3_Init+0x94>)
 800143a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800143c:	4b1a      	ldr	r3, [pc, #104]	@ (80014a8 <MX_TIM3_Init+0x90>)
 800143e:	2200      	movs	r2, #0
 8001440:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001442:	4b19      	ldr	r3, [pc, #100]	@ (80014a8 <MX_TIM3_Init+0x90>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001448:	4b17      	ldr	r3, [pc, #92]	@ (80014a8 <MX_TIM3_Init+0x90>)
 800144a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800144e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001450:	4b15      	ldr	r3, [pc, #84]	@ (80014a8 <MX_TIM3_Init+0x90>)
 8001452:	2200      	movs	r2, #0
 8001454:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001456:	4b14      	ldr	r3, [pc, #80]	@ (80014a8 <MX_TIM3_Init+0x90>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800145c:	2300      	movs	r3, #0
 800145e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 800146c:	f107 0310 	add.w	r3, r7, #16
 8001470:	4619      	mov	r1, r3
 8001472:	480d      	ldr	r0, [pc, #52]	@ (80014a8 <MX_TIM3_Init+0x90>)
 8001474:	f004 fded 	bl	8006052 <HAL_TIMEx_HallSensor_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800147e:	f7ff fd5b 	bl	8000f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001482:	2350      	movs	r3, #80	@ 0x50
 8001484:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	4619      	mov	r1, r3
 800148e:	4806      	ldr	r0, [pc, #24]	@ (80014a8 <MX_TIM3_Init+0x90>)
 8001490:	f004 ffae 	bl	80063f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800149a:	f7ff fd4d 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800149e:	bf00      	nop
 80014a0:	3720      	adds	r7, #32
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	200002b8 	.word	0x200002b8
 80014ac:	40000400 	.word	0x40000400

080014b0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a0a      	ldr	r2, [pc, #40]	@ (80014e8 <HAL_TIM_PWM_MspInit+0x38>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d10b      	bne.n	80014da <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014c2:	4b0a      	ldr	r3, [pc, #40]	@ (80014ec <HAL_TIM_PWM_MspInit+0x3c>)
 80014c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014c6:	4a09      	ldr	r2, [pc, #36]	@ (80014ec <HAL_TIM_PWM_MspInit+0x3c>)
 80014c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80014cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80014ce:	4b07      	ldr	r3, [pc, #28]	@ (80014ec <HAL_TIM_PWM_MspInit+0x3c>)
 80014d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80014da:	bf00      	nop
 80014dc:	3714      	adds	r7, #20
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	40012c00 	.word	0x40012c00
 80014ec:	40021000 	.word	0x40021000

080014f0 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08a      	sub	sp, #40	@ 0x28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a26      	ldr	r2, [pc, #152]	@ (80015a8 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d145      	bne.n	800159e <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001512:	4b26      	ldr	r3, [pc, #152]	@ (80015ac <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001516:	4a25      	ldr	r2, [pc, #148]	@ (80015ac <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001518:	f043 0302 	orr.w	r3, r3, #2
 800151c:	6593      	str	r3, [r2, #88]	@ 0x58
 800151e:	4b23      	ldr	r3, [pc, #140]	@ (80015ac <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152a:	4b20      	ldr	r3, [pc, #128]	@ (80015ac <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152e:	4a1f      	ldr	r2, [pc, #124]	@ (80015ac <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001536:	4b1d      	ldr	r3, [pc, #116]	@ (80015ac <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001542:	4b1a      	ldr	r3, [pc, #104]	@ (80015ac <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001546:	4a19      	ldr	r2, [pc, #100]	@ (80015ac <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001548:	f043 0304 	orr.w	r3, r3, #4
 800154c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800154e:	4b17      	ldr	r3, [pc, #92]	@ (80015ac <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001552:	f003 0304 	and.w	r3, r3, #4
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800155a:	2350      	movs	r3, #80	@ 0x50
 800155c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155e:	2302      	movs	r3, #2
 8001560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001566:	2300      	movs	r3, #0
 8001568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800156a:	2302      	movs	r3, #2
 800156c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	4619      	mov	r1, r3
 8001574:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001578:	f002 f9da 	bl	8003930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800157c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001582:	2302      	movs	r3, #2
 8001584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158a:	2300      	movs	r3, #0
 800158c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800158e:	2302      	movs	r3, #2
 8001590:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001592:	f107 0314 	add.w	r3, r7, #20
 8001596:	4619      	mov	r1, r3
 8001598:	4805      	ldr	r0, [pc, #20]	@ (80015b0 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 800159a:	f002 f9c9 	bl	8003930 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800159e:	bf00      	nop
 80015a0:	3728      	adds	r7, #40	@ 0x28
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40000400 	.word	0x40000400
 80015ac:	40021000 	.word	0x40021000
 80015b0:	48000800 	.word	0x48000800

080015b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	@ 0x28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a29      	ldr	r2, [pc, #164]	@ (8001678 <HAL_TIM_MspPostInit+0xc4>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d14b      	bne.n	800166e <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d6:	4b29      	ldr	r3, [pc, #164]	@ (800167c <HAL_TIM_MspPostInit+0xc8>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015da:	4a28      	ldr	r2, [pc, #160]	@ (800167c <HAL_TIM_MspPostInit+0xc8>)
 80015dc:	f043 0302 	orr.w	r3, r3, #2
 80015e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015e2:	4b26      	ldr	r3, [pc, #152]	@ (800167c <HAL_TIM_MspPostInit+0xc8>)
 80015e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	4b23      	ldr	r3, [pc, #140]	@ (800167c <HAL_TIM_MspPostInit+0xc8>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f2:	4a22      	ldr	r2, [pc, #136]	@ (800167c <HAL_TIM_MspPostInit+0xc8>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015fa:	4b20      	ldr	r3, [pc, #128]	@ (800167c <HAL_TIM_MspPostInit+0xc8>)
 80015fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 8001606:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800160a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160c:	2302      	movs	r3, #2
 800160e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001614:	2300      	movs	r3, #0
 8001616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001618:	2306      	movs	r3, #6
 800161a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	4619      	mov	r1, r3
 8001622:	4817      	ldr	r0, [pc, #92]	@ (8001680 <HAL_TIM_MspPostInit+0xcc>)
 8001624:	f002 f984 	bl	8003930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8001628:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800162c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162e:	2302      	movs	r3, #2
 8001630:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001636:	2300      	movs	r3, #0
 8001638:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800163a:	2304      	movs	r3, #4
 800163c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	4619      	mov	r1, r3
 8001644:	480e      	ldr	r0, [pc, #56]	@ (8001680 <HAL_TIM_MspPostInit+0xcc>)
 8001646:	f002 f973 	bl	8003930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 800164a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800164e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001650:	2302      	movs	r3, #2
 8001652:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001658:	2300      	movs	r3, #0
 800165a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800165c:	2306      	movs	r3, #6
 800165e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	4619      	mov	r1, r3
 8001666:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800166a:	f002 f961 	bl	8003930 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800166e:	bf00      	nop
 8001670:	3728      	adds	r7, #40	@ 0x28
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40012c00 	.word	0x40012c00
 800167c:	40021000 	.word	0x40021000
 8001680:	48000400 	.word	0x48000400

08001684 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001688:	4b22      	ldr	r3, [pc, #136]	@ (8001714 <MX_USART2_UART_Init+0x90>)
 800168a:	4a23      	ldr	r2, [pc, #140]	@ (8001718 <MX_USART2_UART_Init+0x94>)
 800168c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800168e:	4b21      	ldr	r3, [pc, #132]	@ (8001714 <MX_USART2_UART_Init+0x90>)
 8001690:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001694:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001696:	4b1f      	ldr	r3, [pc, #124]	@ (8001714 <MX_USART2_UART_Init+0x90>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800169c:	4b1d      	ldr	r3, [pc, #116]	@ (8001714 <MX_USART2_UART_Init+0x90>)
 800169e:	2200      	movs	r2, #0
 80016a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001714 <MX_USART2_UART_Init+0x90>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001714 <MX_USART2_UART_Init+0x90>)
 80016aa:	220c      	movs	r2, #12
 80016ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ae:	4b19      	ldr	r3, [pc, #100]	@ (8001714 <MX_USART2_UART_Init+0x90>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b4:	4b17      	ldr	r3, [pc, #92]	@ (8001714 <MX_USART2_UART_Init+0x90>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ba:	4b16      	ldr	r3, [pc, #88]	@ (8001714 <MX_USART2_UART_Init+0x90>)
 80016bc:	2200      	movs	r2, #0
 80016be:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016c0:	4b14      	ldr	r3, [pc, #80]	@ (8001714 <MX_USART2_UART_Init+0x90>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016c6:	4b13      	ldr	r3, [pc, #76]	@ (8001714 <MX_USART2_UART_Init+0x90>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016cc:	4811      	ldr	r0, [pc, #68]	@ (8001714 <MX_USART2_UART_Init+0x90>)
 80016ce:	f005 f842 	bl	8006756 <HAL_UART_Init>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80016d8:	f7ff fc2e 	bl	8000f38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016dc:	2100      	movs	r1, #0
 80016de:	480d      	ldr	r0, [pc, #52]	@ (8001714 <MX_USART2_UART_Init+0x90>)
 80016e0:	f006 ffe5 	bl	80086ae <HAL_UARTEx_SetTxFifoThreshold>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80016ea:	f7ff fc25 	bl	8000f38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016ee:	2100      	movs	r1, #0
 80016f0:	4808      	ldr	r0, [pc, #32]	@ (8001714 <MX_USART2_UART_Init+0x90>)
 80016f2:	f007 f81a 	bl	800872a <HAL_UARTEx_SetRxFifoThreshold>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80016fc:	f7ff fc1c 	bl	8000f38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001700:	4804      	ldr	r0, [pc, #16]	@ (8001714 <MX_USART2_UART_Init+0x90>)
 8001702:	f006 ff9b 	bl	800863c <HAL_UARTEx_DisableFifoMode>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800170c:	f7ff fc14 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001710:	bf00      	nop
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20000304 	.word	0x20000304
 8001718:	40004400 	.word	0x40004400

0800171c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001720:	4b22      	ldr	r3, [pc, #136]	@ (80017ac <MX_USART3_UART_Init+0x90>)
 8001722:	4a23      	ldr	r2, [pc, #140]	@ (80017b0 <MX_USART3_UART_Init+0x94>)
 8001724:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001726:	4b21      	ldr	r3, [pc, #132]	@ (80017ac <MX_USART3_UART_Init+0x90>)
 8001728:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800172c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800172e:	4b1f      	ldr	r3, [pc, #124]	@ (80017ac <MX_USART3_UART_Init+0x90>)
 8001730:	2200      	movs	r2, #0
 8001732:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001734:	4b1d      	ldr	r3, [pc, #116]	@ (80017ac <MX_USART3_UART_Init+0x90>)
 8001736:	2200      	movs	r2, #0
 8001738:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800173a:	4b1c      	ldr	r3, [pc, #112]	@ (80017ac <MX_USART3_UART_Init+0x90>)
 800173c:	2200      	movs	r2, #0
 800173e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001740:	4b1a      	ldr	r3, [pc, #104]	@ (80017ac <MX_USART3_UART_Init+0x90>)
 8001742:	220c      	movs	r2, #12
 8001744:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001746:	4b19      	ldr	r3, [pc, #100]	@ (80017ac <MX_USART3_UART_Init+0x90>)
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800174c:	4b17      	ldr	r3, [pc, #92]	@ (80017ac <MX_USART3_UART_Init+0x90>)
 800174e:	2200      	movs	r2, #0
 8001750:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001752:	4b16      	ldr	r3, [pc, #88]	@ (80017ac <MX_USART3_UART_Init+0x90>)
 8001754:	2200      	movs	r2, #0
 8001756:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001758:	4b14      	ldr	r3, [pc, #80]	@ (80017ac <MX_USART3_UART_Init+0x90>)
 800175a:	2200      	movs	r2, #0
 800175c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800175e:	4b13      	ldr	r3, [pc, #76]	@ (80017ac <MX_USART3_UART_Init+0x90>)
 8001760:	2200      	movs	r2, #0
 8001762:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001764:	4811      	ldr	r0, [pc, #68]	@ (80017ac <MX_USART3_UART_Init+0x90>)
 8001766:	f004 fff6 	bl	8006756 <HAL_UART_Init>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001770:	f7ff fbe2 	bl	8000f38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001774:	2100      	movs	r1, #0
 8001776:	480d      	ldr	r0, [pc, #52]	@ (80017ac <MX_USART3_UART_Init+0x90>)
 8001778:	f006 ff99 	bl	80086ae <HAL_UARTEx_SetTxFifoThreshold>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001782:	f7ff fbd9 	bl	8000f38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001786:	2100      	movs	r1, #0
 8001788:	4808      	ldr	r0, [pc, #32]	@ (80017ac <MX_USART3_UART_Init+0x90>)
 800178a:	f006 ffce 	bl	800872a <HAL_UARTEx_SetRxFifoThreshold>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001794:	f7ff fbd0 	bl	8000f38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001798:	4804      	ldr	r0, [pc, #16]	@ (80017ac <MX_USART3_UART_Init+0x90>)
 800179a:	f006 ff4f 	bl	800863c <HAL_UARTEx_DisableFifoMode>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80017a4:	f7ff fbc8 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20000394 	.word	0x20000394
 80017b0:	40004800 	.word	0x40004800

080017b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b0a0      	sub	sp, #128	@ 0x80
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017cc:	f107 0318 	add.w	r3, r7, #24
 80017d0:	2254      	movs	r2, #84	@ 0x54
 80017d2:	2100      	movs	r1, #0
 80017d4:	4618      	mov	r0, r3
 80017d6:	f007 f9f6 	bl	8008bc6 <memset>
  if(uartHandle->Instance==USART2)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a45      	ldr	r2, [pc, #276]	@ (80018f4 <HAL_UART_MspInit+0x140>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d13f      	bne.n	8001864 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80017e4:	2302      	movs	r3, #2
 80017e6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80017e8:	2300      	movs	r3, #0
 80017ea:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017ec:	f107 0318 	add.w	r3, r7, #24
 80017f0:	4618      	mov	r0, r3
 80017f2:	f003 f875 	bl	80048e0 <HAL_RCCEx_PeriphCLKConfig>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017fc:	f7ff fb9c 	bl	8000f38 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001800:	4b3d      	ldr	r3, [pc, #244]	@ (80018f8 <HAL_UART_MspInit+0x144>)
 8001802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001804:	4a3c      	ldr	r2, [pc, #240]	@ (80018f8 <HAL_UART_MspInit+0x144>)
 8001806:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800180a:	6593      	str	r3, [r2, #88]	@ 0x58
 800180c:	4b3a      	ldr	r3, [pc, #232]	@ (80018f8 <HAL_UART_MspInit+0x144>)
 800180e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001810:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001818:	4b37      	ldr	r3, [pc, #220]	@ (80018f8 <HAL_UART_MspInit+0x144>)
 800181a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800181c:	4a36      	ldr	r2, [pc, #216]	@ (80018f8 <HAL_UART_MspInit+0x144>)
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001824:	4b34      	ldr	r3, [pc, #208]	@ (80018f8 <HAL_UART_MspInit+0x144>)
 8001826:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001830:	230c      	movs	r3, #12
 8001832:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001834:	2302      	movs	r3, #2
 8001836:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183c:	2300      	movs	r3, #0
 800183e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001840:	2307      	movs	r3, #7
 8001842:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001844:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001848:	4619      	mov	r1, r3
 800184a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800184e:	f002 f86f 	bl	8003930 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001852:	2200      	movs	r2, #0
 8001854:	2100      	movs	r1, #0
 8001856:	2026      	movs	r0, #38	@ 0x26
 8001858:	f001 ff82 	bl	8003760 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800185c:	2026      	movs	r0, #38	@ 0x26
 800185e:	f001 ff99 	bl	8003794 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001862:	e043      	b.n	80018ec <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a24      	ldr	r2, [pc, #144]	@ (80018fc <HAL_UART_MspInit+0x148>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d13e      	bne.n	80018ec <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800186e:	2304      	movs	r3, #4
 8001870:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001872:	2300      	movs	r3, #0
 8001874:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001876:	f107 0318 	add.w	r3, r7, #24
 800187a:	4618      	mov	r0, r3
 800187c:	f003 f830 	bl	80048e0 <HAL_RCCEx_PeriphCLKConfig>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8001886:	f7ff fb57 	bl	8000f38 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800188a:	4b1b      	ldr	r3, [pc, #108]	@ (80018f8 <HAL_UART_MspInit+0x144>)
 800188c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800188e:	4a1a      	ldr	r2, [pc, #104]	@ (80018f8 <HAL_UART_MspInit+0x144>)
 8001890:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001894:	6593      	str	r3, [r2, #88]	@ 0x58
 8001896:	4b18      	ldr	r3, [pc, #96]	@ (80018f8 <HAL_UART_MspInit+0x144>)
 8001898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800189a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a2:	4b15      	ldr	r3, [pc, #84]	@ (80018f8 <HAL_UART_MspInit+0x144>)
 80018a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a6:	4a14      	ldr	r2, [pc, #80]	@ (80018f8 <HAL_UART_MspInit+0x144>)
 80018a8:	f043 0304 	orr.w	r3, r3, #4
 80018ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018ae:	4b12      	ldr	r3, [pc, #72]	@ (80018f8 <HAL_UART_MspInit+0x144>)
 80018b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b2:	f003 0304 	and.w	r3, r3, #4
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80018ba:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80018be:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c0:	2302      	movs	r3, #2
 80018c2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c8:	2300      	movs	r3, #0
 80018ca:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018cc:	2307      	movs	r3, #7
 80018ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018d0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80018d4:	4619      	mov	r1, r3
 80018d6:	480a      	ldr	r0, [pc, #40]	@ (8001900 <HAL_UART_MspInit+0x14c>)
 80018d8:	f002 f82a 	bl	8003930 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80018dc:	2200      	movs	r2, #0
 80018de:	2100      	movs	r1, #0
 80018e0:	2027      	movs	r0, #39	@ 0x27
 80018e2:	f001 ff3d 	bl	8003760 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80018e6:	2027      	movs	r0, #39	@ 0x27
 80018e8:	f001 ff54 	bl	8003794 <HAL_NVIC_EnableIRQ>
}
 80018ec:	bf00      	nop
 80018ee:	3780      	adds	r7, #128	@ 0x80
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40004400 	.word	0x40004400
 80018f8:	40021000 	.word	0x40021000
 80018fc:	40004800 	.word	0x40004800
 8001900:	48000800 	.word	0x48000800

08001904 <start_PWM>:
#define RAMP_STEP 5     // Valeur d'incrément du rapport cyclique à chaque étape



void start_PWM (TIM_HandleTypeDef htim,uint32_t channel)
{
 8001904:	b084      	sub	sp, #16
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	f107 0c10 	add.w	ip, r7, #16
 8001910:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	HAL_TIM_PWM_Start(&htim, TIM_CHANNEL_1);
 8001914:	2100      	movs	r1, #0
 8001916:	f107 0010 	add.w	r0, r7, #16
 800191a:	f003 fb61 	bl	8004fe0 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim,TIM_CHANNEL_1);
 800191e:	2100      	movs	r1, #0
 8001920:	f107 0010 	add.w	r0, r7, #16
 8001924:	f004 fc44 	bl	80061b0 <HAL_TIMEx_PWMN_Start>

	HAL_TIM_PWM_Start(&htim, TIM_CHANNEL_2);
 8001928:	2104      	movs	r1, #4
 800192a:	f107 0010 	add.w	r0, r7, #16
 800192e:	f003 fb57 	bl	8004fe0 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim, TIM_CHANNEL_2);
 8001932:	2104      	movs	r1, #4
 8001934:	f107 0010 	add.w	r0, r7, #16
 8001938:	f004 fc3a 	bl	80061b0 <HAL_TIMEx_PWMN_Start>


	//On met le rapport cyclique à la valeur du rapport cyclique à 50%

	int alpha = alpha_MID;
 800193c:	f240 4327 	movw	r3, #1063	@ 0x427
 8001940:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, alpha);// duty cycle channel 1 égal à 50%
 8001942:	4b09      	ldr	r3, [pc, #36]	@ (8001968 <start_PWM+0x64>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, TIM1->ARR - alpha); // duty cycle channel 2 égal à 50%
 800194a:	4b08      	ldr	r3, [pc, #32]	@ (800196c <start_PWM+0x68>)
 800194c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	4b05      	ldr	r3, [pc, #20]	@ (8001968 <start_PWM+0x64>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	1a8a      	subs	r2, r1, r2
 8001956:	639a      	str	r2, [r3, #56]	@ 0x38

}
 8001958:	bf00      	nop
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001962:	b004      	add	sp, #16
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	2000026c 	.word	0x2000026c
 800196c:	40012c00 	.word	0x40012c00

08001970 <stop_PWM>:

void stop_PWM(TIM_HandleTypeDef htim,uint32_t channel)

{
 8001970:	b084      	sub	sp, #16
 8001972:	b580      	push	{r7, lr}
 8001974:	af00      	add	r7, sp, #0
 8001976:	f107 0c08 	add.w	ip, r7, #8
 800197a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	HAL_TIMEx_PWMN_Stop(&htim, channel);
 800197e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001980:	f107 0008 	add.w	r0, r7, #8
 8001984:	f004 fcd6 	bl	8006334 <HAL_TIMEx_PWMN_Stop>
	HAL_TIMEx_PWMN_Stop(&htim, channel);
 8001988:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800198a:	f107 0008 	add.w	r0, r7, #8
 800198e:	f004 fcd1 	bl	8006334 <HAL_TIMEx_PWMN_Stop>


}
 8001992:	bf00      	nop
 8001994:	46bd      	mov	sp, r7
 8001996:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800199a:	b004      	add	sp, #16
 800199c:	4770      	bx	lr
	...

080019a0 <Shell_Init>:
char* 		argv[MAX_ARGS];
int		 	argc = 0;
char*		token;
int 		newCmdReady = 0;

void Shell_Init(void){
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
	memset(argv, NULL, MAX_ARGS*sizeof(char*));
 80019a4:	2224      	movs	r2, #36	@ 0x24
 80019a6:	2100      	movs	r1, #0
 80019a8:	4816      	ldr	r0, [pc, #88]	@ (8001a04 <Shell_Init+0x64>)
 80019aa:	f007 f90c 	bl	8008bc6 <memset>
	memset(cmdBuffer, NULL, CMD_BUFFER_SIZE*sizeof(char));
 80019ae:	2240      	movs	r2, #64	@ 0x40
 80019b0:	2100      	movs	r1, #0
 80019b2:	4815      	ldr	r0, [pc, #84]	@ (8001a08 <Shell_Init+0x68>)
 80019b4:	f007 f907 	bl	8008bc6 <memset>
	memset(uartRxBuffer, NULL, UART_RX_BUFFER_SIZE*sizeof(char));
 80019b8:	4b14      	ldr	r3, [pc, #80]	@ (8001a0c <Shell_Init+0x6c>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	701a      	strb	r2, [r3, #0]
	memset(uartTxBuffer, NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 80019be:	2240      	movs	r2, #64	@ 0x40
 80019c0:	2100      	movs	r1, #0
 80019c2:	4813      	ldr	r0, [pc, #76]	@ (8001a10 <Shell_Init+0x70>)
 80019c4:	f007 f8ff 	bl	8008bc6 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80019c8:	2201      	movs	r2, #1
 80019ca:	4910      	ldr	r1, [pc, #64]	@ (8001a0c <Shell_Init+0x6c>)
 80019cc:	4811      	ldr	r0, [pc, #68]	@ (8001a14 <Shell_Init+0x74>)
 80019ce:	f004 ffa9 	bl	8006924 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 80019d2:	4811      	ldr	r0, [pc, #68]	@ (8001a18 <Shell_Init+0x78>)
 80019d4:	f7fe fc2e 	bl	8000234 <strlen>
 80019d8:	4603      	mov	r3, r0
 80019da:	b29a      	uxth	r2, r3
 80019dc:	f04f 33ff 	mov.w	r3, #4294967295
 80019e0:	490d      	ldr	r1, [pc, #52]	@ (8001a18 <Shell_Init+0x78>)
 80019e2:	480c      	ldr	r0, [pc, #48]	@ (8001a14 <Shell_Init+0x74>)
 80019e4:	f004 ff07 	bl	80067f6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 80019e8:	480c      	ldr	r0, [pc, #48]	@ (8001a1c <Shell_Init+0x7c>)
 80019ea:	f7fe fc23 	bl	8000234 <strlen>
 80019ee:	4603      	mov	r3, r0
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	f04f 33ff 	mov.w	r3, #4294967295
 80019f6:	4909      	ldr	r1, [pc, #36]	@ (8001a1c <Shell_Init+0x7c>)
 80019f8:	4806      	ldr	r0, [pc, #24]	@ (8001a14 <Shell_Init+0x74>)
 80019fa:	f004 fefc 	bl	80067f6 <HAL_UART_Transmit>
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	200004b0 	.word	0x200004b0
 8001a08:	2000046c 	.word	0x2000046c
 8001a0c:	20000428 	.word	0x20000428
 8001a10:	2000042c 	.word	0x2000042c
 8001a14:	20000304 	.word	0x20000304
 8001a18:	20000020 	.word	0x20000020
 8001a1c:	20000004 	.word	0x20000004

08001a20 <Shell_Loop>:
		HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
	}
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
	newCmdReady = 0;
}*/
void Shell_Loop(void){
 8001a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a22:	b097      	sub	sp, #92	@ 0x5c
 8001a24:	af10      	add	r7, sp, #64	@ 0x40


	if(uartRxReceived){
 8001a26:	4b8e      	ldr	r3, [pc, #568]	@ (8001c60 <Shell_Loop+0x240>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d063      	beq.n	8001af6 <Shell_Loop+0xd6>
		switch(uartRxBuffer[0]){
 8001a2e:	4b8d      	ldr	r3, [pc, #564]	@ (8001c64 <Shell_Loop+0x244>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b08      	cmp	r3, #8
 8001a34:	d034      	beq.n	8001aa0 <Shell_Loop+0x80>
 8001a36:	2b0d      	cmp	r3, #13
 8001a38:	d148      	bne.n	8001acc <Shell_Loop+0xac>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8001a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3e:	2203      	movs	r2, #3
 8001a40:	4989      	ldr	r1, [pc, #548]	@ (8001c68 <Shell_Loop+0x248>)
 8001a42:	488a      	ldr	r0, [pc, #552]	@ (8001c6c <Shell_Loop+0x24c>)
 8001a44:	f004 fed7 	bl	80067f6 <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 8001a48:	4b89      	ldr	r3, [pc, #548]	@ (8001c70 <Shell_Loop+0x250>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a89      	ldr	r2, [pc, #548]	@ (8001c74 <Shell_Loop+0x254>)
 8001a4e:	2100      	movs	r1, #0
 8001a50:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 8001a52:	4b89      	ldr	r3, [pc, #548]	@ (8001c78 <Shell_Loop+0x258>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 8001a58:	4988      	ldr	r1, [pc, #544]	@ (8001c7c <Shell_Loop+0x25c>)
 8001a5a:	4886      	ldr	r0, [pc, #536]	@ (8001c74 <Shell_Loop+0x254>)
 8001a5c:	f007 f8bc 	bl	8008bd8 <strtok>
 8001a60:	4603      	mov	r3, r0
 8001a62:	4a87      	ldr	r2, [pc, #540]	@ (8001c80 <Shell_Loop+0x260>)
 8001a64:	6013      	str	r3, [r2, #0]
			while(token != NULL){
 8001a66:	e010      	b.n	8001a8a <Shell_Loop+0x6a>
				argv[argc++] = token;
 8001a68:	4b83      	ldr	r3, [pc, #524]	@ (8001c78 <Shell_Loop+0x258>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	1c5a      	adds	r2, r3, #1
 8001a6e:	4982      	ldr	r1, [pc, #520]	@ (8001c78 <Shell_Loop+0x258>)
 8001a70:	600a      	str	r2, [r1, #0]
 8001a72:	4a83      	ldr	r2, [pc, #524]	@ (8001c80 <Shell_Loop+0x260>)
 8001a74:	6812      	ldr	r2, [r2, #0]
 8001a76:	4983      	ldr	r1, [pc, #524]	@ (8001c84 <Shell_Loop+0x264>)
 8001a78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 8001a7c:	497f      	ldr	r1, [pc, #508]	@ (8001c7c <Shell_Loop+0x25c>)
 8001a7e:	2000      	movs	r0, #0
 8001a80:	f007 f8aa 	bl	8008bd8 <strtok>
 8001a84:	4603      	mov	r3, r0
 8001a86:	4a7e      	ldr	r2, [pc, #504]	@ (8001c80 <Shell_Loop+0x260>)
 8001a88:	6013      	str	r3, [r2, #0]
			while(token != NULL){
 8001a8a:	4b7d      	ldr	r3, [pc, #500]	@ (8001c80 <Shell_Loop+0x260>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1ea      	bne.n	8001a68 <Shell_Loop+0x48>
			}
			idx_cmd = 0;
 8001a92:	4b77      	ldr	r3, [pc, #476]	@ (8001c70 <Shell_Loop+0x250>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 8001a98:	4b7b      	ldr	r3, [pc, #492]	@ (8001c88 <Shell_Loop+0x268>)
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	601a      	str	r2, [r3, #0]
			break;
 8001a9e:	e027      	b.n	8001af0 <Shell_Loop+0xd0>
		case ASCII_BACK: // Suppression du dernier caractère
			if (idx_cmd > 0) { // Eviter les index négatifs
 8001aa0:	4b73      	ldr	r3, [pc, #460]	@ (8001c70 <Shell_Loop+0x250>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	dd22      	ble.n	8001aee <Shell_Loop+0xce>
				cmdBuffer[--idx_cmd] = '\0';
 8001aa8:	4b71      	ldr	r3, [pc, #452]	@ (8001c70 <Shell_Loop+0x250>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	3b01      	subs	r3, #1
 8001aae:	4a70      	ldr	r2, [pc, #448]	@ (8001c70 <Shell_Loop+0x250>)
 8001ab0:	6013      	str	r3, [r2, #0]
 8001ab2:	4b6f      	ldr	r3, [pc, #444]	@ (8001c70 <Shell_Loop+0x250>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a6f      	ldr	r2, [pc, #444]	@ (8001c74 <Shell_Loop+0x254>)
 8001ab8:	2100      	movs	r1, #0
 8001aba:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 8001abc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac0:	2204      	movs	r2, #4
 8001ac2:	4972      	ldr	r1, [pc, #456]	@ (8001c8c <Shell_Loop+0x26c>)
 8001ac4:	4869      	ldr	r0, [pc, #420]	@ (8001c6c <Shell_Loop+0x24c>)
 8001ac6:	f004 fe96 	bl	80067f6 <HAL_UART_Transmit>
			}
			break;
 8001aca:	e010      	b.n	8001aee <Shell_Loop+0xce>
		default: // Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8001acc:	4b68      	ldr	r3, [pc, #416]	@ (8001c70 <Shell_Loop+0x250>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	1c5a      	adds	r2, r3, #1
 8001ad2:	4967      	ldr	r1, [pc, #412]	@ (8001c70 <Shell_Loop+0x250>)
 8001ad4:	600a      	str	r2, [r1, #0]
 8001ad6:	4a63      	ldr	r2, [pc, #396]	@ (8001c64 <Shell_Loop+0x244>)
 8001ad8:	7811      	ldrb	r1, [r2, #0]
 8001ada:	4a66      	ldr	r2, [pc, #408]	@ (8001c74 <Shell_Loop+0x254>)
 8001adc:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8001ade:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	495f      	ldr	r1, [pc, #380]	@ (8001c64 <Shell_Loop+0x244>)
 8001ae6:	4861      	ldr	r0, [pc, #388]	@ (8001c6c <Shell_Loop+0x24c>)
 8001ae8:	f004 fe85 	bl	80067f6 <HAL_UART_Transmit>
 8001aec:	e000      	b.n	8001af0 <Shell_Loop+0xd0>
			break;
 8001aee:	bf00      	nop
		}
		uartRxReceived = 0;
 8001af0:	4b5b      	ldr	r3, [pc, #364]	@ (8001c60 <Shell_Loop+0x240>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady){
 8001af6:	4b64      	ldr	r3, [pc, #400]	@ (8001c88 <Shell_Loop+0x268>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 8132 	beq.w	8001d64 <Shell_Loop+0x344>
		int commandRecognized = 0; // Indicateur pour vérifier si une commande est reconnue
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]

		if(strcmp(argv[0], "WhereisBrian?") == 0){
 8001b04:	4b5f      	ldr	r3, [pc, #380]	@ (8001c84 <Shell_Loop+0x264>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4961      	ldr	r1, [pc, #388]	@ (8001c90 <Shell_Loop+0x270>)
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fb88 	bl	8000220 <strcmp>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d109      	bne.n	8001b2a <Shell_Loop+0x10a>
			HAL_UART_Transmit(&huart2, brian, sizeof(brian), HAL_MAX_DELAY);
 8001b16:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1a:	221a      	movs	r2, #26
 8001b1c:	495d      	ldr	r1, [pc, #372]	@ (8001c94 <Shell_Loop+0x274>)
 8001b1e:	4853      	ldr	r0, [pc, #332]	@ (8001c6c <Shell_Loop+0x24c>)
 8001b20:	f004 fe69 	bl	80067f6 <HAL_UART_Transmit>
			commandRecognized = 1;
 8001b24:	2301      	movs	r3, #1
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	e108      	b.n	8001d3c <Shell_Loop+0x31c>
		}
		else if(strcmp(argv[0], "help") == 0){
 8001b2a:	4b56      	ldr	r3, [pc, #344]	@ (8001c84 <Shell_Loop+0x264>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	495a      	ldr	r1, [pc, #360]	@ (8001c98 <Shell_Loop+0x278>)
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7fe fb75 	bl	8000220 <strcmp>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d110      	bne.n	8001b5e <Shell_Loop+0x13e>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Print all available functions here\r\n");
 8001b3c:	4a57      	ldr	r2, [pc, #348]	@ (8001c9c <Shell_Loop+0x27c>)
 8001b3e:	2140      	movs	r1, #64	@ 0x40
 8001b40:	4857      	ldr	r0, [pc, #348]	@ (8001ca0 <Shell_Loop+0x280>)
 8001b42:	f006 ffc9 	bl	8008ad8 <sniprintf>
 8001b46:	6038      	str	r0, [r7, #0]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b50:	4953      	ldr	r1, [pc, #332]	@ (8001ca0 <Shell_Loop+0x280>)
 8001b52:	4846      	ldr	r0, [pc, #280]	@ (8001c6c <Shell_Loop+0x24c>)
 8001b54:	f004 fe4f 	bl	80067f6 <HAL_UART_Transmit>
			commandRecognized = 1;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	617b      	str	r3, [r7, #20]
 8001b5c:	e0ee      	b.n	8001d3c <Shell_Loop+0x31c>
		}
		else if( strcmp(argv[0], "start") == 0){
 8001b5e:	4b49      	ldr	r3, [pc, #292]	@ (8001c84 <Shell_Loop+0x264>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4950      	ldr	r1, [pc, #320]	@ (8001ca4 <Shell_Loop+0x284>)
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7fe fb5b 	bl	8000220 <strcmp>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d114      	bne.n	8001b9a <Shell_Loop+0x17a>
			start_PWM (htim1,TIM_CHANNEL_1);
 8001b70:	4e4d      	ldr	r6, [pc, #308]	@ (8001ca8 <Shell_Loop+0x288>)
 8001b72:	2300      	movs	r3, #0
 8001b74:	930f      	str	r3, [sp, #60]	@ 0x3c
 8001b76:	466d      	mov	r5, sp
 8001b78:	f106 0410 	add.w	r4, r6, #16
 8001b7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b88:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001b8c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001b90:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001b94:	f7ff feb6 	bl	8001904 <start_PWM>
 8001b98:	e0d0      	b.n	8001d3c <Shell_Loop+0x31c>


		}
		else if(strcmp(argv[0], "stop") == 0 ){
 8001b9a:	4b3a      	ldr	r3, [pc, #232]	@ (8001c84 <Shell_Loop+0x264>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4943      	ldr	r1, [pc, #268]	@ (8001cac <Shell_Loop+0x28c>)
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe fb3d 	bl	8000220 <strcmp>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d128      	bne.n	8001bfe <Shell_Loop+0x1de>
			stop_PWM (htim1,TIM_CHANNEL_1);
 8001bac:	4e3e      	ldr	r6, [pc, #248]	@ (8001ca8 <Shell_Loop+0x288>)
 8001bae:	2300      	movs	r3, #0
 8001bb0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8001bb2:	466d      	mov	r5, sp
 8001bb4:	f106 0410 	add.w	r4, r6, #16
 8001bb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bc4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001bc8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001bcc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001bd0:	f7ff fece 	bl	8001970 <stop_PWM>
			stop_PWM (htim1,TIM_CHANNEL_2);
 8001bd4:	4e34      	ldr	r6, [pc, #208]	@ (8001ca8 <Shell_Loop+0x288>)
 8001bd6:	2304      	movs	r3, #4
 8001bd8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8001bda:	466d      	mov	r5, sp
 8001bdc:	f106 0410 	add.w	r4, r6, #16
 8001be0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001be2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001be4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001be6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001be8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bec:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001bf0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001bf4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001bf8:	f7ff feba 	bl	8001970 <stop_PWM>
 8001bfc:	e09e      	b.n	8001d3c <Shell_Loop+0x31c>

		}


		else if(strcmp(argv[0], "speed") == 0) {
 8001bfe:	4b21      	ldr	r3, [pc, #132]	@ (8001c84 <Shell_Loop+0x264>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	492b      	ldr	r1, [pc, #172]	@ (8001cb0 <Shell_Loop+0x290>)
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7fe fb0b 	bl	8000220 <strcmp>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f040 8095 	bne.w	8001d3c <Shell_Loop+0x31c>
			if(argc > 1) {
 8001c12:	4b19      	ldr	r3, [pc, #100]	@ (8001c78 <Shell_Loop+0x258>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	dd50      	ble.n	8001cbc <Shell_Loop+0x29c>
				int speedValue = atoi(argv[1]);
 8001c1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001c84 <Shell_Loop+0x264>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f006 fe10 	bl	8008844 <atoi>
 8001c24:	6138      	str	r0, [r7, #16]
				if(speedValue >= 200 && speedValue <= 2000){
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	2bc7      	cmp	r3, #199	@ 0xc7
 8001c2a:	dd11      	ble.n	8001c50 <Shell_Loop+0x230>
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001c32:	dc0d      	bgt.n	8001c50 <Shell_Loop+0x230>
					//On met le rapport cyclique à la valeur du rapport cyclique renseigné
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speedValue);
 8001c34:	4b1c      	ldr	r3, [pc, #112]	@ (8001ca8 <Shell_Loop+0x288>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	635a      	str	r2, [r3, #52]	@ 0x34
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, TIM1->ARR - speedValue);
 8001c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb4 <Shell_Loop+0x294>)
 8001c3e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	4b19      	ldr	r3, [pc, #100]	@ (8001ca8 <Shell_Loop+0x288>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	1a8a      	subs	r2, r1, r2
 8001c48:	639a      	str	r2, [r3, #56]	@ 0x38
					commandRecognized = 1;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	617b      	str	r3, [r7, #20]
 8001c4e:	e03c      	b.n	8001cca <Shell_Loop+0x2aa>
				} else {
					HAL_UART_Transmit(&huart2, (uint8_t *)"Invalid speed value\r\n", strlen("Invalid speed value\r\n"), HAL_MAX_DELAY);
 8001c50:	f04f 33ff 	mov.w	r3, #4294967295
 8001c54:	2215      	movs	r2, #21
 8001c56:	4918      	ldr	r1, [pc, #96]	@ (8001cb8 <Shell_Loop+0x298>)
 8001c58:	4804      	ldr	r0, [pc, #16]	@ (8001c6c <Shell_Loop+0x24c>)
 8001c5a:	f004 fdcc 	bl	80067f6 <HAL_UART_Transmit>
 8001c5e:	e034      	b.n	8001cca <Shell_Loop+0x2aa>
 8001c60:	20000424 	.word	0x20000424
 8001c64:	20000428 	.word	0x20000428
 8001c68:	20000088 	.word	0x20000088
 8001c6c:	20000304 	.word	0x20000304
 8001c70:	200004ac 	.word	0x200004ac
 8001c74:	2000046c 	.word	0x2000046c
 8001c78:	200004d4 	.word	0x200004d4
 8001c7c:	08009d38 	.word	0x08009d38
 8001c80:	200004d8 	.word	0x200004d8
 8001c84:	200004b0 	.word	0x200004b0
 8001c88:	200004dc 	.word	0x200004dc
 8001c8c:	2000008c 	.word	0x2000008c
 8001c90:	08009d3c 	.word	0x08009d3c
 8001c94:	200000a4 	.word	0x200000a4
 8001c98:	08009d4c 	.word	0x08009d4c
 8001c9c:	08009d54 	.word	0x08009d54
 8001ca0:	2000042c 	.word	0x2000042c
 8001ca4:	08009d7c 	.word	0x08009d7c
 8001ca8:	2000026c 	.word	0x2000026c
 8001cac:	08009d84 	.word	0x08009d84
 8001cb0:	08009d8c 	.word	0x08009d8c
 8001cb4:	40012c00 	.word	0x40012c00
 8001cb8:	08009d94 	.word	0x08009d94
				}
			} else {
				HAL_UART_Transmit(&huart2, (uint8_t *)"Please provide a speed value\r\n", strlen("Please provide a speed value\r\n"), HAL_MAX_DELAY);
 8001cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc0:	221e      	movs	r2, #30
 8001cc2:	492a      	ldr	r1, [pc, #168]	@ (8001d6c <Shell_Loop+0x34c>)
 8001cc4:	482a      	ldr	r0, [pc, #168]	@ (8001d70 <Shell_Loop+0x350>)
 8001cc6:	f004 fd96 	bl	80067f6 <HAL_UART_Transmit>
			}

			HAL_ADC_Start(&hadc1);
 8001cca:	482a      	ldr	r0, [pc, #168]	@ (8001d74 <Shell_Loop+0x354>)
 8001ccc:	f000 fcc8 	bl	8002660 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd4:	4827      	ldr	r0, [pc, #156]	@ (8001d74 <Shell_Loop+0x354>)
 8001cd6:	f000 fda7 	bl	8002828 <HAL_ADC_PollForConversion>
			int value = HAL_ADC_GetValue(&hadc1);
 8001cda:	4826      	ldr	r0, [pc, #152]	@ (8001d74 <Shell_Loop+0x354>)
 8001cdc:	f000 feaa 	bl	8002a34 <HAL_ADC_GetValue>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	60fb      	str	r3, [r7, #12]
			float Imes = (value-((1,65))/(0,05));
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	3b0d      	subs	r3, #13
 8001ce8:	ee07 3a90 	vmov	s15, r3
 8001cec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cf0:	edc7 7a02 	vstr	s15, [r7, #8]
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Valeur : %4d \r\n", value);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	4a20      	ldr	r2, [pc, #128]	@ (8001d78 <Shell_Loop+0x358>)
 8001cf8:	2140      	movs	r1, #64	@ 0x40
 8001cfa:	4820      	ldr	r0, [pc, #128]	@ (8001d7c <Shell_Loop+0x35c>)
 8001cfc:	f006 feec 	bl	8008ad8 <sniprintf>
 8001d00:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0a:	491c      	ldr	r1, [pc, #112]	@ (8001d7c <Shell_Loop+0x35c>)
 8001d0c:	4818      	ldr	r0, [pc, #96]	@ (8001d70 <Shell_Loop+0x350>)
 8001d0e:	f004 fd72 	bl	80067f6 <HAL_UART_Transmit>
			uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "ValeurImes : %4d \r\n", Imes);
 8001d12:	68b8      	ldr	r0, [r7, #8]
 8001d14:	f7fe fc50 	bl	80005b8 <__aeabi_f2d>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	e9cd 2300 	strd	r2, r3, [sp]
 8001d20:	4a17      	ldr	r2, [pc, #92]	@ (8001d80 <Shell_Loop+0x360>)
 8001d22:	2140      	movs	r1, #64	@ 0x40
 8001d24:	4815      	ldr	r0, [pc, #84]	@ (8001d7c <Shell_Loop+0x35c>)
 8001d26:	f006 fed7 	bl	8008ad8 <sniprintf>
 8001d2a:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	f04f 33ff 	mov.w	r3, #4294967295
 8001d34:	4911      	ldr	r1, [pc, #68]	@ (8001d7c <Shell_Loop+0x35c>)
 8001d36:	480e      	ldr	r0, [pc, #56]	@ (8001d70 <Shell_Loop+0x350>)
 8001d38:	f004 fd5d 	bl	80067f6 <HAL_UART_Transmit>
		}

		// Si aucune commande n'est reconnue, envoyer "Command not found"
		if (!commandRecognized) {
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d106      	bne.n	8001d50 <Shell_Loop+0x330>
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8001d42:	f04f 33ff 	mov.w	r3, #4294967295
 8001d46:	2214      	movs	r2, #20
 8001d48:	490e      	ldr	r1, [pc, #56]	@ (8001d84 <Shell_Loop+0x364>)
 8001d4a:	4809      	ldr	r0, [pc, #36]	@ (8001d70 <Shell_Loop+0x350>)
 8001d4c:	f004 fd53 	bl	80067f6 <HAL_UART_Transmit>
		}

		newCmdReady = 0; // Réinitialiser seulement après exécution ou rejet de la commande
 8001d50:	4b0d      	ldr	r3, [pc, #52]	@ (8001d88 <Shell_Loop+0x368>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8001d56:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5a:	221c      	movs	r2, #28
 8001d5c:	490b      	ldr	r1, [pc, #44]	@ (8001d8c <Shell_Loop+0x36c>)
 8001d5e:	4804      	ldr	r0, [pc, #16]	@ (8001d70 <Shell_Loop+0x350>)
 8001d60:	f004 fd49 	bl	80067f6 <HAL_UART_Transmit>
	}

}
 8001d64:	bf00      	nop
 8001d66:	371c      	adds	r7, #28
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d6c:	08009dac 	.word	0x08009dac
 8001d70:	20000304 	.word	0x20000304
 8001d74:	20000140 	.word	0x20000140
 8001d78:	08009dcc 	.word	0x08009dcc
 8001d7c:	2000042c 	.word	0x2000042c
 8001d80:	08009ddc 	.word	0x08009ddc
 8001d84:	20000090 	.word	0x20000090
 8001d88:	200004dc 	.word	0x200004dc
 8001d8c:	20000004 	.word	0x20000004

08001d90 <HAL_UART_RxCpltCallback>:




void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8001d98:	4b05      	ldr	r3, [pc, #20]	@ (8001db0 <HAL_UART_RxCpltCallback+0x20>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001d9e:	2201      	movs	r2, #1
 8001da0:	4904      	ldr	r1, [pc, #16]	@ (8001db4 <HAL_UART_RxCpltCallback+0x24>)
 8001da2:	4805      	ldr	r0, [pc, #20]	@ (8001db8 <HAL_UART_RxCpltCallback+0x28>)
 8001da4:	f004 fdbe 	bl	8006924 <HAL_UART_Receive_IT>
}
 8001da8:	bf00      	nop
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	20000424 	.word	0x20000424
 8001db4:	20000428 	.word	0x20000428
 8001db8:	20000304 	.word	0x20000304

08001dbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001dbc:	480d      	ldr	r0, [pc, #52]	@ (8001df4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001dbe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dc0:	480d      	ldr	r0, [pc, #52]	@ (8001df8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001dc2:	490e      	ldr	r1, [pc, #56]	@ (8001dfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001dc4:	4a0e      	ldr	r2, [pc, #56]	@ (8001e00 <LoopForever+0xe>)
  movs r3, #0
 8001dc6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001dc8:	e002      	b.n	8001dd0 <LoopCopyDataInit>

08001dca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dce:	3304      	adds	r3, #4

08001dd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dd4:	d3f9      	bcc.n	8001dca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dd6:	4a0b      	ldr	r2, [pc, #44]	@ (8001e04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dd8:	4c0b      	ldr	r4, [pc, #44]	@ (8001e08 <LoopForever+0x16>)
  movs r3, #0
 8001dda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ddc:	e001      	b.n	8001de2 <LoopFillZerobss>

08001dde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001de0:	3204      	adds	r2, #4

08001de2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001de2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001de4:	d3fb      	bcc.n	8001dde <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001de6:	f7ff fa59 	bl	800129c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dea:	f006 ff9d 	bl	8008d28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dee:	f7ff f81b 	bl	8000e28 <main>

08001df2 <LoopForever>:

LoopForever:
    b LoopForever
 8001df2:	e7fe      	b.n	8001df2 <LoopForever>
  ldr   r0, =_estack
 8001df4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dfc:	20000124 	.word	0x20000124
  ldr r2, =_sidata
 8001e00:	0800a024 	.word	0x0800a024
  ldr r2, =_sbss
 8001e04:	20000124 	.word	0x20000124
  ldr r4, =_ebss
 8001e08:	20000630 	.word	0x20000630

08001e0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e0c:	e7fe      	b.n	8001e0c <ADC1_2_IRQHandler>

08001e0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e14:	2300      	movs	r3, #0
 8001e16:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e18:	2003      	movs	r0, #3
 8001e1a:	f001 fc96 	bl	800374a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e1e:	200f      	movs	r0, #15
 8001e20:	f7ff f8b4 	bl	8000f8c <HAL_InitTick>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d002      	beq.n	8001e30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	71fb      	strb	r3, [r7, #7]
 8001e2e:	e001      	b.n	8001e34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e30:	f7ff f888 	bl	8000f44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e34:	79fb      	ldrb	r3, [r7, #7]

}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
	...

08001e40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e44:	4b05      	ldr	r3, [pc, #20]	@ (8001e5c <HAL_IncTick+0x1c>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	4b05      	ldr	r3, [pc, #20]	@ (8001e60 <HAL_IncTick+0x20>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	4a03      	ldr	r2, [pc, #12]	@ (8001e5c <HAL_IncTick+0x1c>)
 8001e50:	6013      	str	r3, [r2, #0]
}
 8001e52:	bf00      	nop
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	200004e0 	.word	0x200004e0
 8001e60:	200000c4 	.word	0x200000c4

08001e64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  return uwTick;
 8001e68:	4b03      	ldr	r3, [pc, #12]	@ (8001e78 <HAL_GetTick+0x14>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	200004e0 	.word	0x200004e0

08001e7c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	431a      	orrs	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	609a      	str	r2, [r3, #8]
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
 8001eaa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	609a      	str	r2, [r3, #8]
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b087      	sub	sp, #28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
 8001ef0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	3360      	adds	r3, #96	@ 0x60
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	4b08      	ldr	r3, [pc, #32]	@ (8001f28 <LL_ADC_SetOffset+0x44>)
 8001f06:	4013      	ands	r3, r2
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	4313      	orrs	r3, r2
 8001f14:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f1c:	bf00      	nop
 8001f1e:	371c      	adds	r7, #28
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	03fff000 	.word	0x03fff000

08001f2c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	3360      	adds	r3, #96	@ 0x60
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b087      	sub	sp, #28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	3360      	adds	r3, #96	@ 0x60
 8001f68:	461a      	mov	r2, r3
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f82:	bf00      	nop
 8001f84:	371c      	adds	r7, #28
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b087      	sub	sp, #28
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	60f8      	str	r0, [r7, #12]
 8001f96:	60b9      	str	r1, [r7, #8]
 8001f98:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	3360      	adds	r3, #96	@ 0x60
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001fb8:	bf00      	nop
 8001fba:	371c      	adds	r7, #28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b087      	sub	sp, #28
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	3360      	adds	r3, #96	@ 0x60
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001fee:	bf00      	nop
 8001ff0:	371c      	adds	r7, #28
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
 8002002:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	695b      	ldr	r3, [r3, #20]
 8002008:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	431a      	orrs	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	615a      	str	r2, [r3, #20]
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002034:	2301      	movs	r3, #1
 8002036:	e000      	b.n	800203a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002046:	b480      	push	{r7}
 8002048:	b087      	sub	sp, #28
 800204a:	af00      	add	r7, sp, #0
 800204c:	60f8      	str	r0, [r7, #12]
 800204e:	60b9      	str	r1, [r7, #8]
 8002050:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	3330      	adds	r3, #48	@ 0x30
 8002056:	461a      	mov	r2, r3
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	0a1b      	lsrs	r3, r3, #8
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	f003 030c 	and.w	r3, r3, #12
 8002062:	4413      	add	r3, r2
 8002064:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	f003 031f 	and.w	r3, r3, #31
 8002070:	211f      	movs	r1, #31
 8002072:	fa01 f303 	lsl.w	r3, r1, r3
 8002076:	43db      	mvns	r3, r3
 8002078:	401a      	ands	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	0e9b      	lsrs	r3, r3, #26
 800207e:	f003 011f 	and.w	r1, r3, #31
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	f003 031f 	and.w	r3, r3, #31
 8002088:	fa01 f303 	lsl.w	r3, r1, r3
 800208c:	431a      	orrs	r2, r3
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002092:	bf00      	nop
 8002094:	371c      	adds	r7, #28
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800209e:	b480      	push	{r7}
 80020a0:	b087      	sub	sp, #28
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	60f8      	str	r0, [r7, #12]
 80020a6:	60b9      	str	r1, [r7, #8]
 80020a8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	3314      	adds	r3, #20
 80020ae:	461a      	mov	r2, r3
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	0e5b      	lsrs	r3, r3, #25
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	f003 0304 	and.w	r3, r3, #4
 80020ba:	4413      	add	r3, r2
 80020bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	0d1b      	lsrs	r3, r3, #20
 80020c6:	f003 031f 	and.w	r3, r3, #31
 80020ca:	2107      	movs	r1, #7
 80020cc:	fa01 f303 	lsl.w	r3, r1, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	401a      	ands	r2, r3
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	0d1b      	lsrs	r3, r3, #20
 80020d8:	f003 031f 	and.w	r3, r3, #31
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	fa01 f303 	lsl.w	r3, r1, r3
 80020e2:	431a      	orrs	r2, r3
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80020e8:	bf00      	nop
 80020ea:	371c      	adds	r7, #28
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a0f      	ldr	r2, [pc, #60]	@ (8002140 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d10a      	bne.n	800211e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002114:	431a      	orrs	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 800211c:	e00a      	b.n	8002134 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800212a:	43db      	mvns	r3, r3
 800212c:	401a      	ands	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8002134:	bf00      	nop
 8002136:	3714      	adds	r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	407f0000 	.word	0x407f0000

08002144 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 031f 	and.w	r3, r3, #31
}
 8002154:	4618      	mov	r0, r3
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002170:	4618      	mov	r0, r3
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800218c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6093      	str	r3, [r2, #8]
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80021b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80021b4:	d101      	bne.n	80021ba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80021d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021dc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002200:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002204:	d101      	bne.n	800220a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002206:	2301      	movs	r3, #1
 8002208:	e000      	b.n	800220c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002228:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800222c:	f043 0201 	orr.w	r2, r3, #1
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b01      	cmp	r3, #1
 8002252:	d101      	bne.n	8002258 <LL_ADC_IsEnabled+0x18>
 8002254:	2301      	movs	r3, #1
 8002256:	e000      	b.n	800225a <LL_ADC_IsEnabled+0x1a>
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002276:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800227a:	f043 0204 	orr.w	r2, r3, #4
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800228e:	b480      	push	{r7}
 8002290:	b083      	sub	sp, #12
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f003 0304 	and.w	r3, r3, #4
 800229e:	2b04      	cmp	r3, #4
 80022a0:	d101      	bne.n	80022a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80022a2:	2301      	movs	r3, #1
 80022a4:	e000      	b.n	80022a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f003 0308 	and.w	r3, r3, #8
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	d101      	bne.n	80022cc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80022c8:	2301      	movs	r3, #1
 80022ca:	e000      	b.n	80022ce <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
	...

080022dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022dc:	b590      	push	{r4, r7, lr}
 80022de:	b089      	sub	sp, #36	@ 0x24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022e4:	2300      	movs	r3, #0
 80022e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80022e8:	2300      	movs	r3, #0
 80022ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e1af      	b.n	8002656 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002300:	2b00      	cmp	r3, #0
 8002302:	d109      	bne.n	8002318 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7fe fc05 	bl	8000b14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff ff3f 	bl	80021a0 <LL_ADC_IsDeepPowerDownEnabled>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d004      	beq.n	8002332 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff ff25 	bl	800217c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff ff5a 	bl	80021f0 <LL_ADC_IsInternalRegulatorEnabled>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d115      	bne.n	800236e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff ff3e 	bl	80021c8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800234c:	4b9f      	ldr	r3, [pc, #636]	@ (80025cc <HAL_ADC_Init+0x2f0>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	099b      	lsrs	r3, r3, #6
 8002352:	4a9f      	ldr	r2, [pc, #636]	@ (80025d0 <HAL_ADC_Init+0x2f4>)
 8002354:	fba2 2303 	umull	r2, r3, r2, r3
 8002358:	099b      	lsrs	r3, r3, #6
 800235a:	3301      	adds	r3, #1
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002360:	e002      	b.n	8002368 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	3b01      	subs	r3, #1
 8002366:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f9      	bne.n	8002362 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff ff3c 	bl	80021f0 <LL_ADC_IsInternalRegulatorEnabled>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10d      	bne.n	800239a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002382:	f043 0210 	orr.w	r2, r3, #16
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800238e:	f043 0201 	orr.w	r2, r3, #1
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff ff75 	bl	800228e <LL_ADC_REG_IsConversionOngoing>
 80023a4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023aa:	f003 0310 	and.w	r3, r3, #16
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f040 8148 	bne.w	8002644 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f040 8144 	bne.w	8002644 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023c0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80023c4:	f043 0202 	orr.w	r2, r3, #2
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff ff35 	bl	8002240 <LL_ADC_IsEnabled>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d141      	bne.n	8002460 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023e4:	d004      	beq.n	80023f0 <HAL_ADC_Init+0x114>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a7a      	ldr	r2, [pc, #488]	@ (80025d4 <HAL_ADC_Init+0x2f8>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d10f      	bne.n	8002410 <HAL_ADC_Init+0x134>
 80023f0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80023f4:	f7ff ff24 	bl	8002240 <LL_ADC_IsEnabled>
 80023f8:	4604      	mov	r4, r0
 80023fa:	4876      	ldr	r0, [pc, #472]	@ (80025d4 <HAL_ADC_Init+0x2f8>)
 80023fc:	f7ff ff20 	bl	8002240 <LL_ADC_IsEnabled>
 8002400:	4603      	mov	r3, r0
 8002402:	4323      	orrs	r3, r4
 8002404:	2b00      	cmp	r3, #0
 8002406:	bf0c      	ite	eq
 8002408:	2301      	moveq	r3, #1
 800240a:	2300      	movne	r3, #0
 800240c:	b2db      	uxtb	r3, r3
 800240e:	e012      	b.n	8002436 <HAL_ADC_Init+0x15a>
 8002410:	4871      	ldr	r0, [pc, #452]	@ (80025d8 <HAL_ADC_Init+0x2fc>)
 8002412:	f7ff ff15 	bl	8002240 <LL_ADC_IsEnabled>
 8002416:	4604      	mov	r4, r0
 8002418:	4870      	ldr	r0, [pc, #448]	@ (80025dc <HAL_ADC_Init+0x300>)
 800241a:	f7ff ff11 	bl	8002240 <LL_ADC_IsEnabled>
 800241e:	4603      	mov	r3, r0
 8002420:	431c      	orrs	r4, r3
 8002422:	486f      	ldr	r0, [pc, #444]	@ (80025e0 <HAL_ADC_Init+0x304>)
 8002424:	f7ff ff0c 	bl	8002240 <LL_ADC_IsEnabled>
 8002428:	4603      	mov	r3, r0
 800242a:	4323      	orrs	r3, r4
 800242c:	2b00      	cmp	r3, #0
 800242e:	bf0c      	ite	eq
 8002430:	2301      	moveq	r3, #1
 8002432:	2300      	movne	r3, #0
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d012      	beq.n	8002460 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002442:	d004      	beq.n	800244e <HAL_ADC_Init+0x172>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a62      	ldr	r2, [pc, #392]	@ (80025d4 <HAL_ADC_Init+0x2f8>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d101      	bne.n	8002452 <HAL_ADC_Init+0x176>
 800244e:	4a65      	ldr	r2, [pc, #404]	@ (80025e4 <HAL_ADC_Init+0x308>)
 8002450:	e000      	b.n	8002454 <HAL_ADC_Init+0x178>
 8002452:	4a65      	ldr	r2, [pc, #404]	@ (80025e8 <HAL_ADC_Init+0x30c>)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	4619      	mov	r1, r3
 800245a:	4610      	mov	r0, r2
 800245c:	f7ff fd0e 	bl	8001e7c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	7f5b      	ldrb	r3, [r3, #29]
 8002464:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800246a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002470:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002476:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800247e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002480:	4313      	orrs	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800248a:	2b01      	cmp	r3, #1
 800248c:	d106      	bne.n	800249c <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002492:	3b01      	subs	r3, #1
 8002494:	045b      	lsls	r3, r3, #17
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4313      	orrs	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d009      	beq.n	80024b8 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68da      	ldr	r2, [r3, #12]
 80024be:	4b4b      	ldr	r3, [pc, #300]	@ (80025ec <HAL_ADC_Init+0x310>)
 80024c0:	4013      	ands	r3, r2
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	6812      	ldr	r2, [r2, #0]
 80024c6:	69b9      	ldr	r1, [r7, #24]
 80024c8:	430b      	orrs	r3, r1
 80024ca:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	430a      	orrs	r2, r1
 80024e0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff fed1 	bl	800228e <LL_ADC_REG_IsConversionOngoing>
 80024ec:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff fede 	bl	80022b4 <LL_ADC_INJ_IsConversionOngoing>
 80024f8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d17f      	bne.n	8002600 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d17c      	bne.n	8002600 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800250a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002512:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002514:	4313      	orrs	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002522:	f023 0302 	bic.w	r3, r3, #2
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	6812      	ldr	r2, [r2, #0]
 800252a:	69b9      	ldr	r1, [r7, #24]
 800252c:	430b      	orrs	r3, r1
 800252e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d017      	beq.n	8002568 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	691a      	ldr	r2, [r3, #16]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002546:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002550:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002554:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	6911      	ldr	r1, [r2, #16]
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6812      	ldr	r2, [r2, #0]
 8002560:	430b      	orrs	r3, r1
 8002562:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002566:	e013      	b.n	8002590 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	691a      	ldr	r2, [r3, #16]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002576:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6812      	ldr	r2, [r2, #0]
 8002584:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002588:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800258c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002596:	2b01      	cmp	r3, #1
 8002598:	d12a      	bne.n	80025f0 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80025a4:	f023 0304 	bic.w	r3, r3, #4
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80025b0:	4311      	orrs	r1, r2
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80025b6:	4311      	orrs	r1, r2
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80025bc:	430a      	orrs	r2, r1
 80025be:	431a      	orrs	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f042 0201 	orr.w	r2, r2, #1
 80025c8:	611a      	str	r2, [r3, #16]
 80025ca:	e019      	b.n	8002600 <HAL_ADC_Init+0x324>
 80025cc:	20000000 	.word	0x20000000
 80025d0:	053e2d63 	.word	0x053e2d63
 80025d4:	50000100 	.word	0x50000100
 80025d8:	50000400 	.word	0x50000400
 80025dc:	50000500 	.word	0x50000500
 80025e0:	50000600 	.word	0x50000600
 80025e4:	50000300 	.word	0x50000300
 80025e8:	50000700 	.word	0x50000700
 80025ec:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	691a      	ldr	r2, [r3, #16]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f022 0201 	bic.w	r2, r2, #1
 80025fe:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	695b      	ldr	r3, [r3, #20]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d10c      	bne.n	8002622 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260e:	f023 010f 	bic.w	r1, r3, #15
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	1e5a      	subs	r2, r3, #1
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	430a      	orrs	r2, r1
 800261e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002620:	e007      	b.n	8002632 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 020f 	bic.w	r2, r2, #15
 8002630:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002636:	f023 0303 	bic.w	r3, r3, #3
 800263a:	f043 0201 	orr.w	r2, r3, #1
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002642:	e007      	b.n	8002654 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002648:	f043 0210 	orr.w	r2, r3, #16
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002654:	7ffb      	ldrb	r3, [r7, #31]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3724      	adds	r7, #36	@ 0x24
 800265a:	46bd      	mov	sp, r7
 800265c:	bd90      	pop	{r4, r7, pc}
 800265e:	bf00      	nop

08002660 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002670:	d004      	beq.n	800267c <HAL_ADC_Start+0x1c>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a67      	ldr	r2, [pc, #412]	@ (8002814 <HAL_ADC_Start+0x1b4>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d101      	bne.n	8002680 <HAL_ADC_Start+0x20>
 800267c:	4b66      	ldr	r3, [pc, #408]	@ (8002818 <HAL_ADC_Start+0x1b8>)
 800267e:	e000      	b.n	8002682 <HAL_ADC_Start+0x22>
 8002680:	4b66      	ldr	r3, [pc, #408]	@ (800281c <HAL_ADC_Start+0x1bc>)
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff fd5e 	bl	8002144 <LL_ADC_GetMultimode>
 8002688:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff fdfd 	bl	800228e <LL_ADC_REG_IsConversionOngoing>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	f040 80b4 	bne.w	8002804 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d101      	bne.n	80026aa <HAL_ADC_Start+0x4a>
 80026a6:	2302      	movs	r3, #2
 80026a8:	e0af      	b.n	800280a <HAL_ADC_Start+0x1aa>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 fe0c 	bl	80032d0 <ADC_Enable>
 80026b8:	4603      	mov	r3, r0
 80026ba:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80026bc:	7dfb      	ldrb	r3, [r7, #23]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f040 809b 	bne.w	80027fa <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80026cc:	f023 0301 	bic.w	r3, r3, #1
 80026d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a4d      	ldr	r2, [pc, #308]	@ (8002814 <HAL_ADC_Start+0x1b4>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d009      	beq.n	80026f6 <HAL_ADC_Start+0x96>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a4e      	ldr	r2, [pc, #312]	@ (8002820 <HAL_ADC_Start+0x1c0>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d002      	beq.n	80026f2 <HAL_ADC_Start+0x92>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	e003      	b.n	80026fa <HAL_ADC_Start+0x9a>
 80026f2:	4b4c      	ldr	r3, [pc, #304]	@ (8002824 <HAL_ADC_Start+0x1c4>)
 80026f4:	e001      	b.n	80026fa <HAL_ADC_Start+0x9a>
 80026f6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	6812      	ldr	r2, [r2, #0]
 80026fe:	4293      	cmp	r3, r2
 8002700:	d002      	beq.n	8002708 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d105      	bne.n	8002714 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800270c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002718:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800271c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002720:	d106      	bne.n	8002730 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002726:	f023 0206 	bic.w	r2, r3, #6
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	661a      	str	r2, [r3, #96]	@ 0x60
 800272e:	e002      	b.n	8002736 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	221c      	movs	r2, #28
 800273c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a32      	ldr	r2, [pc, #200]	@ (8002814 <HAL_ADC_Start+0x1b4>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d009      	beq.n	8002764 <HAL_ADC_Start+0x104>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a32      	ldr	r2, [pc, #200]	@ (8002820 <HAL_ADC_Start+0x1c0>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d002      	beq.n	8002760 <HAL_ADC_Start+0x100>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	e003      	b.n	8002768 <HAL_ADC_Start+0x108>
 8002760:	4b30      	ldr	r3, [pc, #192]	@ (8002824 <HAL_ADC_Start+0x1c4>)
 8002762:	e001      	b.n	8002768 <HAL_ADC_Start+0x108>
 8002764:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6812      	ldr	r2, [r2, #0]
 800276c:	4293      	cmp	r3, r2
 800276e:	d008      	beq.n	8002782 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d005      	beq.n	8002782 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	2b05      	cmp	r3, #5
 800277a:	d002      	beq.n	8002782 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	2b09      	cmp	r3, #9
 8002780:	d114      	bne.n	80027ac <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d007      	beq.n	80027a0 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002794:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002798:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff fd5e 	bl	8002266 <LL_ADC_REG_StartConversion>
 80027aa:	e02d      	b.n	8002808 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a15      	ldr	r2, [pc, #84]	@ (8002814 <HAL_ADC_Start+0x1b4>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d009      	beq.n	80027d6 <HAL_ADC_Start+0x176>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a16      	ldr	r2, [pc, #88]	@ (8002820 <HAL_ADC_Start+0x1c0>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d002      	beq.n	80027d2 <HAL_ADC_Start+0x172>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	e003      	b.n	80027da <HAL_ADC_Start+0x17a>
 80027d2:	4b14      	ldr	r3, [pc, #80]	@ (8002824 <HAL_ADC_Start+0x1c4>)
 80027d4:	e001      	b.n	80027da <HAL_ADC_Start+0x17a>
 80027d6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80027da:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00f      	beq.n	8002808 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ec:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80027f0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80027f8:	e006      	b.n	8002808 <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002802:	e001      	b.n	8002808 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002804:	2302      	movs	r3, #2
 8002806:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002808:	7dfb      	ldrb	r3, [r7, #23]
}
 800280a:	4618      	mov	r0, r3
 800280c:	3718      	adds	r7, #24
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	50000100 	.word	0x50000100
 8002818:	50000300 	.word	0x50000300
 800281c:	50000700 	.word	0x50000700
 8002820:	50000500 	.word	0x50000500
 8002824:	50000400 	.word	0x50000400

08002828 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b088      	sub	sp, #32
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800283a:	d004      	beq.n	8002846 <HAL_ADC_PollForConversion+0x1e>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a77      	ldr	r2, [pc, #476]	@ (8002a20 <HAL_ADC_PollForConversion+0x1f8>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d101      	bne.n	800284a <HAL_ADC_PollForConversion+0x22>
 8002846:	4b77      	ldr	r3, [pc, #476]	@ (8002a24 <HAL_ADC_PollForConversion+0x1fc>)
 8002848:	e000      	b.n	800284c <HAL_ADC_PollForConversion+0x24>
 800284a:	4b77      	ldr	r3, [pc, #476]	@ (8002a28 <HAL_ADC_PollForConversion+0x200>)
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff fc79 	bl	8002144 <LL_ADC_GetMultimode>
 8002852:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	2b08      	cmp	r3, #8
 800285a:	d102      	bne.n	8002862 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800285c:	2308      	movs	r3, #8
 800285e:	61fb      	str	r3, [r7, #28]
 8002860:	e037      	b.n	80028d2 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	2b05      	cmp	r3, #5
 800286c:	d002      	beq.n	8002874 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	2b09      	cmp	r3, #9
 8002872:	d111      	bne.n	8002898 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d007      	beq.n	8002892 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002886:	f043 0220 	orr.w	r2, r3, #32
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e0c1      	b.n	8002a16 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002892:	2304      	movs	r3, #4
 8002894:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002896:	e01c      	b.n	80028d2 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028a0:	d004      	beq.n	80028ac <HAL_ADC_PollForConversion+0x84>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a5e      	ldr	r2, [pc, #376]	@ (8002a20 <HAL_ADC_PollForConversion+0x1f8>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d101      	bne.n	80028b0 <HAL_ADC_PollForConversion+0x88>
 80028ac:	4b5d      	ldr	r3, [pc, #372]	@ (8002a24 <HAL_ADC_PollForConversion+0x1fc>)
 80028ae:	e000      	b.n	80028b2 <HAL_ADC_PollForConversion+0x8a>
 80028b0:	4b5d      	ldr	r3, [pc, #372]	@ (8002a28 <HAL_ADC_PollForConversion+0x200>)
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff fc54 	bl	8002160 <LL_ADC_GetMultiDMATransfer>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d007      	beq.n	80028ce <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c2:	f043 0220 	orr.w	r2, r3, #32
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e0a3      	b.n	8002a16 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80028ce:	2304      	movs	r3, #4
 80028d0:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80028d2:	f7ff fac7 	bl	8001e64 <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80028d8:	e021      	b.n	800291e <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e0:	d01d      	beq.n	800291e <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80028e2:	f7ff fabf 	bl	8001e64 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d302      	bcc.n	80028f8 <HAL_ADC_PollForConversion+0xd0>
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d112      	bne.n	800291e <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	4013      	ands	r3, r2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10b      	bne.n	800291e <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800290a:	f043 0204 	orr.w	r2, r3, #4
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e07b      	b.n	8002a16 <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	4013      	ands	r3, r2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d0d6      	beq.n	80028da <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002930:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff fb6f 	bl	8002020 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d01c      	beq.n	8002982 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	7f5b      	ldrb	r3, [r3, #29]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d118      	bne.n	8002982 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b08      	cmp	r3, #8
 800295c:	d111      	bne.n	8002982 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002962:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800296e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d105      	bne.n	8002982 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800297a:	f043 0201 	orr.w	r2, r3, #1
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a26      	ldr	r2, [pc, #152]	@ (8002a20 <HAL_ADC_PollForConversion+0x1f8>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d009      	beq.n	80029a0 <HAL_ADC_PollForConversion+0x178>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a26      	ldr	r2, [pc, #152]	@ (8002a2c <HAL_ADC_PollForConversion+0x204>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d002      	beq.n	800299c <HAL_ADC_PollForConversion+0x174>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	e003      	b.n	80029a4 <HAL_ADC_PollForConversion+0x17c>
 800299c:	4b24      	ldr	r3, [pc, #144]	@ (8002a30 <HAL_ADC_PollForConversion+0x208>)
 800299e:	e001      	b.n	80029a4 <HAL_ADC_PollForConversion+0x17c>
 80029a0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6812      	ldr	r2, [r2, #0]
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d008      	beq.n	80029be <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d005      	beq.n	80029be <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	2b05      	cmp	r3, #5
 80029b6:	d002      	beq.n	80029be <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	2b09      	cmp	r3, #9
 80029bc:	d104      	bne.n	80029c8 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	61bb      	str	r3, [r7, #24]
 80029c6:	e014      	b.n	80029f2 <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a14      	ldr	r2, [pc, #80]	@ (8002a20 <HAL_ADC_PollForConversion+0x1f8>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d009      	beq.n	80029e6 <HAL_ADC_PollForConversion+0x1be>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a15      	ldr	r2, [pc, #84]	@ (8002a2c <HAL_ADC_PollForConversion+0x204>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d002      	beq.n	80029e2 <HAL_ADC_PollForConversion+0x1ba>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	e003      	b.n	80029ea <HAL_ADC_PollForConversion+0x1c2>
 80029e2:	4b13      	ldr	r3, [pc, #76]	@ (8002a30 <HAL_ADC_PollForConversion+0x208>)
 80029e4:	e001      	b.n	80029ea <HAL_ADC_PollForConversion+0x1c2>
 80029e6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80029ea:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	2b08      	cmp	r3, #8
 80029f6:	d104      	bne.n	8002a02 <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2208      	movs	r2, #8
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	e008      	b.n	8002a14 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d103      	bne.n	8002a14 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	220c      	movs	r2, #12
 8002a12:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3720      	adds	r7, #32
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	50000100 	.word	0x50000100
 8002a24:	50000300 	.word	0x50000300
 8002a28:	50000700 	.word	0x50000700
 8002a2c:	50000500 	.word	0x50000500
 8002a30:	50000400 	.word	0x50000400

08002a34 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
	...

08002a50 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b0b6      	sub	sp, #216	@ 0xd8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d102      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x24>
 8002a6e:	2302      	movs	r3, #2
 8002a70:	f000 bc13 	b.w	800329a <HAL_ADC_ConfigChannel+0x84a>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff fc04 	bl	800228e <LL_ADC_REG_IsConversionOngoing>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f040 83f3 	bne.w	8003274 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6818      	ldr	r0, [r3, #0]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	6859      	ldr	r1, [r3, #4]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	f7ff fad3 	bl	8002046 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff fbf2 	bl	800228e <LL_ADC_REG_IsConversionOngoing>
 8002aaa:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff fbfe 	bl	80022b4 <LL_ADC_INJ_IsConversionOngoing>
 8002ab8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002abc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f040 81d9 	bne.w	8002e78 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ac6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f040 81d4 	bne.w	8002e78 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ad8:	d10f      	bne.n	8002afa <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6818      	ldr	r0, [r3, #0]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	f7ff fada 	bl	800209e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff fa81 	bl	8001ffa <LL_ADC_SetSamplingTimeCommonConfig>
 8002af8:	e00e      	b.n	8002b18 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6818      	ldr	r0, [r3, #0]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	6819      	ldr	r1, [r3, #0]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	461a      	mov	r2, r3
 8002b08:	f7ff fac9 	bl	800209e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2100      	movs	r1, #0
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff fa71 	bl	8001ffa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	695a      	ldr	r2, [r3, #20]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	08db      	lsrs	r3, r3, #3
 8002b24:	f003 0303 	and.w	r3, r3, #3
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d022      	beq.n	8002b80 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6818      	ldr	r0, [r3, #0]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	6919      	ldr	r1, [r3, #16]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002b4a:	f7ff f9cb 	bl	8001ee4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6818      	ldr	r0, [r3, #0]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	6919      	ldr	r1, [r3, #16]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	f7ff fa17 	bl	8001f8e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6818      	ldr	r0, [r3, #0]
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	6919      	ldr	r1, [r3, #16]
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	7f1b      	ldrb	r3, [r3, #28]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d102      	bne.n	8002b76 <HAL_ADC_ConfigChannel+0x126>
 8002b70:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b74:	e000      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x128>
 8002b76:	2300      	movs	r3, #0
 8002b78:	461a      	mov	r2, r3
 8002b7a:	f7ff fa23 	bl	8001fc4 <LL_ADC_SetOffsetSaturation>
 8002b7e:	e17b      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2100      	movs	r1, #0
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff f9d0 	bl	8001f2c <LL_ADC_GetOffsetChannel>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10a      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x15c>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff f9c5 	bl	8001f2c <LL_ADC_GetOffsetChannel>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	0e9b      	lsrs	r3, r3, #26
 8002ba6:	f003 021f 	and.w	r2, r3, #31
 8002baa:	e01e      	b.n	8002bea <HAL_ADC_ConfigChannel+0x19a>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7ff f9ba 	bl	8001f2c <LL_ADC_GetOffsetChannel>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002bc2:	fa93 f3a3 	rbit	r3, r3
 8002bc6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002bce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002bd2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002bda:	2320      	movs	r3, #32
 8002bdc:	e004      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002bde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002be2:	fab3 f383 	clz	r3, r3
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d105      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x1b2>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	0e9b      	lsrs	r3, r3, #26
 8002bfc:	f003 031f 	and.w	r3, r3, #31
 8002c00:	e018      	b.n	8002c34 <HAL_ADC_ConfigChannel+0x1e4>
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002c0e:	fa93 f3a3 	rbit	r3, r3
 8002c12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002c16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002c1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002c26:	2320      	movs	r3, #32
 8002c28:	e004      	b.n	8002c34 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002c2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c2e:	fab3 f383 	clz	r3, r3
 8002c32:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d106      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	2100      	movs	r1, #0
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff f989 	bl	8001f58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff f96d 	bl	8001f2c <LL_ADC_GetOffsetChannel>
 8002c52:	4603      	mov	r3, r0
 8002c54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d10a      	bne.n	8002c72 <HAL_ADC_ConfigChannel+0x222>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2101      	movs	r1, #1
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7ff f962 	bl	8001f2c <LL_ADC_GetOffsetChannel>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	0e9b      	lsrs	r3, r3, #26
 8002c6c:	f003 021f 	and.w	r2, r3, #31
 8002c70:	e01e      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x260>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2101      	movs	r1, #1
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff f957 	bl	8001f2c <LL_ADC_GetOffsetChannel>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c84:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c88:	fa93 f3a3 	rbit	r3, r3
 8002c8c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002c90:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002c98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002ca0:	2320      	movs	r3, #32
 8002ca2:	e004      	b.n	8002cae <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002ca4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ca8:	fab3 f383 	clz	r3, r3
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d105      	bne.n	8002cc8 <HAL_ADC_ConfigChannel+0x278>
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	0e9b      	lsrs	r3, r3, #26
 8002cc2:	f003 031f 	and.w	r3, r3, #31
 8002cc6:	e018      	b.n	8002cfa <HAL_ADC_ConfigChannel+0x2aa>
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002cd4:	fa93 f3a3 	rbit	r3, r3
 8002cd8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002cdc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ce0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002ce4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002cec:	2320      	movs	r3, #32
 8002cee:	e004      	b.n	8002cfa <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002cf0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002cf4:	fab3 f383 	clz	r3, r3
 8002cf8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d106      	bne.n	8002d0c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2200      	movs	r2, #0
 8002d04:	2101      	movs	r1, #1
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7ff f926 	bl	8001f58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2102      	movs	r1, #2
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff f90a 	bl	8001f2c <LL_ADC_GetOffsetChannel>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10a      	bne.n	8002d38 <HAL_ADC_ConfigChannel+0x2e8>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2102      	movs	r1, #2
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff f8ff 	bl	8001f2c <LL_ADC_GetOffsetChannel>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	0e9b      	lsrs	r3, r3, #26
 8002d32:	f003 021f 	and.w	r2, r3, #31
 8002d36:	e01e      	b.n	8002d76 <HAL_ADC_ConfigChannel+0x326>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2102      	movs	r1, #2
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7ff f8f4 	bl	8001f2c <LL_ADC_GetOffsetChannel>
 8002d44:	4603      	mov	r3, r0
 8002d46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d4e:	fa93 f3a3 	rbit	r3, r3
 8002d52:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002d56:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002d5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002d66:	2320      	movs	r3, #32
 8002d68:	e004      	b.n	8002d74 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002d6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d6e:	fab3 f383 	clz	r3, r3
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d105      	bne.n	8002d8e <HAL_ADC_ConfigChannel+0x33e>
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	0e9b      	lsrs	r3, r3, #26
 8002d88:	f003 031f 	and.w	r3, r3, #31
 8002d8c:	e016      	b.n	8002dbc <HAL_ADC_ConfigChannel+0x36c>
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d96:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d9a:	fa93 f3a3 	rbit	r3, r3
 8002d9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002da0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002da2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002da6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002dae:	2320      	movs	r3, #32
 8002db0:	e004      	b.n	8002dbc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002db2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002db6:	fab3 f383 	clz	r3, r3
 8002dba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d106      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	2102      	movs	r1, #2
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff f8c5 	bl	8001f58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2103      	movs	r1, #3
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff f8a9 	bl	8001f2c <LL_ADC_GetOffsetChannel>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10a      	bne.n	8002dfa <HAL_ADC_ConfigChannel+0x3aa>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2103      	movs	r1, #3
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7ff f89e 	bl	8001f2c <LL_ADC_GetOffsetChannel>
 8002df0:	4603      	mov	r3, r0
 8002df2:	0e9b      	lsrs	r3, r3, #26
 8002df4:	f003 021f 	and.w	r2, r3, #31
 8002df8:	e017      	b.n	8002e2a <HAL_ADC_ConfigChannel+0x3da>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2103      	movs	r1, #3
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff f893 	bl	8001f2c <LL_ADC_GetOffsetChannel>
 8002e06:	4603      	mov	r3, r0
 8002e08:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e0c:	fa93 f3a3 	rbit	r3, r3
 8002e10:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002e12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e14:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002e16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002e1c:	2320      	movs	r3, #32
 8002e1e:	e003      	b.n	8002e28 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002e20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e22:	fab3 f383 	clz	r3, r3
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d105      	bne.n	8002e42 <HAL_ADC_ConfigChannel+0x3f2>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	0e9b      	lsrs	r3, r3, #26
 8002e3c:	f003 031f 	and.w	r3, r3, #31
 8002e40:	e011      	b.n	8002e66 <HAL_ADC_ConfigChannel+0x416>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e4a:	fa93 f3a3 	rbit	r3, r3
 8002e4e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002e50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e52:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002e54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002e5a:	2320      	movs	r3, #32
 8002e5c:	e003      	b.n	8002e66 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002e5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e60:	fab3 f383 	clz	r3, r3
 8002e64:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d106      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	2103      	movs	r1, #3
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff f870 	bl	8001f58 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff f9df 	bl	8002240 <LL_ADC_IsEnabled>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f040 813d 	bne.w	8003104 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6818      	ldr	r0, [r3, #0]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	6819      	ldr	r1, [r3, #0]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	461a      	mov	r2, r3
 8002e98:	f7ff f92c 	bl	80020f4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	4aa2      	ldr	r2, [pc, #648]	@ (800312c <HAL_ADC_ConfigChannel+0x6dc>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	f040 812e 	bne.w	8003104 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10b      	bne.n	8002ed0 <HAL_ADC_ConfigChannel+0x480>
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	0e9b      	lsrs	r3, r3, #26
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	f003 031f 	and.w	r3, r3, #31
 8002ec4:	2b09      	cmp	r3, #9
 8002ec6:	bf94      	ite	ls
 8002ec8:	2301      	movls	r3, #1
 8002eca:	2300      	movhi	r3, #0
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	e019      	b.n	8002f04 <HAL_ADC_ConfigChannel+0x4b4>
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ed8:	fa93 f3a3 	rbit	r3, r3
 8002edc:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002ede:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ee0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002ee2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002ee8:	2320      	movs	r3, #32
 8002eea:	e003      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002eec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002eee:	fab3 f383 	clz	r3, r3
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	f003 031f 	and.w	r3, r3, #31
 8002efa:	2b09      	cmp	r3, #9
 8002efc:	bf94      	ite	ls
 8002efe:	2301      	movls	r3, #1
 8002f00:	2300      	movhi	r3, #0
 8002f02:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d079      	beq.n	8002ffc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d107      	bne.n	8002f24 <HAL_ADC_ConfigChannel+0x4d4>
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	0e9b      	lsrs	r3, r3, #26
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	069b      	lsls	r3, r3, #26
 8002f1e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f22:	e015      	b.n	8002f50 <HAL_ADC_ConfigChannel+0x500>
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f2c:	fa93 f3a3 	rbit	r3, r3
 8002f30:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002f32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f34:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002f36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002f3c:	2320      	movs	r3, #32
 8002f3e:	e003      	b.n	8002f48 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002f40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f42:	fab3 f383 	clz	r3, r3
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	3301      	adds	r3, #1
 8002f4a:	069b      	lsls	r3, r3, #26
 8002f4c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d109      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x520>
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	0e9b      	lsrs	r3, r3, #26
 8002f62:	3301      	adds	r3, #1
 8002f64:	f003 031f 	and.w	r3, r3, #31
 8002f68:	2101      	movs	r1, #1
 8002f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6e:	e017      	b.n	8002fa0 <HAL_ADC_ConfigChannel+0x550>
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f78:	fa93 f3a3 	rbit	r3, r3
 8002f7c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002f7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f80:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002f82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002f88:	2320      	movs	r3, #32
 8002f8a:	e003      	b.n	8002f94 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002f8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f8e:	fab3 f383 	clz	r3, r3
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	3301      	adds	r3, #1
 8002f96:	f003 031f 	and.w	r3, r3, #31
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa0:	ea42 0103 	orr.w	r1, r2, r3
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10a      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x576>
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	0e9b      	lsrs	r3, r3, #26
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	f003 021f 	and.w	r2, r3, #31
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	4413      	add	r3, r2
 8002fc2:	051b      	lsls	r3, r3, #20
 8002fc4:	e018      	b.n	8002ff8 <HAL_ADC_ConfigChannel+0x5a8>
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fce:	fa93 f3a3 	rbit	r3, r3
 8002fd2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002fd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002fde:	2320      	movs	r3, #32
 8002fe0:	e003      	b.n	8002fea <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002fe2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fe4:	fab3 f383 	clz	r3, r3
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	3301      	adds	r3, #1
 8002fec:	f003 021f 	and.w	r2, r3, #31
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	4413      	add	r3, r2
 8002ff6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ff8:	430b      	orrs	r3, r1
 8002ffa:	e07e      	b.n	80030fa <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003004:	2b00      	cmp	r3, #0
 8003006:	d107      	bne.n	8003018 <HAL_ADC_ConfigChannel+0x5c8>
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	0e9b      	lsrs	r3, r3, #26
 800300e:	3301      	adds	r3, #1
 8003010:	069b      	lsls	r3, r3, #26
 8003012:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003016:	e015      	b.n	8003044 <HAL_ADC_ConfigChannel+0x5f4>
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003020:	fa93 f3a3 	rbit	r3, r3
 8003024:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003028:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800302a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003030:	2320      	movs	r3, #32
 8003032:	e003      	b.n	800303c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003036:	fab3 f383 	clz	r3, r3
 800303a:	b2db      	uxtb	r3, r3
 800303c:	3301      	adds	r3, #1
 800303e:	069b      	lsls	r3, r3, #26
 8003040:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800304c:	2b00      	cmp	r3, #0
 800304e:	d109      	bne.n	8003064 <HAL_ADC_ConfigChannel+0x614>
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	0e9b      	lsrs	r3, r3, #26
 8003056:	3301      	adds	r3, #1
 8003058:	f003 031f 	and.w	r3, r3, #31
 800305c:	2101      	movs	r1, #1
 800305e:	fa01 f303 	lsl.w	r3, r1, r3
 8003062:	e017      	b.n	8003094 <HAL_ADC_ConfigChannel+0x644>
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	fa93 f3a3 	rbit	r3, r3
 8003070:	61fb      	str	r3, [r7, #28]
  return result;
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800307c:	2320      	movs	r3, #32
 800307e:	e003      	b.n	8003088 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003082:	fab3 f383 	clz	r3, r3
 8003086:	b2db      	uxtb	r3, r3
 8003088:	3301      	adds	r3, #1
 800308a:	f003 031f 	and.w	r3, r3, #31
 800308e:	2101      	movs	r1, #1
 8003090:	fa01 f303 	lsl.w	r3, r1, r3
 8003094:	ea42 0103 	orr.w	r1, r2, r3
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d10d      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x670>
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	0e9b      	lsrs	r3, r3, #26
 80030aa:	3301      	adds	r3, #1
 80030ac:	f003 021f 	and.w	r2, r3, #31
 80030b0:	4613      	mov	r3, r2
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	4413      	add	r3, r2
 80030b6:	3b1e      	subs	r3, #30
 80030b8:	051b      	lsls	r3, r3, #20
 80030ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80030be:	e01b      	b.n	80030f8 <HAL_ADC_ConfigChannel+0x6a8>
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	fa93 f3a3 	rbit	r3, r3
 80030cc:	613b      	str	r3, [r7, #16]
  return result;
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80030d8:	2320      	movs	r3, #32
 80030da:	e003      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	fab3 f383 	clz	r3, r3
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	3301      	adds	r3, #1
 80030e6:	f003 021f 	and.w	r2, r3, #31
 80030ea:	4613      	mov	r3, r2
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	4413      	add	r3, r2
 80030f0:	3b1e      	subs	r3, #30
 80030f2:	051b      	lsls	r3, r3, #20
 80030f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030f8:	430b      	orrs	r3, r1
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	6892      	ldr	r2, [r2, #8]
 80030fe:	4619      	mov	r1, r3
 8003100:	f7fe ffcd 	bl	800209e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	4b09      	ldr	r3, [pc, #36]	@ (8003130 <HAL_ADC_ConfigChannel+0x6e0>)
 800310a:	4013      	ands	r3, r2
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 80be 	beq.w	800328e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800311a:	d004      	beq.n	8003126 <HAL_ADC_ConfigChannel+0x6d6>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a04      	ldr	r2, [pc, #16]	@ (8003134 <HAL_ADC_ConfigChannel+0x6e4>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d10a      	bne.n	800313c <HAL_ADC_ConfigChannel+0x6ec>
 8003126:	4b04      	ldr	r3, [pc, #16]	@ (8003138 <HAL_ADC_ConfigChannel+0x6e8>)
 8003128:	e009      	b.n	800313e <HAL_ADC_ConfigChannel+0x6ee>
 800312a:	bf00      	nop
 800312c:	407f0000 	.word	0x407f0000
 8003130:	80080000 	.word	0x80080000
 8003134:	50000100 	.word	0x50000100
 8003138:	50000300 	.word	0x50000300
 800313c:	4b59      	ldr	r3, [pc, #356]	@ (80032a4 <HAL_ADC_ConfigChannel+0x854>)
 800313e:	4618      	mov	r0, r3
 8003140:	f7fe fec2 	bl	8001ec8 <LL_ADC_GetCommonPathInternalCh>
 8003144:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a56      	ldr	r2, [pc, #344]	@ (80032a8 <HAL_ADC_ConfigChannel+0x858>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d004      	beq.n	800315c <HAL_ADC_ConfigChannel+0x70c>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a55      	ldr	r2, [pc, #340]	@ (80032ac <HAL_ADC_ConfigChannel+0x85c>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d13a      	bne.n	80031d2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800315c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003160:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d134      	bne.n	80031d2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003170:	d005      	beq.n	800317e <HAL_ADC_ConfigChannel+0x72e>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a4e      	ldr	r2, [pc, #312]	@ (80032b0 <HAL_ADC_ConfigChannel+0x860>)
 8003178:	4293      	cmp	r3, r2
 800317a:	f040 8085 	bne.w	8003288 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003186:	d004      	beq.n	8003192 <HAL_ADC_ConfigChannel+0x742>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a49      	ldr	r2, [pc, #292]	@ (80032b4 <HAL_ADC_ConfigChannel+0x864>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d101      	bne.n	8003196 <HAL_ADC_ConfigChannel+0x746>
 8003192:	4a49      	ldr	r2, [pc, #292]	@ (80032b8 <HAL_ADC_ConfigChannel+0x868>)
 8003194:	e000      	b.n	8003198 <HAL_ADC_ConfigChannel+0x748>
 8003196:	4a43      	ldr	r2, [pc, #268]	@ (80032a4 <HAL_ADC_ConfigChannel+0x854>)
 8003198:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800319c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80031a0:	4619      	mov	r1, r3
 80031a2:	4610      	mov	r0, r2
 80031a4:	f7fe fe7d 	bl	8001ea2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031a8:	4b44      	ldr	r3, [pc, #272]	@ (80032bc <HAL_ADC_ConfigChannel+0x86c>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	099b      	lsrs	r3, r3, #6
 80031ae:	4a44      	ldr	r2, [pc, #272]	@ (80032c0 <HAL_ADC_ConfigChannel+0x870>)
 80031b0:	fba2 2303 	umull	r2, r3, r2, r3
 80031b4:	099b      	lsrs	r3, r3, #6
 80031b6:	1c5a      	adds	r2, r3, #1
 80031b8:	4613      	mov	r3, r2
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	4413      	add	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031c2:	e002      	b.n	80031ca <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	3b01      	subs	r3, #1
 80031c8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1f9      	bne.n	80031c4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031d0:	e05a      	b.n	8003288 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a3b      	ldr	r2, [pc, #236]	@ (80032c4 <HAL_ADC_ConfigChannel+0x874>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d125      	bne.n	8003228 <HAL_ADC_ConfigChannel+0x7d8>
 80031dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d11f      	bne.n	8003228 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a31      	ldr	r2, [pc, #196]	@ (80032b4 <HAL_ADC_ConfigChannel+0x864>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d104      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x7ac>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a34      	ldr	r2, [pc, #208]	@ (80032c8 <HAL_ADC_ConfigChannel+0x878>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d047      	beq.n	800328c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003204:	d004      	beq.n	8003210 <HAL_ADC_ConfigChannel+0x7c0>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a2a      	ldr	r2, [pc, #168]	@ (80032b4 <HAL_ADC_ConfigChannel+0x864>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d101      	bne.n	8003214 <HAL_ADC_ConfigChannel+0x7c4>
 8003210:	4a29      	ldr	r2, [pc, #164]	@ (80032b8 <HAL_ADC_ConfigChannel+0x868>)
 8003212:	e000      	b.n	8003216 <HAL_ADC_ConfigChannel+0x7c6>
 8003214:	4a23      	ldr	r2, [pc, #140]	@ (80032a4 <HAL_ADC_ConfigChannel+0x854>)
 8003216:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800321a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800321e:	4619      	mov	r1, r3
 8003220:	4610      	mov	r0, r2
 8003222:	f7fe fe3e 	bl	8001ea2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003226:	e031      	b.n	800328c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a27      	ldr	r2, [pc, #156]	@ (80032cc <HAL_ADC_ConfigChannel+0x87c>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d12d      	bne.n	800328e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003232:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003236:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d127      	bne.n	800328e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a1c      	ldr	r2, [pc, #112]	@ (80032b4 <HAL_ADC_ConfigChannel+0x864>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d022      	beq.n	800328e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003250:	d004      	beq.n	800325c <HAL_ADC_ConfigChannel+0x80c>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a17      	ldr	r2, [pc, #92]	@ (80032b4 <HAL_ADC_ConfigChannel+0x864>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d101      	bne.n	8003260 <HAL_ADC_ConfigChannel+0x810>
 800325c:	4a16      	ldr	r2, [pc, #88]	@ (80032b8 <HAL_ADC_ConfigChannel+0x868>)
 800325e:	e000      	b.n	8003262 <HAL_ADC_ConfigChannel+0x812>
 8003260:	4a10      	ldr	r2, [pc, #64]	@ (80032a4 <HAL_ADC_ConfigChannel+0x854>)
 8003262:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003266:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800326a:	4619      	mov	r1, r3
 800326c:	4610      	mov	r0, r2
 800326e:	f7fe fe18 	bl	8001ea2 <LL_ADC_SetCommonPathInternalCh>
 8003272:	e00c      	b.n	800328e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003278:	f043 0220 	orr.w	r2, r3, #32
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003286:	e002      	b.n	800328e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003288:	bf00      	nop
 800328a:	e000      	b.n	800328e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800328c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003296:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800329a:	4618      	mov	r0, r3
 800329c:	37d8      	adds	r7, #216	@ 0xd8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	50000700 	.word	0x50000700
 80032a8:	c3210000 	.word	0xc3210000
 80032ac:	90c00010 	.word	0x90c00010
 80032b0:	50000600 	.word	0x50000600
 80032b4:	50000100 	.word	0x50000100
 80032b8:	50000300 	.word	0x50000300
 80032bc:	20000000 	.word	0x20000000
 80032c0:	053e2d63 	.word	0x053e2d63
 80032c4:	c7520000 	.word	0xc7520000
 80032c8:	50000500 	.word	0x50000500
 80032cc:	cb840000 	.word	0xcb840000

080032d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7fe ffaf 	bl	8002240 <LL_ADC_IsEnabled>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d14d      	bne.n	8003384 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	4b28      	ldr	r3, [pc, #160]	@ (8003390 <ADC_Enable+0xc0>)
 80032f0:	4013      	ands	r3, r2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00d      	beq.n	8003312 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032fa:	f043 0210 	orr.w	r2, r3, #16
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003306:	f043 0201 	orr.w	r2, r3, #1
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e039      	b.n	8003386 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f7fe ff7e 	bl	8002218 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800331c:	f7fe fda2 	bl	8001e64 <HAL_GetTick>
 8003320:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003322:	e028      	b.n	8003376 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4618      	mov	r0, r3
 800332a:	f7fe ff89 	bl	8002240 <LL_ADC_IsEnabled>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d104      	bne.n	800333e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f7fe ff6d 	bl	8002218 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800333e:	f7fe fd91 	bl	8001e64 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d914      	bls.n	8003376 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b01      	cmp	r3, #1
 8003358:	d00d      	beq.n	8003376 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800335e:	f043 0210 	orr.w	r2, r3, #16
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800336a:	f043 0201 	orr.w	r2, r3, #1
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e007      	b.n	8003386 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b01      	cmp	r3, #1
 8003382:	d1cf      	bne.n	8003324 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	8000003f 	.word	0x8000003f

08003394 <LL_ADC_IsEnabled>:
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d101      	bne.n	80033ac <LL_ADC_IsEnabled+0x18>
 80033a8:	2301      	movs	r3, #1
 80033aa:	e000      	b.n	80033ae <LL_ADC_IsEnabled+0x1a>
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <LL_ADC_REG_IsConversionOngoing>:
{
 80033ba:	b480      	push	{r7}
 80033bc:	b083      	sub	sp, #12
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 0304 	and.w	r3, r3, #4
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	d101      	bne.n	80033d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80033ce:	2301      	movs	r3, #1
 80033d0:	e000      	b.n	80033d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80033e0:	b590      	push	{r4, r7, lr}
 80033e2:	b0a1      	sub	sp, #132	@ 0x84
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033ea:	2300      	movs	r3, #0
 80033ec:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d101      	bne.n	80033fe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80033fa:	2302      	movs	r3, #2
 80033fc:	e0e7      	b.n	80035ce <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003406:	2300      	movs	r3, #0
 8003408:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800340a:	2300      	movs	r3, #0
 800340c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003416:	d102      	bne.n	800341e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003418:	4b6f      	ldr	r3, [pc, #444]	@ (80035d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800341a:	60bb      	str	r3, [r7, #8]
 800341c:	e009      	b.n	8003432 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a6e      	ldr	r2, [pc, #440]	@ (80035dc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d102      	bne.n	800342e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003428:	4b6d      	ldr	r3, [pc, #436]	@ (80035e0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800342a:	60bb      	str	r3, [r7, #8]
 800342c:	e001      	b.n	8003432 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800342e:	2300      	movs	r3, #0
 8003430:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10b      	bne.n	8003450 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800343c:	f043 0220 	orr.w	r2, r3, #32
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e0be      	b.n	80035ce <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	4618      	mov	r0, r3
 8003454:	f7ff ffb1 	bl	80033ba <LL_ADC_REG_IsConversionOngoing>
 8003458:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff ffab 	bl	80033ba <LL_ADC_REG_IsConversionOngoing>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	f040 80a0 	bne.w	80035ac <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800346c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800346e:	2b00      	cmp	r3, #0
 8003470:	f040 809c 	bne.w	80035ac <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800347c:	d004      	beq.n	8003488 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a55      	ldr	r2, [pc, #340]	@ (80035d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d101      	bne.n	800348c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003488:	4b56      	ldr	r3, [pc, #344]	@ (80035e4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800348a:	e000      	b.n	800348e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800348c:	4b56      	ldr	r3, [pc, #344]	@ (80035e8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800348e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d04b      	beq.n	8003530 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003498:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	6859      	ldr	r1, [r3, #4]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80034aa:	035b      	lsls	r3, r3, #13
 80034ac:	430b      	orrs	r3, r1
 80034ae:	431a      	orrs	r2, r3
 80034b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034b2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034bc:	d004      	beq.n	80034c8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a45      	ldr	r2, [pc, #276]	@ (80035d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d10f      	bne.n	80034e8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80034c8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80034cc:	f7ff ff62 	bl	8003394 <LL_ADC_IsEnabled>
 80034d0:	4604      	mov	r4, r0
 80034d2:	4841      	ldr	r0, [pc, #260]	@ (80035d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80034d4:	f7ff ff5e 	bl	8003394 <LL_ADC_IsEnabled>
 80034d8:	4603      	mov	r3, r0
 80034da:	4323      	orrs	r3, r4
 80034dc:	2b00      	cmp	r3, #0
 80034de:	bf0c      	ite	eq
 80034e0:	2301      	moveq	r3, #1
 80034e2:	2300      	movne	r3, #0
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	e012      	b.n	800350e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80034e8:	483c      	ldr	r0, [pc, #240]	@ (80035dc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80034ea:	f7ff ff53 	bl	8003394 <LL_ADC_IsEnabled>
 80034ee:	4604      	mov	r4, r0
 80034f0:	483b      	ldr	r0, [pc, #236]	@ (80035e0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80034f2:	f7ff ff4f 	bl	8003394 <LL_ADC_IsEnabled>
 80034f6:	4603      	mov	r3, r0
 80034f8:	431c      	orrs	r4, r3
 80034fa:	483c      	ldr	r0, [pc, #240]	@ (80035ec <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80034fc:	f7ff ff4a 	bl	8003394 <LL_ADC_IsEnabled>
 8003500:	4603      	mov	r3, r0
 8003502:	4323      	orrs	r3, r4
 8003504:	2b00      	cmp	r3, #0
 8003506:	bf0c      	ite	eq
 8003508:	2301      	moveq	r3, #1
 800350a:	2300      	movne	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d056      	beq.n	80035c0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003512:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800351a:	f023 030f 	bic.w	r3, r3, #15
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	6811      	ldr	r1, [r2, #0]
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	6892      	ldr	r2, [r2, #8]
 8003526:	430a      	orrs	r2, r1
 8003528:	431a      	orrs	r2, r3
 800352a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800352c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800352e:	e047      	b.n	80035c0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003530:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003538:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800353a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003544:	d004      	beq.n	8003550 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a23      	ldr	r2, [pc, #140]	@ (80035d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d10f      	bne.n	8003570 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003550:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003554:	f7ff ff1e 	bl	8003394 <LL_ADC_IsEnabled>
 8003558:	4604      	mov	r4, r0
 800355a:	481f      	ldr	r0, [pc, #124]	@ (80035d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800355c:	f7ff ff1a 	bl	8003394 <LL_ADC_IsEnabled>
 8003560:	4603      	mov	r3, r0
 8003562:	4323      	orrs	r3, r4
 8003564:	2b00      	cmp	r3, #0
 8003566:	bf0c      	ite	eq
 8003568:	2301      	moveq	r3, #1
 800356a:	2300      	movne	r3, #0
 800356c:	b2db      	uxtb	r3, r3
 800356e:	e012      	b.n	8003596 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003570:	481a      	ldr	r0, [pc, #104]	@ (80035dc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003572:	f7ff ff0f 	bl	8003394 <LL_ADC_IsEnabled>
 8003576:	4604      	mov	r4, r0
 8003578:	4819      	ldr	r0, [pc, #100]	@ (80035e0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800357a:	f7ff ff0b 	bl	8003394 <LL_ADC_IsEnabled>
 800357e:	4603      	mov	r3, r0
 8003580:	431c      	orrs	r4, r3
 8003582:	481a      	ldr	r0, [pc, #104]	@ (80035ec <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003584:	f7ff ff06 	bl	8003394 <LL_ADC_IsEnabled>
 8003588:	4603      	mov	r3, r0
 800358a:	4323      	orrs	r3, r4
 800358c:	2b00      	cmp	r3, #0
 800358e:	bf0c      	ite	eq
 8003590:	2301      	moveq	r3, #1
 8003592:	2300      	movne	r3, #0
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d012      	beq.n	80035c0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800359a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80035a2:	f023 030f 	bic.w	r3, r3, #15
 80035a6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80035a8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80035aa:	e009      	b.n	80035c0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b0:	f043 0220 	orr.w	r2, r3, #32
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80035be:	e000      	b.n	80035c2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80035c0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80035ca:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3784      	adds	r7, #132	@ 0x84
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd90      	pop	{r4, r7, pc}
 80035d6:	bf00      	nop
 80035d8:	50000100 	.word	0x50000100
 80035dc:	50000400 	.word	0x50000400
 80035e0:	50000500 	.word	0x50000500
 80035e4:	50000300 	.word	0x50000300
 80035e8:	50000700 	.word	0x50000700
 80035ec:	50000600 	.word	0x50000600

080035f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003600:	4b0c      	ldr	r3, [pc, #48]	@ (8003634 <__NVIC_SetPriorityGrouping+0x44>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800360c:	4013      	ands	r3, r2
 800360e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003618:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800361c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003622:	4a04      	ldr	r2, [pc, #16]	@ (8003634 <__NVIC_SetPriorityGrouping+0x44>)
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	60d3      	str	r3, [r2, #12]
}
 8003628:	bf00      	nop
 800362a:	3714      	adds	r7, #20
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	e000ed00 	.word	0xe000ed00

08003638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800363c:	4b04      	ldr	r3, [pc, #16]	@ (8003650 <__NVIC_GetPriorityGrouping+0x18>)
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	0a1b      	lsrs	r3, r3, #8
 8003642:	f003 0307 	and.w	r3, r3, #7
}
 8003646:	4618      	mov	r0, r3
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	e000ed00 	.word	0xe000ed00

08003654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	4603      	mov	r3, r0
 800365c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800365e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003662:	2b00      	cmp	r3, #0
 8003664:	db0b      	blt.n	800367e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003666:	79fb      	ldrb	r3, [r7, #7]
 8003668:	f003 021f 	and.w	r2, r3, #31
 800366c:	4907      	ldr	r1, [pc, #28]	@ (800368c <__NVIC_EnableIRQ+0x38>)
 800366e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003672:	095b      	lsrs	r3, r3, #5
 8003674:	2001      	movs	r0, #1
 8003676:	fa00 f202 	lsl.w	r2, r0, r2
 800367a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800367e:	bf00      	nop
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	e000e100 	.word	0xe000e100

08003690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	4603      	mov	r3, r0
 8003698:	6039      	str	r1, [r7, #0]
 800369a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800369c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	db0a      	blt.n	80036ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	b2da      	uxtb	r2, r3
 80036a8:	490c      	ldr	r1, [pc, #48]	@ (80036dc <__NVIC_SetPriority+0x4c>)
 80036aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ae:	0112      	lsls	r2, r2, #4
 80036b0:	b2d2      	uxtb	r2, r2
 80036b2:	440b      	add	r3, r1
 80036b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036b8:	e00a      	b.n	80036d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	b2da      	uxtb	r2, r3
 80036be:	4908      	ldr	r1, [pc, #32]	@ (80036e0 <__NVIC_SetPriority+0x50>)
 80036c0:	79fb      	ldrb	r3, [r7, #7]
 80036c2:	f003 030f 	and.w	r3, r3, #15
 80036c6:	3b04      	subs	r3, #4
 80036c8:	0112      	lsls	r2, r2, #4
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	440b      	add	r3, r1
 80036ce:	761a      	strb	r2, [r3, #24]
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr
 80036dc:	e000e100 	.word	0xe000e100
 80036e0:	e000ed00 	.word	0xe000ed00

080036e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b089      	sub	sp, #36	@ 0x24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f003 0307 	and.w	r3, r3, #7
 80036f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	f1c3 0307 	rsb	r3, r3, #7
 80036fe:	2b04      	cmp	r3, #4
 8003700:	bf28      	it	cs
 8003702:	2304      	movcs	r3, #4
 8003704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	3304      	adds	r3, #4
 800370a:	2b06      	cmp	r3, #6
 800370c:	d902      	bls.n	8003714 <NVIC_EncodePriority+0x30>
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	3b03      	subs	r3, #3
 8003712:	e000      	b.n	8003716 <NVIC_EncodePriority+0x32>
 8003714:	2300      	movs	r3, #0
 8003716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003718:	f04f 32ff 	mov.w	r2, #4294967295
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	fa02 f303 	lsl.w	r3, r2, r3
 8003722:	43da      	mvns	r2, r3
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	401a      	ands	r2, r3
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800372c:	f04f 31ff 	mov.w	r1, #4294967295
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	fa01 f303 	lsl.w	r3, r1, r3
 8003736:	43d9      	mvns	r1, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800373c:	4313      	orrs	r3, r2
         );
}
 800373e:	4618      	mov	r0, r3
 8003740:	3724      	adds	r7, #36	@ 0x24
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b082      	sub	sp, #8
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7ff ff4c 	bl	80035f0 <__NVIC_SetPriorityGrouping>
}
 8003758:	bf00      	nop
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
 8003766:	4603      	mov	r3, r0
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
 800376c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800376e:	f7ff ff63 	bl	8003638 <__NVIC_GetPriorityGrouping>
 8003772:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	68b9      	ldr	r1, [r7, #8]
 8003778:	6978      	ldr	r0, [r7, #20]
 800377a:	f7ff ffb3 	bl	80036e4 <NVIC_EncodePriority>
 800377e:	4602      	mov	r2, r0
 8003780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003784:	4611      	mov	r1, r2
 8003786:	4618      	mov	r0, r3
 8003788:	f7ff ff82 	bl	8003690 <__NVIC_SetPriority>
}
 800378c:	bf00      	nop
 800378e:	3718      	adds	r7, #24
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	4603      	mov	r3, r0
 800379c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800379e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7ff ff56 	bl	8003654 <__NVIC_EnableIRQ>
}
 80037a8:	bf00      	nop
 80037aa:	3708      	adds	r7, #8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037b8:	2300      	movs	r3, #0
 80037ba:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d005      	beq.n	80037d4 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2204      	movs	r2, #4
 80037cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	73fb      	strb	r3, [r7, #15]
 80037d2:	e037      	b.n	8003844 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 020e 	bic.w	r2, r2, #14
 80037e2:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80037f2:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0201 	bic.w	r2, r2, #1
 8003802:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003808:	f003 021f 	and.w	r2, r3, #31
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003810:	2101      	movs	r1, #1
 8003812:	fa01 f202 	lsl.w	r2, r1, r2
 8003816:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003820:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00c      	beq.n	8003844 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003834:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003838:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003842:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003854:	7bfb      	ldrb	r3, [r7, #15]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3714      	adds	r7, #20
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b084      	sub	sp, #16
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800386a:	2300      	movs	r3, #0
 800386c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d00d      	beq.n	8003896 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2204      	movs	r2, #4
 800387e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	73fb      	strb	r3, [r7, #15]
 8003894:	e047      	b.n	8003926 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 020e 	bic.w	r2, r2, #14
 80038a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 0201 	bic.w	r2, r2, #1
 80038b4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ca:	f003 021f 	and.w	r2, r3, #31
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d2:	2101      	movs	r1, #1
 80038d4:	fa01 f202 	lsl.w	r2, r1, r2
 80038d8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80038e2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00c      	beq.n	8003906 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038f6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038fa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003904:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800391a:	2b00      	cmp	r3, #0
 800391c:	d003      	beq.n	8003926 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	4798      	blx	r3
    }
  }
  return status;
 8003926:	7bfb      	ldrb	r3, [r7, #15]
}
 8003928:	4618      	mov	r0, r3
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003930:	b480      	push	{r7}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800393a:	2300      	movs	r3, #0
 800393c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800393e:	e15a      	b.n	8003bf6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	2101      	movs	r1, #1
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	fa01 f303 	lsl.w	r3, r1, r3
 800394c:	4013      	ands	r3, r2
 800394e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2b00      	cmp	r3, #0
 8003954:	f000 814c 	beq.w	8003bf0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f003 0303 	and.w	r3, r3, #3
 8003960:	2b01      	cmp	r3, #1
 8003962:	d005      	beq.n	8003970 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800396c:	2b02      	cmp	r3, #2
 800396e:	d130      	bne.n	80039d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	2203      	movs	r2, #3
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	43db      	mvns	r3, r3
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	4013      	ands	r3, r2
 8003986:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4313      	orrs	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039a6:	2201      	movs	r2, #1
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	43db      	mvns	r3, r3
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	4013      	ands	r3, r2
 80039b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	091b      	lsrs	r3, r3, #4
 80039bc:	f003 0201 	and.w	r2, r3, #1
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	fa02 f303 	lsl.w	r3, r2, r3
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	2b03      	cmp	r3, #3
 80039dc:	d017      	beq.n	8003a0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	2203      	movs	r2, #3
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	43db      	mvns	r3, r3
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	4013      	ands	r3, r2
 80039f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	689a      	ldr	r2, [r3, #8]
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d123      	bne.n	8003a62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	08da      	lsrs	r2, r3, #3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	3208      	adds	r2, #8
 8003a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	f003 0307 	and.w	r3, r3, #7
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	220f      	movs	r2, #15
 8003a32:	fa02 f303 	lsl.w	r3, r2, r3
 8003a36:	43db      	mvns	r3, r3
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	691a      	ldr	r2, [r3, #16]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	08da      	lsrs	r2, r3, #3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	3208      	adds	r2, #8
 8003a5c:	6939      	ldr	r1, [r7, #16]
 8003a5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	2203      	movs	r2, #3
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	43db      	mvns	r3, r3
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	4013      	ands	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f003 0203 	and.w	r2, r3, #3
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 80a6 	beq.w	8003bf0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aa4:	4b5b      	ldr	r3, [pc, #364]	@ (8003c14 <HAL_GPIO_Init+0x2e4>)
 8003aa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aa8:	4a5a      	ldr	r2, [pc, #360]	@ (8003c14 <HAL_GPIO_Init+0x2e4>)
 8003aaa:	f043 0301 	orr.w	r3, r3, #1
 8003aae:	6613      	str	r3, [r2, #96]	@ 0x60
 8003ab0:	4b58      	ldr	r3, [pc, #352]	@ (8003c14 <HAL_GPIO_Init+0x2e4>)
 8003ab2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	60bb      	str	r3, [r7, #8]
 8003aba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003abc:	4a56      	ldr	r2, [pc, #344]	@ (8003c18 <HAL_GPIO_Init+0x2e8>)
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	089b      	lsrs	r3, r3, #2
 8003ac2:	3302      	adds	r3, #2
 8003ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f003 0303 	and.w	r3, r3, #3
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	220f      	movs	r2, #15
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	4013      	ands	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003ae6:	d01f      	beq.n	8003b28 <HAL_GPIO_Init+0x1f8>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a4c      	ldr	r2, [pc, #304]	@ (8003c1c <HAL_GPIO_Init+0x2ec>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d019      	beq.n	8003b24 <HAL_GPIO_Init+0x1f4>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a4b      	ldr	r2, [pc, #300]	@ (8003c20 <HAL_GPIO_Init+0x2f0>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d013      	beq.n	8003b20 <HAL_GPIO_Init+0x1f0>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a4a      	ldr	r2, [pc, #296]	@ (8003c24 <HAL_GPIO_Init+0x2f4>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d00d      	beq.n	8003b1c <HAL_GPIO_Init+0x1ec>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a49      	ldr	r2, [pc, #292]	@ (8003c28 <HAL_GPIO_Init+0x2f8>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d007      	beq.n	8003b18 <HAL_GPIO_Init+0x1e8>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a48      	ldr	r2, [pc, #288]	@ (8003c2c <HAL_GPIO_Init+0x2fc>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d101      	bne.n	8003b14 <HAL_GPIO_Init+0x1e4>
 8003b10:	2305      	movs	r3, #5
 8003b12:	e00a      	b.n	8003b2a <HAL_GPIO_Init+0x1fa>
 8003b14:	2306      	movs	r3, #6
 8003b16:	e008      	b.n	8003b2a <HAL_GPIO_Init+0x1fa>
 8003b18:	2304      	movs	r3, #4
 8003b1a:	e006      	b.n	8003b2a <HAL_GPIO_Init+0x1fa>
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e004      	b.n	8003b2a <HAL_GPIO_Init+0x1fa>
 8003b20:	2302      	movs	r3, #2
 8003b22:	e002      	b.n	8003b2a <HAL_GPIO_Init+0x1fa>
 8003b24:	2301      	movs	r3, #1
 8003b26:	e000      	b.n	8003b2a <HAL_GPIO_Init+0x1fa>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	f002 0203 	and.w	r2, r2, #3
 8003b30:	0092      	lsls	r2, r2, #2
 8003b32:	4093      	lsls	r3, r2
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b3a:	4937      	ldr	r1, [pc, #220]	@ (8003c18 <HAL_GPIO_Init+0x2e8>)
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	089b      	lsrs	r3, r3, #2
 8003b40:	3302      	adds	r3, #2
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b48:	4b39      	ldr	r3, [pc, #228]	@ (8003c30 <HAL_GPIO_Init+0x300>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	43db      	mvns	r3, r3
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	4013      	ands	r3, r2
 8003b56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d003      	beq.n	8003b6c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b6c:	4a30      	ldr	r2, [pc, #192]	@ (8003c30 <HAL_GPIO_Init+0x300>)
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b72:	4b2f      	ldr	r3, [pc, #188]	@ (8003c30 <HAL_GPIO_Init+0x300>)
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	43db      	mvns	r3, r3
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b96:	4a26      	ldr	r2, [pc, #152]	@ (8003c30 <HAL_GPIO_Init+0x300>)
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003b9c:	4b24      	ldr	r3, [pc, #144]	@ (8003c30 <HAL_GPIO_Init+0x300>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d003      	beq.n	8003bc0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003bc0:	4a1b      	ldr	r2, [pc, #108]	@ (8003c30 <HAL_GPIO_Init+0x300>)
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003bc6:	4b1a      	ldr	r3, [pc, #104]	@ (8003c30 <HAL_GPIO_Init+0x300>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	43db      	mvns	r3, r3
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003bea:	4a11      	ldr	r2, [pc, #68]	@ (8003c30 <HAL_GPIO_Init+0x300>)
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f47f ae9d 	bne.w	8003940 <HAL_GPIO_Init+0x10>
  }
}
 8003c06:	bf00      	nop
 8003c08:	bf00      	nop
 8003c0a:	371c      	adds	r7, #28
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	40021000 	.word	0x40021000
 8003c18:	40010000 	.word	0x40010000
 8003c1c:	48000400 	.word	0x48000400
 8003c20:	48000800 	.word	0x48000800
 8003c24:	48000c00 	.word	0x48000c00
 8003c28:	48001000 	.word	0x48001000
 8003c2c:	48001400 	.word	0x48001400
 8003c30:	40010400 	.word	0x40010400

08003c34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	807b      	strh	r3, [r7, #2]
 8003c40:	4613      	mov	r3, r2
 8003c42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c44:	787b      	ldrb	r3, [r7, #1]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c4a:	887a      	ldrh	r2, [r7, #2]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c50:	e002      	b.n	8003c58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c52:	887a      	ldrh	r2, [r7, #2]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003c6e:	4b08      	ldr	r3, [pc, #32]	@ (8003c90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c70:	695a      	ldr	r2, [r3, #20]
 8003c72:	88fb      	ldrh	r3, [r7, #6]
 8003c74:	4013      	ands	r3, r2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d006      	beq.n	8003c88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c7a:	4a05      	ldr	r2, [pc, #20]	@ (8003c90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c7c:	88fb      	ldrh	r3, [r7, #6]
 8003c7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c80:	88fb      	ldrh	r3, [r7, #6]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 f806 	bl	8003c94 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c88:	bf00      	nop
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	40010400 	.word	0x40010400

08003c94 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
	...

08003cac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d141      	bne.n	8003d3e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cba:	4b4b      	ldr	r3, [pc, #300]	@ (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003cc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cc6:	d131      	bne.n	8003d2c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cc8:	4b47      	ldr	r3, [pc, #284]	@ (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cce:	4a46      	ldr	r2, [pc, #280]	@ (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cd4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cd8:	4b43      	ldr	r3, [pc, #268]	@ (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003ce0:	4a41      	ldr	r2, [pc, #260]	@ (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ce2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ce6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ce8:	4b40      	ldr	r3, [pc, #256]	@ (8003dec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2232      	movs	r2, #50	@ 0x32
 8003cee:	fb02 f303 	mul.w	r3, r2, r3
 8003cf2:	4a3f      	ldr	r2, [pc, #252]	@ (8003df0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf8:	0c9b      	lsrs	r3, r3, #18
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cfe:	e002      	b.n	8003d06 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	3b01      	subs	r3, #1
 8003d04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d06:	4b38      	ldr	r3, [pc, #224]	@ (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d12:	d102      	bne.n	8003d1a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1f2      	bne.n	8003d00 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d1a:	4b33      	ldr	r3, [pc, #204]	@ (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d26:	d158      	bne.n	8003dda <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e057      	b.n	8003ddc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d2c:	4b2e      	ldr	r3, [pc, #184]	@ (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d32:	4a2d      	ldr	r2, [pc, #180]	@ (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d38:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003d3c:	e04d      	b.n	8003dda <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d44:	d141      	bne.n	8003dca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d46:	4b28      	ldr	r3, [pc, #160]	@ (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d52:	d131      	bne.n	8003db8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d54:	4b24      	ldr	r3, [pc, #144]	@ (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d5a:	4a23      	ldr	r2, [pc, #140]	@ (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d64:	4b20      	ldr	r3, [pc, #128]	@ (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d6c:	4a1e      	ldr	r2, [pc, #120]	@ (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d74:	4b1d      	ldr	r3, [pc, #116]	@ (8003dec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2232      	movs	r2, #50	@ 0x32
 8003d7a:	fb02 f303 	mul.w	r3, r2, r3
 8003d7e:	4a1c      	ldr	r2, [pc, #112]	@ (8003df0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d80:	fba2 2303 	umull	r2, r3, r2, r3
 8003d84:	0c9b      	lsrs	r3, r3, #18
 8003d86:	3301      	adds	r3, #1
 8003d88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d8a:	e002      	b.n	8003d92 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d92:	4b15      	ldr	r3, [pc, #84]	@ (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d9e:	d102      	bne.n	8003da6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1f2      	bne.n	8003d8c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003da6:	4b10      	ldr	r3, [pc, #64]	@ (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003db2:	d112      	bne.n	8003dda <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e011      	b.n	8003ddc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003db8:	4b0b      	ldr	r3, [pc, #44]	@ (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dbe:	4a0a      	ldr	r2, [pc, #40]	@ (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dc4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003dc8:	e007      	b.n	8003dda <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003dca:	4b07      	ldr	r3, [pc, #28]	@ (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003dd2:	4a05      	ldr	r2, [pc, #20]	@ (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003dd8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3714      	adds	r7, #20
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr
 8003de8:	40007000 	.word	0x40007000
 8003dec:	20000000 	.word	0x20000000
 8003df0:	431bde83 	.word	0x431bde83

08003df4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003df8:	4b05      	ldr	r3, [pc, #20]	@ (8003e10 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	4a04      	ldr	r2, [pc, #16]	@ (8003e10 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003dfe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e02:	6093      	str	r3, [r2, #8]
}
 8003e04:	bf00      	nop
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	40007000 	.word	0x40007000

08003e14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b088      	sub	sp, #32
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e306      	b.n	8004434 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d075      	beq.n	8003f1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e32:	4b97      	ldr	r3, [pc, #604]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 030c 	and.w	r3, r3, #12
 8003e3a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e3c:	4b94      	ldr	r3, [pc, #592]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	f003 0303 	and.w	r3, r3, #3
 8003e44:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	2b0c      	cmp	r3, #12
 8003e4a:	d102      	bne.n	8003e52 <HAL_RCC_OscConfig+0x3e>
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	2b03      	cmp	r3, #3
 8003e50:	d002      	beq.n	8003e58 <HAL_RCC_OscConfig+0x44>
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	d10b      	bne.n	8003e70 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e58:	4b8d      	ldr	r3, [pc, #564]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d05b      	beq.n	8003f1c <HAL_RCC_OscConfig+0x108>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d157      	bne.n	8003f1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e2e1      	b.n	8004434 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e78:	d106      	bne.n	8003e88 <HAL_RCC_OscConfig+0x74>
 8003e7a:	4b85      	ldr	r3, [pc, #532]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a84      	ldr	r2, [pc, #528]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003e80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e84:	6013      	str	r3, [r2, #0]
 8003e86:	e01d      	b.n	8003ec4 <HAL_RCC_OscConfig+0xb0>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e90:	d10c      	bne.n	8003eac <HAL_RCC_OscConfig+0x98>
 8003e92:	4b7f      	ldr	r3, [pc, #508]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a7e      	ldr	r2, [pc, #504]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003e98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e9c:	6013      	str	r3, [r2, #0]
 8003e9e:	4b7c      	ldr	r3, [pc, #496]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a7b      	ldr	r2, [pc, #492]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003ea4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ea8:	6013      	str	r3, [r2, #0]
 8003eaa:	e00b      	b.n	8003ec4 <HAL_RCC_OscConfig+0xb0>
 8003eac:	4b78      	ldr	r3, [pc, #480]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a77      	ldr	r2, [pc, #476]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003eb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003eb6:	6013      	str	r3, [r2, #0]
 8003eb8:	4b75      	ldr	r3, [pc, #468]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a74      	ldr	r2, [pc, #464]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003ebe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ec2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d013      	beq.n	8003ef4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ecc:	f7fd ffca 	bl	8001e64 <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ed4:	f7fd ffc6 	bl	8001e64 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b64      	cmp	r3, #100	@ 0x64
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e2a6      	b.n	8004434 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ee6:	4b6a      	ldr	r3, [pc, #424]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d0f0      	beq.n	8003ed4 <HAL_RCC_OscConfig+0xc0>
 8003ef2:	e014      	b.n	8003f1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef4:	f7fd ffb6 	bl	8001e64 <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003efc:	f7fd ffb2 	bl	8001e64 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b64      	cmp	r3, #100	@ 0x64
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e292      	b.n	8004434 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f0e:	4b60      	ldr	r3, [pc, #384]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1f0      	bne.n	8003efc <HAL_RCC_OscConfig+0xe8>
 8003f1a:	e000      	b.n	8003f1e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d075      	beq.n	8004016 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f2a:	4b59      	ldr	r3, [pc, #356]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 030c 	and.w	r3, r3, #12
 8003f32:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f34:	4b56      	ldr	r3, [pc, #344]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f003 0303 	and.w	r3, r3, #3
 8003f3c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	2b0c      	cmp	r3, #12
 8003f42:	d102      	bne.n	8003f4a <HAL_RCC_OscConfig+0x136>
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d002      	beq.n	8003f50 <HAL_RCC_OscConfig+0x13c>
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	2b04      	cmp	r3, #4
 8003f4e:	d11f      	bne.n	8003f90 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f50:	4b4f      	ldr	r3, [pc, #316]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d005      	beq.n	8003f68 <HAL_RCC_OscConfig+0x154>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d101      	bne.n	8003f68 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e265      	b.n	8004434 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f68:	4b49      	ldr	r3, [pc, #292]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	061b      	lsls	r3, r3, #24
 8003f76:	4946      	ldr	r1, [pc, #280]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003f7c:	4b45      	ldr	r3, [pc, #276]	@ (8004094 <HAL_RCC_OscConfig+0x280>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7fd f803 	bl	8000f8c <HAL_InitTick>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d043      	beq.n	8004014 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e251      	b.n	8004434 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d023      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f98:	4b3d      	ldr	r3, [pc, #244]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a3c      	ldr	r2, [pc, #240]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003f9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa4:	f7fd ff5e 	bl	8001e64 <HAL_GetTick>
 8003fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003faa:	e008      	b.n	8003fbe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fac:	f7fd ff5a 	bl	8001e64 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e23a      	b.n	8004434 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fbe:	4b34      	ldr	r3, [pc, #208]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d0f0      	beq.n	8003fac <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fca:	4b31      	ldr	r3, [pc, #196]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	061b      	lsls	r3, r3, #24
 8003fd8:	492d      	ldr	r1, [pc, #180]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	604b      	str	r3, [r1, #4]
 8003fde:	e01a      	b.n	8004016 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fe0:	4b2b      	ldr	r3, [pc, #172]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a2a      	ldr	r2, [pc, #168]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003fe6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fec:	f7fd ff3a 	bl	8001e64 <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ff4:	f7fd ff36 	bl	8001e64 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e216      	b.n	8004434 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004006:	4b22      	ldr	r3, [pc, #136]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1f0      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x1e0>
 8004012:	e000      	b.n	8004016 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004014:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0308 	and.w	r3, r3, #8
 800401e:	2b00      	cmp	r3, #0
 8004020:	d041      	beq.n	80040a6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d01c      	beq.n	8004064 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800402a:	4b19      	ldr	r3, [pc, #100]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 800402c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004030:	4a17      	ldr	r2, [pc, #92]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8004032:	f043 0301 	orr.w	r3, r3, #1
 8004036:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800403a:	f7fd ff13 	bl	8001e64 <HAL_GetTick>
 800403e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004040:	e008      	b.n	8004054 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004042:	f7fd ff0f 	bl	8001e64 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d901      	bls.n	8004054 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e1ef      	b.n	8004434 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004054:	4b0e      	ldr	r3, [pc, #56]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8004056:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0ef      	beq.n	8004042 <HAL_RCC_OscConfig+0x22e>
 8004062:	e020      	b.n	80040a6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004064:	4b0a      	ldr	r3, [pc, #40]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8004066:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800406a:	4a09      	ldr	r2, [pc, #36]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 800406c:	f023 0301 	bic.w	r3, r3, #1
 8004070:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004074:	f7fd fef6 	bl	8001e64 <HAL_GetTick>
 8004078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800407a:	e00d      	b.n	8004098 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800407c:	f7fd fef2 	bl	8001e64 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b02      	cmp	r3, #2
 8004088:	d906      	bls.n	8004098 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e1d2      	b.n	8004434 <HAL_RCC_OscConfig+0x620>
 800408e:	bf00      	nop
 8004090:	40021000 	.word	0x40021000
 8004094:	200000c0 	.word	0x200000c0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004098:	4b8c      	ldr	r3, [pc, #560]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 800409a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1ea      	bne.n	800407c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0304 	and.w	r3, r3, #4
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f000 80a6 	beq.w	8004200 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040b4:	2300      	movs	r3, #0
 80040b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040b8:	4b84      	ldr	r3, [pc, #528]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 80040ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <HAL_RCC_OscConfig+0x2b4>
 80040c4:	2301      	movs	r3, #1
 80040c6:	e000      	b.n	80040ca <HAL_RCC_OscConfig+0x2b6>
 80040c8:	2300      	movs	r3, #0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00d      	beq.n	80040ea <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ce:	4b7f      	ldr	r3, [pc, #508]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 80040d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d2:	4a7e      	ldr	r2, [pc, #504]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 80040d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80040da:	4b7c      	ldr	r3, [pc, #496]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 80040dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040e2:	60fb      	str	r3, [r7, #12]
 80040e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80040e6:	2301      	movs	r3, #1
 80040e8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040ea:	4b79      	ldr	r3, [pc, #484]	@ (80042d0 <HAL_RCC_OscConfig+0x4bc>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d118      	bne.n	8004128 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040f6:	4b76      	ldr	r3, [pc, #472]	@ (80042d0 <HAL_RCC_OscConfig+0x4bc>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a75      	ldr	r2, [pc, #468]	@ (80042d0 <HAL_RCC_OscConfig+0x4bc>)
 80040fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004100:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004102:	f7fd feaf 	bl	8001e64 <HAL_GetTick>
 8004106:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004108:	e008      	b.n	800411c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800410a:	f7fd feab 	bl	8001e64 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b02      	cmp	r3, #2
 8004116:	d901      	bls.n	800411c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e18b      	b.n	8004434 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800411c:	4b6c      	ldr	r3, [pc, #432]	@ (80042d0 <HAL_RCC_OscConfig+0x4bc>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004124:	2b00      	cmp	r3, #0
 8004126:	d0f0      	beq.n	800410a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d108      	bne.n	8004142 <HAL_RCC_OscConfig+0x32e>
 8004130:	4b66      	ldr	r3, [pc, #408]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 8004132:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004136:	4a65      	ldr	r2, [pc, #404]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 8004138:	f043 0301 	orr.w	r3, r3, #1
 800413c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004140:	e024      	b.n	800418c <HAL_RCC_OscConfig+0x378>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	2b05      	cmp	r3, #5
 8004148:	d110      	bne.n	800416c <HAL_RCC_OscConfig+0x358>
 800414a:	4b60      	ldr	r3, [pc, #384]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 800414c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004150:	4a5e      	ldr	r2, [pc, #376]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 8004152:	f043 0304 	orr.w	r3, r3, #4
 8004156:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800415a:	4b5c      	ldr	r3, [pc, #368]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 800415c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004160:	4a5a      	ldr	r2, [pc, #360]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 8004162:	f043 0301 	orr.w	r3, r3, #1
 8004166:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800416a:	e00f      	b.n	800418c <HAL_RCC_OscConfig+0x378>
 800416c:	4b57      	ldr	r3, [pc, #348]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 800416e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004172:	4a56      	ldr	r2, [pc, #344]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 8004174:	f023 0301 	bic.w	r3, r3, #1
 8004178:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800417c:	4b53      	ldr	r3, [pc, #332]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 800417e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004182:	4a52      	ldr	r2, [pc, #328]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 8004184:	f023 0304 	bic.w	r3, r3, #4
 8004188:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d016      	beq.n	80041c2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004194:	f7fd fe66 	bl	8001e64 <HAL_GetTick>
 8004198:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800419a:	e00a      	b.n	80041b2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800419c:	f7fd fe62 	bl	8001e64 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e140      	b.n	8004434 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041b2:	4b46      	ldr	r3, [pc, #280]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 80041b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d0ed      	beq.n	800419c <HAL_RCC_OscConfig+0x388>
 80041c0:	e015      	b.n	80041ee <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c2:	f7fd fe4f 	bl	8001e64 <HAL_GetTick>
 80041c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041c8:	e00a      	b.n	80041e0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ca:	f7fd fe4b 	bl	8001e64 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041d8:	4293      	cmp	r3, r2
 80041da:	d901      	bls.n	80041e0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e129      	b.n	8004434 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041e0:	4b3a      	ldr	r3, [pc, #232]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 80041e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1ed      	bne.n	80041ca <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041ee:	7ffb      	ldrb	r3, [r7, #31]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d105      	bne.n	8004200 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041f4:	4b35      	ldr	r3, [pc, #212]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 80041f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f8:	4a34      	ldr	r2, [pc, #208]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 80041fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041fe:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0320 	and.w	r3, r3, #32
 8004208:	2b00      	cmp	r3, #0
 800420a:	d03c      	beq.n	8004286 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d01c      	beq.n	800424e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004214:	4b2d      	ldr	r3, [pc, #180]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 8004216:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800421a:	4a2c      	ldr	r2, [pc, #176]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 800421c:	f043 0301 	orr.w	r3, r3, #1
 8004220:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004224:	f7fd fe1e 	bl	8001e64 <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800422c:	f7fd fe1a 	bl	8001e64 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e0fa      	b.n	8004434 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800423e:	4b23      	ldr	r3, [pc, #140]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 8004240:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d0ef      	beq.n	800422c <HAL_RCC_OscConfig+0x418>
 800424c:	e01b      	b.n	8004286 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800424e:	4b1f      	ldr	r3, [pc, #124]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 8004250:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004254:	4a1d      	ldr	r2, [pc, #116]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 8004256:	f023 0301 	bic.w	r3, r3, #1
 800425a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800425e:	f7fd fe01 	bl	8001e64 <HAL_GetTick>
 8004262:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004264:	e008      	b.n	8004278 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004266:	f7fd fdfd 	bl	8001e64 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e0dd      	b.n	8004434 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004278:	4b14      	ldr	r3, [pc, #80]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 800427a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1ef      	bne.n	8004266 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	2b00      	cmp	r3, #0
 800428c:	f000 80d1 	beq.w	8004432 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004290:	4b0e      	ldr	r3, [pc, #56]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f003 030c 	and.w	r3, r3, #12
 8004298:	2b0c      	cmp	r3, #12
 800429a:	f000 808b 	beq.w	80043b4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	69db      	ldr	r3, [r3, #28]
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d15e      	bne.n	8004364 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042a6:	4b09      	ldr	r3, [pc, #36]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a08      	ldr	r2, [pc, #32]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 80042ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b2:	f7fd fdd7 	bl	8001e64 <HAL_GetTick>
 80042b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042b8:	e00c      	b.n	80042d4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ba:	f7fd fdd3 	bl	8001e64 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d905      	bls.n	80042d4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e0b3      	b.n	8004434 <HAL_RCC_OscConfig+0x620>
 80042cc:	40021000 	.word	0x40021000
 80042d0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042d4:	4b59      	ldr	r3, [pc, #356]	@ (800443c <HAL_RCC_OscConfig+0x628>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1ec      	bne.n	80042ba <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042e0:	4b56      	ldr	r3, [pc, #344]	@ (800443c <HAL_RCC_OscConfig+0x628>)
 80042e2:	68da      	ldr	r2, [r3, #12]
 80042e4:	4b56      	ldr	r3, [pc, #344]	@ (8004440 <HAL_RCC_OscConfig+0x62c>)
 80042e6:	4013      	ands	r3, r2
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	6a11      	ldr	r1, [r2, #32]
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80042f0:	3a01      	subs	r2, #1
 80042f2:	0112      	lsls	r2, r2, #4
 80042f4:	4311      	orrs	r1, r2
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80042fa:	0212      	lsls	r2, r2, #8
 80042fc:	4311      	orrs	r1, r2
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004302:	0852      	lsrs	r2, r2, #1
 8004304:	3a01      	subs	r2, #1
 8004306:	0552      	lsls	r2, r2, #21
 8004308:	4311      	orrs	r1, r2
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800430e:	0852      	lsrs	r2, r2, #1
 8004310:	3a01      	subs	r2, #1
 8004312:	0652      	lsls	r2, r2, #25
 8004314:	4311      	orrs	r1, r2
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800431a:	06d2      	lsls	r2, r2, #27
 800431c:	430a      	orrs	r2, r1
 800431e:	4947      	ldr	r1, [pc, #284]	@ (800443c <HAL_RCC_OscConfig+0x628>)
 8004320:	4313      	orrs	r3, r2
 8004322:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004324:	4b45      	ldr	r3, [pc, #276]	@ (800443c <HAL_RCC_OscConfig+0x628>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a44      	ldr	r2, [pc, #272]	@ (800443c <HAL_RCC_OscConfig+0x628>)
 800432a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800432e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004330:	4b42      	ldr	r3, [pc, #264]	@ (800443c <HAL_RCC_OscConfig+0x628>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	4a41      	ldr	r2, [pc, #260]	@ (800443c <HAL_RCC_OscConfig+0x628>)
 8004336:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800433a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433c:	f7fd fd92 	bl	8001e64 <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004344:	f7fd fd8e 	bl	8001e64 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e06e      	b.n	8004434 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004356:	4b39      	ldr	r3, [pc, #228]	@ (800443c <HAL_RCC_OscConfig+0x628>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d0f0      	beq.n	8004344 <HAL_RCC_OscConfig+0x530>
 8004362:	e066      	b.n	8004432 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004364:	4b35      	ldr	r3, [pc, #212]	@ (800443c <HAL_RCC_OscConfig+0x628>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a34      	ldr	r2, [pc, #208]	@ (800443c <HAL_RCC_OscConfig+0x628>)
 800436a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800436e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004370:	4b32      	ldr	r3, [pc, #200]	@ (800443c <HAL_RCC_OscConfig+0x628>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	4a31      	ldr	r2, [pc, #196]	@ (800443c <HAL_RCC_OscConfig+0x628>)
 8004376:	f023 0303 	bic.w	r3, r3, #3
 800437a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800437c:	4b2f      	ldr	r3, [pc, #188]	@ (800443c <HAL_RCC_OscConfig+0x628>)
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	4a2e      	ldr	r2, [pc, #184]	@ (800443c <HAL_RCC_OscConfig+0x628>)
 8004382:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8004386:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800438a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438c:	f7fd fd6a 	bl	8001e64 <HAL_GetTick>
 8004390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004392:	e008      	b.n	80043a6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004394:	f7fd fd66 	bl	8001e64 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e046      	b.n	8004434 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043a6:	4b25      	ldr	r3, [pc, #148]	@ (800443c <HAL_RCC_OscConfig+0x628>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1f0      	bne.n	8004394 <HAL_RCC_OscConfig+0x580>
 80043b2:	e03e      	b.n	8004432 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	69db      	ldr	r3, [r3, #28]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d101      	bne.n	80043c0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e039      	b.n	8004434 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80043c0:	4b1e      	ldr	r3, [pc, #120]	@ (800443c <HAL_RCC_OscConfig+0x628>)
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	f003 0203 	and.w	r2, r3, #3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a1b      	ldr	r3, [r3, #32]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d12c      	bne.n	800442e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043de:	3b01      	subs	r3, #1
 80043e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d123      	bne.n	800442e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d11b      	bne.n	800442e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004400:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004402:	429a      	cmp	r2, r3
 8004404:	d113      	bne.n	800442e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004410:	085b      	lsrs	r3, r3, #1
 8004412:	3b01      	subs	r3, #1
 8004414:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004416:	429a      	cmp	r2, r3
 8004418:	d109      	bne.n	800442e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004424:	085b      	lsrs	r3, r3, #1
 8004426:	3b01      	subs	r3, #1
 8004428:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800442a:	429a      	cmp	r2, r3
 800442c:	d001      	beq.n	8004432 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e000      	b.n	8004434 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3720      	adds	r7, #32
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	40021000 	.word	0x40021000
 8004440:	019f800c 	.word	0x019f800c

08004444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800444e:	2300      	movs	r3, #0
 8004450:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d101      	bne.n	800445c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e11e      	b.n	800469a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800445c:	4b91      	ldr	r3, [pc, #580]	@ (80046a4 <HAL_RCC_ClockConfig+0x260>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 030f 	and.w	r3, r3, #15
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	429a      	cmp	r2, r3
 8004468:	d910      	bls.n	800448c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800446a:	4b8e      	ldr	r3, [pc, #568]	@ (80046a4 <HAL_RCC_ClockConfig+0x260>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f023 020f 	bic.w	r2, r3, #15
 8004472:	498c      	ldr	r1, [pc, #560]	@ (80046a4 <HAL_RCC_ClockConfig+0x260>)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	4313      	orrs	r3, r2
 8004478:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800447a:	4b8a      	ldr	r3, [pc, #552]	@ (80046a4 <HAL_RCC_ClockConfig+0x260>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 030f 	and.w	r3, r3, #15
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	429a      	cmp	r2, r3
 8004486:	d001      	beq.n	800448c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e106      	b.n	800469a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	2b00      	cmp	r3, #0
 8004496:	d073      	beq.n	8004580 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	2b03      	cmp	r3, #3
 800449e:	d129      	bne.n	80044f4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044a0:	4b81      	ldr	r3, [pc, #516]	@ (80046a8 <HAL_RCC_ClockConfig+0x264>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d101      	bne.n	80044b0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e0f4      	b.n	800469a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80044b0:	f000 f9d0 	bl	8004854 <RCC_GetSysClockFreqFromPLLSource>
 80044b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	4a7c      	ldr	r2, [pc, #496]	@ (80046ac <HAL_RCC_ClockConfig+0x268>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d93f      	bls.n	800453e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80044be:	4b7a      	ldr	r3, [pc, #488]	@ (80046a8 <HAL_RCC_ClockConfig+0x264>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d009      	beq.n	80044de <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d033      	beq.n	800453e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d12f      	bne.n	800453e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80044de:	4b72      	ldr	r3, [pc, #456]	@ (80046a8 <HAL_RCC_ClockConfig+0x264>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044e6:	4a70      	ldr	r2, [pc, #448]	@ (80046a8 <HAL_RCC_ClockConfig+0x264>)
 80044e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80044ee:	2380      	movs	r3, #128	@ 0x80
 80044f0:	617b      	str	r3, [r7, #20]
 80044f2:	e024      	b.n	800453e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d107      	bne.n	800450c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044fc:	4b6a      	ldr	r3, [pc, #424]	@ (80046a8 <HAL_RCC_ClockConfig+0x264>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d109      	bne.n	800451c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e0c6      	b.n	800469a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800450c:	4b66      	ldr	r3, [pc, #408]	@ (80046a8 <HAL_RCC_ClockConfig+0x264>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004514:	2b00      	cmp	r3, #0
 8004516:	d101      	bne.n	800451c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e0be      	b.n	800469a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800451c:	f000 f8ce 	bl	80046bc <HAL_RCC_GetSysClockFreq>
 8004520:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	4a61      	ldr	r2, [pc, #388]	@ (80046ac <HAL_RCC_ClockConfig+0x268>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d909      	bls.n	800453e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800452a:	4b5f      	ldr	r3, [pc, #380]	@ (80046a8 <HAL_RCC_ClockConfig+0x264>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004532:	4a5d      	ldr	r2, [pc, #372]	@ (80046a8 <HAL_RCC_ClockConfig+0x264>)
 8004534:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004538:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800453a:	2380      	movs	r3, #128	@ 0x80
 800453c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800453e:	4b5a      	ldr	r3, [pc, #360]	@ (80046a8 <HAL_RCC_ClockConfig+0x264>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f023 0203 	bic.w	r2, r3, #3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	4957      	ldr	r1, [pc, #348]	@ (80046a8 <HAL_RCC_ClockConfig+0x264>)
 800454c:	4313      	orrs	r3, r2
 800454e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004550:	f7fd fc88 	bl	8001e64 <HAL_GetTick>
 8004554:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004556:	e00a      	b.n	800456e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004558:	f7fd fc84 	bl	8001e64 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004566:	4293      	cmp	r3, r2
 8004568:	d901      	bls.n	800456e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e095      	b.n	800469a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800456e:	4b4e      	ldr	r3, [pc, #312]	@ (80046a8 <HAL_RCC_ClockConfig+0x264>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f003 020c 	and.w	r2, r3, #12
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	429a      	cmp	r2, r3
 800457e:	d1eb      	bne.n	8004558 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b00      	cmp	r3, #0
 800458a:	d023      	beq.n	80045d4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	2b00      	cmp	r3, #0
 8004596:	d005      	beq.n	80045a4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004598:	4b43      	ldr	r3, [pc, #268]	@ (80046a8 <HAL_RCC_ClockConfig+0x264>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	4a42      	ldr	r2, [pc, #264]	@ (80046a8 <HAL_RCC_ClockConfig+0x264>)
 800459e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80045a2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0308 	and.w	r3, r3, #8
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d007      	beq.n	80045c0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80045b0:	4b3d      	ldr	r3, [pc, #244]	@ (80046a8 <HAL_RCC_ClockConfig+0x264>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80045b8:	4a3b      	ldr	r2, [pc, #236]	@ (80046a8 <HAL_RCC_ClockConfig+0x264>)
 80045ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80045be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045c0:	4b39      	ldr	r3, [pc, #228]	@ (80046a8 <HAL_RCC_ClockConfig+0x264>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	4936      	ldr	r1, [pc, #216]	@ (80046a8 <HAL_RCC_ClockConfig+0x264>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	608b      	str	r3, [r1, #8]
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	2b80      	cmp	r3, #128	@ 0x80
 80045d8:	d105      	bne.n	80045e6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80045da:	4b33      	ldr	r3, [pc, #204]	@ (80046a8 <HAL_RCC_ClockConfig+0x264>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	4a32      	ldr	r2, [pc, #200]	@ (80046a8 <HAL_RCC_ClockConfig+0x264>)
 80045e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045e4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045e6:	4b2f      	ldr	r3, [pc, #188]	@ (80046a4 <HAL_RCC_ClockConfig+0x260>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 030f 	and.w	r3, r3, #15
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d21d      	bcs.n	8004630 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045f4:	4b2b      	ldr	r3, [pc, #172]	@ (80046a4 <HAL_RCC_ClockConfig+0x260>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f023 020f 	bic.w	r2, r3, #15
 80045fc:	4929      	ldr	r1, [pc, #164]	@ (80046a4 <HAL_RCC_ClockConfig+0x260>)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	4313      	orrs	r3, r2
 8004602:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004604:	f7fd fc2e 	bl	8001e64 <HAL_GetTick>
 8004608:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800460a:	e00a      	b.n	8004622 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800460c:	f7fd fc2a 	bl	8001e64 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	f241 3288 	movw	r2, #5000	@ 0x1388
 800461a:	4293      	cmp	r3, r2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e03b      	b.n	800469a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004622:	4b20      	ldr	r3, [pc, #128]	@ (80046a4 <HAL_RCC_ClockConfig+0x260>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 030f 	and.w	r3, r3, #15
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	429a      	cmp	r2, r3
 800462e:	d1ed      	bne.n	800460c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0304 	and.w	r3, r3, #4
 8004638:	2b00      	cmp	r3, #0
 800463a:	d008      	beq.n	800464e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800463c:	4b1a      	ldr	r3, [pc, #104]	@ (80046a8 <HAL_RCC_ClockConfig+0x264>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	4917      	ldr	r1, [pc, #92]	@ (80046a8 <HAL_RCC_ClockConfig+0x264>)
 800464a:	4313      	orrs	r3, r2
 800464c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0308 	and.w	r3, r3, #8
 8004656:	2b00      	cmp	r3, #0
 8004658:	d009      	beq.n	800466e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800465a:	4b13      	ldr	r3, [pc, #76]	@ (80046a8 <HAL_RCC_ClockConfig+0x264>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	490f      	ldr	r1, [pc, #60]	@ (80046a8 <HAL_RCC_ClockConfig+0x264>)
 800466a:	4313      	orrs	r3, r2
 800466c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800466e:	f000 f825 	bl	80046bc <HAL_RCC_GetSysClockFreq>
 8004672:	4602      	mov	r2, r0
 8004674:	4b0c      	ldr	r3, [pc, #48]	@ (80046a8 <HAL_RCC_ClockConfig+0x264>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	091b      	lsrs	r3, r3, #4
 800467a:	f003 030f 	and.w	r3, r3, #15
 800467e:	490c      	ldr	r1, [pc, #48]	@ (80046b0 <HAL_RCC_ClockConfig+0x26c>)
 8004680:	5ccb      	ldrb	r3, [r1, r3]
 8004682:	f003 031f 	and.w	r3, r3, #31
 8004686:	fa22 f303 	lsr.w	r3, r2, r3
 800468a:	4a0a      	ldr	r2, [pc, #40]	@ (80046b4 <HAL_RCC_ClockConfig+0x270>)
 800468c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800468e:	4b0a      	ldr	r3, [pc, #40]	@ (80046b8 <HAL_RCC_ClockConfig+0x274>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4618      	mov	r0, r3
 8004694:	f7fc fc7a 	bl	8000f8c <HAL_InitTick>
 8004698:	4603      	mov	r3, r0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3718      	adds	r7, #24
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	40022000 	.word	0x40022000
 80046a8:	40021000 	.word	0x40021000
 80046ac:	04c4b400 	.word	0x04c4b400
 80046b0:	08009df0 	.word	0x08009df0
 80046b4:	20000000 	.word	0x20000000
 80046b8:	200000c0 	.word	0x200000c0

080046bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046bc:	b480      	push	{r7}
 80046be:	b087      	sub	sp, #28
 80046c0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80046c2:	4b2c      	ldr	r3, [pc, #176]	@ (8004774 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f003 030c 	and.w	r3, r3, #12
 80046ca:	2b04      	cmp	r3, #4
 80046cc:	d102      	bne.n	80046d4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046ce:	4b2a      	ldr	r3, [pc, #168]	@ (8004778 <HAL_RCC_GetSysClockFreq+0xbc>)
 80046d0:	613b      	str	r3, [r7, #16]
 80046d2:	e047      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80046d4:	4b27      	ldr	r3, [pc, #156]	@ (8004774 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f003 030c 	and.w	r3, r3, #12
 80046dc:	2b08      	cmp	r3, #8
 80046de:	d102      	bne.n	80046e6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046e0:	4b26      	ldr	r3, [pc, #152]	@ (800477c <HAL_RCC_GetSysClockFreq+0xc0>)
 80046e2:	613b      	str	r3, [r7, #16]
 80046e4:	e03e      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80046e6:	4b23      	ldr	r3, [pc, #140]	@ (8004774 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f003 030c 	and.w	r3, r3, #12
 80046ee:	2b0c      	cmp	r3, #12
 80046f0:	d136      	bne.n	8004760 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046f2:	4b20      	ldr	r3, [pc, #128]	@ (8004774 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f003 0303 	and.w	r3, r3, #3
 80046fa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004774 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	091b      	lsrs	r3, r3, #4
 8004702:	f003 030f 	and.w	r3, r3, #15
 8004706:	3301      	adds	r3, #1
 8004708:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2b03      	cmp	r3, #3
 800470e:	d10c      	bne.n	800472a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004710:	4a1a      	ldr	r2, [pc, #104]	@ (800477c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	fbb2 f3f3 	udiv	r3, r2, r3
 8004718:	4a16      	ldr	r2, [pc, #88]	@ (8004774 <HAL_RCC_GetSysClockFreq+0xb8>)
 800471a:	68d2      	ldr	r2, [r2, #12]
 800471c:	0a12      	lsrs	r2, r2, #8
 800471e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004722:	fb02 f303 	mul.w	r3, r2, r3
 8004726:	617b      	str	r3, [r7, #20]
      break;
 8004728:	e00c      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800472a:	4a13      	ldr	r2, [pc, #76]	@ (8004778 <HAL_RCC_GetSysClockFreq+0xbc>)
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004732:	4a10      	ldr	r2, [pc, #64]	@ (8004774 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004734:	68d2      	ldr	r2, [r2, #12]
 8004736:	0a12      	lsrs	r2, r2, #8
 8004738:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800473c:	fb02 f303 	mul.w	r3, r2, r3
 8004740:	617b      	str	r3, [r7, #20]
      break;
 8004742:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004744:	4b0b      	ldr	r3, [pc, #44]	@ (8004774 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	0e5b      	lsrs	r3, r3, #25
 800474a:	f003 0303 	and.w	r3, r3, #3
 800474e:	3301      	adds	r3, #1
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	fbb2 f3f3 	udiv	r3, r2, r3
 800475c:	613b      	str	r3, [r7, #16]
 800475e:	e001      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004760:	2300      	movs	r3, #0
 8004762:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004764:	693b      	ldr	r3, [r7, #16]
}
 8004766:	4618      	mov	r0, r3
 8004768:	371c      	adds	r7, #28
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	40021000 	.word	0x40021000
 8004778:	00f42400 	.word	0x00f42400
 800477c:	016e3600 	.word	0x016e3600

08004780 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004784:	4b03      	ldr	r3, [pc, #12]	@ (8004794 <HAL_RCC_GetHCLKFreq+0x14>)
 8004786:	681b      	ldr	r3, [r3, #0]
}
 8004788:	4618      	mov	r0, r3
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	20000000 	.word	0x20000000

08004798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800479c:	f7ff fff0 	bl	8004780 <HAL_RCC_GetHCLKFreq>
 80047a0:	4602      	mov	r2, r0
 80047a2:	4b06      	ldr	r3, [pc, #24]	@ (80047bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	0a1b      	lsrs	r3, r3, #8
 80047a8:	f003 0307 	and.w	r3, r3, #7
 80047ac:	4904      	ldr	r1, [pc, #16]	@ (80047c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80047ae:	5ccb      	ldrb	r3, [r1, r3]
 80047b0:	f003 031f 	and.w	r3, r3, #31
 80047b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	40021000 	.word	0x40021000
 80047c0:	08009e00 	.word	0x08009e00

080047c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80047c8:	f7ff ffda 	bl	8004780 <HAL_RCC_GetHCLKFreq>
 80047cc:	4602      	mov	r2, r0
 80047ce:	4b06      	ldr	r3, [pc, #24]	@ (80047e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	0adb      	lsrs	r3, r3, #11
 80047d4:	f003 0307 	and.w	r3, r3, #7
 80047d8:	4904      	ldr	r1, [pc, #16]	@ (80047ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80047da:	5ccb      	ldrb	r3, [r1, r3]
 80047dc:	f003 031f 	and.w	r3, r3, #31
 80047e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	40021000 	.word	0x40021000
 80047ec:	08009e00 	.word	0x08009e00

080047f0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	220f      	movs	r2, #15
 80047fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004800:	4b12      	ldr	r3, [pc, #72]	@ (800484c <HAL_RCC_GetClockConfig+0x5c>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f003 0203 	and.w	r2, r3, #3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800480c:	4b0f      	ldr	r3, [pc, #60]	@ (800484c <HAL_RCC_GetClockConfig+0x5c>)
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004818:	4b0c      	ldr	r3, [pc, #48]	@ (800484c <HAL_RCC_GetClockConfig+0x5c>)
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004824:	4b09      	ldr	r3, [pc, #36]	@ (800484c <HAL_RCC_GetClockConfig+0x5c>)
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	08db      	lsrs	r3, r3, #3
 800482a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004832:	4b07      	ldr	r3, [pc, #28]	@ (8004850 <HAL_RCC_GetClockConfig+0x60>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 020f 	and.w	r2, r3, #15
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	601a      	str	r2, [r3, #0]
}
 800483e:	bf00      	nop
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	40021000 	.word	0x40021000
 8004850:	40022000 	.word	0x40022000

08004854 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004854:	b480      	push	{r7}
 8004856:	b087      	sub	sp, #28
 8004858:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800485a:	4b1e      	ldr	r3, [pc, #120]	@ (80048d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	f003 0303 	and.w	r3, r3, #3
 8004862:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004864:	4b1b      	ldr	r3, [pc, #108]	@ (80048d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	091b      	lsrs	r3, r3, #4
 800486a:	f003 030f 	and.w	r3, r3, #15
 800486e:	3301      	adds	r3, #1
 8004870:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	2b03      	cmp	r3, #3
 8004876:	d10c      	bne.n	8004892 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004878:	4a17      	ldr	r2, [pc, #92]	@ (80048d8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004880:	4a14      	ldr	r2, [pc, #80]	@ (80048d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004882:	68d2      	ldr	r2, [r2, #12]
 8004884:	0a12      	lsrs	r2, r2, #8
 8004886:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800488a:	fb02 f303 	mul.w	r3, r2, r3
 800488e:	617b      	str	r3, [r7, #20]
    break;
 8004890:	e00c      	b.n	80048ac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004892:	4a12      	ldr	r2, [pc, #72]	@ (80048dc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	fbb2 f3f3 	udiv	r3, r2, r3
 800489a:	4a0e      	ldr	r2, [pc, #56]	@ (80048d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800489c:	68d2      	ldr	r2, [r2, #12]
 800489e:	0a12      	lsrs	r2, r2, #8
 80048a0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80048a4:	fb02 f303 	mul.w	r3, r2, r3
 80048a8:	617b      	str	r3, [r7, #20]
    break;
 80048aa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048ac:	4b09      	ldr	r3, [pc, #36]	@ (80048d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	0e5b      	lsrs	r3, r3, #25
 80048b2:	f003 0303 	and.w	r3, r3, #3
 80048b6:	3301      	adds	r3, #1
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80048c6:	687b      	ldr	r3, [r7, #4]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	371c      	adds	r7, #28
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr
 80048d4:	40021000 	.word	0x40021000
 80048d8:	016e3600 	.word	0x016e3600
 80048dc:	00f42400 	.word	0x00f42400

080048e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80048e8:	2300      	movs	r3, #0
 80048ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048ec:	2300      	movs	r3, #0
 80048ee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 8098 	beq.w	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048fe:	2300      	movs	r3, #0
 8004900:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004902:	4b43      	ldr	r3, [pc, #268]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10d      	bne.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800490e:	4b40      	ldr	r3, [pc, #256]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004912:	4a3f      	ldr	r2, [pc, #252]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004914:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004918:	6593      	str	r3, [r2, #88]	@ 0x58
 800491a:	4b3d      	ldr	r3, [pc, #244]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800491c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800491e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004922:	60bb      	str	r3, [r7, #8]
 8004924:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004926:	2301      	movs	r3, #1
 8004928:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800492a:	4b3a      	ldr	r3, [pc, #232]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a39      	ldr	r2, [pc, #228]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004930:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004934:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004936:	f7fd fa95 	bl	8001e64 <HAL_GetTick>
 800493a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800493c:	e009      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800493e:	f7fd fa91 	bl	8001e64 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d902      	bls.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	74fb      	strb	r3, [r7, #19]
        break;
 8004950:	e005      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004952:	4b30      	ldr	r3, [pc, #192]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0ef      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800495e:	7cfb      	ldrb	r3, [r7, #19]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d159      	bne.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004964:	4b2a      	ldr	r3, [pc, #168]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800496a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800496e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d01e      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	429a      	cmp	r2, r3
 800497e:	d019      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004980:	4b23      	ldr	r3, [pc, #140]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004986:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800498a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800498c:	4b20      	ldr	r3, [pc, #128]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800498e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004992:	4a1f      	ldr	r2, [pc, #124]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004994:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004998:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800499c:	4b1c      	ldr	r3, [pc, #112]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800499e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049a2:	4a1b      	ldr	r2, [pc, #108]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049ac:	4a18      	ldr	r2, [pc, #96]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d016      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049be:	f7fd fa51 	bl	8001e64 <HAL_GetTick>
 80049c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049c4:	e00b      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049c6:	f7fd fa4d 	bl	8001e64 <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d902      	bls.n	80049de <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	74fb      	strb	r3, [r7, #19]
            break;
 80049dc:	e006      	b.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049de:	4b0c      	ldr	r3, [pc, #48]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d0ec      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80049ec:	7cfb      	ldrb	r3, [r7, #19]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10b      	bne.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049f2:	4b07      	ldr	r3, [pc, #28]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a00:	4903      	ldr	r1, [pc, #12]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004a08:	e008      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a0a:	7cfb      	ldrb	r3, [r7, #19]
 8004a0c:	74bb      	strb	r3, [r7, #18]
 8004a0e:	e005      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004a10:	40021000 	.word	0x40021000
 8004a14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a18:	7cfb      	ldrb	r3, [r7, #19]
 8004a1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a1c:	7c7b      	ldrb	r3, [r7, #17]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d105      	bne.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a22:	4ba7      	ldr	r3, [pc, #668]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a26:	4aa6      	ldr	r2, [pc, #664]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a2c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00a      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a3a:	4ba1      	ldr	r3, [pc, #644]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a40:	f023 0203 	bic.w	r2, r3, #3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	499d      	ldr	r1, [pc, #628]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00a      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a5c:	4b98      	ldr	r3, [pc, #608]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a62:	f023 020c 	bic.w	r2, r3, #12
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	4995      	ldr	r1, [pc, #596]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0304 	and.w	r3, r3, #4
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00a      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a7e:	4b90      	ldr	r3, [pc, #576]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a84:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	498c      	ldr	r1, [pc, #560]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0308 	and.w	r3, r3, #8
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00a      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004aa0:	4b87      	ldr	r3, [pc, #540]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aa6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	4984      	ldr	r1, [pc, #528]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0310 	and.w	r3, r3, #16
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00a      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ac2:	4b7f      	ldr	r3, [pc, #508]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ac8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	497b      	ldr	r1, [pc, #492]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0320 	and.w	r3, r3, #32
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00a      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ae4:	4b76      	ldr	r3, [pc, #472]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	4973      	ldr	r1, [pc, #460]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00a      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b06:	4b6e      	ldr	r3, [pc, #440]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b0c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	69db      	ldr	r3, [r3, #28]
 8004b14:	496a      	ldr	r1, [pc, #424]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00a      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b28:	4b65      	ldr	r3, [pc, #404]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b2e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	4962      	ldr	r1, [pc, #392]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00a      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b4a:	4b5d      	ldr	r3, [pc, #372]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b50:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b58:	4959      	ldr	r1, [pc, #356]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00a      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b6c:	4b54      	ldr	r3, [pc, #336]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b72:	f023 0203 	bic.w	r2, r3, #3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b7a:	4951      	ldr	r1, [pc, #324]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00a      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b8e:	4b4c      	ldr	r3, [pc, #304]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b94:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b9c:	4948      	ldr	r1, [pc, #288]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d015      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004bb0:	4b43      	ldr	r3, [pc, #268]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bb6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bbe:	4940      	ldr	r1, [pc, #256]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bce:	d105      	bne.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bd0:	4b3b      	ldr	r3, [pc, #236]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	4a3a      	ldr	r2, [pc, #232]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bda:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d015      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004be8:	4b35      	ldr	r3, [pc, #212]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bf6:	4932      	ldr	r1, [pc, #200]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c06:	d105      	bne.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c08:	4b2d      	ldr	r3, [pc, #180]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	4a2c      	ldr	r2, [pc, #176]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c12:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d015      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c20:	4b27      	ldr	r3, [pc, #156]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c26:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c2e:	4924      	ldr	r1, [pc, #144]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c3e:	d105      	bne.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c40:	4b1f      	ldr	r3, [pc, #124]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	4a1e      	ldr	r2, [pc, #120]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c4a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d015      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c58:	4b19      	ldr	r3, [pc, #100]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c5e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c66:	4916      	ldr	r1, [pc, #88]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c76:	d105      	bne.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c78:	4b11      	ldr	r3, [pc, #68]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	4a10      	ldr	r2, [pc, #64]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c82:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d019      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c90:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c96:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9e:	4908      	ldr	r1, [pc, #32]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004caa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004cae:	d109      	bne.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cb0:	4b03      	ldr	r3, [pc, #12]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	4a02      	ldr	r2, [pc, #8]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004cba:	60d3      	str	r3, [r2, #12]
 8004cbc:	e002      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004cbe:	bf00      	nop
 8004cc0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d015      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004cd0:	4b29      	ldr	r3, [pc, #164]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cd6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cde:	4926      	ldr	r1, [pc, #152]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004cee:	d105      	bne.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004cf0:	4b21      	ldr	r3, [pc, #132]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	4a20      	ldr	r2, [pc, #128]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cf6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cfa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d015      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004d08:	4b1b      	ldr	r3, [pc, #108]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d0e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d16:	4918      	ldr	r1, [pc, #96]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d26:	d105      	bne.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004d28:	4b13      	ldr	r3, [pc, #76]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	4a12      	ldr	r2, [pc, #72]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d32:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d015      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004d40:	4b0d      	ldr	r3, [pc, #52]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d42:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d46:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d4e:	490a      	ldr	r1, [pc, #40]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d5e:	d105      	bne.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d60:	4b05      	ldr	r3, [pc, #20]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	4a04      	ldr	r2, [pc, #16]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d6a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004d6c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3718      	adds	r7, #24
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	40021000 	.word	0x40021000

08004d7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e049      	b.n	8004e22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d106      	bne.n	8004da8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f841 	bl	8004e2a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2202      	movs	r2, #2
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	3304      	adds	r3, #4
 8004db8:	4619      	mov	r1, r3
 8004dba:	4610      	mov	r0, r2
 8004dbc:	f000 fcde 	bl	800577c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3708      	adds	r7, #8
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	b083      	sub	sp, #12
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004e32:	bf00      	nop
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
	...

08004e40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d001      	beq.n	8004e58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e054      	b.n	8004f02 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f042 0201 	orr.w	r2, r2, #1
 8004e6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a26      	ldr	r2, [pc, #152]	@ (8004f10 <HAL_TIM_Base_Start_IT+0xd0>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d022      	beq.n	8004ec0 <HAL_TIM_Base_Start_IT+0x80>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e82:	d01d      	beq.n	8004ec0 <HAL_TIM_Base_Start_IT+0x80>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a22      	ldr	r2, [pc, #136]	@ (8004f14 <HAL_TIM_Base_Start_IT+0xd4>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d018      	beq.n	8004ec0 <HAL_TIM_Base_Start_IT+0x80>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a21      	ldr	r2, [pc, #132]	@ (8004f18 <HAL_TIM_Base_Start_IT+0xd8>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d013      	beq.n	8004ec0 <HAL_TIM_Base_Start_IT+0x80>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a1f      	ldr	r2, [pc, #124]	@ (8004f1c <HAL_TIM_Base_Start_IT+0xdc>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d00e      	beq.n	8004ec0 <HAL_TIM_Base_Start_IT+0x80>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a1e      	ldr	r2, [pc, #120]	@ (8004f20 <HAL_TIM_Base_Start_IT+0xe0>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d009      	beq.n	8004ec0 <HAL_TIM_Base_Start_IT+0x80>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a1c      	ldr	r2, [pc, #112]	@ (8004f24 <HAL_TIM_Base_Start_IT+0xe4>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d004      	beq.n	8004ec0 <HAL_TIM_Base_Start_IT+0x80>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a1b      	ldr	r2, [pc, #108]	@ (8004f28 <HAL_TIM_Base_Start_IT+0xe8>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d115      	bne.n	8004eec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689a      	ldr	r2, [r3, #8]
 8004ec6:	4b19      	ldr	r3, [pc, #100]	@ (8004f2c <HAL_TIM_Base_Start_IT+0xec>)
 8004ec8:	4013      	ands	r3, r2
 8004eca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2b06      	cmp	r3, #6
 8004ed0:	d015      	beq.n	8004efe <HAL_TIM_Base_Start_IT+0xbe>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ed8:	d011      	beq.n	8004efe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f042 0201 	orr.w	r2, r2, #1
 8004ee8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eea:	e008      	b.n	8004efe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f042 0201 	orr.w	r2, r2, #1
 8004efa:	601a      	str	r2, [r3, #0]
 8004efc:	e000      	b.n	8004f00 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004efe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3714      	adds	r7, #20
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	40012c00 	.word	0x40012c00
 8004f14:	40000400 	.word	0x40000400
 8004f18:	40000800 	.word	0x40000800
 8004f1c:	40000c00 	.word	0x40000c00
 8004f20:	40013400 	.word	0x40013400
 8004f24:	40014000 	.word	0x40014000
 8004f28:	40015000 	.word	0x40015000
 8004f2c:	00010007 	.word	0x00010007

08004f30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e049      	b.n	8004fd6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d106      	bne.n	8004f5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7fc faaa 	bl	80014b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2202      	movs	r2, #2
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	3304      	adds	r3, #4
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	4610      	mov	r0, r2
 8004f70:	f000 fc04 	bl	800577c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
	...

08004fe0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d109      	bne.n	8005004 <HAL_TIM_PWM_Start+0x24>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	bf14      	ite	ne
 8004ffc:	2301      	movne	r3, #1
 8004ffe:	2300      	moveq	r3, #0
 8005000:	b2db      	uxtb	r3, r3
 8005002:	e03c      	b.n	800507e <HAL_TIM_PWM_Start+0x9e>
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	2b04      	cmp	r3, #4
 8005008:	d109      	bne.n	800501e <HAL_TIM_PWM_Start+0x3e>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b01      	cmp	r3, #1
 8005014:	bf14      	ite	ne
 8005016:	2301      	movne	r3, #1
 8005018:	2300      	moveq	r3, #0
 800501a:	b2db      	uxtb	r3, r3
 800501c:	e02f      	b.n	800507e <HAL_TIM_PWM_Start+0x9e>
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	2b08      	cmp	r3, #8
 8005022:	d109      	bne.n	8005038 <HAL_TIM_PWM_Start+0x58>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2b01      	cmp	r3, #1
 800502e:	bf14      	ite	ne
 8005030:	2301      	movne	r3, #1
 8005032:	2300      	moveq	r3, #0
 8005034:	b2db      	uxtb	r3, r3
 8005036:	e022      	b.n	800507e <HAL_TIM_PWM_Start+0x9e>
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	2b0c      	cmp	r3, #12
 800503c:	d109      	bne.n	8005052 <HAL_TIM_PWM_Start+0x72>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b01      	cmp	r3, #1
 8005048:	bf14      	ite	ne
 800504a:	2301      	movne	r3, #1
 800504c:	2300      	moveq	r3, #0
 800504e:	b2db      	uxtb	r3, r3
 8005050:	e015      	b.n	800507e <HAL_TIM_PWM_Start+0x9e>
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	2b10      	cmp	r3, #16
 8005056:	d109      	bne.n	800506c <HAL_TIM_PWM_Start+0x8c>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b01      	cmp	r3, #1
 8005062:	bf14      	ite	ne
 8005064:	2301      	movne	r3, #1
 8005066:	2300      	moveq	r3, #0
 8005068:	b2db      	uxtb	r3, r3
 800506a:	e008      	b.n	800507e <HAL_TIM_PWM_Start+0x9e>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005072:	b2db      	uxtb	r3, r3
 8005074:	2b01      	cmp	r3, #1
 8005076:	bf14      	ite	ne
 8005078:	2301      	movne	r3, #1
 800507a:	2300      	moveq	r3, #0
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d001      	beq.n	8005086 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e0a6      	b.n	80051d4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d104      	bne.n	8005096 <HAL_TIM_PWM_Start+0xb6>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2202      	movs	r2, #2
 8005090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005094:	e023      	b.n	80050de <HAL_TIM_PWM_Start+0xfe>
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	2b04      	cmp	r3, #4
 800509a:	d104      	bne.n	80050a6 <HAL_TIM_PWM_Start+0xc6>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2202      	movs	r2, #2
 80050a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050a4:	e01b      	b.n	80050de <HAL_TIM_PWM_Start+0xfe>
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b08      	cmp	r3, #8
 80050aa:	d104      	bne.n	80050b6 <HAL_TIM_PWM_Start+0xd6>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2202      	movs	r2, #2
 80050b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050b4:	e013      	b.n	80050de <HAL_TIM_PWM_Start+0xfe>
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	2b0c      	cmp	r3, #12
 80050ba:	d104      	bne.n	80050c6 <HAL_TIM_PWM_Start+0xe6>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2202      	movs	r2, #2
 80050c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80050c4:	e00b      	b.n	80050de <HAL_TIM_PWM_Start+0xfe>
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	2b10      	cmp	r3, #16
 80050ca:	d104      	bne.n	80050d6 <HAL_TIM_PWM_Start+0xf6>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2202      	movs	r2, #2
 80050d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050d4:	e003      	b.n	80050de <HAL_TIM_PWM_Start+0xfe>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2202      	movs	r2, #2
 80050da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2201      	movs	r2, #1
 80050e4:	6839      	ldr	r1, [r7, #0]
 80050e6:	4618      	mov	r0, r3
 80050e8:	f000 ff8e 	bl	8006008 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a3a      	ldr	r2, [pc, #232]	@ (80051dc <HAL_TIM_PWM_Start+0x1fc>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d018      	beq.n	8005128 <HAL_TIM_PWM_Start+0x148>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a39      	ldr	r2, [pc, #228]	@ (80051e0 <HAL_TIM_PWM_Start+0x200>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d013      	beq.n	8005128 <HAL_TIM_PWM_Start+0x148>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a37      	ldr	r2, [pc, #220]	@ (80051e4 <HAL_TIM_PWM_Start+0x204>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d00e      	beq.n	8005128 <HAL_TIM_PWM_Start+0x148>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a36      	ldr	r2, [pc, #216]	@ (80051e8 <HAL_TIM_PWM_Start+0x208>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d009      	beq.n	8005128 <HAL_TIM_PWM_Start+0x148>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a34      	ldr	r2, [pc, #208]	@ (80051ec <HAL_TIM_PWM_Start+0x20c>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d004      	beq.n	8005128 <HAL_TIM_PWM_Start+0x148>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a33      	ldr	r2, [pc, #204]	@ (80051f0 <HAL_TIM_PWM_Start+0x210>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d101      	bne.n	800512c <HAL_TIM_PWM_Start+0x14c>
 8005128:	2301      	movs	r3, #1
 800512a:	e000      	b.n	800512e <HAL_TIM_PWM_Start+0x14e>
 800512c:	2300      	movs	r3, #0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d007      	beq.n	8005142 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005140:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a25      	ldr	r2, [pc, #148]	@ (80051dc <HAL_TIM_PWM_Start+0x1fc>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d022      	beq.n	8005192 <HAL_TIM_PWM_Start+0x1b2>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005154:	d01d      	beq.n	8005192 <HAL_TIM_PWM_Start+0x1b2>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a26      	ldr	r2, [pc, #152]	@ (80051f4 <HAL_TIM_PWM_Start+0x214>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d018      	beq.n	8005192 <HAL_TIM_PWM_Start+0x1b2>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a24      	ldr	r2, [pc, #144]	@ (80051f8 <HAL_TIM_PWM_Start+0x218>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d013      	beq.n	8005192 <HAL_TIM_PWM_Start+0x1b2>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a23      	ldr	r2, [pc, #140]	@ (80051fc <HAL_TIM_PWM_Start+0x21c>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d00e      	beq.n	8005192 <HAL_TIM_PWM_Start+0x1b2>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a19      	ldr	r2, [pc, #100]	@ (80051e0 <HAL_TIM_PWM_Start+0x200>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d009      	beq.n	8005192 <HAL_TIM_PWM_Start+0x1b2>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a18      	ldr	r2, [pc, #96]	@ (80051e4 <HAL_TIM_PWM_Start+0x204>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d004      	beq.n	8005192 <HAL_TIM_PWM_Start+0x1b2>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a18      	ldr	r2, [pc, #96]	@ (80051f0 <HAL_TIM_PWM_Start+0x210>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d115      	bne.n	80051be <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	689a      	ldr	r2, [r3, #8]
 8005198:	4b19      	ldr	r3, [pc, #100]	@ (8005200 <HAL_TIM_PWM_Start+0x220>)
 800519a:	4013      	ands	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2b06      	cmp	r3, #6
 80051a2:	d015      	beq.n	80051d0 <HAL_TIM_PWM_Start+0x1f0>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051aa:	d011      	beq.n	80051d0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 0201 	orr.w	r2, r2, #1
 80051ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051bc:	e008      	b.n	80051d0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f042 0201 	orr.w	r2, r2, #1
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	e000      	b.n	80051d2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	40012c00 	.word	0x40012c00
 80051e0:	40013400 	.word	0x40013400
 80051e4:	40014000 	.word	0x40014000
 80051e8:	40014400 	.word	0x40014400
 80051ec:	40014800 	.word	0x40014800
 80051f0:	40015000 	.word	0x40015000
 80051f4:	40000400 	.word	0x40000400
 80051f8:	40000800 	.word	0x40000800
 80051fc:	40000c00 	.word	0x40000c00
 8005200:	00010007 	.word	0x00010007

08005204 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b02      	cmp	r3, #2
 8005218:	d122      	bne.n	8005260 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	2b02      	cmp	r3, #2
 8005226:	d11b      	bne.n	8005260 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f06f 0202 	mvn.w	r2, #2
 8005230:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	f003 0303 	and.w	r3, r3, #3
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 fa7a 	bl	8005740 <HAL_TIM_IC_CaptureCallback>
 800524c:	e005      	b.n	800525a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 fa6c 	bl	800572c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 fa7d 	bl	8005754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	f003 0304 	and.w	r3, r3, #4
 800526a:	2b04      	cmp	r3, #4
 800526c:	d122      	bne.n	80052b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f003 0304 	and.w	r3, r3, #4
 8005278:	2b04      	cmp	r3, #4
 800527a:	d11b      	bne.n	80052b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f06f 0204 	mvn.w	r2, #4
 8005284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2202      	movs	r2, #2
 800528a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005296:	2b00      	cmp	r3, #0
 8005298:	d003      	beq.n	80052a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 fa50 	bl	8005740 <HAL_TIM_IC_CaptureCallback>
 80052a0:	e005      	b.n	80052ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 fa42 	bl	800572c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 fa53 	bl	8005754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	f003 0308 	and.w	r3, r3, #8
 80052be:	2b08      	cmp	r3, #8
 80052c0:	d122      	bne.n	8005308 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	f003 0308 	and.w	r3, r3, #8
 80052cc:	2b08      	cmp	r3, #8
 80052ce:	d11b      	bne.n	8005308 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f06f 0208 	mvn.w	r2, #8
 80052d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2204      	movs	r2, #4
 80052de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	69db      	ldr	r3, [r3, #28]
 80052e6:	f003 0303 	and.w	r3, r3, #3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d003      	beq.n	80052f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 fa26 	bl	8005740 <HAL_TIM_IC_CaptureCallback>
 80052f4:	e005      	b.n	8005302 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 fa18 	bl	800572c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 fa29 	bl	8005754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	f003 0310 	and.w	r3, r3, #16
 8005312:	2b10      	cmp	r3, #16
 8005314:	d122      	bne.n	800535c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	f003 0310 	and.w	r3, r3, #16
 8005320:	2b10      	cmp	r3, #16
 8005322:	d11b      	bne.n	800535c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f06f 0210 	mvn.w	r2, #16
 800532c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2208      	movs	r2, #8
 8005332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	69db      	ldr	r3, [r3, #28]
 800533a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800533e:	2b00      	cmp	r3, #0
 8005340:	d003      	beq.n	800534a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 f9fc 	bl	8005740 <HAL_TIM_IC_CaptureCallback>
 8005348:	e005      	b.n	8005356 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f9ee 	bl	800572c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 f9ff 	bl	8005754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b01      	cmp	r3, #1
 8005368:	d10e      	bne.n	8005388 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	f003 0301 	and.w	r3, r3, #1
 8005374:	2b01      	cmp	r3, #1
 8005376:	d107      	bne.n	8005388 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f06f 0201 	mvn.w	r2, #1
 8005380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f7fb fdc6 	bl	8000f14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005392:	2b80      	cmp	r3, #128	@ 0x80
 8005394:	d10e      	bne.n	80053b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053a0:	2b80      	cmp	r3, #128	@ 0x80
 80053a2:	d107      	bne.n	80053b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80053ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f001 f970 	bl	8006694 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053c2:	d10e      	bne.n	80053e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053ce:	2b80      	cmp	r3, #128	@ 0x80
 80053d0:	d107      	bne.n	80053e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80053da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f001 f963 	bl	80066a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053ec:	2b40      	cmp	r3, #64	@ 0x40
 80053ee:	d10e      	bne.n	800540e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053fa:	2b40      	cmp	r3, #64	@ 0x40
 80053fc:	d107      	bne.n	800540e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 f9ad 	bl	8005768 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	f003 0320 	and.w	r3, r3, #32
 8005418:	2b20      	cmp	r3, #32
 800541a:	d10e      	bne.n	800543a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	f003 0320 	and.w	r3, r3, #32
 8005426:	2b20      	cmp	r3, #32
 8005428:	d107      	bne.n	800543a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f06f 0220 	mvn.w	r2, #32
 8005432:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f001 f923 	bl	8006680 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005444:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005448:	d10f      	bne.n	800546a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005454:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005458:	d107      	bne.n	800546a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f001 f929 	bl	80066bc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005474:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005478:	d10f      	bne.n	800549a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005484:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005488:	d107      	bne.n	800549a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f001 f91b 	bl	80066d0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80054a8:	d10f      	bne.n	80054ca <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80054b8:	d107      	bne.n	80054ca <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80054c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f001 f90d 	bl	80066e4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80054d8:	d10f      	bne.n	80054fa <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80054e8:	d107      	bne.n	80054fa <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80054f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f001 f8ff 	bl	80066f8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054fa:	bf00      	nop
 80054fc:	3708      	adds	r7, #8
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
	...

08005504 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005510:	2300      	movs	r3, #0
 8005512:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800551a:	2b01      	cmp	r3, #1
 800551c:	d101      	bne.n	8005522 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800551e:	2302      	movs	r3, #2
 8005520:	e0ff      	b.n	8005722 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b14      	cmp	r3, #20
 800552e:	f200 80f0 	bhi.w	8005712 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005532:	a201      	add	r2, pc, #4	@ (adr r2, 8005538 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005538:	0800558d 	.word	0x0800558d
 800553c:	08005713 	.word	0x08005713
 8005540:	08005713 	.word	0x08005713
 8005544:	08005713 	.word	0x08005713
 8005548:	080055cd 	.word	0x080055cd
 800554c:	08005713 	.word	0x08005713
 8005550:	08005713 	.word	0x08005713
 8005554:	08005713 	.word	0x08005713
 8005558:	0800560f 	.word	0x0800560f
 800555c:	08005713 	.word	0x08005713
 8005560:	08005713 	.word	0x08005713
 8005564:	08005713 	.word	0x08005713
 8005568:	0800564f 	.word	0x0800564f
 800556c:	08005713 	.word	0x08005713
 8005570:	08005713 	.word	0x08005713
 8005574:	08005713 	.word	0x08005713
 8005578:	08005691 	.word	0x08005691
 800557c:	08005713 	.word	0x08005713
 8005580:	08005713 	.word	0x08005713
 8005584:	08005713 	.word	0x08005713
 8005588:	080056d1 	.word	0x080056d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68b9      	ldr	r1, [r7, #8]
 8005592:	4618      	mov	r0, r3
 8005594:	f000 f99a 	bl	80058cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	699a      	ldr	r2, [r3, #24]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f042 0208 	orr.w	r2, r2, #8
 80055a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	699a      	ldr	r2, [r3, #24]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f022 0204 	bic.w	r2, r2, #4
 80055b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6999      	ldr	r1, [r3, #24]
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	691a      	ldr	r2, [r3, #16]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	430a      	orrs	r2, r1
 80055c8:	619a      	str	r2, [r3, #24]
      break;
 80055ca:	e0a5      	b.n	8005718 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68b9      	ldr	r1, [r7, #8]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f000 fa14 	bl	8005a00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	699a      	ldr	r2, [r3, #24]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	699a      	ldr	r2, [r3, #24]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6999      	ldr	r1, [r3, #24]
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	021a      	lsls	r2, r3, #8
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	430a      	orrs	r2, r1
 800560a:	619a      	str	r2, [r3, #24]
      break;
 800560c:	e084      	b.n	8005718 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68b9      	ldr	r1, [r7, #8]
 8005614:	4618      	mov	r0, r3
 8005616:	f000 fa87 	bl	8005b28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	69da      	ldr	r2, [r3, #28]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f042 0208 	orr.w	r2, r2, #8
 8005628:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	69da      	ldr	r2, [r3, #28]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f022 0204 	bic.w	r2, r2, #4
 8005638:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	69d9      	ldr	r1, [r3, #28]
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	691a      	ldr	r2, [r3, #16]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	430a      	orrs	r2, r1
 800564a:	61da      	str	r2, [r3, #28]
      break;
 800564c:	e064      	b.n	8005718 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68b9      	ldr	r1, [r7, #8]
 8005654:	4618      	mov	r0, r3
 8005656:	f000 faf9 	bl	8005c4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	69da      	ldr	r2, [r3, #28]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005668:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	69da      	ldr	r2, [r3, #28]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005678:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	69d9      	ldr	r1, [r3, #28]
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	021a      	lsls	r2, r3, #8
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	430a      	orrs	r2, r1
 800568c:	61da      	str	r2, [r3, #28]
      break;
 800568e:	e043      	b.n	8005718 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68b9      	ldr	r1, [r7, #8]
 8005696:	4618      	mov	r0, r3
 8005698:	f000 fb6c 	bl	8005d74 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f042 0208 	orr.w	r2, r2, #8
 80056aa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f022 0204 	bic.w	r2, r2, #4
 80056ba:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	691a      	ldr	r2, [r3, #16]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	430a      	orrs	r2, r1
 80056cc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80056ce:	e023      	b.n	8005718 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68b9      	ldr	r1, [r7, #8]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 fbb6 	bl	8005e48 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056ea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056fa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	021a      	lsls	r2, r3, #8
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	430a      	orrs	r2, r1
 800570e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005710:	e002      	b.n	8005718 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	75fb      	strb	r3, [r7, #23]
      break;
 8005716:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005720:	7dfb      	ldrb	r3, [r7, #23]
}
 8005722:	4618      	mov	r0, r3
 8005724:	3718      	adds	r7, #24
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop

0800572c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800575c:	bf00      	nop
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a46      	ldr	r2, [pc, #280]	@ (80058a8 <TIM_Base_SetConfig+0x12c>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d017      	beq.n	80057c4 <TIM_Base_SetConfig+0x48>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800579a:	d013      	beq.n	80057c4 <TIM_Base_SetConfig+0x48>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a43      	ldr	r2, [pc, #268]	@ (80058ac <TIM_Base_SetConfig+0x130>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d00f      	beq.n	80057c4 <TIM_Base_SetConfig+0x48>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a42      	ldr	r2, [pc, #264]	@ (80058b0 <TIM_Base_SetConfig+0x134>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d00b      	beq.n	80057c4 <TIM_Base_SetConfig+0x48>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a41      	ldr	r2, [pc, #260]	@ (80058b4 <TIM_Base_SetConfig+0x138>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d007      	beq.n	80057c4 <TIM_Base_SetConfig+0x48>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a40      	ldr	r2, [pc, #256]	@ (80058b8 <TIM_Base_SetConfig+0x13c>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d003      	beq.n	80057c4 <TIM_Base_SetConfig+0x48>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a3f      	ldr	r2, [pc, #252]	@ (80058bc <TIM_Base_SetConfig+0x140>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d108      	bne.n	80057d6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a33      	ldr	r2, [pc, #204]	@ (80058a8 <TIM_Base_SetConfig+0x12c>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d023      	beq.n	8005826 <TIM_Base_SetConfig+0xaa>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057e4:	d01f      	beq.n	8005826 <TIM_Base_SetConfig+0xaa>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a30      	ldr	r2, [pc, #192]	@ (80058ac <TIM_Base_SetConfig+0x130>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d01b      	beq.n	8005826 <TIM_Base_SetConfig+0xaa>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a2f      	ldr	r2, [pc, #188]	@ (80058b0 <TIM_Base_SetConfig+0x134>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d017      	beq.n	8005826 <TIM_Base_SetConfig+0xaa>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a2e      	ldr	r2, [pc, #184]	@ (80058b4 <TIM_Base_SetConfig+0x138>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d013      	beq.n	8005826 <TIM_Base_SetConfig+0xaa>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a2d      	ldr	r2, [pc, #180]	@ (80058b8 <TIM_Base_SetConfig+0x13c>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d00f      	beq.n	8005826 <TIM_Base_SetConfig+0xaa>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a2d      	ldr	r2, [pc, #180]	@ (80058c0 <TIM_Base_SetConfig+0x144>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d00b      	beq.n	8005826 <TIM_Base_SetConfig+0xaa>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a2c      	ldr	r2, [pc, #176]	@ (80058c4 <TIM_Base_SetConfig+0x148>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d007      	beq.n	8005826 <TIM_Base_SetConfig+0xaa>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a2b      	ldr	r2, [pc, #172]	@ (80058c8 <TIM_Base_SetConfig+0x14c>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d003      	beq.n	8005826 <TIM_Base_SetConfig+0xaa>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a26      	ldr	r2, [pc, #152]	@ (80058bc <TIM_Base_SetConfig+0x140>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d108      	bne.n	8005838 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800582c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	4313      	orrs	r3, r2
 8005836:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	4313      	orrs	r3, r2
 8005844:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	689a      	ldr	r2, [r3, #8]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a12      	ldr	r2, [pc, #72]	@ (80058a8 <TIM_Base_SetConfig+0x12c>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d013      	beq.n	800588c <TIM_Base_SetConfig+0x110>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a14      	ldr	r2, [pc, #80]	@ (80058b8 <TIM_Base_SetConfig+0x13c>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d00f      	beq.n	800588c <TIM_Base_SetConfig+0x110>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a14      	ldr	r2, [pc, #80]	@ (80058c0 <TIM_Base_SetConfig+0x144>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d00b      	beq.n	800588c <TIM_Base_SetConfig+0x110>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a13      	ldr	r2, [pc, #76]	@ (80058c4 <TIM_Base_SetConfig+0x148>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d007      	beq.n	800588c <TIM_Base_SetConfig+0x110>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a12      	ldr	r2, [pc, #72]	@ (80058c8 <TIM_Base_SetConfig+0x14c>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d003      	beq.n	800588c <TIM_Base_SetConfig+0x110>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a0d      	ldr	r2, [pc, #52]	@ (80058bc <TIM_Base_SetConfig+0x140>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d103      	bne.n	8005894 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	691a      	ldr	r2, [r3, #16]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	615a      	str	r2, [r3, #20]
}
 800589a:	bf00      	nop
 800589c:	3714      	adds	r7, #20
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	40012c00 	.word	0x40012c00
 80058ac:	40000400 	.word	0x40000400
 80058b0:	40000800 	.word	0x40000800
 80058b4:	40000c00 	.word	0x40000c00
 80058b8:	40013400 	.word	0x40013400
 80058bc:	40015000 	.word	0x40015000
 80058c0:	40014000 	.word	0x40014000
 80058c4:	40014400 	.word	0x40014400
 80058c8:	40014800 	.word	0x40014800

080058cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b087      	sub	sp, #28
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a1b      	ldr	r3, [r3, #32]
 80058da:	f023 0201 	bic.w	r2, r3, #1
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	699b      	ldr	r3, [r3, #24]
 80058f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f023 0303 	bic.w	r3, r3, #3
 8005906:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	4313      	orrs	r3, r2
 8005910:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	f023 0302 	bic.w	r3, r3, #2
 8005918:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	4313      	orrs	r3, r2
 8005922:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a30      	ldr	r2, [pc, #192]	@ (80059e8 <TIM_OC1_SetConfig+0x11c>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d013      	beq.n	8005954 <TIM_OC1_SetConfig+0x88>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a2f      	ldr	r2, [pc, #188]	@ (80059ec <TIM_OC1_SetConfig+0x120>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d00f      	beq.n	8005954 <TIM_OC1_SetConfig+0x88>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a2e      	ldr	r2, [pc, #184]	@ (80059f0 <TIM_OC1_SetConfig+0x124>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d00b      	beq.n	8005954 <TIM_OC1_SetConfig+0x88>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a2d      	ldr	r2, [pc, #180]	@ (80059f4 <TIM_OC1_SetConfig+0x128>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d007      	beq.n	8005954 <TIM_OC1_SetConfig+0x88>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a2c      	ldr	r2, [pc, #176]	@ (80059f8 <TIM_OC1_SetConfig+0x12c>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d003      	beq.n	8005954 <TIM_OC1_SetConfig+0x88>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a2b      	ldr	r2, [pc, #172]	@ (80059fc <TIM_OC1_SetConfig+0x130>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d10c      	bne.n	800596e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	f023 0308 	bic.w	r3, r3, #8
 800595a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	4313      	orrs	r3, r2
 8005964:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	f023 0304 	bic.w	r3, r3, #4
 800596c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a1d      	ldr	r2, [pc, #116]	@ (80059e8 <TIM_OC1_SetConfig+0x11c>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d013      	beq.n	800599e <TIM_OC1_SetConfig+0xd2>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a1c      	ldr	r2, [pc, #112]	@ (80059ec <TIM_OC1_SetConfig+0x120>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d00f      	beq.n	800599e <TIM_OC1_SetConfig+0xd2>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a1b      	ldr	r2, [pc, #108]	@ (80059f0 <TIM_OC1_SetConfig+0x124>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d00b      	beq.n	800599e <TIM_OC1_SetConfig+0xd2>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a1a      	ldr	r2, [pc, #104]	@ (80059f4 <TIM_OC1_SetConfig+0x128>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d007      	beq.n	800599e <TIM_OC1_SetConfig+0xd2>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a19      	ldr	r2, [pc, #100]	@ (80059f8 <TIM_OC1_SetConfig+0x12c>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d003      	beq.n	800599e <TIM_OC1_SetConfig+0xd2>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a18      	ldr	r2, [pc, #96]	@ (80059fc <TIM_OC1_SetConfig+0x130>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d111      	bne.n	80059c2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80059ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	4313      	orrs	r3, r2
 80059c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	693a      	ldr	r2, [r7, #16]
 80059c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	685a      	ldr	r2, [r3, #4]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	621a      	str	r2, [r3, #32]
}
 80059dc:	bf00      	nop
 80059de:	371c      	adds	r7, #28
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr
 80059e8:	40012c00 	.word	0x40012c00
 80059ec:	40013400 	.word	0x40013400
 80059f0:	40014000 	.word	0x40014000
 80059f4:	40014400 	.word	0x40014400
 80059f8:	40014800 	.word	0x40014800
 80059fc:	40015000 	.word	0x40015000

08005a00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b087      	sub	sp, #28
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	f023 0210 	bic.w	r2, r3, #16
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	021b      	lsls	r3, r3, #8
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	f023 0320 	bic.w	r3, r3, #32
 8005a4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	011b      	lsls	r3, r3, #4
 8005a56:	697a      	ldr	r2, [r7, #20]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a2c      	ldr	r2, [pc, #176]	@ (8005b10 <TIM_OC2_SetConfig+0x110>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d007      	beq.n	8005a74 <TIM_OC2_SetConfig+0x74>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a2b      	ldr	r2, [pc, #172]	@ (8005b14 <TIM_OC2_SetConfig+0x114>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d003      	beq.n	8005a74 <TIM_OC2_SetConfig+0x74>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a2a      	ldr	r2, [pc, #168]	@ (8005b18 <TIM_OC2_SetConfig+0x118>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d10d      	bne.n	8005a90 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	011b      	lsls	r3, r3, #4
 8005a82:	697a      	ldr	r2, [r7, #20]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a1f      	ldr	r2, [pc, #124]	@ (8005b10 <TIM_OC2_SetConfig+0x110>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d013      	beq.n	8005ac0 <TIM_OC2_SetConfig+0xc0>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a1e      	ldr	r2, [pc, #120]	@ (8005b14 <TIM_OC2_SetConfig+0x114>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d00f      	beq.n	8005ac0 <TIM_OC2_SetConfig+0xc0>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a1e      	ldr	r2, [pc, #120]	@ (8005b1c <TIM_OC2_SetConfig+0x11c>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d00b      	beq.n	8005ac0 <TIM_OC2_SetConfig+0xc0>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a1d      	ldr	r2, [pc, #116]	@ (8005b20 <TIM_OC2_SetConfig+0x120>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d007      	beq.n	8005ac0 <TIM_OC2_SetConfig+0xc0>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a1c      	ldr	r2, [pc, #112]	@ (8005b24 <TIM_OC2_SetConfig+0x124>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d003      	beq.n	8005ac0 <TIM_OC2_SetConfig+0xc0>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a17      	ldr	r2, [pc, #92]	@ (8005b18 <TIM_OC2_SetConfig+0x118>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d113      	bne.n	8005ae8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ac6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ace:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	695b      	ldr	r3, [r3, #20]
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	621a      	str	r2, [r3, #32]
}
 8005b02:	bf00      	nop
 8005b04:	371c      	adds	r7, #28
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	40012c00 	.word	0x40012c00
 8005b14:	40013400 	.word	0x40013400
 8005b18:	40015000 	.word	0x40015000
 8005b1c:	40014000 	.word	0x40014000
 8005b20:	40014400 	.word	0x40014400
 8005b24:	40014800 	.word	0x40014800

08005b28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b087      	sub	sp, #28
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	69db      	ldr	r3, [r3, #28]
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f023 0303 	bic.w	r3, r3, #3
 8005b62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	021b      	lsls	r3, r3, #8
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a2b      	ldr	r2, [pc, #172]	@ (8005c34 <TIM_OC3_SetConfig+0x10c>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d007      	beq.n	8005b9a <TIM_OC3_SetConfig+0x72>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a2a      	ldr	r2, [pc, #168]	@ (8005c38 <TIM_OC3_SetConfig+0x110>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d003      	beq.n	8005b9a <TIM_OC3_SetConfig+0x72>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a29      	ldr	r2, [pc, #164]	@ (8005c3c <TIM_OC3_SetConfig+0x114>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d10d      	bne.n	8005bb6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ba0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	021b      	lsls	r3, r3, #8
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005bb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a1e      	ldr	r2, [pc, #120]	@ (8005c34 <TIM_OC3_SetConfig+0x10c>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d013      	beq.n	8005be6 <TIM_OC3_SetConfig+0xbe>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8005c38 <TIM_OC3_SetConfig+0x110>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d00f      	beq.n	8005be6 <TIM_OC3_SetConfig+0xbe>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8005c40 <TIM_OC3_SetConfig+0x118>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d00b      	beq.n	8005be6 <TIM_OC3_SetConfig+0xbe>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a1c      	ldr	r2, [pc, #112]	@ (8005c44 <TIM_OC3_SetConfig+0x11c>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d007      	beq.n	8005be6 <TIM_OC3_SetConfig+0xbe>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a1b      	ldr	r2, [pc, #108]	@ (8005c48 <TIM_OC3_SetConfig+0x120>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d003      	beq.n	8005be6 <TIM_OC3_SetConfig+0xbe>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a16      	ldr	r2, [pc, #88]	@ (8005c3c <TIM_OC3_SetConfig+0x114>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d113      	bne.n	8005c0e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005bec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005bf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	011b      	lsls	r3, r3, #4
 8005bfc:	693a      	ldr	r2, [r7, #16]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	011b      	lsls	r3, r3, #4
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	685a      	ldr	r2, [r3, #4]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	621a      	str	r2, [r3, #32]
}
 8005c28:	bf00      	nop
 8005c2a:	371c      	adds	r7, #28
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr
 8005c34:	40012c00 	.word	0x40012c00
 8005c38:	40013400 	.word	0x40013400
 8005c3c:	40015000 	.word	0x40015000
 8005c40:	40014000 	.word	0x40014000
 8005c44:	40014400 	.word	0x40014400
 8005c48:	40014800 	.word	0x40014800

08005c4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b087      	sub	sp, #28
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	021b      	lsls	r3, r3, #8
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	031b      	lsls	r3, r3, #12
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a2c      	ldr	r2, [pc, #176]	@ (8005d5c <TIM_OC4_SetConfig+0x110>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d007      	beq.n	8005cc0 <TIM_OC4_SetConfig+0x74>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a2b      	ldr	r2, [pc, #172]	@ (8005d60 <TIM_OC4_SetConfig+0x114>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d003      	beq.n	8005cc0 <TIM_OC4_SetConfig+0x74>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a2a      	ldr	r2, [pc, #168]	@ (8005d64 <TIM_OC4_SetConfig+0x118>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d10d      	bne.n	8005cdc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005cc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	031b      	lsls	r3, r3, #12
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005cda:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a1f      	ldr	r2, [pc, #124]	@ (8005d5c <TIM_OC4_SetConfig+0x110>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d013      	beq.n	8005d0c <TIM_OC4_SetConfig+0xc0>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a1e      	ldr	r2, [pc, #120]	@ (8005d60 <TIM_OC4_SetConfig+0x114>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d00f      	beq.n	8005d0c <TIM_OC4_SetConfig+0xc0>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a1e      	ldr	r2, [pc, #120]	@ (8005d68 <TIM_OC4_SetConfig+0x11c>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d00b      	beq.n	8005d0c <TIM_OC4_SetConfig+0xc0>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a1d      	ldr	r2, [pc, #116]	@ (8005d6c <TIM_OC4_SetConfig+0x120>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d007      	beq.n	8005d0c <TIM_OC4_SetConfig+0xc0>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a1c      	ldr	r2, [pc, #112]	@ (8005d70 <TIM_OC4_SetConfig+0x124>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d003      	beq.n	8005d0c <TIM_OC4_SetConfig+0xc0>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a17      	ldr	r2, [pc, #92]	@ (8005d64 <TIM_OC4_SetConfig+0x118>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d113      	bne.n	8005d34 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d12:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005d1a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	695b      	ldr	r3, [r3, #20]
 8005d20:	019b      	lsls	r3, r3, #6
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	019b      	lsls	r3, r3, #6
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	685a      	ldr	r2, [r3, #4]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	621a      	str	r2, [r3, #32]
}
 8005d4e:	bf00      	nop
 8005d50:	371c      	adds	r7, #28
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	40012c00 	.word	0x40012c00
 8005d60:	40013400 	.word	0x40013400
 8005d64:	40015000 	.word	0x40015000
 8005d68:	40014000 	.word	0x40014000
 8005d6c:	40014400 	.word	0x40014400
 8005d70:	40014800 	.word	0x40014800

08005d74 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b087      	sub	sp, #28
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005da2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005da6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005db8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	041b      	lsls	r3, r3, #16
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a19      	ldr	r2, [pc, #100]	@ (8005e30 <TIM_OC5_SetConfig+0xbc>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d013      	beq.n	8005df6 <TIM_OC5_SetConfig+0x82>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a18      	ldr	r2, [pc, #96]	@ (8005e34 <TIM_OC5_SetConfig+0xc0>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d00f      	beq.n	8005df6 <TIM_OC5_SetConfig+0x82>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a17      	ldr	r2, [pc, #92]	@ (8005e38 <TIM_OC5_SetConfig+0xc4>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d00b      	beq.n	8005df6 <TIM_OC5_SetConfig+0x82>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a16      	ldr	r2, [pc, #88]	@ (8005e3c <TIM_OC5_SetConfig+0xc8>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d007      	beq.n	8005df6 <TIM_OC5_SetConfig+0x82>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a15      	ldr	r2, [pc, #84]	@ (8005e40 <TIM_OC5_SetConfig+0xcc>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d003      	beq.n	8005df6 <TIM_OC5_SetConfig+0x82>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a14      	ldr	r2, [pc, #80]	@ (8005e44 <TIM_OC5_SetConfig+0xd0>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d109      	bne.n	8005e0a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005dfc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	021b      	lsls	r3, r3, #8
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	697a      	ldr	r2, [r7, #20]
 8005e0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	685a      	ldr	r2, [r3, #4]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	621a      	str	r2, [r3, #32]
}
 8005e24:	bf00      	nop
 8005e26:	371c      	adds	r7, #28
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr
 8005e30:	40012c00 	.word	0x40012c00
 8005e34:	40013400 	.word	0x40013400
 8005e38:	40014000 	.word	0x40014000
 8005e3c:	40014400 	.word	0x40014400
 8005e40:	40014800 	.word	0x40014800
 8005e44:	40015000 	.word	0x40015000

08005e48 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b087      	sub	sp, #28
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a1b      	ldr	r3, [r3, #32]
 8005e56:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	021b      	lsls	r3, r3, #8
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005e8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	051b      	lsls	r3, r3, #20
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a1a      	ldr	r2, [pc, #104]	@ (8005f08 <TIM_OC6_SetConfig+0xc0>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d013      	beq.n	8005ecc <TIM_OC6_SetConfig+0x84>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a19      	ldr	r2, [pc, #100]	@ (8005f0c <TIM_OC6_SetConfig+0xc4>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d00f      	beq.n	8005ecc <TIM_OC6_SetConfig+0x84>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a18      	ldr	r2, [pc, #96]	@ (8005f10 <TIM_OC6_SetConfig+0xc8>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d00b      	beq.n	8005ecc <TIM_OC6_SetConfig+0x84>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a17      	ldr	r2, [pc, #92]	@ (8005f14 <TIM_OC6_SetConfig+0xcc>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d007      	beq.n	8005ecc <TIM_OC6_SetConfig+0x84>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a16      	ldr	r2, [pc, #88]	@ (8005f18 <TIM_OC6_SetConfig+0xd0>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d003      	beq.n	8005ecc <TIM_OC6_SetConfig+0x84>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a15      	ldr	r2, [pc, #84]	@ (8005f1c <TIM_OC6_SetConfig+0xd4>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d109      	bne.n	8005ee0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ed2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	695b      	ldr	r3, [r3, #20]
 8005ed8:	029b      	lsls	r3, r3, #10
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	685a      	ldr	r2, [r3, #4]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	621a      	str	r2, [r3, #32]
}
 8005efa:	bf00      	nop
 8005efc:	371c      	adds	r7, #28
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	40012c00 	.word	0x40012c00
 8005f0c:	40013400 	.word	0x40013400
 8005f10:	40014000 	.word	0x40014000
 8005f14:	40014400 	.word	0x40014400
 8005f18:	40014800 	.word	0x40014800
 8005f1c:	40015000 	.word	0x40015000

08005f20 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b087      	sub	sp, #28
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
 8005f2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6a1b      	ldr	r3, [r3, #32]
 8005f32:	f023 0201 	bic.w	r2, r3, #1
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6a1b      	ldr	r3, [r3, #32]
 8005f44:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	4a28      	ldr	r2, [pc, #160]	@ (8005fec <TIM_TI1_SetConfig+0xcc>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d01b      	beq.n	8005f86 <TIM_TI1_SetConfig+0x66>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f54:	d017      	beq.n	8005f86 <TIM_TI1_SetConfig+0x66>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	4a25      	ldr	r2, [pc, #148]	@ (8005ff0 <TIM_TI1_SetConfig+0xd0>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d013      	beq.n	8005f86 <TIM_TI1_SetConfig+0x66>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	4a24      	ldr	r2, [pc, #144]	@ (8005ff4 <TIM_TI1_SetConfig+0xd4>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d00f      	beq.n	8005f86 <TIM_TI1_SetConfig+0x66>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	4a23      	ldr	r2, [pc, #140]	@ (8005ff8 <TIM_TI1_SetConfig+0xd8>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d00b      	beq.n	8005f86 <TIM_TI1_SetConfig+0x66>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	4a22      	ldr	r2, [pc, #136]	@ (8005ffc <TIM_TI1_SetConfig+0xdc>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d007      	beq.n	8005f86 <TIM_TI1_SetConfig+0x66>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	4a21      	ldr	r2, [pc, #132]	@ (8006000 <TIM_TI1_SetConfig+0xe0>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d003      	beq.n	8005f86 <TIM_TI1_SetConfig+0x66>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	4a20      	ldr	r2, [pc, #128]	@ (8006004 <TIM_TI1_SetConfig+0xe4>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d101      	bne.n	8005f8a <TIM_TI1_SetConfig+0x6a>
 8005f86:	2301      	movs	r3, #1
 8005f88:	e000      	b.n	8005f8c <TIM_TI1_SetConfig+0x6c>
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d008      	beq.n	8005fa2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	f023 0303 	bic.w	r3, r3, #3
 8005f96:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005f98:	697a      	ldr	r2, [r7, #20]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	617b      	str	r3, [r7, #20]
 8005fa0:	e003      	b.n	8005faa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	f043 0301 	orr.w	r3, r3, #1
 8005fa8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005fb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	011b      	lsls	r3, r3, #4
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	697a      	ldr	r2, [r7, #20]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	f023 030a 	bic.w	r3, r3, #10
 8005fc4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	f003 030a 	and.w	r3, r3, #10
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	697a      	ldr	r2, [r7, #20]
 8005fd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	621a      	str	r2, [r3, #32]
}
 8005fde:	bf00      	nop
 8005fe0:	371c      	adds	r7, #28
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	40012c00 	.word	0x40012c00
 8005ff0:	40000400 	.word	0x40000400
 8005ff4:	40000800 	.word	0x40000800
 8005ff8:	40000c00 	.word	0x40000c00
 8005ffc:	40013400 	.word	0x40013400
 8006000:	40014000 	.word	0x40014000
 8006004:	40015000 	.word	0x40015000

08006008 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006008:	b480      	push	{r7}
 800600a:	b087      	sub	sp, #28
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	f003 031f 	and.w	r3, r3, #31
 800601a:	2201      	movs	r2, #1
 800601c:	fa02 f303 	lsl.w	r3, r2, r3
 8006020:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6a1a      	ldr	r2, [r3, #32]
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	43db      	mvns	r3, r3
 800602a:	401a      	ands	r2, r3
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6a1a      	ldr	r2, [r3, #32]
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	f003 031f 	and.w	r3, r3, #31
 800603a:	6879      	ldr	r1, [r7, #4]
 800603c:	fa01 f303 	lsl.w	r3, r1, r3
 8006040:	431a      	orrs	r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	621a      	str	r2, [r3, #32]
}
 8006046:	bf00      	nop
 8006048:	371c      	adds	r7, #28
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr

08006052 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b08a      	sub	sp, #40	@ 0x28
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
 800605a:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d101      	bne.n	8006066 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e0a0      	b.n	80061a8 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d106      	bne.n	8006080 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f7fb fa38 	bl	80014f0 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2202      	movs	r2, #2
 8006084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	3304      	adds	r3, #4
 8006090:	4619      	mov	r1, r3
 8006092:	4610      	mov	r0, r2
 8006094:	f7ff fb72 	bl	800577c <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6818      	ldr	r0, [r3, #0]
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	6819      	ldr	r1, [r3, #0]
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	2203      	movs	r2, #3
 80060a6:	f7ff ff3b 	bl	8005f20 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	699a      	ldr	r2, [r3, #24]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f022 020c 	bic.w	r2, r2, #12
 80060b8:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	6999      	ldr	r1, [r3, #24]
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	685a      	ldr	r2, [r3, #4]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	430a      	orrs	r2, r1
 80060ca:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	685a      	ldr	r2, [r3, #4]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80060da:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	6812      	ldr	r2, [r2, #0]
 80060e6:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80060ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060ee:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	689a      	ldr	r2, [r3, #8]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80060fe:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	6812      	ldr	r2, [r2, #0]
 800610a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800610e:	f023 0307 	bic.w	r3, r3, #7
 8006112:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	689a      	ldr	r2, [r3, #8]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f042 0204 	orr.w	r2, r2, #4
 8006122:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8006124:	2300      	movs	r3, #0
 8006126:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006128:	2300      	movs	r3, #0
 800612a:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800612c:	2370      	movs	r3, #112	@ 0x70
 800612e:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006130:	2300      	movs	r3, #0
 8006132:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006134:	2300      	movs	r3, #0
 8006136:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006138:	2300      	movs	r3, #0
 800613a:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f107 020c 	add.w	r2, r7, #12
 800614a:	4611      	mov	r1, r2
 800614c:	4618      	mov	r0, r3
 800614e:	f7ff fc57 	bl	8005a00 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	6812      	ldr	r2, [r2, #0]
 800615c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006160:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006164:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	685a      	ldr	r2, [r3, #4]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8006174:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3728      	adds	r7, #40	@ 0x28
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d109      	bne.n	80061d4 <HAL_TIMEx_PWMN_Start+0x24>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	bf14      	ite	ne
 80061cc:	2301      	movne	r3, #1
 80061ce:	2300      	moveq	r3, #0
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	e022      	b.n	800621a <HAL_TIMEx_PWMN_Start+0x6a>
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	2b04      	cmp	r3, #4
 80061d8:	d109      	bne.n	80061ee <HAL_TIMEx_PWMN_Start+0x3e>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	bf14      	ite	ne
 80061e6:	2301      	movne	r3, #1
 80061e8:	2300      	moveq	r3, #0
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	e015      	b.n	800621a <HAL_TIMEx_PWMN_Start+0x6a>
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	2b08      	cmp	r3, #8
 80061f2:	d109      	bne.n	8006208 <HAL_TIMEx_PWMN_Start+0x58>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	bf14      	ite	ne
 8006200:	2301      	movne	r3, #1
 8006202:	2300      	moveq	r3, #0
 8006204:	b2db      	uxtb	r3, r3
 8006206:	e008      	b.n	800621a <HAL_TIMEx_PWMN_Start+0x6a>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800620e:	b2db      	uxtb	r3, r3
 8006210:	2b01      	cmp	r3, #1
 8006212:	bf14      	ite	ne
 8006214:	2301      	movne	r3, #1
 8006216:	2300      	moveq	r3, #0
 8006218:	b2db      	uxtb	r3, r3
 800621a:	2b00      	cmp	r3, #0
 800621c:	d001      	beq.n	8006222 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e073      	b.n	800630a <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d104      	bne.n	8006232 <HAL_TIMEx_PWMN_Start+0x82>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2202      	movs	r2, #2
 800622c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006230:	e013      	b.n	800625a <HAL_TIMEx_PWMN_Start+0xaa>
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	2b04      	cmp	r3, #4
 8006236:	d104      	bne.n	8006242 <HAL_TIMEx_PWMN_Start+0x92>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2202      	movs	r2, #2
 800623c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006240:	e00b      	b.n	800625a <HAL_TIMEx_PWMN_Start+0xaa>
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	2b08      	cmp	r3, #8
 8006246:	d104      	bne.n	8006252 <HAL_TIMEx_PWMN_Start+0xa2>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2202      	movs	r2, #2
 800624c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006250:	e003      	b.n	800625a <HAL_TIMEx_PWMN_Start+0xaa>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2202      	movs	r2, #2
 8006256:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2204      	movs	r2, #4
 8006260:	6839      	ldr	r1, [r7, #0]
 8006262:	4618      	mov	r0, r3
 8006264:	f000 fa52 	bl	800670c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006276:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a25      	ldr	r2, [pc, #148]	@ (8006314 <HAL_TIMEx_PWMN_Start+0x164>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d022      	beq.n	80062c8 <HAL_TIMEx_PWMN_Start+0x118>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800628a:	d01d      	beq.n	80062c8 <HAL_TIMEx_PWMN_Start+0x118>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a21      	ldr	r2, [pc, #132]	@ (8006318 <HAL_TIMEx_PWMN_Start+0x168>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d018      	beq.n	80062c8 <HAL_TIMEx_PWMN_Start+0x118>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a20      	ldr	r2, [pc, #128]	@ (800631c <HAL_TIMEx_PWMN_Start+0x16c>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d013      	beq.n	80062c8 <HAL_TIMEx_PWMN_Start+0x118>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a1e      	ldr	r2, [pc, #120]	@ (8006320 <HAL_TIMEx_PWMN_Start+0x170>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d00e      	beq.n	80062c8 <HAL_TIMEx_PWMN_Start+0x118>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a1d      	ldr	r2, [pc, #116]	@ (8006324 <HAL_TIMEx_PWMN_Start+0x174>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d009      	beq.n	80062c8 <HAL_TIMEx_PWMN_Start+0x118>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a1b      	ldr	r2, [pc, #108]	@ (8006328 <HAL_TIMEx_PWMN_Start+0x178>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d004      	beq.n	80062c8 <HAL_TIMEx_PWMN_Start+0x118>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a1a      	ldr	r2, [pc, #104]	@ (800632c <HAL_TIMEx_PWMN_Start+0x17c>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d115      	bne.n	80062f4 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	689a      	ldr	r2, [r3, #8]
 80062ce:	4b18      	ldr	r3, [pc, #96]	@ (8006330 <HAL_TIMEx_PWMN_Start+0x180>)
 80062d0:	4013      	ands	r3, r2
 80062d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2b06      	cmp	r3, #6
 80062d8:	d015      	beq.n	8006306 <HAL_TIMEx_PWMN_Start+0x156>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062e0:	d011      	beq.n	8006306 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f042 0201 	orr.w	r2, r2, #1
 80062f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062f2:	e008      	b.n	8006306 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f042 0201 	orr.w	r2, r2, #1
 8006302:	601a      	str	r2, [r3, #0]
 8006304:	e000      	b.n	8006308 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006306:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3710      	adds	r7, #16
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	40012c00 	.word	0x40012c00
 8006318:	40000400 	.word	0x40000400
 800631c:	40000800 	.word	0x40000800
 8006320:	40000c00 	.word	0x40000c00
 8006324:	40013400 	.word	0x40013400
 8006328:	40014000 	.word	0x40014000
 800632c:	40015000 	.word	0x40015000
 8006330:	00010007 	.word	0x00010007

08006334 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2200      	movs	r2, #0
 8006344:	6839      	ldr	r1, [r7, #0]
 8006346:	4618      	mov	r0, r3
 8006348:	f000 f9e0 	bl	800670c <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	6a1a      	ldr	r2, [r3, #32]
 8006352:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006356:	4013      	ands	r3, r2
 8006358:	2b00      	cmp	r3, #0
 800635a:	d10f      	bne.n	800637c <HAL_TIMEx_PWMN_Stop+0x48>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	6a1a      	ldr	r2, [r3, #32]
 8006362:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006366:	4013      	ands	r3, r2
 8006368:	2b00      	cmp	r3, #0
 800636a:	d107      	bne.n	800637c <HAL_TIMEx_PWMN_Stop+0x48>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800637a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	6a1a      	ldr	r2, [r3, #32]
 8006382:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006386:	4013      	ands	r3, r2
 8006388:	2b00      	cmp	r3, #0
 800638a:	d10f      	bne.n	80063ac <HAL_TIMEx_PWMN_Stop+0x78>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6a1a      	ldr	r2, [r3, #32]
 8006392:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006396:	4013      	ands	r3, r2
 8006398:	2b00      	cmp	r3, #0
 800639a:	d107      	bne.n	80063ac <HAL_TIMEx_PWMN_Stop+0x78>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f022 0201 	bic.w	r2, r2, #1
 80063aa:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d104      	bne.n	80063bc <HAL_TIMEx_PWMN_Stop+0x88>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063ba:	e013      	b.n	80063e4 <HAL_TIMEx_PWMN_Stop+0xb0>
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	2b04      	cmp	r3, #4
 80063c0:	d104      	bne.n	80063cc <HAL_TIMEx_PWMN_Stop+0x98>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80063ca:	e00b      	b.n	80063e4 <HAL_TIMEx_PWMN_Stop+0xb0>
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	2b08      	cmp	r3, #8
 80063d0:	d104      	bne.n	80063dc <HAL_TIMEx_PWMN_Stop+0xa8>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2201      	movs	r2, #1
 80063d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80063da:	e003      	b.n	80063e4 <HAL_TIMEx_PWMN_Stop+0xb0>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3708      	adds	r7, #8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
	...

080063f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b085      	sub	sp, #20
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006400:	2b01      	cmp	r3, #1
 8006402:	d101      	bne.n	8006408 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006404:	2302      	movs	r3, #2
 8006406:	e074      	b.n	80064f2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2202      	movs	r2, #2
 8006414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a34      	ldr	r2, [pc, #208]	@ (8006500 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d009      	beq.n	8006446 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a33      	ldr	r2, [pc, #204]	@ (8006504 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d004      	beq.n	8006446 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a31      	ldr	r2, [pc, #196]	@ (8006508 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d108      	bne.n	8006458 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800644c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	4313      	orrs	r3, r2
 8006456:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800645e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006462:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	4313      	orrs	r3, r2
 800646c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a21      	ldr	r2, [pc, #132]	@ (8006500 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d022      	beq.n	80064c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006488:	d01d      	beq.n	80064c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a1f      	ldr	r2, [pc, #124]	@ (800650c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d018      	beq.n	80064c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a1d      	ldr	r2, [pc, #116]	@ (8006510 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d013      	beq.n	80064c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a1c      	ldr	r2, [pc, #112]	@ (8006514 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d00e      	beq.n	80064c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a15      	ldr	r2, [pc, #84]	@ (8006504 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d009      	beq.n	80064c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a18      	ldr	r2, [pc, #96]	@ (8006518 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d004      	beq.n	80064c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a11      	ldr	r2, [pc, #68]	@ (8006508 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d10c      	bne.n	80064e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3714      	adds	r7, #20
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	40012c00 	.word	0x40012c00
 8006504:	40013400 	.word	0x40013400
 8006508:	40015000 	.word	0x40015000
 800650c:	40000400 	.word	0x40000400
 8006510:	40000800 	.word	0x40000800
 8006514:	40000c00 	.word	0x40000c00
 8006518:	40014000 	.word	0x40014000

0800651c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006526:	2300      	movs	r3, #0
 8006528:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006530:	2b01      	cmp	r3, #1
 8006532:	d101      	bne.n	8006538 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006534:	2302      	movs	r3, #2
 8006536:	e096      	b.n	8006666 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	4313      	orrs	r3, r2
 800654c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	4313      	orrs	r3, r2
 800655a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	4313      	orrs	r3, r2
 8006568:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4313      	orrs	r3, r2
 8006576:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	4313      	orrs	r3, r2
 8006584:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	695b      	ldr	r3, [r3, #20]
 8006590:	4313      	orrs	r3, r2
 8006592:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800659e:	4313      	orrs	r3, r2
 80065a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	699b      	ldr	r3, [r3, #24]
 80065ac:	041b      	lsls	r3, r3, #16
 80065ae:	4313      	orrs	r3, r2
 80065b0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a2f      	ldr	r2, [pc, #188]	@ (8006674 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d009      	beq.n	80065d0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a2d      	ldr	r2, [pc, #180]	@ (8006678 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d004      	beq.n	80065d0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a2c      	ldr	r2, [pc, #176]	@ (800667c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d106      	bne.n	80065de <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	69db      	ldr	r3, [r3, #28]
 80065da:	4313      	orrs	r3, r2
 80065dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a24      	ldr	r2, [pc, #144]	@ (8006674 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d009      	beq.n	80065fc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a22      	ldr	r2, [pc, #136]	@ (8006678 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d004      	beq.n	80065fc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a21      	ldr	r2, [pc, #132]	@ (800667c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d12b      	bne.n	8006654 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006606:	051b      	lsls	r3, r3, #20
 8006608:	4313      	orrs	r3, r2
 800660a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	6a1b      	ldr	r3, [r3, #32]
 8006616:	4313      	orrs	r3, r2
 8006618:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006624:	4313      	orrs	r3, r2
 8006626:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a11      	ldr	r2, [pc, #68]	@ (8006674 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d009      	beq.n	8006646 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a10      	ldr	r2, [pc, #64]	@ (8006678 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d004      	beq.n	8006646 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a0e      	ldr	r2, [pc, #56]	@ (800667c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d106      	bne.n	8006654 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006650:	4313      	orrs	r3, r2
 8006652:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3714      	adds	r7, #20
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	40012c00 	.word	0x40012c00
 8006678:	40013400 	.word	0x40013400
 800667c:	40015000 	.word	0x40015000

08006680 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80066c4:	bf00      	nop
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80066ec:	bf00      	nop
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006700:	bf00      	nop
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800670c:	b480      	push	{r7}
 800670e:	b087      	sub	sp, #28
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	f003 031f 	and.w	r3, r3, #31
 800671e:	2204      	movs	r2, #4
 8006720:	fa02 f303 	lsl.w	r3, r2, r3
 8006724:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6a1a      	ldr	r2, [r3, #32]
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	43db      	mvns	r3, r3
 800672e:	401a      	ands	r2, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6a1a      	ldr	r2, [r3, #32]
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	f003 031f 	and.w	r3, r3, #31
 800673e:	6879      	ldr	r1, [r7, #4]
 8006740:	fa01 f303 	lsl.w	r3, r1, r3
 8006744:	431a      	orrs	r2, r3
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	621a      	str	r2, [r3, #32]
}
 800674a:	bf00      	nop
 800674c:	371c      	adds	r7, #28
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr

08006756 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b082      	sub	sp, #8
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d101      	bne.n	8006768 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e042      	b.n	80067ee <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800676e:	2b00      	cmp	r3, #0
 8006770:	d106      	bne.n	8006780 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f7fb f81a 	bl	80017b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2224      	movs	r2, #36	@ 0x24
 8006784:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f022 0201 	bic.w	r2, r2, #1
 8006796:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 fc51 	bl	8007040 <UART_SetConfig>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d101      	bne.n	80067a8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	e022      	b.n	80067ee <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d002      	beq.n	80067b6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 ff41 	bl	8007638 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	685a      	ldr	r2, [r3, #4]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80067c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	689a      	ldr	r2, [r3, #8]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80067d4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f042 0201 	orr.w	r2, r2, #1
 80067e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 ffc8 	bl	800777c <UART_CheckIdleState>
 80067ec:	4603      	mov	r3, r0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3708      	adds	r7, #8
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}

080067f6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b08a      	sub	sp, #40	@ 0x28
 80067fa:	af02      	add	r7, sp, #8
 80067fc:	60f8      	str	r0, [r7, #12]
 80067fe:	60b9      	str	r1, [r7, #8]
 8006800:	603b      	str	r3, [r7, #0]
 8006802:	4613      	mov	r3, r2
 8006804:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800680c:	2b20      	cmp	r3, #32
 800680e:	f040 8083 	bne.w	8006918 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d002      	beq.n	800681e <HAL_UART_Transmit+0x28>
 8006818:	88fb      	ldrh	r3, [r7, #6]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d101      	bne.n	8006822 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e07b      	b.n	800691a <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006828:	2b01      	cmp	r3, #1
 800682a:	d101      	bne.n	8006830 <HAL_UART_Transmit+0x3a>
 800682c:	2302      	movs	r3, #2
 800682e:	e074      	b.n	800691a <HAL_UART_Transmit+0x124>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2200      	movs	r2, #0
 800683c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2221      	movs	r2, #33	@ 0x21
 8006844:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006848:	f7fb fb0c 	bl	8001e64 <HAL_GetTick>
 800684c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	88fa      	ldrh	r2, [r7, #6]
 8006852:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	88fa      	ldrh	r2, [r7, #6]
 800685a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006866:	d108      	bne.n	800687a <HAL_UART_Transmit+0x84>
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d104      	bne.n	800687a <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006870:	2300      	movs	r3, #0
 8006872:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	61bb      	str	r3, [r7, #24]
 8006878:	e003      	b.n	8006882 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800687e:	2300      	movs	r3, #0
 8006880:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    while (huart->TxXferCount > 0U)
 800688a:	e02c      	b.n	80068e6 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	9300      	str	r3, [sp, #0]
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	2200      	movs	r2, #0
 8006894:	2180      	movs	r1, #128	@ 0x80
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f000 ffbb 	bl	8007812 <UART_WaitOnFlagUntilTimeout>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d001      	beq.n	80068a6 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e039      	b.n	800691a <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d10b      	bne.n	80068c4 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	881b      	ldrh	r3, [r3, #0]
 80068b0:	461a      	mov	r2, r3
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068ba:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	3302      	adds	r3, #2
 80068c0:	61bb      	str	r3, [r7, #24]
 80068c2:	e007      	b.n	80068d4 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	781a      	ldrb	r2, [r3, #0]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	3301      	adds	r3, #1
 80068d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80068da:	b29b      	uxth	r3, r3
 80068dc:	3b01      	subs	r3, #1
 80068de:	b29a      	uxth	r2, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d1cc      	bne.n	800688c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	9300      	str	r3, [sp, #0]
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	2200      	movs	r2, #0
 80068fa:	2140      	movs	r1, #64	@ 0x40
 80068fc:	68f8      	ldr	r0, [r7, #12]
 80068fe:	f000 ff88 	bl	8007812 <UART_WaitOnFlagUntilTimeout>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d001      	beq.n	800690c <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e006      	b.n	800691a <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2220      	movs	r2, #32
 8006910:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8006914:	2300      	movs	r3, #0
 8006916:	e000      	b.n	800691a <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006918:	2302      	movs	r3, #2
  }
}
 800691a:	4618      	mov	r0, r3
 800691c:	3720      	adds	r7, #32
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
	...

08006924 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b08a      	sub	sp, #40	@ 0x28
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	4613      	mov	r3, r2
 8006930:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006938:	2b20      	cmp	r3, #32
 800693a:	d142      	bne.n	80069c2 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d002      	beq.n	8006948 <HAL_UART_Receive_IT+0x24>
 8006942:	88fb      	ldrh	r3, [r7, #6]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d101      	bne.n	800694c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e03b      	b.n	80069c4 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006952:	2b01      	cmp	r3, #1
 8006954:	d101      	bne.n	800695a <HAL_UART_Receive_IT+0x36>
 8006956:	2302      	movs	r3, #2
 8006958:	e034      	b.n	80069c4 <HAL_UART_Receive_IT+0xa0>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2201      	movs	r2, #1
 800695e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a17      	ldr	r2, [pc, #92]	@ (80069cc <HAL_UART_Receive_IT+0xa8>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d01f      	beq.n	80069b2 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800697c:	2b00      	cmp	r3, #0
 800697e:	d018      	beq.n	80069b2 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	e853 3f00 	ldrex	r3, [r3]
 800698c:	613b      	str	r3, [r7, #16]
   return(result);
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006994:	627b      	str	r3, [r7, #36]	@ 0x24
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	461a      	mov	r2, r3
 800699c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800699e:	623b      	str	r3, [r7, #32]
 80069a0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a2:	69f9      	ldr	r1, [r7, #28]
 80069a4:	6a3a      	ldr	r2, [r7, #32]
 80069a6:	e841 2300 	strex	r3, r2, [r1]
 80069aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1e6      	bne.n	8006980 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80069b2:	88fb      	ldrh	r3, [r7, #6]
 80069b4:	461a      	mov	r2, r3
 80069b6:	68b9      	ldr	r1, [r7, #8]
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	f000 fff3 	bl	80079a4 <UART_Start_Receive_IT>
 80069be:	4603      	mov	r3, r0
 80069c0:	e000      	b.n	80069c4 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80069c2:	2302      	movs	r3, #2
  }
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3728      	adds	r7, #40	@ 0x28
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}
 80069cc:	40008000 	.word	0x40008000

080069d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b0ba      	sub	sp, #232	@ 0xe8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	69db      	ldr	r3, [r3, #28]
 80069de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80069f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80069fa:	f640 030f 	movw	r3, #2063	@ 0x80f
 80069fe:	4013      	ands	r3, r2
 8006a00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006a04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d11b      	bne.n	8006a44 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a10:	f003 0320 	and.w	r3, r3, #32
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d015      	beq.n	8006a44 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a1c:	f003 0320 	and.w	r3, r3, #32
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d105      	bne.n	8006a30 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006a24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d009      	beq.n	8006a44 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f000 82d6 	beq.w	8006fe6 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	4798      	blx	r3
      }
      return;
 8006a42:	e2d0      	b.n	8006fe6 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006a44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f000 811f 	beq.w	8006c8c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006a4e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006a52:	4b8b      	ldr	r3, [pc, #556]	@ (8006c80 <HAL_UART_IRQHandler+0x2b0>)
 8006a54:	4013      	ands	r3, r2
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d106      	bne.n	8006a68 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006a5a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006a5e:	4b89      	ldr	r3, [pc, #548]	@ (8006c84 <HAL_UART_IRQHandler+0x2b4>)
 8006a60:	4013      	ands	r3, r2
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f000 8112 	beq.w	8006c8c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a6c:	f003 0301 	and.w	r3, r3, #1
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d011      	beq.n	8006a98 <HAL_UART_IRQHandler+0xc8>
 8006a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00b      	beq.n	8006a98 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2201      	movs	r2, #1
 8006a86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a8e:	f043 0201 	orr.w	r2, r3, #1
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a9c:	f003 0302 	and.w	r3, r3, #2
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d011      	beq.n	8006ac8 <HAL_UART_IRQHandler+0xf8>
 8006aa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006aa8:	f003 0301 	and.w	r3, r3, #1
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d00b      	beq.n	8006ac8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2202      	movs	r2, #2
 8006ab6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006abe:	f043 0204 	orr.w	r2, r3, #4
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006acc:	f003 0304 	and.w	r3, r3, #4
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d011      	beq.n	8006af8 <HAL_UART_IRQHandler+0x128>
 8006ad4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ad8:	f003 0301 	and.w	r3, r3, #1
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00b      	beq.n	8006af8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2204      	movs	r2, #4
 8006ae6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006aee:	f043 0202 	orr.w	r2, r3, #2
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006afc:	f003 0308 	and.w	r3, r3, #8
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d017      	beq.n	8006b34 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b08:	f003 0320 	and.w	r3, r3, #32
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d105      	bne.n	8006b1c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006b10:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006b14:	4b5a      	ldr	r3, [pc, #360]	@ (8006c80 <HAL_UART_IRQHandler+0x2b0>)
 8006b16:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d00b      	beq.n	8006b34 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2208      	movs	r2, #8
 8006b22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b2a:	f043 0208 	orr.w	r2, r3, #8
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d012      	beq.n	8006b66 <HAL_UART_IRQHandler+0x196>
 8006b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b44:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00c      	beq.n	8006b66 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b5c:	f043 0220 	orr.w	r2, r3, #32
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f000 823c 	beq.w	8006fea <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b76:	f003 0320 	and.w	r3, r3, #32
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d013      	beq.n	8006ba6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006b7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b82:	f003 0320 	and.w	r3, r3, #32
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d105      	bne.n	8006b96 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006b8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d007      	beq.n	8006ba6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d003      	beq.n	8006ba6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006bac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bba:	2b40      	cmp	r3, #64	@ 0x40
 8006bbc:	d005      	beq.n	8006bca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006bbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006bc2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d04f      	beq.n	8006c6a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f001 f814 	bl	8007bf8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bda:	2b40      	cmp	r3, #64	@ 0x40
 8006bdc:	d141      	bne.n	8006c62 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	3308      	adds	r3, #8
 8006be4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006bec:	e853 3f00 	ldrex	r3, [r3]
 8006bf0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006bf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006bf8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bfc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	3308      	adds	r3, #8
 8006c06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006c0a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006c0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006c16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006c1a:	e841 2300 	strex	r3, r2, [r1]
 8006c1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006c22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1d9      	bne.n	8006bde <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d013      	beq.n	8006c5a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c36:	4a14      	ldr	r2, [pc, #80]	@ (8006c88 <HAL_UART_IRQHandler+0x2b8>)
 8006c38:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7fc fe0f 	bl	8003862 <HAL_DMA_Abort_IT>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d017      	beq.n	8006c7a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8006c54:	4610      	mov	r0, r2
 8006c56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c58:	e00f      	b.n	8006c7a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 f9da 	bl	8007014 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c60:	e00b      	b.n	8006c7a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 f9d6 	bl	8007014 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c68:	e007      	b.n	8006c7a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 f9d2 	bl	8007014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      }
    }
    return;
 8006c78:	e1b7      	b.n	8006fea <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c7a:	bf00      	nop
    return;
 8006c7c:	e1b5      	b.n	8006fea <HAL_UART_IRQHandler+0x61a>
 8006c7e:	bf00      	nop
 8006c80:	10000001 	.word	0x10000001
 8006c84:	04000120 	.word	0x04000120
 8006c88:	08007cc5 	.word	0x08007cc5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	f040 814a 	bne.w	8006f2a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c9a:	f003 0310 	and.w	r3, r3, #16
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	f000 8143 	beq.w	8006f2a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ca8:	f003 0310 	and.w	r3, r3, #16
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f000 813c 	beq.w	8006f2a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2210      	movs	r2, #16
 8006cb8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cc4:	2b40      	cmp	r3, #64	@ 0x40
 8006cc6:	f040 80b5 	bne.w	8006e34 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006cd6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	f000 8187 	beq.w	8006fee <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006ce6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006cea:	429a      	cmp	r2, r3
 8006cec:	f080 817f 	bcs.w	8006fee <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006cf6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 0320 	and.w	r3, r3, #32
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	f040 8086 	bne.w	8006e18 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006d18:	e853 3f00 	ldrex	r3, [r3]
 8006d1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006d20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006d24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	461a      	mov	r2, r3
 8006d32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006d36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006d3a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006d42:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006d46:	e841 2300 	strex	r3, r2, [r1]
 8006d4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006d4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1da      	bne.n	8006d0c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	3308      	adds	r3, #8
 8006d5c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d60:	e853 3f00 	ldrex	r3, [r3]
 8006d64:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006d66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006d68:	f023 0301 	bic.w	r3, r3, #1
 8006d6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	3308      	adds	r3, #8
 8006d76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006d7a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006d7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d80:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006d82:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006d86:	e841 2300 	strex	r3, r2, [r1]
 8006d8a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006d8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d1e1      	bne.n	8006d56 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	3308      	adds	r3, #8
 8006d98:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006d9c:	e853 3f00 	ldrex	r3, [r3]
 8006da0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006da2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006da4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006da8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	3308      	adds	r3, #8
 8006db2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006db6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006db8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006dbc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006dbe:	e841 2300 	strex	r3, r2, [r1]
 8006dc2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006dc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1e3      	bne.n	8006d92 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2220      	movs	r2, #32
 8006dce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006de0:	e853 3f00 	ldrex	r3, [r3]
 8006de4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006de6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006de8:	f023 0310 	bic.w	r3, r3, #16
 8006dec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	461a      	mov	r2, r3
 8006df6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006dfa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006dfc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e00:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e02:	e841 2300 	strex	r3, r2, [r1]
 8006e06:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006e08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1e4      	bne.n	8006dd8 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7fc fccc 	bl	80037b0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 f8fb 	bl	8007028 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e32:	e0dc      	b.n	8006fee <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	f000 80ce 	beq.w	8006ff2 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8006e56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f000 80c9 	beq.w	8006ff2 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e68:	e853 3f00 	ldrex	r3, [r3]
 8006e6c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006e82:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e84:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e8a:	e841 2300 	strex	r3, r2, [r1]
 8006e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1e4      	bne.n	8006e60 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	3308      	adds	r3, #8
 8006e9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea0:	e853 3f00 	ldrex	r3, [r3]
 8006ea4:	623b      	str	r3, [r7, #32]
   return(result);
 8006ea6:	6a3b      	ldr	r3, [r7, #32]
 8006ea8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006eac:	f023 0301 	bic.w	r3, r3, #1
 8006eb0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	3308      	adds	r3, #8
 8006eba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006ebe:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ec4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ec6:	e841 2300 	strex	r3, r2, [r1]
 8006eca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1e1      	bne.n	8006e96 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2220      	movs	r2, #32
 8006ed6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	671a      	str	r2, [r3, #112]	@ 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	e853 3f00 	ldrex	r3, [r3]
 8006ef2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f023 0310 	bic.w	r3, r3, #16
 8006efa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	461a      	mov	r2, r3
 8006f04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006f08:	61fb      	str	r3, [r7, #28]
 8006f0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0c:	69b9      	ldr	r1, [r7, #24]
 8006f0e:	69fa      	ldr	r2, [r7, #28]
 8006f10:	e841 2300 	strex	r3, r2, [r1]
 8006f14:	617b      	str	r3, [r7, #20]
   return(result);
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1e4      	bne.n	8006ee6 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006f20:	4619      	mov	r1, r3
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 f880 	bl	8007028 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f28:	e063      	b.n	8006ff2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00e      	beq.n	8006f54 <HAL_UART_IRQHandler+0x584>
 8006f36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d008      	beq.n	8006f54 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006f4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f001 fb57 	bl	8008600 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f52:	e051      	b.n	8006ff8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d014      	beq.n	8006f8a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d105      	bne.n	8006f78 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006f6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d008      	beq.n	8006f8a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d03a      	beq.n	8006ff6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	4798      	blx	r3
    }
    return;
 8006f88:	e035      	b.n	8006ff6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d009      	beq.n	8006faa <HAL_UART_IRQHandler+0x5da>
 8006f96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d003      	beq.n	8006faa <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 fea4 	bl	8007cf0 <UART_EndTransmit_IT>
    return;
 8006fa8:	e026      	b.n	8006ff8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d009      	beq.n	8006fca <HAL_UART_IRQHandler+0x5fa>
 8006fb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fba:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d003      	beq.n	8006fca <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f001 fb30 	bl	8008628 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006fc8:	e016      	b.n	8006ff8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d010      	beq.n	8006ff8 <HAL_UART_IRQHandler+0x628>
 8006fd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	da0c      	bge.n	8006ff8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f001 fb18 	bl	8008614 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006fe4:	e008      	b.n	8006ff8 <HAL_UART_IRQHandler+0x628>
      return;
 8006fe6:	bf00      	nop
 8006fe8:	e006      	b.n	8006ff8 <HAL_UART_IRQHandler+0x628>
    return;
 8006fea:	bf00      	nop
 8006fec:	e004      	b.n	8006ff8 <HAL_UART_IRQHandler+0x628>
      return;
 8006fee:	bf00      	nop
 8006ff0:	e002      	b.n	8006ff8 <HAL_UART_IRQHandler+0x628>
      return;
 8006ff2:	bf00      	nop
 8006ff4:	e000      	b.n	8006ff8 <HAL_UART_IRQHandler+0x628>
    return;
 8006ff6:	bf00      	nop
  }
}
 8006ff8:	37e8      	adds	r7, #232	@ 0xe8
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop

08007000 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800701c:	bf00      	nop
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	460b      	mov	r3, r1
 8007032:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007034:	bf00      	nop
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007040:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007044:	b08c      	sub	sp, #48	@ 0x30
 8007046:	af00      	add	r7, sp, #0
 8007048:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800704a:	2300      	movs	r3, #0
 800704c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	689a      	ldr	r2, [r3, #8]
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	431a      	orrs	r2, r3
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	695b      	ldr	r3, [r3, #20]
 800705e:	431a      	orrs	r2, r3
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	69db      	ldr	r3, [r3, #28]
 8007064:	4313      	orrs	r3, r2
 8007066:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	4baa      	ldr	r3, [pc, #680]	@ (8007318 <UART_SetConfig+0x2d8>)
 8007070:	4013      	ands	r3, r2
 8007072:	697a      	ldr	r2, [r7, #20]
 8007074:	6812      	ldr	r2, [r2, #0]
 8007076:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007078:	430b      	orrs	r3, r1
 800707a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	68da      	ldr	r2, [r3, #12]
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	430a      	orrs	r2, r1
 8007090:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	699b      	ldr	r3, [r3, #24]
 8007096:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a9f      	ldr	r2, [pc, #636]	@ (800731c <UART_SetConfig+0x2dc>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d004      	beq.n	80070ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	6a1b      	ldr	r3, [r3, #32]
 80070a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070a8:	4313      	orrs	r3, r2
 80070aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80070b6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80070ba:	697a      	ldr	r2, [r7, #20]
 80070bc:	6812      	ldr	r2, [r2, #0]
 80070be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80070c0:	430b      	orrs	r3, r1
 80070c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ca:	f023 010f 	bic.w	r1, r3, #15
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	430a      	orrs	r2, r1
 80070d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a90      	ldr	r2, [pc, #576]	@ (8007320 <UART_SetConfig+0x2e0>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d125      	bne.n	8007130 <UART_SetConfig+0xf0>
 80070e4:	4b8f      	ldr	r3, [pc, #572]	@ (8007324 <UART_SetConfig+0x2e4>)
 80070e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070ea:	f003 0303 	and.w	r3, r3, #3
 80070ee:	2b03      	cmp	r3, #3
 80070f0:	d81a      	bhi.n	8007128 <UART_SetConfig+0xe8>
 80070f2:	a201      	add	r2, pc, #4	@ (adr r2, 80070f8 <UART_SetConfig+0xb8>)
 80070f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f8:	08007109 	.word	0x08007109
 80070fc:	08007119 	.word	0x08007119
 8007100:	08007111 	.word	0x08007111
 8007104:	08007121 	.word	0x08007121
 8007108:	2301      	movs	r3, #1
 800710a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800710e:	e116      	b.n	800733e <UART_SetConfig+0x2fe>
 8007110:	2302      	movs	r3, #2
 8007112:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007116:	e112      	b.n	800733e <UART_SetConfig+0x2fe>
 8007118:	2304      	movs	r3, #4
 800711a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800711e:	e10e      	b.n	800733e <UART_SetConfig+0x2fe>
 8007120:	2308      	movs	r3, #8
 8007122:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007126:	e10a      	b.n	800733e <UART_SetConfig+0x2fe>
 8007128:	2310      	movs	r3, #16
 800712a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800712e:	e106      	b.n	800733e <UART_SetConfig+0x2fe>
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a7c      	ldr	r2, [pc, #496]	@ (8007328 <UART_SetConfig+0x2e8>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d138      	bne.n	80071ac <UART_SetConfig+0x16c>
 800713a:	4b7a      	ldr	r3, [pc, #488]	@ (8007324 <UART_SetConfig+0x2e4>)
 800713c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007140:	f003 030c 	and.w	r3, r3, #12
 8007144:	2b0c      	cmp	r3, #12
 8007146:	d82d      	bhi.n	80071a4 <UART_SetConfig+0x164>
 8007148:	a201      	add	r2, pc, #4	@ (adr r2, 8007150 <UART_SetConfig+0x110>)
 800714a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800714e:	bf00      	nop
 8007150:	08007185 	.word	0x08007185
 8007154:	080071a5 	.word	0x080071a5
 8007158:	080071a5 	.word	0x080071a5
 800715c:	080071a5 	.word	0x080071a5
 8007160:	08007195 	.word	0x08007195
 8007164:	080071a5 	.word	0x080071a5
 8007168:	080071a5 	.word	0x080071a5
 800716c:	080071a5 	.word	0x080071a5
 8007170:	0800718d 	.word	0x0800718d
 8007174:	080071a5 	.word	0x080071a5
 8007178:	080071a5 	.word	0x080071a5
 800717c:	080071a5 	.word	0x080071a5
 8007180:	0800719d 	.word	0x0800719d
 8007184:	2300      	movs	r3, #0
 8007186:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800718a:	e0d8      	b.n	800733e <UART_SetConfig+0x2fe>
 800718c:	2302      	movs	r3, #2
 800718e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007192:	e0d4      	b.n	800733e <UART_SetConfig+0x2fe>
 8007194:	2304      	movs	r3, #4
 8007196:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800719a:	e0d0      	b.n	800733e <UART_SetConfig+0x2fe>
 800719c:	2308      	movs	r3, #8
 800719e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071a2:	e0cc      	b.n	800733e <UART_SetConfig+0x2fe>
 80071a4:	2310      	movs	r3, #16
 80071a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071aa:	e0c8      	b.n	800733e <UART_SetConfig+0x2fe>
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a5e      	ldr	r2, [pc, #376]	@ (800732c <UART_SetConfig+0x2ec>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d125      	bne.n	8007202 <UART_SetConfig+0x1c2>
 80071b6:	4b5b      	ldr	r3, [pc, #364]	@ (8007324 <UART_SetConfig+0x2e4>)
 80071b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071bc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80071c0:	2b30      	cmp	r3, #48	@ 0x30
 80071c2:	d016      	beq.n	80071f2 <UART_SetConfig+0x1b2>
 80071c4:	2b30      	cmp	r3, #48	@ 0x30
 80071c6:	d818      	bhi.n	80071fa <UART_SetConfig+0x1ba>
 80071c8:	2b20      	cmp	r3, #32
 80071ca:	d00a      	beq.n	80071e2 <UART_SetConfig+0x1a2>
 80071cc:	2b20      	cmp	r3, #32
 80071ce:	d814      	bhi.n	80071fa <UART_SetConfig+0x1ba>
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d002      	beq.n	80071da <UART_SetConfig+0x19a>
 80071d4:	2b10      	cmp	r3, #16
 80071d6:	d008      	beq.n	80071ea <UART_SetConfig+0x1aa>
 80071d8:	e00f      	b.n	80071fa <UART_SetConfig+0x1ba>
 80071da:	2300      	movs	r3, #0
 80071dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071e0:	e0ad      	b.n	800733e <UART_SetConfig+0x2fe>
 80071e2:	2302      	movs	r3, #2
 80071e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071e8:	e0a9      	b.n	800733e <UART_SetConfig+0x2fe>
 80071ea:	2304      	movs	r3, #4
 80071ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071f0:	e0a5      	b.n	800733e <UART_SetConfig+0x2fe>
 80071f2:	2308      	movs	r3, #8
 80071f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071f8:	e0a1      	b.n	800733e <UART_SetConfig+0x2fe>
 80071fa:	2310      	movs	r3, #16
 80071fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007200:	e09d      	b.n	800733e <UART_SetConfig+0x2fe>
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a4a      	ldr	r2, [pc, #296]	@ (8007330 <UART_SetConfig+0x2f0>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d125      	bne.n	8007258 <UART_SetConfig+0x218>
 800720c:	4b45      	ldr	r3, [pc, #276]	@ (8007324 <UART_SetConfig+0x2e4>)
 800720e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007212:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007216:	2bc0      	cmp	r3, #192	@ 0xc0
 8007218:	d016      	beq.n	8007248 <UART_SetConfig+0x208>
 800721a:	2bc0      	cmp	r3, #192	@ 0xc0
 800721c:	d818      	bhi.n	8007250 <UART_SetConfig+0x210>
 800721e:	2b80      	cmp	r3, #128	@ 0x80
 8007220:	d00a      	beq.n	8007238 <UART_SetConfig+0x1f8>
 8007222:	2b80      	cmp	r3, #128	@ 0x80
 8007224:	d814      	bhi.n	8007250 <UART_SetConfig+0x210>
 8007226:	2b00      	cmp	r3, #0
 8007228:	d002      	beq.n	8007230 <UART_SetConfig+0x1f0>
 800722a:	2b40      	cmp	r3, #64	@ 0x40
 800722c:	d008      	beq.n	8007240 <UART_SetConfig+0x200>
 800722e:	e00f      	b.n	8007250 <UART_SetConfig+0x210>
 8007230:	2300      	movs	r3, #0
 8007232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007236:	e082      	b.n	800733e <UART_SetConfig+0x2fe>
 8007238:	2302      	movs	r3, #2
 800723a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800723e:	e07e      	b.n	800733e <UART_SetConfig+0x2fe>
 8007240:	2304      	movs	r3, #4
 8007242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007246:	e07a      	b.n	800733e <UART_SetConfig+0x2fe>
 8007248:	2308      	movs	r3, #8
 800724a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800724e:	e076      	b.n	800733e <UART_SetConfig+0x2fe>
 8007250:	2310      	movs	r3, #16
 8007252:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007256:	e072      	b.n	800733e <UART_SetConfig+0x2fe>
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a35      	ldr	r2, [pc, #212]	@ (8007334 <UART_SetConfig+0x2f4>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d12a      	bne.n	80072b8 <UART_SetConfig+0x278>
 8007262:	4b30      	ldr	r3, [pc, #192]	@ (8007324 <UART_SetConfig+0x2e4>)
 8007264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007268:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800726c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007270:	d01a      	beq.n	80072a8 <UART_SetConfig+0x268>
 8007272:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007276:	d81b      	bhi.n	80072b0 <UART_SetConfig+0x270>
 8007278:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800727c:	d00c      	beq.n	8007298 <UART_SetConfig+0x258>
 800727e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007282:	d815      	bhi.n	80072b0 <UART_SetConfig+0x270>
 8007284:	2b00      	cmp	r3, #0
 8007286:	d003      	beq.n	8007290 <UART_SetConfig+0x250>
 8007288:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800728c:	d008      	beq.n	80072a0 <UART_SetConfig+0x260>
 800728e:	e00f      	b.n	80072b0 <UART_SetConfig+0x270>
 8007290:	2300      	movs	r3, #0
 8007292:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007296:	e052      	b.n	800733e <UART_SetConfig+0x2fe>
 8007298:	2302      	movs	r3, #2
 800729a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800729e:	e04e      	b.n	800733e <UART_SetConfig+0x2fe>
 80072a0:	2304      	movs	r3, #4
 80072a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072a6:	e04a      	b.n	800733e <UART_SetConfig+0x2fe>
 80072a8:	2308      	movs	r3, #8
 80072aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072ae:	e046      	b.n	800733e <UART_SetConfig+0x2fe>
 80072b0:	2310      	movs	r3, #16
 80072b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072b6:	e042      	b.n	800733e <UART_SetConfig+0x2fe>
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a17      	ldr	r2, [pc, #92]	@ (800731c <UART_SetConfig+0x2dc>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d13a      	bne.n	8007338 <UART_SetConfig+0x2f8>
 80072c2:	4b18      	ldr	r3, [pc, #96]	@ (8007324 <UART_SetConfig+0x2e4>)
 80072c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80072cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80072d0:	d01a      	beq.n	8007308 <UART_SetConfig+0x2c8>
 80072d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80072d6:	d81b      	bhi.n	8007310 <UART_SetConfig+0x2d0>
 80072d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072dc:	d00c      	beq.n	80072f8 <UART_SetConfig+0x2b8>
 80072de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072e2:	d815      	bhi.n	8007310 <UART_SetConfig+0x2d0>
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d003      	beq.n	80072f0 <UART_SetConfig+0x2b0>
 80072e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072ec:	d008      	beq.n	8007300 <UART_SetConfig+0x2c0>
 80072ee:	e00f      	b.n	8007310 <UART_SetConfig+0x2d0>
 80072f0:	2300      	movs	r3, #0
 80072f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072f6:	e022      	b.n	800733e <UART_SetConfig+0x2fe>
 80072f8:	2302      	movs	r3, #2
 80072fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072fe:	e01e      	b.n	800733e <UART_SetConfig+0x2fe>
 8007300:	2304      	movs	r3, #4
 8007302:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007306:	e01a      	b.n	800733e <UART_SetConfig+0x2fe>
 8007308:	2308      	movs	r3, #8
 800730a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800730e:	e016      	b.n	800733e <UART_SetConfig+0x2fe>
 8007310:	2310      	movs	r3, #16
 8007312:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007316:	e012      	b.n	800733e <UART_SetConfig+0x2fe>
 8007318:	cfff69f3 	.word	0xcfff69f3
 800731c:	40008000 	.word	0x40008000
 8007320:	40013800 	.word	0x40013800
 8007324:	40021000 	.word	0x40021000
 8007328:	40004400 	.word	0x40004400
 800732c:	40004800 	.word	0x40004800
 8007330:	40004c00 	.word	0x40004c00
 8007334:	40005000 	.word	0x40005000
 8007338:	2310      	movs	r3, #16
 800733a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4aae      	ldr	r2, [pc, #696]	@ (80075fc <UART_SetConfig+0x5bc>)
 8007344:	4293      	cmp	r3, r2
 8007346:	f040 8097 	bne.w	8007478 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800734a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800734e:	2b08      	cmp	r3, #8
 8007350:	d823      	bhi.n	800739a <UART_SetConfig+0x35a>
 8007352:	a201      	add	r2, pc, #4	@ (adr r2, 8007358 <UART_SetConfig+0x318>)
 8007354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007358:	0800737d 	.word	0x0800737d
 800735c:	0800739b 	.word	0x0800739b
 8007360:	08007385 	.word	0x08007385
 8007364:	0800739b 	.word	0x0800739b
 8007368:	0800738b 	.word	0x0800738b
 800736c:	0800739b 	.word	0x0800739b
 8007370:	0800739b 	.word	0x0800739b
 8007374:	0800739b 	.word	0x0800739b
 8007378:	08007393 	.word	0x08007393
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800737c:	f7fd fa0c 	bl	8004798 <HAL_RCC_GetPCLK1Freq>
 8007380:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007382:	e010      	b.n	80073a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007384:	4b9e      	ldr	r3, [pc, #632]	@ (8007600 <UART_SetConfig+0x5c0>)
 8007386:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007388:	e00d      	b.n	80073a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800738a:	f7fd f997 	bl	80046bc <HAL_RCC_GetSysClockFreq>
 800738e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007390:	e009      	b.n	80073a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007392:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007396:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007398:	e005      	b.n	80073a6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800739a:	2300      	movs	r3, #0
 800739c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80073a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80073a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	f000 8130 	beq.w	800760e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073b2:	4a94      	ldr	r2, [pc, #592]	@ (8007604 <UART_SetConfig+0x5c4>)
 80073b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073b8:	461a      	mov	r2, r3
 80073ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80073c0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	685a      	ldr	r2, [r3, #4]
 80073c6:	4613      	mov	r3, r2
 80073c8:	005b      	lsls	r3, r3, #1
 80073ca:	4413      	add	r3, r2
 80073cc:	69ba      	ldr	r2, [r7, #24]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d305      	bcc.n	80073de <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073d8:	69ba      	ldr	r2, [r7, #24]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d903      	bls.n	80073e6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80073e4:	e113      	b.n	800760e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e8:	2200      	movs	r2, #0
 80073ea:	60bb      	str	r3, [r7, #8]
 80073ec:	60fa      	str	r2, [r7, #12]
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073f2:	4a84      	ldr	r2, [pc, #528]	@ (8007604 <UART_SetConfig+0x5c4>)
 80073f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	2200      	movs	r2, #0
 80073fc:	603b      	str	r3, [r7, #0]
 80073fe:	607a      	str	r2, [r7, #4]
 8007400:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007404:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007408:	f7f9 f92e 	bl	8000668 <__aeabi_uldivmod>
 800740c:	4602      	mov	r2, r0
 800740e:	460b      	mov	r3, r1
 8007410:	4610      	mov	r0, r2
 8007412:	4619      	mov	r1, r3
 8007414:	f04f 0200 	mov.w	r2, #0
 8007418:	f04f 0300 	mov.w	r3, #0
 800741c:	020b      	lsls	r3, r1, #8
 800741e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007422:	0202      	lsls	r2, r0, #8
 8007424:	6979      	ldr	r1, [r7, #20]
 8007426:	6849      	ldr	r1, [r1, #4]
 8007428:	0849      	lsrs	r1, r1, #1
 800742a:	2000      	movs	r0, #0
 800742c:	460c      	mov	r4, r1
 800742e:	4605      	mov	r5, r0
 8007430:	eb12 0804 	adds.w	r8, r2, r4
 8007434:	eb43 0905 	adc.w	r9, r3, r5
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	469a      	mov	sl, r3
 8007440:	4693      	mov	fp, r2
 8007442:	4652      	mov	r2, sl
 8007444:	465b      	mov	r3, fp
 8007446:	4640      	mov	r0, r8
 8007448:	4649      	mov	r1, r9
 800744a:	f7f9 f90d 	bl	8000668 <__aeabi_uldivmod>
 800744e:	4602      	mov	r2, r0
 8007450:	460b      	mov	r3, r1
 8007452:	4613      	mov	r3, r2
 8007454:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007456:	6a3b      	ldr	r3, [r7, #32]
 8007458:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800745c:	d308      	bcc.n	8007470 <UART_SetConfig+0x430>
 800745e:	6a3b      	ldr	r3, [r7, #32]
 8007460:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007464:	d204      	bcs.n	8007470 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	6a3a      	ldr	r2, [r7, #32]
 800746c:	60da      	str	r2, [r3, #12]
 800746e:	e0ce      	b.n	800760e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007476:	e0ca      	b.n	800760e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	69db      	ldr	r3, [r3, #28]
 800747c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007480:	d166      	bne.n	8007550 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007482:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007486:	2b08      	cmp	r3, #8
 8007488:	d827      	bhi.n	80074da <UART_SetConfig+0x49a>
 800748a:	a201      	add	r2, pc, #4	@ (adr r2, 8007490 <UART_SetConfig+0x450>)
 800748c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007490:	080074b5 	.word	0x080074b5
 8007494:	080074bd 	.word	0x080074bd
 8007498:	080074c5 	.word	0x080074c5
 800749c:	080074db 	.word	0x080074db
 80074a0:	080074cb 	.word	0x080074cb
 80074a4:	080074db 	.word	0x080074db
 80074a8:	080074db 	.word	0x080074db
 80074ac:	080074db 	.word	0x080074db
 80074b0:	080074d3 	.word	0x080074d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074b4:	f7fd f970 	bl	8004798 <HAL_RCC_GetPCLK1Freq>
 80074b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074ba:	e014      	b.n	80074e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074bc:	f7fd f982 	bl	80047c4 <HAL_RCC_GetPCLK2Freq>
 80074c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074c2:	e010      	b.n	80074e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074c4:	4b4e      	ldr	r3, [pc, #312]	@ (8007600 <UART_SetConfig+0x5c0>)
 80074c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80074c8:	e00d      	b.n	80074e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074ca:	f7fd f8f7 	bl	80046bc <HAL_RCC_GetSysClockFreq>
 80074ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074d0:	e009      	b.n	80074e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80074d8:	e005      	b.n	80074e6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80074da:	2300      	movs	r3, #0
 80074dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80074e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	f000 8090 	beq.w	800760e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074f2:	4a44      	ldr	r2, [pc, #272]	@ (8007604 <UART_SetConfig+0x5c4>)
 80074f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074f8:	461a      	mov	r2, r3
 80074fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007500:	005a      	lsls	r2, r3, #1
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	085b      	lsrs	r3, r3, #1
 8007508:	441a      	add	r2, r3
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007512:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007514:	6a3b      	ldr	r3, [r7, #32]
 8007516:	2b0f      	cmp	r3, #15
 8007518:	d916      	bls.n	8007548 <UART_SetConfig+0x508>
 800751a:	6a3b      	ldr	r3, [r7, #32]
 800751c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007520:	d212      	bcs.n	8007548 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007522:	6a3b      	ldr	r3, [r7, #32]
 8007524:	b29b      	uxth	r3, r3
 8007526:	f023 030f 	bic.w	r3, r3, #15
 800752a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800752c:	6a3b      	ldr	r3, [r7, #32]
 800752e:	085b      	lsrs	r3, r3, #1
 8007530:	b29b      	uxth	r3, r3
 8007532:	f003 0307 	and.w	r3, r3, #7
 8007536:	b29a      	uxth	r2, r3
 8007538:	8bfb      	ldrh	r3, [r7, #30]
 800753a:	4313      	orrs	r3, r2
 800753c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	8bfa      	ldrh	r2, [r7, #30]
 8007544:	60da      	str	r2, [r3, #12]
 8007546:	e062      	b.n	800760e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800754e:	e05e      	b.n	800760e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007550:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007554:	2b08      	cmp	r3, #8
 8007556:	d828      	bhi.n	80075aa <UART_SetConfig+0x56a>
 8007558:	a201      	add	r2, pc, #4	@ (adr r2, 8007560 <UART_SetConfig+0x520>)
 800755a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800755e:	bf00      	nop
 8007560:	08007585 	.word	0x08007585
 8007564:	0800758d 	.word	0x0800758d
 8007568:	08007595 	.word	0x08007595
 800756c:	080075ab 	.word	0x080075ab
 8007570:	0800759b 	.word	0x0800759b
 8007574:	080075ab 	.word	0x080075ab
 8007578:	080075ab 	.word	0x080075ab
 800757c:	080075ab 	.word	0x080075ab
 8007580:	080075a3 	.word	0x080075a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007584:	f7fd f908 	bl	8004798 <HAL_RCC_GetPCLK1Freq>
 8007588:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800758a:	e014      	b.n	80075b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800758c:	f7fd f91a 	bl	80047c4 <HAL_RCC_GetPCLK2Freq>
 8007590:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007592:	e010      	b.n	80075b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007594:	4b1a      	ldr	r3, [pc, #104]	@ (8007600 <UART_SetConfig+0x5c0>)
 8007596:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007598:	e00d      	b.n	80075b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800759a:	f7fd f88f 	bl	80046bc <HAL_RCC_GetSysClockFreq>
 800759e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80075a0:	e009      	b.n	80075b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80075a8:	e005      	b.n	80075b6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80075aa:	2300      	movs	r3, #0
 80075ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80075b4:	bf00      	nop
    }

    if (pclk != 0U)
 80075b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d028      	beq.n	800760e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075c0:	4a10      	ldr	r2, [pc, #64]	@ (8007604 <UART_SetConfig+0x5c4>)
 80075c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075c6:	461a      	mov	r2, r3
 80075c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	085b      	lsrs	r3, r3, #1
 80075d4:	441a      	add	r2, r3
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	fbb2 f3f3 	udiv	r3, r2, r3
 80075de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075e0:	6a3b      	ldr	r3, [r7, #32]
 80075e2:	2b0f      	cmp	r3, #15
 80075e4:	d910      	bls.n	8007608 <UART_SetConfig+0x5c8>
 80075e6:	6a3b      	ldr	r3, [r7, #32]
 80075e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075ec:	d20c      	bcs.n	8007608 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80075ee:	6a3b      	ldr	r3, [r7, #32]
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	60da      	str	r2, [r3, #12]
 80075f8:	e009      	b.n	800760e <UART_SetConfig+0x5ce>
 80075fa:	bf00      	nop
 80075fc:	40008000 	.word	0x40008000
 8007600:	00f42400 	.word	0x00f42400
 8007604:	08009e08 	.word	0x08009e08
      }
      else
      {
        ret = HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	2201      	movs	r2, #1
 8007612:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	2201      	movs	r2, #1
 800761a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	2200      	movs	r2, #0
 8007622:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	2200      	movs	r2, #0
 8007628:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 800762a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800762e:	4618      	mov	r0, r3
 8007630:	3730      	adds	r7, #48	@ 0x30
 8007632:	46bd      	mov	sp, r7
 8007634:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007638 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007644:	f003 0301 	and.w	r3, r3, #1
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00a      	beq.n	8007662 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	430a      	orrs	r2, r1
 8007660:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007666:	f003 0302 	and.w	r3, r3, #2
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00a      	beq.n	8007684 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	430a      	orrs	r2, r1
 8007682:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007688:	f003 0304 	and.w	r3, r3, #4
 800768c:	2b00      	cmp	r3, #0
 800768e:	d00a      	beq.n	80076a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	430a      	orrs	r2, r1
 80076a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076aa:	f003 0308 	and.w	r3, r3, #8
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00a      	beq.n	80076c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	430a      	orrs	r2, r1
 80076c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076cc:	f003 0310 	and.w	r3, r3, #16
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d00a      	beq.n	80076ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	430a      	orrs	r2, r1
 80076e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ee:	f003 0320 	and.w	r3, r3, #32
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00a      	beq.n	800770c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	430a      	orrs	r2, r1
 800770a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007714:	2b00      	cmp	r3, #0
 8007716:	d01a      	beq.n	800774e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	430a      	orrs	r2, r1
 800772c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007732:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007736:	d10a      	bne.n	800774e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	430a      	orrs	r2, r1
 800774c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007756:	2b00      	cmp	r3, #0
 8007758:	d00a      	beq.n	8007770 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	430a      	orrs	r2, r1
 800776e:	605a      	str	r2, [r3, #4]
  }
}
 8007770:	bf00      	nop
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b086      	sub	sp, #24
 8007780:	af02      	add	r7, sp, #8
 8007782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800778c:	f7fa fb6a 	bl	8001e64 <HAL_GetTick>
 8007790:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f003 0308 	and.w	r3, r3, #8
 800779c:	2b08      	cmp	r3, #8
 800779e:	d10e      	bne.n	80077be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80077a4:	9300      	str	r3, [sp, #0]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 f82f 	bl	8007812 <UART_WaitOnFlagUntilTimeout>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d001      	beq.n	80077be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077ba:	2303      	movs	r3, #3
 80077bc:	e025      	b.n	800780a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f003 0304 	and.w	r3, r3, #4
 80077c8:	2b04      	cmp	r3, #4
 80077ca:	d10e      	bne.n	80077ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80077d0:	9300      	str	r3, [sp, #0]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 f819 	bl	8007812 <UART_WaitOnFlagUntilTimeout>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d001      	beq.n	80077ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077e6:	2303      	movs	r3, #3
 80077e8:	e00f      	b.n	800780a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2220      	movs	r2, #32
 80077ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2220      	movs	r2, #32
 80077f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8007808:	2300      	movs	r3, #0
}
 800780a:	4618      	mov	r0, r3
 800780c:	3710      	adds	r7, #16
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}

08007812 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007812:	b580      	push	{r7, lr}
 8007814:	b09c      	sub	sp, #112	@ 0x70
 8007816:	af00      	add	r7, sp, #0
 8007818:	60f8      	str	r0, [r7, #12]
 800781a:	60b9      	str	r1, [r7, #8]
 800781c:	603b      	str	r3, [r7, #0]
 800781e:	4613      	mov	r3, r2
 8007820:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007822:	e0a9      	b.n	8007978 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007824:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800782a:	f000 80a5 	beq.w	8007978 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800782e:	f7fa fb19 	bl	8001e64 <HAL_GetTick>
 8007832:	4602      	mov	r2, r0
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	1ad3      	subs	r3, r2, r3
 8007838:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800783a:	429a      	cmp	r2, r3
 800783c:	d302      	bcc.n	8007844 <UART_WaitOnFlagUntilTimeout+0x32>
 800783e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007840:	2b00      	cmp	r3, #0
 8007842:	d140      	bne.n	80078c6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800784c:	e853 3f00 	ldrex	r3, [r3]
 8007850:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007852:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007854:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8007858:	667b      	str	r3, [r7, #100]	@ 0x64
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	461a      	mov	r2, r3
 8007860:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007862:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007864:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007866:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007868:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800786a:	e841 2300 	strex	r3, r2, [r1]
 800786e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007870:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007872:	2b00      	cmp	r3, #0
 8007874:	d1e6      	bne.n	8007844 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	3308      	adds	r3, #8
 800787c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007880:	e853 3f00 	ldrex	r3, [r3]
 8007884:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007888:	f023 0301 	bic.w	r3, r3, #1
 800788c:	663b      	str	r3, [r7, #96]	@ 0x60
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	3308      	adds	r3, #8
 8007894:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007896:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007898:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800789c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800789e:	e841 2300 	strex	r3, r2, [r1]
 80078a2:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80078a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d1e5      	bne.n	8007876 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2220      	movs	r2, #32
 80078ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2220      	movs	r2, #32
 80078b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2200      	movs	r2, #0
 80078be:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80078c2:	2303      	movs	r3, #3
 80078c4:	e069      	b.n	800799a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f003 0304 	and.w	r3, r3, #4
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d051      	beq.n	8007978 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	69db      	ldr	r3, [r3, #28]
 80078da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80078de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078e2:	d149      	bne.n	8007978 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80078ec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f6:	e853 3f00 	ldrex	r3, [r3]
 80078fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80078fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078fe:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8007902:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	461a      	mov	r2, r3
 800790a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800790c:	637b      	str	r3, [r7, #52]	@ 0x34
 800790e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007910:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007912:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007914:	e841 2300 	strex	r3, r2, [r1]
 8007918:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800791a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800791c:	2b00      	cmp	r3, #0
 800791e:	d1e6      	bne.n	80078ee <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	3308      	adds	r3, #8
 8007926:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	e853 3f00 	ldrex	r3, [r3]
 800792e:	613b      	str	r3, [r7, #16]
   return(result);
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	f023 0301 	bic.w	r3, r3, #1
 8007936:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	3308      	adds	r3, #8
 800793e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007940:	623a      	str	r2, [r7, #32]
 8007942:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007944:	69f9      	ldr	r1, [r7, #28]
 8007946:	6a3a      	ldr	r2, [r7, #32]
 8007948:	e841 2300 	strex	r3, r2, [r1]
 800794c:	61bb      	str	r3, [r7, #24]
   return(result);
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d1e5      	bne.n	8007920 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2220      	movs	r2, #32
 8007958:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2220      	movs	r2, #32
 8007960:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2220      	movs	r2, #32
 8007968:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2200      	movs	r2, #0
 8007970:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007974:	2303      	movs	r3, #3
 8007976:	e010      	b.n	800799a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	69da      	ldr	r2, [r3, #28]
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	4013      	ands	r3, r2
 8007982:	68ba      	ldr	r2, [r7, #8]
 8007984:	429a      	cmp	r2, r3
 8007986:	bf0c      	ite	eq
 8007988:	2301      	moveq	r3, #1
 800798a:	2300      	movne	r3, #0
 800798c:	b2db      	uxtb	r3, r3
 800798e:	461a      	mov	r2, r3
 8007990:	79fb      	ldrb	r3, [r7, #7]
 8007992:	429a      	cmp	r2, r3
 8007994:	f43f af46 	beq.w	8007824 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3770      	adds	r7, #112	@ 0x70
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
	...

080079a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b0a3      	sub	sp, #140	@ 0x8c
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	60b9      	str	r1, [r7, #8]
 80079ae:	4613      	mov	r3, r2
 80079b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	68ba      	ldr	r2, [r7, #8]
 80079b6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	88fa      	ldrh	r2, [r7, #6]
 80079bc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	88fa      	ldrh	r2, [r7, #6]
 80079c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2200      	movs	r2, #0
 80079cc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079d6:	d10e      	bne.n	80079f6 <UART_Start_Receive_IT+0x52>
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	691b      	ldr	r3, [r3, #16]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d105      	bne.n	80079ec <UART_Start_Receive_IT+0x48>
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80079e6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80079ea:	e02d      	b.n	8007a48 <UART_Start_Receive_IT+0xa4>
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	22ff      	movs	r2, #255	@ 0xff
 80079f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80079f4:	e028      	b.n	8007a48 <UART_Start_Receive_IT+0xa4>
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d10d      	bne.n	8007a1a <UART_Start_Receive_IT+0x76>
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d104      	bne.n	8007a10 <UART_Start_Receive_IT+0x6c>
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	22ff      	movs	r2, #255	@ 0xff
 8007a0a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007a0e:	e01b      	b.n	8007a48 <UART_Start_Receive_IT+0xa4>
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	227f      	movs	r2, #127	@ 0x7f
 8007a14:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007a18:	e016      	b.n	8007a48 <UART_Start_Receive_IT+0xa4>
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a22:	d10d      	bne.n	8007a40 <UART_Start_Receive_IT+0x9c>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	691b      	ldr	r3, [r3, #16]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d104      	bne.n	8007a36 <UART_Start_Receive_IT+0x92>
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	227f      	movs	r2, #127	@ 0x7f
 8007a30:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007a34:	e008      	b.n	8007a48 <UART_Start_Receive_IT+0xa4>
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	223f      	movs	r2, #63	@ 0x3f
 8007a3a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007a3e:	e003      	b.n	8007a48 <UART_Start_Receive_IT+0xa4>
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2222      	movs	r2, #34	@ 0x22
 8007a54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	3308      	adds	r3, #8
 8007a5e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a62:	e853 3f00 	ldrex	r3, [r3]
 8007a66:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007a68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a6a:	f043 0301 	orr.w	r3, r3, #1
 8007a6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	3308      	adds	r3, #8
 8007a78:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007a7c:	673a      	str	r2, [r7, #112]	@ 0x70
 8007a7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a80:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8007a82:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007a84:	e841 2300 	strex	r3, r2, [r1]
 8007a88:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8007a8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d1e3      	bne.n	8007a58 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a98:	d153      	bne.n	8007b42 <UART_Start_Receive_IT+0x19e>
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007aa0:	88fa      	ldrh	r2, [r7, #6]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d34d      	bcc.n	8007b42 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007aae:	d107      	bne.n	8007ac0 <UART_Start_Receive_IT+0x11c>
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d103      	bne.n	8007ac0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	4a4b      	ldr	r2, [pc, #300]	@ (8007be8 <UART_Start_Receive_IT+0x244>)
 8007abc:	671a      	str	r2, [r3, #112]	@ 0x70
 8007abe:	e002      	b.n	8007ac6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	4a4a      	ldr	r2, [pc, #296]	@ (8007bec <UART_Start_Receive_IT+0x248>)
 8007ac4:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	691b      	ldr	r3, [r3, #16]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d01a      	beq.n	8007b0c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007adc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ade:	e853 3f00 	ldrex	r3, [r3]
 8007ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007ae4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ae6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007aea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	461a      	mov	r2, r3
 8007af4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007af8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007afa:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007afe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007b00:	e841 2300 	strex	r3, r2, [r1]
 8007b04:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007b06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d1e4      	bne.n	8007ad6 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	3308      	adds	r3, #8
 8007b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b16:	e853 3f00 	ldrex	r3, [r3]
 8007b1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b22:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	3308      	adds	r3, #8
 8007b2a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007b2c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007b2e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b30:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007b32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b34:	e841 2300 	strex	r3, r2, [r1]
 8007b38:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007b3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d1e5      	bne.n	8007b0c <UART_Start_Receive_IT+0x168>
 8007b40:	e04a      	b.n	8007bd8 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b4a:	d107      	bne.n	8007b5c <UART_Start_Receive_IT+0x1b8>
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	691b      	ldr	r3, [r3, #16]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d103      	bne.n	8007b5c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	4a26      	ldr	r2, [pc, #152]	@ (8007bf0 <UART_Start_Receive_IT+0x24c>)
 8007b58:	671a      	str	r2, [r3, #112]	@ 0x70
 8007b5a:	e002      	b.n	8007b62 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	4a25      	ldr	r2, [pc, #148]	@ (8007bf4 <UART_Start_Receive_IT+0x250>)
 8007b60:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	691b      	ldr	r3, [r3, #16]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d019      	beq.n	8007ba6 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b7a:	e853 3f00 	ldrex	r3, [r3]
 8007b7e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b82:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007b86:	677b      	str	r3, [r7, #116]	@ 0x74
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b90:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b92:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b94:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007b96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007b98:	e841 2300 	strex	r3, r2, [r1]
 8007b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d1e6      	bne.n	8007b72 <UART_Start_Receive_IT+0x1ce>
 8007ba4:	e018      	b.n	8007bd8 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	e853 3f00 	ldrex	r3, [r3]
 8007bb2:	613b      	str	r3, [r7, #16]
   return(result);
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	f043 0320 	orr.w	r3, r3, #32
 8007bba:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007bc4:	623b      	str	r3, [r7, #32]
 8007bc6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc8:	69f9      	ldr	r1, [r7, #28]
 8007bca:	6a3a      	ldr	r2, [r7, #32]
 8007bcc:	e841 2300 	strex	r3, r2, [r1]
 8007bd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bd2:	69bb      	ldr	r3, [r7, #24]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d1e6      	bne.n	8007ba6 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	378c      	adds	r7, #140	@ 0x8c
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	08008301 	.word	0x08008301
 8007bec:	08008009 	.word	0x08008009
 8007bf0:	08007ea7 	.word	0x08007ea7
 8007bf4:	08007d47 	.word	0x08007d47

08007bf8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b095      	sub	sp, #84	@ 0x54
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c08:	e853 3f00 	ldrex	r3, [r3]
 8007c0c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c1e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c20:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c22:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007c24:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c26:	e841 2300 	strex	r3, r2, [r1]
 8007c2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d1e6      	bne.n	8007c00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	3308      	adds	r3, #8
 8007c38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c3a:	6a3b      	ldr	r3, [r7, #32]
 8007c3c:	e853 3f00 	ldrex	r3, [r3]
 8007c40:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c42:	69fb      	ldr	r3, [r7, #28]
 8007c44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c48:	f023 0301 	bic.w	r3, r3, #1
 8007c4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	3308      	adds	r3, #8
 8007c54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007c58:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c5e:	e841 2300 	strex	r3, r2, [r1]
 8007c62:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d1e3      	bne.n	8007c32 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d118      	bne.n	8007ca4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	e853 3f00 	ldrex	r3, [r3]
 8007c7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	f023 0310 	bic.w	r3, r3, #16
 8007c86:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c90:	61bb      	str	r3, [r7, #24]
 8007c92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c94:	6979      	ldr	r1, [r7, #20]
 8007c96:	69ba      	ldr	r2, [r7, #24]
 8007c98:	e841 2300 	strex	r3, r2, [r1]
 8007c9c:	613b      	str	r3, [r7, #16]
   return(result);
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d1e6      	bne.n	8007c72 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2220      	movs	r2, #32
 8007ca8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8007cb8:	bf00      	nop
 8007cba:	3754      	adds	r7, #84	@ 0x54
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cd0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ce2:	68f8      	ldr	r0, [r7, #12]
 8007ce4:	f7ff f996 	bl	8007014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ce8:	bf00      	nop
 8007cea:	3710      	adds	r7, #16
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b088      	sub	sp, #32
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	e853 3f00 	ldrex	r3, [r3]
 8007d04:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d0c:	61fb      	str	r3, [r7, #28]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	461a      	mov	r2, r3
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	61bb      	str	r3, [r7, #24]
 8007d18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d1a:	6979      	ldr	r1, [r7, #20]
 8007d1c:	69ba      	ldr	r2, [r7, #24]
 8007d1e:	e841 2300 	strex	r3, r2, [r1]
 8007d22:	613b      	str	r3, [r7, #16]
   return(result);
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d1e6      	bne.n	8007cf8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2220      	movs	r2, #32
 8007d2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	675a      	str	r2, [r3, #116]	@ 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f7ff f961 	bl	8007000 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d3e:	bf00      	nop
 8007d40:	3720      	adds	r7, #32
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}

08007d46 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b096      	sub	sp, #88	@ 0x58
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007d54:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d5e:	2b22      	cmp	r3, #34	@ 0x22
 8007d60:	f040 8095 	bne.w	8007e8e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d6a:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007d6e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8007d72:	b2d9      	uxtb	r1, r3
 8007d74:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007d78:	b2da      	uxtb	r2, r3
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d7e:	400a      	ands	r2, r1
 8007d80:	b2d2      	uxtb	r2, r2
 8007d82:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d88:	1c5a      	adds	r2, r3, #1
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	3b01      	subs	r3, #1
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d178      	bne.n	8007e9e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007db4:	e853 3f00 	ldrex	r3, [r3]
 8007db8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007dba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007dc0:	653b      	str	r3, [r7, #80]	@ 0x50
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007dca:	647b      	str	r3, [r7, #68]	@ 0x44
 8007dcc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007dd0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007dd2:	e841 2300 	strex	r3, r2, [r1]
 8007dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007dd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d1e6      	bne.n	8007dac <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	3308      	adds	r3, #8
 8007de4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de8:	e853 3f00 	ldrex	r3, [r3]
 8007dec:	623b      	str	r3, [r7, #32]
   return(result);
 8007dee:	6a3b      	ldr	r3, [r7, #32]
 8007df0:	f023 0301 	bic.w	r3, r3, #1
 8007df4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	3308      	adds	r3, #8
 8007dfc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007dfe:	633a      	str	r2, [r7, #48]	@ 0x30
 8007e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e06:	e841 2300 	strex	r3, r2, [r1]
 8007e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1e5      	bne.n	8007dde <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2220      	movs	r2, #32
 8007e16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d12e      	bne.n	8007e86 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	e853 3f00 	ldrex	r3, [r3]
 8007e3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f023 0310 	bic.w	r3, r3, #16
 8007e42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	461a      	mov	r2, r3
 8007e4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e4c:	61fb      	str	r3, [r7, #28]
 8007e4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e50:	69b9      	ldr	r1, [r7, #24]
 8007e52:	69fa      	ldr	r2, [r7, #28]
 8007e54:	e841 2300 	strex	r3, r2, [r1]
 8007e58:	617b      	str	r3, [r7, #20]
   return(result);
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d1e6      	bne.n	8007e2e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	69db      	ldr	r3, [r3, #28]
 8007e66:	f003 0310 	and.w	r3, r3, #16
 8007e6a:	2b10      	cmp	r3, #16
 8007e6c:	d103      	bne.n	8007e76 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2210      	movs	r2, #16
 8007e74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f7ff f8d2 	bl	8007028 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e84:	e00b      	b.n	8007e9e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f7f9 ff82 	bl	8001d90 <HAL_UART_RxCpltCallback>
}
 8007e8c:	e007      	b.n	8007e9e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	699a      	ldr	r2, [r3, #24]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f042 0208 	orr.w	r2, r2, #8
 8007e9c:	619a      	str	r2, [r3, #24]
}
 8007e9e:	bf00      	nop
 8007ea0:	3758      	adds	r7, #88	@ 0x58
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b096      	sub	sp, #88	@ 0x58
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007eb4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ebe:	2b22      	cmp	r3, #34	@ 0x22
 8007ec0:	f040 8095 	bne.w	8007fee <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eca:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ed2:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007ed4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8007ed8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007edc:	4013      	ands	r3, r2
 8007ede:	b29a      	uxth	r2, r3
 8007ee0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ee2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ee8:	1c9a      	adds	r2, r3, #2
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	3b01      	subs	r3, #1
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d178      	bne.n	8007ffe <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f14:	e853 3f00 	ldrex	r3, [r3]
 8007f18:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	461a      	mov	r2, r3
 8007f28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f2c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f2e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007f30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f32:	e841 2300 	strex	r3, r2, [r1]
 8007f36:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d1e6      	bne.n	8007f0c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	3308      	adds	r3, #8
 8007f44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f46:	6a3b      	ldr	r3, [r7, #32]
 8007f48:	e853 3f00 	ldrex	r3, [r3]
 8007f4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f4e:	69fb      	ldr	r3, [r7, #28]
 8007f50:	f023 0301 	bic.w	r3, r3, #1
 8007f54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	3308      	adds	r3, #8
 8007f5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f60:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f66:	e841 2300 	strex	r3, r2, [r1]
 8007f6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d1e5      	bne.n	8007f3e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2220      	movs	r2, #32
 8007f76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d12e      	bne.n	8007fe6 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	e853 3f00 	ldrex	r3, [r3]
 8007f9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	f023 0310 	bic.w	r3, r3, #16
 8007fa2:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	461a      	mov	r2, r3
 8007faa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fac:	61bb      	str	r3, [r7, #24]
 8007fae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb0:	6979      	ldr	r1, [r7, #20]
 8007fb2:	69ba      	ldr	r2, [r7, #24]
 8007fb4:	e841 2300 	strex	r3, r2, [r1]
 8007fb8:	613b      	str	r3, [r7, #16]
   return(result);
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d1e6      	bne.n	8007f8e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	69db      	ldr	r3, [r3, #28]
 8007fc6:	f003 0310 	and.w	r3, r3, #16
 8007fca:	2b10      	cmp	r3, #16
 8007fcc:	d103      	bne.n	8007fd6 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2210      	movs	r2, #16
 8007fd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007fdc:	4619      	mov	r1, r3
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f7ff f822 	bl	8007028 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007fe4:	e00b      	b.n	8007ffe <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f7f9 fed2 	bl	8001d90 <HAL_UART_RxCpltCallback>
}
 8007fec:	e007      	b.n	8007ffe <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	699a      	ldr	r2, [r3, #24]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f042 0208 	orr.w	r2, r2, #8
 8007ffc:	619a      	str	r2, [r3, #24]
}
 8007ffe:	bf00      	nop
 8008000:	3758      	adds	r7, #88	@ 0x58
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
	...

08008008 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b0a6      	sub	sp, #152	@ 0x98
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008016:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	69db      	ldr	r3, [r3, #28]
 8008020:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800803e:	2b22      	cmp	r3, #34	@ 0x22
 8008040:	f040 814f 	bne.w	80082e2 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800804a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800804e:	e0f6      	b.n	800823e <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008056:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800805a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800805e:	b2d9      	uxtb	r1, r3
 8008060:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008064:	b2da      	uxtb	r2, r3
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800806a:	400a      	ands	r2, r1
 800806c:	b2d2      	uxtb	r2, r2
 800806e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008074:	1c5a      	adds	r2, r3, #1
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008080:	b29b      	uxth	r3, r3
 8008082:	3b01      	subs	r3, #1
 8008084:	b29a      	uxth	r2, r3
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	69db      	ldr	r3, [r3, #28]
 8008092:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008096:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800809a:	f003 0307 	and.w	r3, r3, #7
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d053      	beq.n	800814a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80080a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80080a6:	f003 0301 	and.w	r3, r3, #1
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d011      	beq.n	80080d2 <UART_RxISR_8BIT_FIFOEN+0xca>
 80080ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d00b      	beq.n	80080d2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	2201      	movs	r2, #1
 80080c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80080c8:	f043 0201 	orr.w	r2, r3, #1
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80080d6:	f003 0302 	and.w	r3, r3, #2
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d011      	beq.n	8008102 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80080de:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80080e2:	f003 0301 	and.w	r3, r3, #1
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d00b      	beq.n	8008102 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	2202      	movs	r2, #2
 80080f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80080f8:	f043 0204 	orr.w	r2, r3, #4
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008102:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008106:	f003 0304 	and.w	r3, r3, #4
 800810a:	2b00      	cmp	r3, #0
 800810c:	d011      	beq.n	8008132 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800810e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008112:	f003 0301 	and.w	r3, r3, #1
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00b      	beq.n	8008132 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	2204      	movs	r2, #4
 8008120:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008128:	f043 0202 	orr.w	r2, r3, #2
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008138:	2b00      	cmp	r3, #0
 800813a:	d006      	beq.n	800814a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f7fe ff69 	bl	8007014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2200      	movs	r2, #0
 8008146:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008150:	b29b      	uxth	r3, r3
 8008152:	2b00      	cmp	r3, #0
 8008154:	d173      	bne.n	800823e <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800815c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800815e:	e853 3f00 	ldrex	r3, [r3]
 8008162:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008164:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008166:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800816a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	461a      	mov	r2, r3
 8008174:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008178:	66bb      	str	r3, [r7, #104]	@ 0x68
 800817a:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800817c:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800817e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008180:	e841 2300 	strex	r3, r2, [r1]
 8008184:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008186:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1e4      	bne.n	8008156 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	3308      	adds	r3, #8
 8008192:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008194:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008196:	e853 3f00 	ldrex	r3, [r3]
 800819a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800819c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800819e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80081a2:	f023 0301 	bic.w	r3, r3, #1
 80081a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	3308      	adds	r3, #8
 80081ae:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80081b0:	657a      	str	r2, [r7, #84]	@ 0x54
 80081b2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80081b6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80081b8:	e841 2300 	strex	r3, r2, [r1]
 80081bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80081be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d1e3      	bne.n	800818c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2220      	movs	r2, #32
 80081c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	d12e      	bne.n	8008238 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081e8:	e853 3f00 	ldrex	r3, [r3]
 80081ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80081ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f0:	f023 0310 	bic.w	r3, r3, #16
 80081f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	461a      	mov	r2, r3
 80081fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80081fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8008200:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008202:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008204:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008206:	e841 2300 	strex	r3, r2, [r1]
 800820a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800820c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800820e:	2b00      	cmp	r3, #0
 8008210:	d1e6      	bne.n	80081e0 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	69db      	ldr	r3, [r3, #28]
 8008218:	f003 0310 	and.w	r3, r3, #16
 800821c:	2b10      	cmp	r3, #16
 800821e:	d103      	bne.n	8008228 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	2210      	movs	r2, #16
 8008226:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800822e:	4619      	mov	r1, r3
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f7fe fef9 	bl	8007028 <HAL_UARTEx_RxEventCallback>
 8008236:	e002      	b.n	800823e <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f7f9 fda9 	bl	8001d90 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800823e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8008242:	2b00      	cmp	r3, #0
 8008244:	d006      	beq.n	8008254 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8008246:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800824a:	f003 0320 	and.w	r3, r3, #32
 800824e:	2b00      	cmp	r3, #0
 8008250:	f47f aefe 	bne.w	8008050 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800825a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800825e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8008262:	2b00      	cmp	r3, #0
 8008264:	d045      	beq.n	80082f2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800826c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008270:	429a      	cmp	r2, r3
 8008272:	d23e      	bcs.n	80082f2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	3308      	adds	r3, #8
 800827a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827c:	6a3b      	ldr	r3, [r7, #32]
 800827e:	e853 3f00 	ldrex	r3, [r3]
 8008282:	61fb      	str	r3, [r7, #28]
   return(result);
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800828a:	673b      	str	r3, [r7, #112]	@ 0x70
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	3308      	adds	r3, #8
 8008292:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008294:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008296:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008298:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800829a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800829c:	e841 2300 	strex	r3, r2, [r1]
 80082a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80082a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d1e5      	bne.n	8008274 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	4a14      	ldr	r2, [pc, #80]	@ (80082fc <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80082ac:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	e853 3f00 	ldrex	r3, [r3]
 80082ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	f043 0320 	orr.w	r3, r3, #32
 80082c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	461a      	mov	r2, r3
 80082ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80082cc:	61bb      	str	r3, [r7, #24]
 80082ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d0:	6979      	ldr	r1, [r7, #20]
 80082d2:	69ba      	ldr	r2, [r7, #24]
 80082d4:	e841 2300 	strex	r3, r2, [r1]
 80082d8:	613b      	str	r3, [r7, #16]
   return(result);
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d1e6      	bne.n	80082ae <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80082e0:	e007      	b.n	80082f2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	699a      	ldr	r2, [r3, #24]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f042 0208 	orr.w	r2, r2, #8
 80082f0:	619a      	str	r2, [r3, #24]
}
 80082f2:	bf00      	nop
 80082f4:	3798      	adds	r7, #152	@ 0x98
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	08007d47 	.word	0x08007d47

08008300 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b0a8      	sub	sp, #160	@ 0xa0
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800830e:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	69db      	ldr	r3, [r3, #28]
 8008318:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008336:	2b22      	cmp	r3, #34	@ 0x22
 8008338:	f040 8153 	bne.w	80085e2 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008342:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008346:	e0fa      	b.n	800853e <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800834e:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008356:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800835a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 800835e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 8008362:	4013      	ands	r3, r2
 8008364:	b29a      	uxth	r2, r3
 8008366:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800836a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008370:	1c9a      	adds	r2, r3, #2
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800837c:	b29b      	uxth	r3, r3
 800837e:	3b01      	subs	r3, #1
 8008380:	b29a      	uxth	r2, r3
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	69db      	ldr	r3, [r3, #28]
 800838e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008392:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008396:	f003 0307 	and.w	r3, r3, #7
 800839a:	2b00      	cmp	r3, #0
 800839c:	d053      	beq.n	8008446 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800839e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80083a2:	f003 0301 	and.w	r3, r3, #1
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d011      	beq.n	80083ce <UART_RxISR_16BIT_FIFOEN+0xce>
 80083aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80083ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d00b      	beq.n	80083ce <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	2201      	movs	r2, #1
 80083bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80083c4:	f043 0201 	orr.w	r2, r3, #1
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80083d2:	f003 0302 	and.w	r3, r3, #2
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d011      	beq.n	80083fe <UART_RxISR_16BIT_FIFOEN+0xfe>
 80083da:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80083de:	f003 0301 	and.w	r3, r3, #1
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d00b      	beq.n	80083fe <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2202      	movs	r2, #2
 80083ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80083f4:	f043 0204 	orr.w	r2, r3, #4
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008402:	f003 0304 	and.w	r3, r3, #4
 8008406:	2b00      	cmp	r3, #0
 8008408:	d011      	beq.n	800842e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800840a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800840e:	f003 0301 	and.w	r3, r3, #1
 8008412:	2b00      	cmp	r3, #0
 8008414:	d00b      	beq.n	800842e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2204      	movs	r2, #4
 800841c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008424:	f043 0202 	orr.w	r2, r3, #2
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008434:	2b00      	cmp	r3, #0
 8008436:	d006      	beq.n	8008446 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f7fe fdeb 	bl	8007014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800844c:	b29b      	uxth	r3, r3
 800844e:	2b00      	cmp	r3, #0
 8008450:	d175      	bne.n	800853e <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008458:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800845a:	e853 3f00 	ldrex	r3, [r3]
 800845e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008460:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008462:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008466:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	461a      	mov	r2, r3
 8008470:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008474:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008476:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008478:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800847a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800847c:	e841 2300 	strex	r3, r2, [r1]
 8008480:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008482:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008484:	2b00      	cmp	r3, #0
 8008486:	d1e4      	bne.n	8008452 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	3308      	adds	r3, #8
 800848e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008490:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008492:	e853 3f00 	ldrex	r3, [r3]
 8008496:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008498:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800849a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800849e:	f023 0301 	bic.w	r3, r3, #1
 80084a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	3308      	adds	r3, #8
 80084ac:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80084b0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80084b2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80084b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80084b8:	e841 2300 	strex	r3, r2, [r1]
 80084bc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80084be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d1e1      	bne.n	8008488 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2220      	movs	r2, #32
 80084c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d12e      	bne.n	8008538 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2200      	movs	r2, #0
 80084de:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084e8:	e853 3f00 	ldrex	r3, [r3]
 80084ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80084ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084f0:	f023 0310 	bic.w	r3, r3, #16
 80084f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	461a      	mov	r2, r3
 80084fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80084fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8008500:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008502:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008504:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008506:	e841 2300 	strex	r3, r2, [r1]
 800850a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800850c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800850e:	2b00      	cmp	r3, #0
 8008510:	d1e6      	bne.n	80084e0 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	69db      	ldr	r3, [r3, #28]
 8008518:	f003 0310 	and.w	r3, r3, #16
 800851c:	2b10      	cmp	r3, #16
 800851e:	d103      	bne.n	8008528 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2210      	movs	r2, #16
 8008526:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800852e:	4619      	mov	r1, r3
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f7fe fd79 	bl	8007028 <HAL_UARTEx_RxEventCallback>
 8008536:	e002      	b.n	800853e <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f7f9 fc29 	bl	8001d90 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800853e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008542:	2b00      	cmp	r3, #0
 8008544:	d006      	beq.n	8008554 <UART_RxISR_16BIT_FIFOEN+0x254>
 8008546:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800854a:	f003 0320 	and.w	r3, r3, #32
 800854e:	2b00      	cmp	r3, #0
 8008550:	f47f aefa 	bne.w	8008348 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800855a:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800855e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8008562:	2b00      	cmp	r3, #0
 8008564:	d045      	beq.n	80085f2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800856c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8008570:	429a      	cmp	r2, r3
 8008572:	d23e      	bcs.n	80085f2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	3308      	adds	r3, #8
 800857a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800857c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800857e:	e853 3f00 	ldrex	r3, [r3]
 8008582:	623b      	str	r3, [r7, #32]
   return(result);
 8008584:	6a3b      	ldr	r3, [r7, #32]
 8008586:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800858a:	677b      	str	r3, [r7, #116]	@ 0x74
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	3308      	adds	r3, #8
 8008592:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8008594:	633a      	str	r2, [r7, #48]	@ 0x30
 8008596:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008598:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800859a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800859c:	e841 2300 	strex	r3, r2, [r1]
 80085a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80085a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d1e5      	bne.n	8008574 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	4a14      	ldr	r2, [pc, #80]	@ (80085fc <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80085ac:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	e853 3f00 	ldrex	r3, [r3]
 80085ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f043 0320 	orr.w	r3, r3, #32
 80085c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	461a      	mov	r2, r3
 80085ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80085cc:	61fb      	str	r3, [r7, #28]
 80085ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d0:	69b9      	ldr	r1, [r7, #24]
 80085d2:	69fa      	ldr	r2, [r7, #28]
 80085d4:	e841 2300 	strex	r3, r2, [r1]
 80085d8:	617b      	str	r3, [r7, #20]
   return(result);
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d1e6      	bne.n	80085ae <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80085e0:	e007      	b.n	80085f2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	699a      	ldr	r2, [r3, #24]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f042 0208 	orr.w	r2, r2, #8
 80085f0:	619a      	str	r2, [r3, #24]
}
 80085f2:	bf00      	nop
 80085f4:	37a0      	adds	r7, #160	@ 0xa0
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	08007ea7 	.word	0x08007ea7

08008600 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008600:	b480      	push	{r7}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008608:	bf00      	nop
 800860a:	370c      	adds	r7, #12
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800861c:	bf00      	nop
 800861e:	370c      	adds	r7, #12
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008630:	bf00      	nop
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800863c:	b480      	push	{r7}
 800863e:	b085      	sub	sp, #20
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800864a:	2b01      	cmp	r3, #1
 800864c:	d101      	bne.n	8008652 <HAL_UARTEx_DisableFifoMode+0x16>
 800864e:	2302      	movs	r3, #2
 8008650:	e027      	b.n	80086a2 <HAL_UARTEx_DisableFifoMode+0x66>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2201      	movs	r2, #1
 8008656:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2224      	movs	r2, #36	@ 0x24
 800865e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f022 0201 	bic.w	r2, r2, #1
 8008678:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008680:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2200      	movs	r2, #0
 8008686:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	68fa      	ldr	r2, [r7, #12]
 800868e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2220      	movs	r2, #32
 8008694:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2200      	movs	r2, #0
 800869c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80086a0:	2300      	movs	r3, #0
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3714      	adds	r7, #20
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr

080086ae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b084      	sub	sp, #16
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
 80086b6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d101      	bne.n	80086c6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80086c2:	2302      	movs	r3, #2
 80086c4:	e02d      	b.n	8008722 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2201      	movs	r2, #1
 80086ca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2224      	movs	r2, #36	@ 0x24
 80086d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f022 0201 	bic.w	r2, r2, #1
 80086ec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	683a      	ldr	r2, [r7, #0]
 80086fe:	430a      	orrs	r2, r1
 8008700:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 f850 	bl	80087a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	68fa      	ldr	r2, [r7, #12]
 800870e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2220      	movs	r2, #32
 8008714:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8008720:	2300      	movs	r3, #0
}
 8008722:	4618      	mov	r0, r3
 8008724:	3710      	adds	r7, #16
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}

0800872a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800872a:	b580      	push	{r7, lr}
 800872c:	b084      	sub	sp, #16
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]
 8008732:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800873a:	2b01      	cmp	r3, #1
 800873c:	d101      	bne.n	8008742 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800873e:	2302      	movs	r3, #2
 8008740:	e02d      	b.n	800879e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2201      	movs	r2, #1
 8008746:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2224      	movs	r2, #36	@ 0x24
 800874e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f022 0201 	bic.w	r2, r2, #1
 8008768:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	683a      	ldr	r2, [r7, #0]
 800877a:	430a      	orrs	r2, r1
 800877c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 f812 	bl	80087a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2220      	movs	r2, #32
 8008790:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800879c:	2300      	movs	r3, #0
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3710      	adds	r7, #16
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
	...

080087a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b085      	sub	sp, #20
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d108      	bne.n	80087ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2201      	movs	r2, #1
 80087bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2201      	movs	r2, #1
 80087c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80087c8:	e031      	b.n	800882e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80087ca:	2308      	movs	r3, #8
 80087cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80087ce:	2308      	movs	r3, #8
 80087d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	0e5b      	lsrs	r3, r3, #25
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	f003 0307 	and.w	r3, r3, #7
 80087e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	0f5b      	lsrs	r3, r3, #29
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	f003 0307 	and.w	r3, r3, #7
 80087f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80087f2:	7bbb      	ldrb	r3, [r7, #14]
 80087f4:	7b3a      	ldrb	r2, [r7, #12]
 80087f6:	4911      	ldr	r1, [pc, #68]	@ (800883c <UARTEx_SetNbDataToProcess+0x94>)
 80087f8:	5c8a      	ldrb	r2, [r1, r2]
 80087fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80087fe:	7b3a      	ldrb	r2, [r7, #12]
 8008800:	490f      	ldr	r1, [pc, #60]	@ (8008840 <UARTEx_SetNbDataToProcess+0x98>)
 8008802:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008804:	fb93 f3f2 	sdiv	r3, r3, r2
 8008808:	b29a      	uxth	r2, r3
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008810:	7bfb      	ldrb	r3, [r7, #15]
 8008812:	7b7a      	ldrb	r2, [r7, #13]
 8008814:	4909      	ldr	r1, [pc, #36]	@ (800883c <UARTEx_SetNbDataToProcess+0x94>)
 8008816:	5c8a      	ldrb	r2, [r1, r2]
 8008818:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800881c:	7b7a      	ldrb	r2, [r7, #13]
 800881e:	4908      	ldr	r1, [pc, #32]	@ (8008840 <UARTEx_SetNbDataToProcess+0x98>)
 8008820:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008822:	fb93 f3f2 	sdiv	r3, r3, r2
 8008826:	b29a      	uxth	r2, r3
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800882e:	bf00      	nop
 8008830:	3714      	adds	r7, #20
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop
 800883c:	08009e20 	.word	0x08009e20
 8008840:	08009e28 	.word	0x08009e28

08008844 <atoi>:
 8008844:	220a      	movs	r2, #10
 8008846:	2100      	movs	r1, #0
 8008848:	f000 b87a 	b.w	8008940 <strtol>

0800884c <_strtol_l.constprop.0>:
 800884c:	2b24      	cmp	r3, #36	@ 0x24
 800884e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008852:	4686      	mov	lr, r0
 8008854:	4690      	mov	r8, r2
 8008856:	d801      	bhi.n	800885c <_strtol_l.constprop.0+0x10>
 8008858:	2b01      	cmp	r3, #1
 800885a:	d106      	bne.n	800886a <_strtol_l.constprop.0+0x1e>
 800885c:	f000 fa5e 	bl	8008d1c <__errno>
 8008860:	2316      	movs	r3, #22
 8008862:	6003      	str	r3, [r0, #0]
 8008864:	2000      	movs	r0, #0
 8008866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800886a:	4834      	ldr	r0, [pc, #208]	@ (800893c <_strtol_l.constprop.0+0xf0>)
 800886c:	460d      	mov	r5, r1
 800886e:	462a      	mov	r2, r5
 8008870:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008874:	5d06      	ldrb	r6, [r0, r4]
 8008876:	f016 0608 	ands.w	r6, r6, #8
 800887a:	d1f8      	bne.n	800886e <_strtol_l.constprop.0+0x22>
 800887c:	2c2d      	cmp	r4, #45	@ 0x2d
 800887e:	d12d      	bne.n	80088dc <_strtol_l.constprop.0+0x90>
 8008880:	782c      	ldrb	r4, [r5, #0]
 8008882:	2601      	movs	r6, #1
 8008884:	1c95      	adds	r5, r2, #2
 8008886:	f033 0210 	bics.w	r2, r3, #16
 800888a:	d109      	bne.n	80088a0 <_strtol_l.constprop.0+0x54>
 800888c:	2c30      	cmp	r4, #48	@ 0x30
 800888e:	d12a      	bne.n	80088e6 <_strtol_l.constprop.0+0x9a>
 8008890:	782a      	ldrb	r2, [r5, #0]
 8008892:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008896:	2a58      	cmp	r2, #88	@ 0x58
 8008898:	d125      	bne.n	80088e6 <_strtol_l.constprop.0+0x9a>
 800889a:	786c      	ldrb	r4, [r5, #1]
 800889c:	2310      	movs	r3, #16
 800889e:	3502      	adds	r5, #2
 80088a0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80088a4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80088a8:	2200      	movs	r2, #0
 80088aa:	fbbc f9f3 	udiv	r9, ip, r3
 80088ae:	4610      	mov	r0, r2
 80088b0:	fb03 ca19 	mls	sl, r3, r9, ip
 80088b4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80088b8:	2f09      	cmp	r7, #9
 80088ba:	d81b      	bhi.n	80088f4 <_strtol_l.constprop.0+0xa8>
 80088bc:	463c      	mov	r4, r7
 80088be:	42a3      	cmp	r3, r4
 80088c0:	dd27      	ble.n	8008912 <_strtol_l.constprop.0+0xc6>
 80088c2:	1c57      	adds	r7, r2, #1
 80088c4:	d007      	beq.n	80088d6 <_strtol_l.constprop.0+0x8a>
 80088c6:	4581      	cmp	r9, r0
 80088c8:	d320      	bcc.n	800890c <_strtol_l.constprop.0+0xc0>
 80088ca:	d101      	bne.n	80088d0 <_strtol_l.constprop.0+0x84>
 80088cc:	45a2      	cmp	sl, r4
 80088ce:	db1d      	blt.n	800890c <_strtol_l.constprop.0+0xc0>
 80088d0:	fb00 4003 	mla	r0, r0, r3, r4
 80088d4:	2201      	movs	r2, #1
 80088d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80088da:	e7eb      	b.n	80088b4 <_strtol_l.constprop.0+0x68>
 80088dc:	2c2b      	cmp	r4, #43	@ 0x2b
 80088de:	bf04      	itt	eq
 80088e0:	782c      	ldrbeq	r4, [r5, #0]
 80088e2:	1c95      	addeq	r5, r2, #2
 80088e4:	e7cf      	b.n	8008886 <_strtol_l.constprop.0+0x3a>
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d1da      	bne.n	80088a0 <_strtol_l.constprop.0+0x54>
 80088ea:	2c30      	cmp	r4, #48	@ 0x30
 80088ec:	bf0c      	ite	eq
 80088ee:	2308      	moveq	r3, #8
 80088f0:	230a      	movne	r3, #10
 80088f2:	e7d5      	b.n	80088a0 <_strtol_l.constprop.0+0x54>
 80088f4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80088f8:	2f19      	cmp	r7, #25
 80088fa:	d801      	bhi.n	8008900 <_strtol_l.constprop.0+0xb4>
 80088fc:	3c37      	subs	r4, #55	@ 0x37
 80088fe:	e7de      	b.n	80088be <_strtol_l.constprop.0+0x72>
 8008900:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008904:	2f19      	cmp	r7, #25
 8008906:	d804      	bhi.n	8008912 <_strtol_l.constprop.0+0xc6>
 8008908:	3c57      	subs	r4, #87	@ 0x57
 800890a:	e7d8      	b.n	80088be <_strtol_l.constprop.0+0x72>
 800890c:	f04f 32ff 	mov.w	r2, #4294967295
 8008910:	e7e1      	b.n	80088d6 <_strtol_l.constprop.0+0x8a>
 8008912:	1c53      	adds	r3, r2, #1
 8008914:	d108      	bne.n	8008928 <_strtol_l.constprop.0+0xdc>
 8008916:	2322      	movs	r3, #34	@ 0x22
 8008918:	f8ce 3000 	str.w	r3, [lr]
 800891c:	4660      	mov	r0, ip
 800891e:	f1b8 0f00 	cmp.w	r8, #0
 8008922:	d0a0      	beq.n	8008866 <_strtol_l.constprop.0+0x1a>
 8008924:	1e69      	subs	r1, r5, #1
 8008926:	e006      	b.n	8008936 <_strtol_l.constprop.0+0xea>
 8008928:	b106      	cbz	r6, 800892c <_strtol_l.constprop.0+0xe0>
 800892a:	4240      	negs	r0, r0
 800892c:	f1b8 0f00 	cmp.w	r8, #0
 8008930:	d099      	beq.n	8008866 <_strtol_l.constprop.0+0x1a>
 8008932:	2a00      	cmp	r2, #0
 8008934:	d1f6      	bne.n	8008924 <_strtol_l.constprop.0+0xd8>
 8008936:	f8c8 1000 	str.w	r1, [r8]
 800893a:	e794      	b.n	8008866 <_strtol_l.constprop.0+0x1a>
 800893c:	08009e31 	.word	0x08009e31

08008940 <strtol>:
 8008940:	4613      	mov	r3, r2
 8008942:	460a      	mov	r2, r1
 8008944:	4601      	mov	r1, r0
 8008946:	4802      	ldr	r0, [pc, #8]	@ (8008950 <strtol+0x10>)
 8008948:	6800      	ldr	r0, [r0, #0]
 800894a:	f7ff bf7f 	b.w	800884c <_strtol_l.constprop.0>
 800894e:	bf00      	nop
 8008950:	200000d4 	.word	0x200000d4

08008954 <std>:
 8008954:	2300      	movs	r3, #0
 8008956:	b510      	push	{r4, lr}
 8008958:	4604      	mov	r4, r0
 800895a:	e9c0 3300 	strd	r3, r3, [r0]
 800895e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008962:	6083      	str	r3, [r0, #8]
 8008964:	8181      	strh	r1, [r0, #12]
 8008966:	6643      	str	r3, [r0, #100]	@ 0x64
 8008968:	81c2      	strh	r2, [r0, #14]
 800896a:	6183      	str	r3, [r0, #24]
 800896c:	4619      	mov	r1, r3
 800896e:	2208      	movs	r2, #8
 8008970:	305c      	adds	r0, #92	@ 0x5c
 8008972:	f000 f928 	bl	8008bc6 <memset>
 8008976:	4b0d      	ldr	r3, [pc, #52]	@ (80089ac <std+0x58>)
 8008978:	6263      	str	r3, [r4, #36]	@ 0x24
 800897a:	4b0d      	ldr	r3, [pc, #52]	@ (80089b0 <std+0x5c>)
 800897c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800897e:	4b0d      	ldr	r3, [pc, #52]	@ (80089b4 <std+0x60>)
 8008980:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008982:	4b0d      	ldr	r3, [pc, #52]	@ (80089b8 <std+0x64>)
 8008984:	6323      	str	r3, [r4, #48]	@ 0x30
 8008986:	4b0d      	ldr	r3, [pc, #52]	@ (80089bc <std+0x68>)
 8008988:	6224      	str	r4, [r4, #32]
 800898a:	429c      	cmp	r4, r3
 800898c:	d006      	beq.n	800899c <std+0x48>
 800898e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008992:	4294      	cmp	r4, r2
 8008994:	d002      	beq.n	800899c <std+0x48>
 8008996:	33d0      	adds	r3, #208	@ 0xd0
 8008998:	429c      	cmp	r4, r3
 800899a:	d105      	bne.n	80089a8 <std+0x54>
 800899c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80089a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089a4:	f000 b9e4 	b.w	8008d70 <__retarget_lock_init_recursive>
 80089a8:	bd10      	pop	{r4, pc}
 80089aa:	bf00      	nop
 80089ac:	08008b41 	.word	0x08008b41
 80089b0:	08008b63 	.word	0x08008b63
 80089b4:	08008b9b 	.word	0x08008b9b
 80089b8:	08008bbf 	.word	0x08008bbf
 80089bc:	200004e4 	.word	0x200004e4

080089c0 <stdio_exit_handler>:
 80089c0:	4a02      	ldr	r2, [pc, #8]	@ (80089cc <stdio_exit_handler+0xc>)
 80089c2:	4903      	ldr	r1, [pc, #12]	@ (80089d0 <stdio_exit_handler+0x10>)
 80089c4:	4803      	ldr	r0, [pc, #12]	@ (80089d4 <stdio_exit_handler+0x14>)
 80089c6:	f000 b869 	b.w	8008a9c <_fwalk_sglue>
 80089ca:	bf00      	nop
 80089cc:	200000c8 	.word	0x200000c8
 80089d0:	08009689 	.word	0x08009689
 80089d4:	200000d8 	.word	0x200000d8

080089d8 <cleanup_stdio>:
 80089d8:	6841      	ldr	r1, [r0, #4]
 80089da:	4b0c      	ldr	r3, [pc, #48]	@ (8008a0c <cleanup_stdio+0x34>)
 80089dc:	4299      	cmp	r1, r3
 80089de:	b510      	push	{r4, lr}
 80089e0:	4604      	mov	r4, r0
 80089e2:	d001      	beq.n	80089e8 <cleanup_stdio+0x10>
 80089e4:	f000 fe50 	bl	8009688 <_fflush_r>
 80089e8:	68a1      	ldr	r1, [r4, #8]
 80089ea:	4b09      	ldr	r3, [pc, #36]	@ (8008a10 <cleanup_stdio+0x38>)
 80089ec:	4299      	cmp	r1, r3
 80089ee:	d002      	beq.n	80089f6 <cleanup_stdio+0x1e>
 80089f0:	4620      	mov	r0, r4
 80089f2:	f000 fe49 	bl	8009688 <_fflush_r>
 80089f6:	68e1      	ldr	r1, [r4, #12]
 80089f8:	4b06      	ldr	r3, [pc, #24]	@ (8008a14 <cleanup_stdio+0x3c>)
 80089fa:	4299      	cmp	r1, r3
 80089fc:	d004      	beq.n	8008a08 <cleanup_stdio+0x30>
 80089fe:	4620      	mov	r0, r4
 8008a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a04:	f000 be40 	b.w	8009688 <_fflush_r>
 8008a08:	bd10      	pop	{r4, pc}
 8008a0a:	bf00      	nop
 8008a0c:	200004e4 	.word	0x200004e4
 8008a10:	2000054c 	.word	0x2000054c
 8008a14:	200005b4 	.word	0x200005b4

08008a18 <global_stdio_init.part.0>:
 8008a18:	b510      	push	{r4, lr}
 8008a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8008a48 <global_stdio_init.part.0+0x30>)
 8008a1c:	4c0b      	ldr	r4, [pc, #44]	@ (8008a4c <global_stdio_init.part.0+0x34>)
 8008a1e:	4a0c      	ldr	r2, [pc, #48]	@ (8008a50 <global_stdio_init.part.0+0x38>)
 8008a20:	601a      	str	r2, [r3, #0]
 8008a22:	4620      	mov	r0, r4
 8008a24:	2200      	movs	r2, #0
 8008a26:	2104      	movs	r1, #4
 8008a28:	f7ff ff94 	bl	8008954 <std>
 8008a2c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008a30:	2201      	movs	r2, #1
 8008a32:	2109      	movs	r1, #9
 8008a34:	f7ff ff8e 	bl	8008954 <std>
 8008a38:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008a3c:	2202      	movs	r2, #2
 8008a3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a42:	2112      	movs	r1, #18
 8008a44:	f7ff bf86 	b.w	8008954 <std>
 8008a48:	2000061c 	.word	0x2000061c
 8008a4c:	200004e4 	.word	0x200004e4
 8008a50:	080089c1 	.word	0x080089c1

08008a54 <__sfp_lock_acquire>:
 8008a54:	4801      	ldr	r0, [pc, #4]	@ (8008a5c <__sfp_lock_acquire+0x8>)
 8008a56:	f000 b98c 	b.w	8008d72 <__retarget_lock_acquire_recursive>
 8008a5a:	bf00      	nop
 8008a5c:	20000625 	.word	0x20000625

08008a60 <__sfp_lock_release>:
 8008a60:	4801      	ldr	r0, [pc, #4]	@ (8008a68 <__sfp_lock_release+0x8>)
 8008a62:	f000 b987 	b.w	8008d74 <__retarget_lock_release_recursive>
 8008a66:	bf00      	nop
 8008a68:	20000625 	.word	0x20000625

08008a6c <__sinit>:
 8008a6c:	b510      	push	{r4, lr}
 8008a6e:	4604      	mov	r4, r0
 8008a70:	f7ff fff0 	bl	8008a54 <__sfp_lock_acquire>
 8008a74:	6a23      	ldr	r3, [r4, #32]
 8008a76:	b11b      	cbz	r3, 8008a80 <__sinit+0x14>
 8008a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a7c:	f7ff bff0 	b.w	8008a60 <__sfp_lock_release>
 8008a80:	4b04      	ldr	r3, [pc, #16]	@ (8008a94 <__sinit+0x28>)
 8008a82:	6223      	str	r3, [r4, #32]
 8008a84:	4b04      	ldr	r3, [pc, #16]	@ (8008a98 <__sinit+0x2c>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d1f5      	bne.n	8008a78 <__sinit+0xc>
 8008a8c:	f7ff ffc4 	bl	8008a18 <global_stdio_init.part.0>
 8008a90:	e7f2      	b.n	8008a78 <__sinit+0xc>
 8008a92:	bf00      	nop
 8008a94:	080089d9 	.word	0x080089d9
 8008a98:	2000061c 	.word	0x2000061c

08008a9c <_fwalk_sglue>:
 8008a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008aa0:	4607      	mov	r7, r0
 8008aa2:	4688      	mov	r8, r1
 8008aa4:	4614      	mov	r4, r2
 8008aa6:	2600      	movs	r6, #0
 8008aa8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008aac:	f1b9 0901 	subs.w	r9, r9, #1
 8008ab0:	d505      	bpl.n	8008abe <_fwalk_sglue+0x22>
 8008ab2:	6824      	ldr	r4, [r4, #0]
 8008ab4:	2c00      	cmp	r4, #0
 8008ab6:	d1f7      	bne.n	8008aa8 <_fwalk_sglue+0xc>
 8008ab8:	4630      	mov	r0, r6
 8008aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008abe:	89ab      	ldrh	r3, [r5, #12]
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d907      	bls.n	8008ad4 <_fwalk_sglue+0x38>
 8008ac4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ac8:	3301      	adds	r3, #1
 8008aca:	d003      	beq.n	8008ad4 <_fwalk_sglue+0x38>
 8008acc:	4629      	mov	r1, r5
 8008ace:	4638      	mov	r0, r7
 8008ad0:	47c0      	blx	r8
 8008ad2:	4306      	orrs	r6, r0
 8008ad4:	3568      	adds	r5, #104	@ 0x68
 8008ad6:	e7e9      	b.n	8008aac <_fwalk_sglue+0x10>

08008ad8 <sniprintf>:
 8008ad8:	b40c      	push	{r2, r3}
 8008ada:	b530      	push	{r4, r5, lr}
 8008adc:	4b17      	ldr	r3, [pc, #92]	@ (8008b3c <sniprintf+0x64>)
 8008ade:	1e0c      	subs	r4, r1, #0
 8008ae0:	681d      	ldr	r5, [r3, #0]
 8008ae2:	b09d      	sub	sp, #116	@ 0x74
 8008ae4:	da08      	bge.n	8008af8 <sniprintf+0x20>
 8008ae6:	238b      	movs	r3, #139	@ 0x8b
 8008ae8:	602b      	str	r3, [r5, #0]
 8008aea:	f04f 30ff 	mov.w	r0, #4294967295
 8008aee:	b01d      	add	sp, #116	@ 0x74
 8008af0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008af4:	b002      	add	sp, #8
 8008af6:	4770      	bx	lr
 8008af8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008afc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008b00:	bf14      	ite	ne
 8008b02:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008b06:	4623      	moveq	r3, r4
 8008b08:	9304      	str	r3, [sp, #16]
 8008b0a:	9307      	str	r3, [sp, #28]
 8008b0c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008b10:	9002      	str	r0, [sp, #8]
 8008b12:	9006      	str	r0, [sp, #24]
 8008b14:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008b18:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008b1a:	ab21      	add	r3, sp, #132	@ 0x84
 8008b1c:	a902      	add	r1, sp, #8
 8008b1e:	4628      	mov	r0, r5
 8008b20:	9301      	str	r3, [sp, #4]
 8008b22:	f000 faa3 	bl	800906c <_svfiprintf_r>
 8008b26:	1c43      	adds	r3, r0, #1
 8008b28:	bfbc      	itt	lt
 8008b2a:	238b      	movlt	r3, #139	@ 0x8b
 8008b2c:	602b      	strlt	r3, [r5, #0]
 8008b2e:	2c00      	cmp	r4, #0
 8008b30:	d0dd      	beq.n	8008aee <sniprintf+0x16>
 8008b32:	9b02      	ldr	r3, [sp, #8]
 8008b34:	2200      	movs	r2, #0
 8008b36:	701a      	strb	r2, [r3, #0]
 8008b38:	e7d9      	b.n	8008aee <sniprintf+0x16>
 8008b3a:	bf00      	nop
 8008b3c:	200000d4 	.word	0x200000d4

08008b40 <__sread>:
 8008b40:	b510      	push	{r4, lr}
 8008b42:	460c      	mov	r4, r1
 8008b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b48:	f000 f8c4 	bl	8008cd4 <_read_r>
 8008b4c:	2800      	cmp	r0, #0
 8008b4e:	bfab      	itete	ge
 8008b50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008b52:	89a3      	ldrhlt	r3, [r4, #12]
 8008b54:	181b      	addge	r3, r3, r0
 8008b56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008b5a:	bfac      	ite	ge
 8008b5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008b5e:	81a3      	strhlt	r3, [r4, #12]
 8008b60:	bd10      	pop	{r4, pc}

08008b62 <__swrite>:
 8008b62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b66:	461f      	mov	r7, r3
 8008b68:	898b      	ldrh	r3, [r1, #12]
 8008b6a:	05db      	lsls	r3, r3, #23
 8008b6c:	4605      	mov	r5, r0
 8008b6e:	460c      	mov	r4, r1
 8008b70:	4616      	mov	r6, r2
 8008b72:	d505      	bpl.n	8008b80 <__swrite+0x1e>
 8008b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b78:	2302      	movs	r3, #2
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f000 f898 	bl	8008cb0 <_lseek_r>
 8008b80:	89a3      	ldrh	r3, [r4, #12]
 8008b82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008b8a:	81a3      	strh	r3, [r4, #12]
 8008b8c:	4632      	mov	r2, r6
 8008b8e:	463b      	mov	r3, r7
 8008b90:	4628      	mov	r0, r5
 8008b92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b96:	f000 b8af 	b.w	8008cf8 <_write_r>

08008b9a <__sseek>:
 8008b9a:	b510      	push	{r4, lr}
 8008b9c:	460c      	mov	r4, r1
 8008b9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ba2:	f000 f885 	bl	8008cb0 <_lseek_r>
 8008ba6:	1c43      	adds	r3, r0, #1
 8008ba8:	89a3      	ldrh	r3, [r4, #12]
 8008baa:	bf15      	itete	ne
 8008bac:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008bae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008bb2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008bb6:	81a3      	strheq	r3, [r4, #12]
 8008bb8:	bf18      	it	ne
 8008bba:	81a3      	strhne	r3, [r4, #12]
 8008bbc:	bd10      	pop	{r4, pc}

08008bbe <__sclose>:
 8008bbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bc2:	f000 b865 	b.w	8008c90 <_close_r>

08008bc6 <memset>:
 8008bc6:	4402      	add	r2, r0
 8008bc8:	4603      	mov	r3, r0
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d100      	bne.n	8008bd0 <memset+0xa>
 8008bce:	4770      	bx	lr
 8008bd0:	f803 1b01 	strb.w	r1, [r3], #1
 8008bd4:	e7f9      	b.n	8008bca <memset+0x4>
	...

08008bd8 <strtok>:
 8008bd8:	4b16      	ldr	r3, [pc, #88]	@ (8008c34 <strtok+0x5c>)
 8008bda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bde:	681f      	ldr	r7, [r3, #0]
 8008be0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8008be2:	4605      	mov	r5, r0
 8008be4:	460e      	mov	r6, r1
 8008be6:	b9ec      	cbnz	r4, 8008c24 <strtok+0x4c>
 8008be8:	2050      	movs	r0, #80	@ 0x50
 8008bea:	f000 f92d 	bl	8008e48 <malloc>
 8008bee:	4602      	mov	r2, r0
 8008bf0:	6478      	str	r0, [r7, #68]	@ 0x44
 8008bf2:	b920      	cbnz	r0, 8008bfe <strtok+0x26>
 8008bf4:	4b10      	ldr	r3, [pc, #64]	@ (8008c38 <strtok+0x60>)
 8008bf6:	4811      	ldr	r0, [pc, #68]	@ (8008c3c <strtok+0x64>)
 8008bf8:	215b      	movs	r1, #91	@ 0x5b
 8008bfa:	f000 f8bd 	bl	8008d78 <__assert_func>
 8008bfe:	e9c0 4400 	strd	r4, r4, [r0]
 8008c02:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008c06:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008c0a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8008c0e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8008c12:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8008c16:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8008c1a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8008c1e:	6184      	str	r4, [r0, #24]
 8008c20:	7704      	strb	r4, [r0, #28]
 8008c22:	6244      	str	r4, [r0, #36]	@ 0x24
 8008c24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c26:	4631      	mov	r1, r6
 8008c28:	4628      	mov	r0, r5
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c30:	f000 b806 	b.w	8008c40 <__strtok_r>
 8008c34:	200000d4 	.word	0x200000d4
 8008c38:	08009f31 	.word	0x08009f31
 8008c3c:	08009f48 	.word	0x08009f48

08008c40 <__strtok_r>:
 8008c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c42:	4604      	mov	r4, r0
 8008c44:	b908      	cbnz	r0, 8008c4a <__strtok_r+0xa>
 8008c46:	6814      	ldr	r4, [r2, #0]
 8008c48:	b144      	cbz	r4, 8008c5c <__strtok_r+0x1c>
 8008c4a:	4620      	mov	r0, r4
 8008c4c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008c50:	460f      	mov	r7, r1
 8008c52:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008c56:	b91e      	cbnz	r6, 8008c60 <__strtok_r+0x20>
 8008c58:	b965      	cbnz	r5, 8008c74 <__strtok_r+0x34>
 8008c5a:	6015      	str	r5, [r2, #0]
 8008c5c:	2000      	movs	r0, #0
 8008c5e:	e005      	b.n	8008c6c <__strtok_r+0x2c>
 8008c60:	42b5      	cmp	r5, r6
 8008c62:	d1f6      	bne.n	8008c52 <__strtok_r+0x12>
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d1f0      	bne.n	8008c4a <__strtok_r+0xa>
 8008c68:	6014      	str	r4, [r2, #0]
 8008c6a:	7003      	strb	r3, [r0, #0]
 8008c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c6e:	461c      	mov	r4, r3
 8008c70:	e00c      	b.n	8008c8c <__strtok_r+0x4c>
 8008c72:	b915      	cbnz	r5, 8008c7a <__strtok_r+0x3a>
 8008c74:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008c78:	460e      	mov	r6, r1
 8008c7a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008c7e:	42ab      	cmp	r3, r5
 8008c80:	d1f7      	bne.n	8008c72 <__strtok_r+0x32>
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d0f3      	beq.n	8008c6e <__strtok_r+0x2e>
 8008c86:	2300      	movs	r3, #0
 8008c88:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008c8c:	6014      	str	r4, [r2, #0]
 8008c8e:	e7ed      	b.n	8008c6c <__strtok_r+0x2c>

08008c90 <_close_r>:
 8008c90:	b538      	push	{r3, r4, r5, lr}
 8008c92:	4d06      	ldr	r5, [pc, #24]	@ (8008cac <_close_r+0x1c>)
 8008c94:	2300      	movs	r3, #0
 8008c96:	4604      	mov	r4, r0
 8008c98:	4608      	mov	r0, r1
 8008c9a:	602b      	str	r3, [r5, #0]
 8008c9c:	f7f8 fa94 	bl	80011c8 <_close>
 8008ca0:	1c43      	adds	r3, r0, #1
 8008ca2:	d102      	bne.n	8008caa <_close_r+0x1a>
 8008ca4:	682b      	ldr	r3, [r5, #0]
 8008ca6:	b103      	cbz	r3, 8008caa <_close_r+0x1a>
 8008ca8:	6023      	str	r3, [r4, #0]
 8008caa:	bd38      	pop	{r3, r4, r5, pc}
 8008cac:	20000620 	.word	0x20000620

08008cb0 <_lseek_r>:
 8008cb0:	b538      	push	{r3, r4, r5, lr}
 8008cb2:	4d07      	ldr	r5, [pc, #28]	@ (8008cd0 <_lseek_r+0x20>)
 8008cb4:	4604      	mov	r4, r0
 8008cb6:	4608      	mov	r0, r1
 8008cb8:	4611      	mov	r1, r2
 8008cba:	2200      	movs	r2, #0
 8008cbc:	602a      	str	r2, [r5, #0]
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	f7f8 faa9 	bl	8001216 <_lseek>
 8008cc4:	1c43      	adds	r3, r0, #1
 8008cc6:	d102      	bne.n	8008cce <_lseek_r+0x1e>
 8008cc8:	682b      	ldr	r3, [r5, #0]
 8008cca:	b103      	cbz	r3, 8008cce <_lseek_r+0x1e>
 8008ccc:	6023      	str	r3, [r4, #0]
 8008cce:	bd38      	pop	{r3, r4, r5, pc}
 8008cd0:	20000620 	.word	0x20000620

08008cd4 <_read_r>:
 8008cd4:	b538      	push	{r3, r4, r5, lr}
 8008cd6:	4d07      	ldr	r5, [pc, #28]	@ (8008cf4 <_read_r+0x20>)
 8008cd8:	4604      	mov	r4, r0
 8008cda:	4608      	mov	r0, r1
 8008cdc:	4611      	mov	r1, r2
 8008cde:	2200      	movs	r2, #0
 8008ce0:	602a      	str	r2, [r5, #0]
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	f7f8 fa37 	bl	8001156 <_read>
 8008ce8:	1c43      	adds	r3, r0, #1
 8008cea:	d102      	bne.n	8008cf2 <_read_r+0x1e>
 8008cec:	682b      	ldr	r3, [r5, #0]
 8008cee:	b103      	cbz	r3, 8008cf2 <_read_r+0x1e>
 8008cf0:	6023      	str	r3, [r4, #0]
 8008cf2:	bd38      	pop	{r3, r4, r5, pc}
 8008cf4:	20000620 	.word	0x20000620

08008cf8 <_write_r>:
 8008cf8:	b538      	push	{r3, r4, r5, lr}
 8008cfa:	4d07      	ldr	r5, [pc, #28]	@ (8008d18 <_write_r+0x20>)
 8008cfc:	4604      	mov	r4, r0
 8008cfe:	4608      	mov	r0, r1
 8008d00:	4611      	mov	r1, r2
 8008d02:	2200      	movs	r2, #0
 8008d04:	602a      	str	r2, [r5, #0]
 8008d06:	461a      	mov	r2, r3
 8008d08:	f7f8 fa42 	bl	8001190 <_write>
 8008d0c:	1c43      	adds	r3, r0, #1
 8008d0e:	d102      	bne.n	8008d16 <_write_r+0x1e>
 8008d10:	682b      	ldr	r3, [r5, #0]
 8008d12:	b103      	cbz	r3, 8008d16 <_write_r+0x1e>
 8008d14:	6023      	str	r3, [r4, #0]
 8008d16:	bd38      	pop	{r3, r4, r5, pc}
 8008d18:	20000620 	.word	0x20000620

08008d1c <__errno>:
 8008d1c:	4b01      	ldr	r3, [pc, #4]	@ (8008d24 <__errno+0x8>)
 8008d1e:	6818      	ldr	r0, [r3, #0]
 8008d20:	4770      	bx	lr
 8008d22:	bf00      	nop
 8008d24:	200000d4 	.word	0x200000d4

08008d28 <__libc_init_array>:
 8008d28:	b570      	push	{r4, r5, r6, lr}
 8008d2a:	4d0d      	ldr	r5, [pc, #52]	@ (8008d60 <__libc_init_array+0x38>)
 8008d2c:	4c0d      	ldr	r4, [pc, #52]	@ (8008d64 <__libc_init_array+0x3c>)
 8008d2e:	1b64      	subs	r4, r4, r5
 8008d30:	10a4      	asrs	r4, r4, #2
 8008d32:	2600      	movs	r6, #0
 8008d34:	42a6      	cmp	r6, r4
 8008d36:	d109      	bne.n	8008d4c <__libc_init_array+0x24>
 8008d38:	4d0b      	ldr	r5, [pc, #44]	@ (8008d68 <__libc_init_array+0x40>)
 8008d3a:	4c0c      	ldr	r4, [pc, #48]	@ (8008d6c <__libc_init_array+0x44>)
 8008d3c:	f000 fff0 	bl	8009d20 <_init>
 8008d40:	1b64      	subs	r4, r4, r5
 8008d42:	10a4      	asrs	r4, r4, #2
 8008d44:	2600      	movs	r6, #0
 8008d46:	42a6      	cmp	r6, r4
 8008d48:	d105      	bne.n	8008d56 <__libc_init_array+0x2e>
 8008d4a:	bd70      	pop	{r4, r5, r6, pc}
 8008d4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d50:	4798      	blx	r3
 8008d52:	3601      	adds	r6, #1
 8008d54:	e7ee      	b.n	8008d34 <__libc_init_array+0xc>
 8008d56:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d5a:	4798      	blx	r3
 8008d5c:	3601      	adds	r6, #1
 8008d5e:	e7f2      	b.n	8008d46 <__libc_init_array+0x1e>
 8008d60:	0800a01c 	.word	0x0800a01c
 8008d64:	0800a01c 	.word	0x0800a01c
 8008d68:	0800a01c 	.word	0x0800a01c
 8008d6c:	0800a020 	.word	0x0800a020

08008d70 <__retarget_lock_init_recursive>:
 8008d70:	4770      	bx	lr

08008d72 <__retarget_lock_acquire_recursive>:
 8008d72:	4770      	bx	lr

08008d74 <__retarget_lock_release_recursive>:
 8008d74:	4770      	bx	lr
	...

08008d78 <__assert_func>:
 8008d78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d7a:	4614      	mov	r4, r2
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	4b09      	ldr	r3, [pc, #36]	@ (8008da4 <__assert_func+0x2c>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4605      	mov	r5, r0
 8008d84:	68d8      	ldr	r0, [r3, #12]
 8008d86:	b954      	cbnz	r4, 8008d9e <__assert_func+0x26>
 8008d88:	4b07      	ldr	r3, [pc, #28]	@ (8008da8 <__assert_func+0x30>)
 8008d8a:	461c      	mov	r4, r3
 8008d8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d90:	9100      	str	r1, [sp, #0]
 8008d92:	462b      	mov	r3, r5
 8008d94:	4905      	ldr	r1, [pc, #20]	@ (8008dac <__assert_func+0x34>)
 8008d96:	f000 fc9f 	bl	80096d8 <fiprintf>
 8008d9a:	f000 fce7 	bl	800976c <abort>
 8008d9e:	4b04      	ldr	r3, [pc, #16]	@ (8008db0 <__assert_func+0x38>)
 8008da0:	e7f4      	b.n	8008d8c <__assert_func+0x14>
 8008da2:	bf00      	nop
 8008da4:	200000d4 	.word	0x200000d4
 8008da8:	08009fdd 	.word	0x08009fdd
 8008dac:	08009faf 	.word	0x08009faf
 8008db0:	08009fa2 	.word	0x08009fa2

08008db4 <_free_r>:
 8008db4:	b538      	push	{r3, r4, r5, lr}
 8008db6:	4605      	mov	r5, r0
 8008db8:	2900      	cmp	r1, #0
 8008dba:	d041      	beq.n	8008e40 <_free_r+0x8c>
 8008dbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dc0:	1f0c      	subs	r4, r1, #4
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	bfb8      	it	lt
 8008dc6:	18e4      	addlt	r4, r4, r3
 8008dc8:	f000 f8e8 	bl	8008f9c <__malloc_lock>
 8008dcc:	4a1d      	ldr	r2, [pc, #116]	@ (8008e44 <_free_r+0x90>)
 8008dce:	6813      	ldr	r3, [r2, #0]
 8008dd0:	b933      	cbnz	r3, 8008de0 <_free_r+0x2c>
 8008dd2:	6063      	str	r3, [r4, #4]
 8008dd4:	6014      	str	r4, [r2, #0]
 8008dd6:	4628      	mov	r0, r5
 8008dd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ddc:	f000 b8e4 	b.w	8008fa8 <__malloc_unlock>
 8008de0:	42a3      	cmp	r3, r4
 8008de2:	d908      	bls.n	8008df6 <_free_r+0x42>
 8008de4:	6820      	ldr	r0, [r4, #0]
 8008de6:	1821      	adds	r1, r4, r0
 8008de8:	428b      	cmp	r3, r1
 8008dea:	bf01      	itttt	eq
 8008dec:	6819      	ldreq	r1, [r3, #0]
 8008dee:	685b      	ldreq	r3, [r3, #4]
 8008df0:	1809      	addeq	r1, r1, r0
 8008df2:	6021      	streq	r1, [r4, #0]
 8008df4:	e7ed      	b.n	8008dd2 <_free_r+0x1e>
 8008df6:	461a      	mov	r2, r3
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	b10b      	cbz	r3, 8008e00 <_free_r+0x4c>
 8008dfc:	42a3      	cmp	r3, r4
 8008dfe:	d9fa      	bls.n	8008df6 <_free_r+0x42>
 8008e00:	6811      	ldr	r1, [r2, #0]
 8008e02:	1850      	adds	r0, r2, r1
 8008e04:	42a0      	cmp	r0, r4
 8008e06:	d10b      	bne.n	8008e20 <_free_r+0x6c>
 8008e08:	6820      	ldr	r0, [r4, #0]
 8008e0a:	4401      	add	r1, r0
 8008e0c:	1850      	adds	r0, r2, r1
 8008e0e:	4283      	cmp	r3, r0
 8008e10:	6011      	str	r1, [r2, #0]
 8008e12:	d1e0      	bne.n	8008dd6 <_free_r+0x22>
 8008e14:	6818      	ldr	r0, [r3, #0]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	6053      	str	r3, [r2, #4]
 8008e1a:	4408      	add	r0, r1
 8008e1c:	6010      	str	r0, [r2, #0]
 8008e1e:	e7da      	b.n	8008dd6 <_free_r+0x22>
 8008e20:	d902      	bls.n	8008e28 <_free_r+0x74>
 8008e22:	230c      	movs	r3, #12
 8008e24:	602b      	str	r3, [r5, #0]
 8008e26:	e7d6      	b.n	8008dd6 <_free_r+0x22>
 8008e28:	6820      	ldr	r0, [r4, #0]
 8008e2a:	1821      	adds	r1, r4, r0
 8008e2c:	428b      	cmp	r3, r1
 8008e2e:	bf04      	itt	eq
 8008e30:	6819      	ldreq	r1, [r3, #0]
 8008e32:	685b      	ldreq	r3, [r3, #4]
 8008e34:	6063      	str	r3, [r4, #4]
 8008e36:	bf04      	itt	eq
 8008e38:	1809      	addeq	r1, r1, r0
 8008e3a:	6021      	streq	r1, [r4, #0]
 8008e3c:	6054      	str	r4, [r2, #4]
 8008e3e:	e7ca      	b.n	8008dd6 <_free_r+0x22>
 8008e40:	bd38      	pop	{r3, r4, r5, pc}
 8008e42:	bf00      	nop
 8008e44:	2000062c 	.word	0x2000062c

08008e48 <malloc>:
 8008e48:	4b02      	ldr	r3, [pc, #8]	@ (8008e54 <malloc+0xc>)
 8008e4a:	4601      	mov	r1, r0
 8008e4c:	6818      	ldr	r0, [r3, #0]
 8008e4e:	f000 b825 	b.w	8008e9c <_malloc_r>
 8008e52:	bf00      	nop
 8008e54:	200000d4 	.word	0x200000d4

08008e58 <sbrk_aligned>:
 8008e58:	b570      	push	{r4, r5, r6, lr}
 8008e5a:	4e0f      	ldr	r6, [pc, #60]	@ (8008e98 <sbrk_aligned+0x40>)
 8008e5c:	460c      	mov	r4, r1
 8008e5e:	6831      	ldr	r1, [r6, #0]
 8008e60:	4605      	mov	r5, r0
 8008e62:	b911      	cbnz	r1, 8008e6a <sbrk_aligned+0x12>
 8008e64:	f000 fc64 	bl	8009730 <_sbrk_r>
 8008e68:	6030      	str	r0, [r6, #0]
 8008e6a:	4621      	mov	r1, r4
 8008e6c:	4628      	mov	r0, r5
 8008e6e:	f000 fc5f 	bl	8009730 <_sbrk_r>
 8008e72:	1c43      	adds	r3, r0, #1
 8008e74:	d103      	bne.n	8008e7e <sbrk_aligned+0x26>
 8008e76:	f04f 34ff 	mov.w	r4, #4294967295
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	bd70      	pop	{r4, r5, r6, pc}
 8008e7e:	1cc4      	adds	r4, r0, #3
 8008e80:	f024 0403 	bic.w	r4, r4, #3
 8008e84:	42a0      	cmp	r0, r4
 8008e86:	d0f8      	beq.n	8008e7a <sbrk_aligned+0x22>
 8008e88:	1a21      	subs	r1, r4, r0
 8008e8a:	4628      	mov	r0, r5
 8008e8c:	f000 fc50 	bl	8009730 <_sbrk_r>
 8008e90:	3001      	adds	r0, #1
 8008e92:	d1f2      	bne.n	8008e7a <sbrk_aligned+0x22>
 8008e94:	e7ef      	b.n	8008e76 <sbrk_aligned+0x1e>
 8008e96:	bf00      	nop
 8008e98:	20000628 	.word	0x20000628

08008e9c <_malloc_r>:
 8008e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ea0:	1ccd      	adds	r5, r1, #3
 8008ea2:	f025 0503 	bic.w	r5, r5, #3
 8008ea6:	3508      	adds	r5, #8
 8008ea8:	2d0c      	cmp	r5, #12
 8008eaa:	bf38      	it	cc
 8008eac:	250c      	movcc	r5, #12
 8008eae:	2d00      	cmp	r5, #0
 8008eb0:	4606      	mov	r6, r0
 8008eb2:	db01      	blt.n	8008eb8 <_malloc_r+0x1c>
 8008eb4:	42a9      	cmp	r1, r5
 8008eb6:	d904      	bls.n	8008ec2 <_malloc_r+0x26>
 8008eb8:	230c      	movs	r3, #12
 8008eba:	6033      	str	r3, [r6, #0]
 8008ebc:	2000      	movs	r0, #0
 8008ebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ec2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008f98 <_malloc_r+0xfc>
 8008ec6:	f000 f869 	bl	8008f9c <__malloc_lock>
 8008eca:	f8d8 3000 	ldr.w	r3, [r8]
 8008ece:	461c      	mov	r4, r3
 8008ed0:	bb44      	cbnz	r4, 8008f24 <_malloc_r+0x88>
 8008ed2:	4629      	mov	r1, r5
 8008ed4:	4630      	mov	r0, r6
 8008ed6:	f7ff ffbf 	bl	8008e58 <sbrk_aligned>
 8008eda:	1c43      	adds	r3, r0, #1
 8008edc:	4604      	mov	r4, r0
 8008ede:	d158      	bne.n	8008f92 <_malloc_r+0xf6>
 8008ee0:	f8d8 4000 	ldr.w	r4, [r8]
 8008ee4:	4627      	mov	r7, r4
 8008ee6:	2f00      	cmp	r7, #0
 8008ee8:	d143      	bne.n	8008f72 <_malloc_r+0xd6>
 8008eea:	2c00      	cmp	r4, #0
 8008eec:	d04b      	beq.n	8008f86 <_malloc_r+0xea>
 8008eee:	6823      	ldr	r3, [r4, #0]
 8008ef0:	4639      	mov	r1, r7
 8008ef2:	4630      	mov	r0, r6
 8008ef4:	eb04 0903 	add.w	r9, r4, r3
 8008ef8:	f000 fc1a 	bl	8009730 <_sbrk_r>
 8008efc:	4581      	cmp	r9, r0
 8008efe:	d142      	bne.n	8008f86 <_malloc_r+0xea>
 8008f00:	6821      	ldr	r1, [r4, #0]
 8008f02:	1a6d      	subs	r5, r5, r1
 8008f04:	4629      	mov	r1, r5
 8008f06:	4630      	mov	r0, r6
 8008f08:	f7ff ffa6 	bl	8008e58 <sbrk_aligned>
 8008f0c:	3001      	adds	r0, #1
 8008f0e:	d03a      	beq.n	8008f86 <_malloc_r+0xea>
 8008f10:	6823      	ldr	r3, [r4, #0]
 8008f12:	442b      	add	r3, r5
 8008f14:	6023      	str	r3, [r4, #0]
 8008f16:	f8d8 3000 	ldr.w	r3, [r8]
 8008f1a:	685a      	ldr	r2, [r3, #4]
 8008f1c:	bb62      	cbnz	r2, 8008f78 <_malloc_r+0xdc>
 8008f1e:	f8c8 7000 	str.w	r7, [r8]
 8008f22:	e00f      	b.n	8008f44 <_malloc_r+0xa8>
 8008f24:	6822      	ldr	r2, [r4, #0]
 8008f26:	1b52      	subs	r2, r2, r5
 8008f28:	d420      	bmi.n	8008f6c <_malloc_r+0xd0>
 8008f2a:	2a0b      	cmp	r2, #11
 8008f2c:	d917      	bls.n	8008f5e <_malloc_r+0xc2>
 8008f2e:	1961      	adds	r1, r4, r5
 8008f30:	42a3      	cmp	r3, r4
 8008f32:	6025      	str	r5, [r4, #0]
 8008f34:	bf18      	it	ne
 8008f36:	6059      	strne	r1, [r3, #4]
 8008f38:	6863      	ldr	r3, [r4, #4]
 8008f3a:	bf08      	it	eq
 8008f3c:	f8c8 1000 	streq.w	r1, [r8]
 8008f40:	5162      	str	r2, [r4, r5]
 8008f42:	604b      	str	r3, [r1, #4]
 8008f44:	4630      	mov	r0, r6
 8008f46:	f000 f82f 	bl	8008fa8 <__malloc_unlock>
 8008f4a:	f104 000b 	add.w	r0, r4, #11
 8008f4e:	1d23      	adds	r3, r4, #4
 8008f50:	f020 0007 	bic.w	r0, r0, #7
 8008f54:	1ac2      	subs	r2, r0, r3
 8008f56:	bf1c      	itt	ne
 8008f58:	1a1b      	subne	r3, r3, r0
 8008f5a:	50a3      	strne	r3, [r4, r2]
 8008f5c:	e7af      	b.n	8008ebe <_malloc_r+0x22>
 8008f5e:	6862      	ldr	r2, [r4, #4]
 8008f60:	42a3      	cmp	r3, r4
 8008f62:	bf0c      	ite	eq
 8008f64:	f8c8 2000 	streq.w	r2, [r8]
 8008f68:	605a      	strne	r2, [r3, #4]
 8008f6a:	e7eb      	b.n	8008f44 <_malloc_r+0xa8>
 8008f6c:	4623      	mov	r3, r4
 8008f6e:	6864      	ldr	r4, [r4, #4]
 8008f70:	e7ae      	b.n	8008ed0 <_malloc_r+0x34>
 8008f72:	463c      	mov	r4, r7
 8008f74:	687f      	ldr	r7, [r7, #4]
 8008f76:	e7b6      	b.n	8008ee6 <_malloc_r+0x4a>
 8008f78:	461a      	mov	r2, r3
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	42a3      	cmp	r3, r4
 8008f7e:	d1fb      	bne.n	8008f78 <_malloc_r+0xdc>
 8008f80:	2300      	movs	r3, #0
 8008f82:	6053      	str	r3, [r2, #4]
 8008f84:	e7de      	b.n	8008f44 <_malloc_r+0xa8>
 8008f86:	230c      	movs	r3, #12
 8008f88:	6033      	str	r3, [r6, #0]
 8008f8a:	4630      	mov	r0, r6
 8008f8c:	f000 f80c 	bl	8008fa8 <__malloc_unlock>
 8008f90:	e794      	b.n	8008ebc <_malloc_r+0x20>
 8008f92:	6005      	str	r5, [r0, #0]
 8008f94:	e7d6      	b.n	8008f44 <_malloc_r+0xa8>
 8008f96:	bf00      	nop
 8008f98:	2000062c 	.word	0x2000062c

08008f9c <__malloc_lock>:
 8008f9c:	4801      	ldr	r0, [pc, #4]	@ (8008fa4 <__malloc_lock+0x8>)
 8008f9e:	f7ff bee8 	b.w	8008d72 <__retarget_lock_acquire_recursive>
 8008fa2:	bf00      	nop
 8008fa4:	20000624 	.word	0x20000624

08008fa8 <__malloc_unlock>:
 8008fa8:	4801      	ldr	r0, [pc, #4]	@ (8008fb0 <__malloc_unlock+0x8>)
 8008faa:	f7ff bee3 	b.w	8008d74 <__retarget_lock_release_recursive>
 8008fae:	bf00      	nop
 8008fb0:	20000624 	.word	0x20000624

08008fb4 <__ssputs_r>:
 8008fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fb8:	688e      	ldr	r6, [r1, #8]
 8008fba:	461f      	mov	r7, r3
 8008fbc:	42be      	cmp	r6, r7
 8008fbe:	680b      	ldr	r3, [r1, #0]
 8008fc0:	4682      	mov	sl, r0
 8008fc2:	460c      	mov	r4, r1
 8008fc4:	4690      	mov	r8, r2
 8008fc6:	d82d      	bhi.n	8009024 <__ssputs_r+0x70>
 8008fc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008fcc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008fd0:	d026      	beq.n	8009020 <__ssputs_r+0x6c>
 8008fd2:	6965      	ldr	r5, [r4, #20]
 8008fd4:	6909      	ldr	r1, [r1, #16]
 8008fd6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008fda:	eba3 0901 	sub.w	r9, r3, r1
 8008fde:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008fe2:	1c7b      	adds	r3, r7, #1
 8008fe4:	444b      	add	r3, r9
 8008fe6:	106d      	asrs	r5, r5, #1
 8008fe8:	429d      	cmp	r5, r3
 8008fea:	bf38      	it	cc
 8008fec:	461d      	movcc	r5, r3
 8008fee:	0553      	lsls	r3, r2, #21
 8008ff0:	d527      	bpl.n	8009042 <__ssputs_r+0x8e>
 8008ff2:	4629      	mov	r1, r5
 8008ff4:	f7ff ff52 	bl	8008e9c <_malloc_r>
 8008ff8:	4606      	mov	r6, r0
 8008ffa:	b360      	cbz	r0, 8009056 <__ssputs_r+0xa2>
 8008ffc:	6921      	ldr	r1, [r4, #16]
 8008ffe:	464a      	mov	r2, r9
 8009000:	f000 fba6 	bl	8009750 <memcpy>
 8009004:	89a3      	ldrh	r3, [r4, #12]
 8009006:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800900a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800900e:	81a3      	strh	r3, [r4, #12]
 8009010:	6126      	str	r6, [r4, #16]
 8009012:	6165      	str	r5, [r4, #20]
 8009014:	444e      	add	r6, r9
 8009016:	eba5 0509 	sub.w	r5, r5, r9
 800901a:	6026      	str	r6, [r4, #0]
 800901c:	60a5      	str	r5, [r4, #8]
 800901e:	463e      	mov	r6, r7
 8009020:	42be      	cmp	r6, r7
 8009022:	d900      	bls.n	8009026 <__ssputs_r+0x72>
 8009024:	463e      	mov	r6, r7
 8009026:	6820      	ldr	r0, [r4, #0]
 8009028:	4632      	mov	r2, r6
 800902a:	4641      	mov	r1, r8
 800902c:	f000 fb66 	bl	80096fc <memmove>
 8009030:	68a3      	ldr	r3, [r4, #8]
 8009032:	1b9b      	subs	r3, r3, r6
 8009034:	60a3      	str	r3, [r4, #8]
 8009036:	6823      	ldr	r3, [r4, #0]
 8009038:	4433      	add	r3, r6
 800903a:	6023      	str	r3, [r4, #0]
 800903c:	2000      	movs	r0, #0
 800903e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009042:	462a      	mov	r2, r5
 8009044:	f000 fb99 	bl	800977a <_realloc_r>
 8009048:	4606      	mov	r6, r0
 800904a:	2800      	cmp	r0, #0
 800904c:	d1e0      	bne.n	8009010 <__ssputs_r+0x5c>
 800904e:	6921      	ldr	r1, [r4, #16]
 8009050:	4650      	mov	r0, sl
 8009052:	f7ff feaf 	bl	8008db4 <_free_r>
 8009056:	230c      	movs	r3, #12
 8009058:	f8ca 3000 	str.w	r3, [sl]
 800905c:	89a3      	ldrh	r3, [r4, #12]
 800905e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009062:	81a3      	strh	r3, [r4, #12]
 8009064:	f04f 30ff 	mov.w	r0, #4294967295
 8009068:	e7e9      	b.n	800903e <__ssputs_r+0x8a>
	...

0800906c <_svfiprintf_r>:
 800906c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009070:	4698      	mov	r8, r3
 8009072:	898b      	ldrh	r3, [r1, #12]
 8009074:	061b      	lsls	r3, r3, #24
 8009076:	b09d      	sub	sp, #116	@ 0x74
 8009078:	4607      	mov	r7, r0
 800907a:	460d      	mov	r5, r1
 800907c:	4614      	mov	r4, r2
 800907e:	d510      	bpl.n	80090a2 <_svfiprintf_r+0x36>
 8009080:	690b      	ldr	r3, [r1, #16]
 8009082:	b973      	cbnz	r3, 80090a2 <_svfiprintf_r+0x36>
 8009084:	2140      	movs	r1, #64	@ 0x40
 8009086:	f7ff ff09 	bl	8008e9c <_malloc_r>
 800908a:	6028      	str	r0, [r5, #0]
 800908c:	6128      	str	r0, [r5, #16]
 800908e:	b930      	cbnz	r0, 800909e <_svfiprintf_r+0x32>
 8009090:	230c      	movs	r3, #12
 8009092:	603b      	str	r3, [r7, #0]
 8009094:	f04f 30ff 	mov.w	r0, #4294967295
 8009098:	b01d      	add	sp, #116	@ 0x74
 800909a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800909e:	2340      	movs	r3, #64	@ 0x40
 80090a0:	616b      	str	r3, [r5, #20]
 80090a2:	2300      	movs	r3, #0
 80090a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80090a6:	2320      	movs	r3, #32
 80090a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80090ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80090b0:	2330      	movs	r3, #48	@ 0x30
 80090b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009250 <_svfiprintf_r+0x1e4>
 80090b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80090ba:	f04f 0901 	mov.w	r9, #1
 80090be:	4623      	mov	r3, r4
 80090c0:	469a      	mov	sl, r3
 80090c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090c6:	b10a      	cbz	r2, 80090cc <_svfiprintf_r+0x60>
 80090c8:	2a25      	cmp	r2, #37	@ 0x25
 80090ca:	d1f9      	bne.n	80090c0 <_svfiprintf_r+0x54>
 80090cc:	ebba 0b04 	subs.w	fp, sl, r4
 80090d0:	d00b      	beq.n	80090ea <_svfiprintf_r+0x7e>
 80090d2:	465b      	mov	r3, fp
 80090d4:	4622      	mov	r2, r4
 80090d6:	4629      	mov	r1, r5
 80090d8:	4638      	mov	r0, r7
 80090da:	f7ff ff6b 	bl	8008fb4 <__ssputs_r>
 80090de:	3001      	adds	r0, #1
 80090e0:	f000 80a7 	beq.w	8009232 <_svfiprintf_r+0x1c6>
 80090e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090e6:	445a      	add	r2, fp
 80090e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80090ea:	f89a 3000 	ldrb.w	r3, [sl]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	f000 809f 	beq.w	8009232 <_svfiprintf_r+0x1c6>
 80090f4:	2300      	movs	r3, #0
 80090f6:	f04f 32ff 	mov.w	r2, #4294967295
 80090fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090fe:	f10a 0a01 	add.w	sl, sl, #1
 8009102:	9304      	str	r3, [sp, #16]
 8009104:	9307      	str	r3, [sp, #28]
 8009106:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800910a:	931a      	str	r3, [sp, #104]	@ 0x68
 800910c:	4654      	mov	r4, sl
 800910e:	2205      	movs	r2, #5
 8009110:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009114:	484e      	ldr	r0, [pc, #312]	@ (8009250 <_svfiprintf_r+0x1e4>)
 8009116:	f7f7 f89b 	bl	8000250 <memchr>
 800911a:	9a04      	ldr	r2, [sp, #16]
 800911c:	b9d8      	cbnz	r0, 8009156 <_svfiprintf_r+0xea>
 800911e:	06d0      	lsls	r0, r2, #27
 8009120:	bf44      	itt	mi
 8009122:	2320      	movmi	r3, #32
 8009124:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009128:	0711      	lsls	r1, r2, #28
 800912a:	bf44      	itt	mi
 800912c:	232b      	movmi	r3, #43	@ 0x2b
 800912e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009132:	f89a 3000 	ldrb.w	r3, [sl]
 8009136:	2b2a      	cmp	r3, #42	@ 0x2a
 8009138:	d015      	beq.n	8009166 <_svfiprintf_r+0xfa>
 800913a:	9a07      	ldr	r2, [sp, #28]
 800913c:	4654      	mov	r4, sl
 800913e:	2000      	movs	r0, #0
 8009140:	f04f 0c0a 	mov.w	ip, #10
 8009144:	4621      	mov	r1, r4
 8009146:	f811 3b01 	ldrb.w	r3, [r1], #1
 800914a:	3b30      	subs	r3, #48	@ 0x30
 800914c:	2b09      	cmp	r3, #9
 800914e:	d94b      	bls.n	80091e8 <_svfiprintf_r+0x17c>
 8009150:	b1b0      	cbz	r0, 8009180 <_svfiprintf_r+0x114>
 8009152:	9207      	str	r2, [sp, #28]
 8009154:	e014      	b.n	8009180 <_svfiprintf_r+0x114>
 8009156:	eba0 0308 	sub.w	r3, r0, r8
 800915a:	fa09 f303 	lsl.w	r3, r9, r3
 800915e:	4313      	orrs	r3, r2
 8009160:	9304      	str	r3, [sp, #16]
 8009162:	46a2      	mov	sl, r4
 8009164:	e7d2      	b.n	800910c <_svfiprintf_r+0xa0>
 8009166:	9b03      	ldr	r3, [sp, #12]
 8009168:	1d19      	adds	r1, r3, #4
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	9103      	str	r1, [sp, #12]
 800916e:	2b00      	cmp	r3, #0
 8009170:	bfbb      	ittet	lt
 8009172:	425b      	neglt	r3, r3
 8009174:	f042 0202 	orrlt.w	r2, r2, #2
 8009178:	9307      	strge	r3, [sp, #28]
 800917a:	9307      	strlt	r3, [sp, #28]
 800917c:	bfb8      	it	lt
 800917e:	9204      	strlt	r2, [sp, #16]
 8009180:	7823      	ldrb	r3, [r4, #0]
 8009182:	2b2e      	cmp	r3, #46	@ 0x2e
 8009184:	d10a      	bne.n	800919c <_svfiprintf_r+0x130>
 8009186:	7863      	ldrb	r3, [r4, #1]
 8009188:	2b2a      	cmp	r3, #42	@ 0x2a
 800918a:	d132      	bne.n	80091f2 <_svfiprintf_r+0x186>
 800918c:	9b03      	ldr	r3, [sp, #12]
 800918e:	1d1a      	adds	r2, r3, #4
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	9203      	str	r2, [sp, #12]
 8009194:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009198:	3402      	adds	r4, #2
 800919a:	9305      	str	r3, [sp, #20]
 800919c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009260 <_svfiprintf_r+0x1f4>
 80091a0:	7821      	ldrb	r1, [r4, #0]
 80091a2:	2203      	movs	r2, #3
 80091a4:	4650      	mov	r0, sl
 80091a6:	f7f7 f853 	bl	8000250 <memchr>
 80091aa:	b138      	cbz	r0, 80091bc <_svfiprintf_r+0x150>
 80091ac:	9b04      	ldr	r3, [sp, #16]
 80091ae:	eba0 000a 	sub.w	r0, r0, sl
 80091b2:	2240      	movs	r2, #64	@ 0x40
 80091b4:	4082      	lsls	r2, r0
 80091b6:	4313      	orrs	r3, r2
 80091b8:	3401      	adds	r4, #1
 80091ba:	9304      	str	r3, [sp, #16]
 80091bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091c0:	4824      	ldr	r0, [pc, #144]	@ (8009254 <_svfiprintf_r+0x1e8>)
 80091c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80091c6:	2206      	movs	r2, #6
 80091c8:	f7f7 f842 	bl	8000250 <memchr>
 80091cc:	2800      	cmp	r0, #0
 80091ce:	d036      	beq.n	800923e <_svfiprintf_r+0x1d2>
 80091d0:	4b21      	ldr	r3, [pc, #132]	@ (8009258 <_svfiprintf_r+0x1ec>)
 80091d2:	bb1b      	cbnz	r3, 800921c <_svfiprintf_r+0x1b0>
 80091d4:	9b03      	ldr	r3, [sp, #12]
 80091d6:	3307      	adds	r3, #7
 80091d8:	f023 0307 	bic.w	r3, r3, #7
 80091dc:	3308      	adds	r3, #8
 80091de:	9303      	str	r3, [sp, #12]
 80091e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091e2:	4433      	add	r3, r6
 80091e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80091e6:	e76a      	b.n	80090be <_svfiprintf_r+0x52>
 80091e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80091ec:	460c      	mov	r4, r1
 80091ee:	2001      	movs	r0, #1
 80091f0:	e7a8      	b.n	8009144 <_svfiprintf_r+0xd8>
 80091f2:	2300      	movs	r3, #0
 80091f4:	3401      	adds	r4, #1
 80091f6:	9305      	str	r3, [sp, #20]
 80091f8:	4619      	mov	r1, r3
 80091fa:	f04f 0c0a 	mov.w	ip, #10
 80091fe:	4620      	mov	r0, r4
 8009200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009204:	3a30      	subs	r2, #48	@ 0x30
 8009206:	2a09      	cmp	r2, #9
 8009208:	d903      	bls.n	8009212 <_svfiprintf_r+0x1a6>
 800920a:	2b00      	cmp	r3, #0
 800920c:	d0c6      	beq.n	800919c <_svfiprintf_r+0x130>
 800920e:	9105      	str	r1, [sp, #20]
 8009210:	e7c4      	b.n	800919c <_svfiprintf_r+0x130>
 8009212:	fb0c 2101 	mla	r1, ip, r1, r2
 8009216:	4604      	mov	r4, r0
 8009218:	2301      	movs	r3, #1
 800921a:	e7f0      	b.n	80091fe <_svfiprintf_r+0x192>
 800921c:	ab03      	add	r3, sp, #12
 800921e:	9300      	str	r3, [sp, #0]
 8009220:	462a      	mov	r2, r5
 8009222:	4b0e      	ldr	r3, [pc, #56]	@ (800925c <_svfiprintf_r+0x1f0>)
 8009224:	a904      	add	r1, sp, #16
 8009226:	4638      	mov	r0, r7
 8009228:	f3af 8000 	nop.w
 800922c:	1c42      	adds	r2, r0, #1
 800922e:	4606      	mov	r6, r0
 8009230:	d1d6      	bne.n	80091e0 <_svfiprintf_r+0x174>
 8009232:	89ab      	ldrh	r3, [r5, #12]
 8009234:	065b      	lsls	r3, r3, #25
 8009236:	f53f af2d 	bmi.w	8009094 <_svfiprintf_r+0x28>
 800923a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800923c:	e72c      	b.n	8009098 <_svfiprintf_r+0x2c>
 800923e:	ab03      	add	r3, sp, #12
 8009240:	9300      	str	r3, [sp, #0]
 8009242:	462a      	mov	r2, r5
 8009244:	4b05      	ldr	r3, [pc, #20]	@ (800925c <_svfiprintf_r+0x1f0>)
 8009246:	a904      	add	r1, sp, #16
 8009248:	4638      	mov	r0, r7
 800924a:	f000 f879 	bl	8009340 <_printf_i>
 800924e:	e7ed      	b.n	800922c <_svfiprintf_r+0x1c0>
 8009250:	08009fde 	.word	0x08009fde
 8009254:	08009fe8 	.word	0x08009fe8
 8009258:	00000000 	.word	0x00000000
 800925c:	08008fb5 	.word	0x08008fb5
 8009260:	08009fe4 	.word	0x08009fe4

08009264 <_printf_common>:
 8009264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009268:	4616      	mov	r6, r2
 800926a:	4698      	mov	r8, r3
 800926c:	688a      	ldr	r2, [r1, #8]
 800926e:	690b      	ldr	r3, [r1, #16]
 8009270:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009274:	4293      	cmp	r3, r2
 8009276:	bfb8      	it	lt
 8009278:	4613      	movlt	r3, r2
 800927a:	6033      	str	r3, [r6, #0]
 800927c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009280:	4607      	mov	r7, r0
 8009282:	460c      	mov	r4, r1
 8009284:	b10a      	cbz	r2, 800928a <_printf_common+0x26>
 8009286:	3301      	adds	r3, #1
 8009288:	6033      	str	r3, [r6, #0]
 800928a:	6823      	ldr	r3, [r4, #0]
 800928c:	0699      	lsls	r1, r3, #26
 800928e:	bf42      	ittt	mi
 8009290:	6833      	ldrmi	r3, [r6, #0]
 8009292:	3302      	addmi	r3, #2
 8009294:	6033      	strmi	r3, [r6, #0]
 8009296:	6825      	ldr	r5, [r4, #0]
 8009298:	f015 0506 	ands.w	r5, r5, #6
 800929c:	d106      	bne.n	80092ac <_printf_common+0x48>
 800929e:	f104 0a19 	add.w	sl, r4, #25
 80092a2:	68e3      	ldr	r3, [r4, #12]
 80092a4:	6832      	ldr	r2, [r6, #0]
 80092a6:	1a9b      	subs	r3, r3, r2
 80092a8:	42ab      	cmp	r3, r5
 80092aa:	dc26      	bgt.n	80092fa <_printf_common+0x96>
 80092ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80092b0:	6822      	ldr	r2, [r4, #0]
 80092b2:	3b00      	subs	r3, #0
 80092b4:	bf18      	it	ne
 80092b6:	2301      	movne	r3, #1
 80092b8:	0692      	lsls	r2, r2, #26
 80092ba:	d42b      	bmi.n	8009314 <_printf_common+0xb0>
 80092bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80092c0:	4641      	mov	r1, r8
 80092c2:	4638      	mov	r0, r7
 80092c4:	47c8      	blx	r9
 80092c6:	3001      	adds	r0, #1
 80092c8:	d01e      	beq.n	8009308 <_printf_common+0xa4>
 80092ca:	6823      	ldr	r3, [r4, #0]
 80092cc:	6922      	ldr	r2, [r4, #16]
 80092ce:	f003 0306 	and.w	r3, r3, #6
 80092d2:	2b04      	cmp	r3, #4
 80092d4:	bf02      	ittt	eq
 80092d6:	68e5      	ldreq	r5, [r4, #12]
 80092d8:	6833      	ldreq	r3, [r6, #0]
 80092da:	1aed      	subeq	r5, r5, r3
 80092dc:	68a3      	ldr	r3, [r4, #8]
 80092de:	bf0c      	ite	eq
 80092e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80092e4:	2500      	movne	r5, #0
 80092e6:	4293      	cmp	r3, r2
 80092e8:	bfc4      	itt	gt
 80092ea:	1a9b      	subgt	r3, r3, r2
 80092ec:	18ed      	addgt	r5, r5, r3
 80092ee:	2600      	movs	r6, #0
 80092f0:	341a      	adds	r4, #26
 80092f2:	42b5      	cmp	r5, r6
 80092f4:	d11a      	bne.n	800932c <_printf_common+0xc8>
 80092f6:	2000      	movs	r0, #0
 80092f8:	e008      	b.n	800930c <_printf_common+0xa8>
 80092fa:	2301      	movs	r3, #1
 80092fc:	4652      	mov	r2, sl
 80092fe:	4641      	mov	r1, r8
 8009300:	4638      	mov	r0, r7
 8009302:	47c8      	blx	r9
 8009304:	3001      	adds	r0, #1
 8009306:	d103      	bne.n	8009310 <_printf_common+0xac>
 8009308:	f04f 30ff 	mov.w	r0, #4294967295
 800930c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009310:	3501      	adds	r5, #1
 8009312:	e7c6      	b.n	80092a2 <_printf_common+0x3e>
 8009314:	18e1      	adds	r1, r4, r3
 8009316:	1c5a      	adds	r2, r3, #1
 8009318:	2030      	movs	r0, #48	@ 0x30
 800931a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800931e:	4422      	add	r2, r4
 8009320:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009324:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009328:	3302      	adds	r3, #2
 800932a:	e7c7      	b.n	80092bc <_printf_common+0x58>
 800932c:	2301      	movs	r3, #1
 800932e:	4622      	mov	r2, r4
 8009330:	4641      	mov	r1, r8
 8009332:	4638      	mov	r0, r7
 8009334:	47c8      	blx	r9
 8009336:	3001      	adds	r0, #1
 8009338:	d0e6      	beq.n	8009308 <_printf_common+0xa4>
 800933a:	3601      	adds	r6, #1
 800933c:	e7d9      	b.n	80092f2 <_printf_common+0x8e>
	...

08009340 <_printf_i>:
 8009340:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009344:	7e0f      	ldrb	r7, [r1, #24]
 8009346:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009348:	2f78      	cmp	r7, #120	@ 0x78
 800934a:	4691      	mov	r9, r2
 800934c:	4680      	mov	r8, r0
 800934e:	460c      	mov	r4, r1
 8009350:	469a      	mov	sl, r3
 8009352:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009356:	d807      	bhi.n	8009368 <_printf_i+0x28>
 8009358:	2f62      	cmp	r7, #98	@ 0x62
 800935a:	d80a      	bhi.n	8009372 <_printf_i+0x32>
 800935c:	2f00      	cmp	r7, #0
 800935e:	f000 80d2 	beq.w	8009506 <_printf_i+0x1c6>
 8009362:	2f58      	cmp	r7, #88	@ 0x58
 8009364:	f000 80b9 	beq.w	80094da <_printf_i+0x19a>
 8009368:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800936c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009370:	e03a      	b.n	80093e8 <_printf_i+0xa8>
 8009372:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009376:	2b15      	cmp	r3, #21
 8009378:	d8f6      	bhi.n	8009368 <_printf_i+0x28>
 800937a:	a101      	add	r1, pc, #4	@ (adr r1, 8009380 <_printf_i+0x40>)
 800937c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009380:	080093d9 	.word	0x080093d9
 8009384:	080093ed 	.word	0x080093ed
 8009388:	08009369 	.word	0x08009369
 800938c:	08009369 	.word	0x08009369
 8009390:	08009369 	.word	0x08009369
 8009394:	08009369 	.word	0x08009369
 8009398:	080093ed 	.word	0x080093ed
 800939c:	08009369 	.word	0x08009369
 80093a0:	08009369 	.word	0x08009369
 80093a4:	08009369 	.word	0x08009369
 80093a8:	08009369 	.word	0x08009369
 80093ac:	080094ed 	.word	0x080094ed
 80093b0:	08009417 	.word	0x08009417
 80093b4:	080094a7 	.word	0x080094a7
 80093b8:	08009369 	.word	0x08009369
 80093bc:	08009369 	.word	0x08009369
 80093c0:	0800950f 	.word	0x0800950f
 80093c4:	08009369 	.word	0x08009369
 80093c8:	08009417 	.word	0x08009417
 80093cc:	08009369 	.word	0x08009369
 80093d0:	08009369 	.word	0x08009369
 80093d4:	080094af 	.word	0x080094af
 80093d8:	6833      	ldr	r3, [r6, #0]
 80093da:	1d1a      	adds	r2, r3, #4
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	6032      	str	r2, [r6, #0]
 80093e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80093e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80093e8:	2301      	movs	r3, #1
 80093ea:	e09d      	b.n	8009528 <_printf_i+0x1e8>
 80093ec:	6833      	ldr	r3, [r6, #0]
 80093ee:	6820      	ldr	r0, [r4, #0]
 80093f0:	1d19      	adds	r1, r3, #4
 80093f2:	6031      	str	r1, [r6, #0]
 80093f4:	0606      	lsls	r6, r0, #24
 80093f6:	d501      	bpl.n	80093fc <_printf_i+0xbc>
 80093f8:	681d      	ldr	r5, [r3, #0]
 80093fa:	e003      	b.n	8009404 <_printf_i+0xc4>
 80093fc:	0645      	lsls	r5, r0, #25
 80093fe:	d5fb      	bpl.n	80093f8 <_printf_i+0xb8>
 8009400:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009404:	2d00      	cmp	r5, #0
 8009406:	da03      	bge.n	8009410 <_printf_i+0xd0>
 8009408:	232d      	movs	r3, #45	@ 0x2d
 800940a:	426d      	negs	r5, r5
 800940c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009410:	4859      	ldr	r0, [pc, #356]	@ (8009578 <_printf_i+0x238>)
 8009412:	230a      	movs	r3, #10
 8009414:	e011      	b.n	800943a <_printf_i+0xfa>
 8009416:	6821      	ldr	r1, [r4, #0]
 8009418:	6833      	ldr	r3, [r6, #0]
 800941a:	0608      	lsls	r0, r1, #24
 800941c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009420:	d402      	bmi.n	8009428 <_printf_i+0xe8>
 8009422:	0649      	lsls	r1, r1, #25
 8009424:	bf48      	it	mi
 8009426:	b2ad      	uxthmi	r5, r5
 8009428:	2f6f      	cmp	r7, #111	@ 0x6f
 800942a:	4853      	ldr	r0, [pc, #332]	@ (8009578 <_printf_i+0x238>)
 800942c:	6033      	str	r3, [r6, #0]
 800942e:	bf14      	ite	ne
 8009430:	230a      	movne	r3, #10
 8009432:	2308      	moveq	r3, #8
 8009434:	2100      	movs	r1, #0
 8009436:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800943a:	6866      	ldr	r6, [r4, #4]
 800943c:	60a6      	str	r6, [r4, #8]
 800943e:	2e00      	cmp	r6, #0
 8009440:	bfa2      	ittt	ge
 8009442:	6821      	ldrge	r1, [r4, #0]
 8009444:	f021 0104 	bicge.w	r1, r1, #4
 8009448:	6021      	strge	r1, [r4, #0]
 800944a:	b90d      	cbnz	r5, 8009450 <_printf_i+0x110>
 800944c:	2e00      	cmp	r6, #0
 800944e:	d04b      	beq.n	80094e8 <_printf_i+0x1a8>
 8009450:	4616      	mov	r6, r2
 8009452:	fbb5 f1f3 	udiv	r1, r5, r3
 8009456:	fb03 5711 	mls	r7, r3, r1, r5
 800945a:	5dc7      	ldrb	r7, [r0, r7]
 800945c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009460:	462f      	mov	r7, r5
 8009462:	42bb      	cmp	r3, r7
 8009464:	460d      	mov	r5, r1
 8009466:	d9f4      	bls.n	8009452 <_printf_i+0x112>
 8009468:	2b08      	cmp	r3, #8
 800946a:	d10b      	bne.n	8009484 <_printf_i+0x144>
 800946c:	6823      	ldr	r3, [r4, #0]
 800946e:	07df      	lsls	r7, r3, #31
 8009470:	d508      	bpl.n	8009484 <_printf_i+0x144>
 8009472:	6923      	ldr	r3, [r4, #16]
 8009474:	6861      	ldr	r1, [r4, #4]
 8009476:	4299      	cmp	r1, r3
 8009478:	bfde      	ittt	le
 800947a:	2330      	movle	r3, #48	@ 0x30
 800947c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009480:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009484:	1b92      	subs	r2, r2, r6
 8009486:	6122      	str	r2, [r4, #16]
 8009488:	f8cd a000 	str.w	sl, [sp]
 800948c:	464b      	mov	r3, r9
 800948e:	aa03      	add	r2, sp, #12
 8009490:	4621      	mov	r1, r4
 8009492:	4640      	mov	r0, r8
 8009494:	f7ff fee6 	bl	8009264 <_printf_common>
 8009498:	3001      	adds	r0, #1
 800949a:	d14a      	bne.n	8009532 <_printf_i+0x1f2>
 800949c:	f04f 30ff 	mov.w	r0, #4294967295
 80094a0:	b004      	add	sp, #16
 80094a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094a6:	6823      	ldr	r3, [r4, #0]
 80094a8:	f043 0320 	orr.w	r3, r3, #32
 80094ac:	6023      	str	r3, [r4, #0]
 80094ae:	4833      	ldr	r0, [pc, #204]	@ (800957c <_printf_i+0x23c>)
 80094b0:	2778      	movs	r7, #120	@ 0x78
 80094b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80094b6:	6823      	ldr	r3, [r4, #0]
 80094b8:	6831      	ldr	r1, [r6, #0]
 80094ba:	061f      	lsls	r7, r3, #24
 80094bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80094c0:	d402      	bmi.n	80094c8 <_printf_i+0x188>
 80094c2:	065f      	lsls	r7, r3, #25
 80094c4:	bf48      	it	mi
 80094c6:	b2ad      	uxthmi	r5, r5
 80094c8:	6031      	str	r1, [r6, #0]
 80094ca:	07d9      	lsls	r1, r3, #31
 80094cc:	bf44      	itt	mi
 80094ce:	f043 0320 	orrmi.w	r3, r3, #32
 80094d2:	6023      	strmi	r3, [r4, #0]
 80094d4:	b11d      	cbz	r5, 80094de <_printf_i+0x19e>
 80094d6:	2310      	movs	r3, #16
 80094d8:	e7ac      	b.n	8009434 <_printf_i+0xf4>
 80094da:	4827      	ldr	r0, [pc, #156]	@ (8009578 <_printf_i+0x238>)
 80094dc:	e7e9      	b.n	80094b2 <_printf_i+0x172>
 80094de:	6823      	ldr	r3, [r4, #0]
 80094e0:	f023 0320 	bic.w	r3, r3, #32
 80094e4:	6023      	str	r3, [r4, #0]
 80094e6:	e7f6      	b.n	80094d6 <_printf_i+0x196>
 80094e8:	4616      	mov	r6, r2
 80094ea:	e7bd      	b.n	8009468 <_printf_i+0x128>
 80094ec:	6833      	ldr	r3, [r6, #0]
 80094ee:	6825      	ldr	r5, [r4, #0]
 80094f0:	6961      	ldr	r1, [r4, #20]
 80094f2:	1d18      	adds	r0, r3, #4
 80094f4:	6030      	str	r0, [r6, #0]
 80094f6:	062e      	lsls	r6, r5, #24
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	d501      	bpl.n	8009500 <_printf_i+0x1c0>
 80094fc:	6019      	str	r1, [r3, #0]
 80094fe:	e002      	b.n	8009506 <_printf_i+0x1c6>
 8009500:	0668      	lsls	r0, r5, #25
 8009502:	d5fb      	bpl.n	80094fc <_printf_i+0x1bc>
 8009504:	8019      	strh	r1, [r3, #0]
 8009506:	2300      	movs	r3, #0
 8009508:	6123      	str	r3, [r4, #16]
 800950a:	4616      	mov	r6, r2
 800950c:	e7bc      	b.n	8009488 <_printf_i+0x148>
 800950e:	6833      	ldr	r3, [r6, #0]
 8009510:	1d1a      	adds	r2, r3, #4
 8009512:	6032      	str	r2, [r6, #0]
 8009514:	681e      	ldr	r6, [r3, #0]
 8009516:	6862      	ldr	r2, [r4, #4]
 8009518:	2100      	movs	r1, #0
 800951a:	4630      	mov	r0, r6
 800951c:	f7f6 fe98 	bl	8000250 <memchr>
 8009520:	b108      	cbz	r0, 8009526 <_printf_i+0x1e6>
 8009522:	1b80      	subs	r0, r0, r6
 8009524:	6060      	str	r0, [r4, #4]
 8009526:	6863      	ldr	r3, [r4, #4]
 8009528:	6123      	str	r3, [r4, #16]
 800952a:	2300      	movs	r3, #0
 800952c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009530:	e7aa      	b.n	8009488 <_printf_i+0x148>
 8009532:	6923      	ldr	r3, [r4, #16]
 8009534:	4632      	mov	r2, r6
 8009536:	4649      	mov	r1, r9
 8009538:	4640      	mov	r0, r8
 800953a:	47d0      	blx	sl
 800953c:	3001      	adds	r0, #1
 800953e:	d0ad      	beq.n	800949c <_printf_i+0x15c>
 8009540:	6823      	ldr	r3, [r4, #0]
 8009542:	079b      	lsls	r3, r3, #30
 8009544:	d413      	bmi.n	800956e <_printf_i+0x22e>
 8009546:	68e0      	ldr	r0, [r4, #12]
 8009548:	9b03      	ldr	r3, [sp, #12]
 800954a:	4298      	cmp	r0, r3
 800954c:	bfb8      	it	lt
 800954e:	4618      	movlt	r0, r3
 8009550:	e7a6      	b.n	80094a0 <_printf_i+0x160>
 8009552:	2301      	movs	r3, #1
 8009554:	4632      	mov	r2, r6
 8009556:	4649      	mov	r1, r9
 8009558:	4640      	mov	r0, r8
 800955a:	47d0      	blx	sl
 800955c:	3001      	adds	r0, #1
 800955e:	d09d      	beq.n	800949c <_printf_i+0x15c>
 8009560:	3501      	adds	r5, #1
 8009562:	68e3      	ldr	r3, [r4, #12]
 8009564:	9903      	ldr	r1, [sp, #12]
 8009566:	1a5b      	subs	r3, r3, r1
 8009568:	42ab      	cmp	r3, r5
 800956a:	dcf2      	bgt.n	8009552 <_printf_i+0x212>
 800956c:	e7eb      	b.n	8009546 <_printf_i+0x206>
 800956e:	2500      	movs	r5, #0
 8009570:	f104 0619 	add.w	r6, r4, #25
 8009574:	e7f5      	b.n	8009562 <_printf_i+0x222>
 8009576:	bf00      	nop
 8009578:	08009fef 	.word	0x08009fef
 800957c:	0800a000 	.word	0x0800a000

08009580 <__sflush_r>:
 8009580:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009588:	0716      	lsls	r6, r2, #28
 800958a:	4605      	mov	r5, r0
 800958c:	460c      	mov	r4, r1
 800958e:	d454      	bmi.n	800963a <__sflush_r+0xba>
 8009590:	684b      	ldr	r3, [r1, #4]
 8009592:	2b00      	cmp	r3, #0
 8009594:	dc02      	bgt.n	800959c <__sflush_r+0x1c>
 8009596:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009598:	2b00      	cmp	r3, #0
 800959a:	dd48      	ble.n	800962e <__sflush_r+0xae>
 800959c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800959e:	2e00      	cmp	r6, #0
 80095a0:	d045      	beq.n	800962e <__sflush_r+0xae>
 80095a2:	2300      	movs	r3, #0
 80095a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80095a8:	682f      	ldr	r7, [r5, #0]
 80095aa:	6a21      	ldr	r1, [r4, #32]
 80095ac:	602b      	str	r3, [r5, #0]
 80095ae:	d030      	beq.n	8009612 <__sflush_r+0x92>
 80095b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80095b2:	89a3      	ldrh	r3, [r4, #12]
 80095b4:	0759      	lsls	r1, r3, #29
 80095b6:	d505      	bpl.n	80095c4 <__sflush_r+0x44>
 80095b8:	6863      	ldr	r3, [r4, #4]
 80095ba:	1ad2      	subs	r2, r2, r3
 80095bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80095be:	b10b      	cbz	r3, 80095c4 <__sflush_r+0x44>
 80095c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80095c2:	1ad2      	subs	r2, r2, r3
 80095c4:	2300      	movs	r3, #0
 80095c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80095c8:	6a21      	ldr	r1, [r4, #32]
 80095ca:	4628      	mov	r0, r5
 80095cc:	47b0      	blx	r6
 80095ce:	1c43      	adds	r3, r0, #1
 80095d0:	89a3      	ldrh	r3, [r4, #12]
 80095d2:	d106      	bne.n	80095e2 <__sflush_r+0x62>
 80095d4:	6829      	ldr	r1, [r5, #0]
 80095d6:	291d      	cmp	r1, #29
 80095d8:	d82b      	bhi.n	8009632 <__sflush_r+0xb2>
 80095da:	4a2a      	ldr	r2, [pc, #168]	@ (8009684 <__sflush_r+0x104>)
 80095dc:	410a      	asrs	r2, r1
 80095de:	07d6      	lsls	r6, r2, #31
 80095e0:	d427      	bmi.n	8009632 <__sflush_r+0xb2>
 80095e2:	2200      	movs	r2, #0
 80095e4:	6062      	str	r2, [r4, #4]
 80095e6:	04d9      	lsls	r1, r3, #19
 80095e8:	6922      	ldr	r2, [r4, #16]
 80095ea:	6022      	str	r2, [r4, #0]
 80095ec:	d504      	bpl.n	80095f8 <__sflush_r+0x78>
 80095ee:	1c42      	adds	r2, r0, #1
 80095f0:	d101      	bne.n	80095f6 <__sflush_r+0x76>
 80095f2:	682b      	ldr	r3, [r5, #0]
 80095f4:	b903      	cbnz	r3, 80095f8 <__sflush_r+0x78>
 80095f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80095f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80095fa:	602f      	str	r7, [r5, #0]
 80095fc:	b1b9      	cbz	r1, 800962e <__sflush_r+0xae>
 80095fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009602:	4299      	cmp	r1, r3
 8009604:	d002      	beq.n	800960c <__sflush_r+0x8c>
 8009606:	4628      	mov	r0, r5
 8009608:	f7ff fbd4 	bl	8008db4 <_free_r>
 800960c:	2300      	movs	r3, #0
 800960e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009610:	e00d      	b.n	800962e <__sflush_r+0xae>
 8009612:	2301      	movs	r3, #1
 8009614:	4628      	mov	r0, r5
 8009616:	47b0      	blx	r6
 8009618:	4602      	mov	r2, r0
 800961a:	1c50      	adds	r0, r2, #1
 800961c:	d1c9      	bne.n	80095b2 <__sflush_r+0x32>
 800961e:	682b      	ldr	r3, [r5, #0]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d0c6      	beq.n	80095b2 <__sflush_r+0x32>
 8009624:	2b1d      	cmp	r3, #29
 8009626:	d001      	beq.n	800962c <__sflush_r+0xac>
 8009628:	2b16      	cmp	r3, #22
 800962a:	d11e      	bne.n	800966a <__sflush_r+0xea>
 800962c:	602f      	str	r7, [r5, #0]
 800962e:	2000      	movs	r0, #0
 8009630:	e022      	b.n	8009678 <__sflush_r+0xf8>
 8009632:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009636:	b21b      	sxth	r3, r3
 8009638:	e01b      	b.n	8009672 <__sflush_r+0xf2>
 800963a:	690f      	ldr	r7, [r1, #16]
 800963c:	2f00      	cmp	r7, #0
 800963e:	d0f6      	beq.n	800962e <__sflush_r+0xae>
 8009640:	0793      	lsls	r3, r2, #30
 8009642:	680e      	ldr	r6, [r1, #0]
 8009644:	bf08      	it	eq
 8009646:	694b      	ldreq	r3, [r1, #20]
 8009648:	600f      	str	r7, [r1, #0]
 800964a:	bf18      	it	ne
 800964c:	2300      	movne	r3, #0
 800964e:	eba6 0807 	sub.w	r8, r6, r7
 8009652:	608b      	str	r3, [r1, #8]
 8009654:	f1b8 0f00 	cmp.w	r8, #0
 8009658:	dde9      	ble.n	800962e <__sflush_r+0xae>
 800965a:	6a21      	ldr	r1, [r4, #32]
 800965c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800965e:	4643      	mov	r3, r8
 8009660:	463a      	mov	r2, r7
 8009662:	4628      	mov	r0, r5
 8009664:	47b0      	blx	r6
 8009666:	2800      	cmp	r0, #0
 8009668:	dc08      	bgt.n	800967c <__sflush_r+0xfc>
 800966a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800966e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009672:	81a3      	strh	r3, [r4, #12]
 8009674:	f04f 30ff 	mov.w	r0, #4294967295
 8009678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800967c:	4407      	add	r7, r0
 800967e:	eba8 0800 	sub.w	r8, r8, r0
 8009682:	e7e7      	b.n	8009654 <__sflush_r+0xd4>
 8009684:	dfbffffe 	.word	0xdfbffffe

08009688 <_fflush_r>:
 8009688:	b538      	push	{r3, r4, r5, lr}
 800968a:	690b      	ldr	r3, [r1, #16]
 800968c:	4605      	mov	r5, r0
 800968e:	460c      	mov	r4, r1
 8009690:	b913      	cbnz	r3, 8009698 <_fflush_r+0x10>
 8009692:	2500      	movs	r5, #0
 8009694:	4628      	mov	r0, r5
 8009696:	bd38      	pop	{r3, r4, r5, pc}
 8009698:	b118      	cbz	r0, 80096a2 <_fflush_r+0x1a>
 800969a:	6a03      	ldr	r3, [r0, #32]
 800969c:	b90b      	cbnz	r3, 80096a2 <_fflush_r+0x1a>
 800969e:	f7ff f9e5 	bl	8008a6c <__sinit>
 80096a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d0f3      	beq.n	8009692 <_fflush_r+0xa>
 80096aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80096ac:	07d0      	lsls	r0, r2, #31
 80096ae:	d404      	bmi.n	80096ba <_fflush_r+0x32>
 80096b0:	0599      	lsls	r1, r3, #22
 80096b2:	d402      	bmi.n	80096ba <_fflush_r+0x32>
 80096b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80096b6:	f7ff fb5c 	bl	8008d72 <__retarget_lock_acquire_recursive>
 80096ba:	4628      	mov	r0, r5
 80096bc:	4621      	mov	r1, r4
 80096be:	f7ff ff5f 	bl	8009580 <__sflush_r>
 80096c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80096c4:	07da      	lsls	r2, r3, #31
 80096c6:	4605      	mov	r5, r0
 80096c8:	d4e4      	bmi.n	8009694 <_fflush_r+0xc>
 80096ca:	89a3      	ldrh	r3, [r4, #12]
 80096cc:	059b      	lsls	r3, r3, #22
 80096ce:	d4e1      	bmi.n	8009694 <_fflush_r+0xc>
 80096d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80096d2:	f7ff fb4f 	bl	8008d74 <__retarget_lock_release_recursive>
 80096d6:	e7dd      	b.n	8009694 <_fflush_r+0xc>

080096d8 <fiprintf>:
 80096d8:	b40e      	push	{r1, r2, r3}
 80096da:	b503      	push	{r0, r1, lr}
 80096dc:	4601      	mov	r1, r0
 80096de:	ab03      	add	r3, sp, #12
 80096e0:	4805      	ldr	r0, [pc, #20]	@ (80096f8 <fiprintf+0x20>)
 80096e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80096e6:	6800      	ldr	r0, [r0, #0]
 80096e8:	9301      	str	r3, [sp, #4]
 80096ea:	f000 f89d 	bl	8009828 <_vfiprintf_r>
 80096ee:	b002      	add	sp, #8
 80096f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80096f4:	b003      	add	sp, #12
 80096f6:	4770      	bx	lr
 80096f8:	200000d4 	.word	0x200000d4

080096fc <memmove>:
 80096fc:	4288      	cmp	r0, r1
 80096fe:	b510      	push	{r4, lr}
 8009700:	eb01 0402 	add.w	r4, r1, r2
 8009704:	d902      	bls.n	800970c <memmove+0x10>
 8009706:	4284      	cmp	r4, r0
 8009708:	4623      	mov	r3, r4
 800970a:	d807      	bhi.n	800971c <memmove+0x20>
 800970c:	1e43      	subs	r3, r0, #1
 800970e:	42a1      	cmp	r1, r4
 8009710:	d008      	beq.n	8009724 <memmove+0x28>
 8009712:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009716:	f803 2f01 	strb.w	r2, [r3, #1]!
 800971a:	e7f8      	b.n	800970e <memmove+0x12>
 800971c:	4402      	add	r2, r0
 800971e:	4601      	mov	r1, r0
 8009720:	428a      	cmp	r2, r1
 8009722:	d100      	bne.n	8009726 <memmove+0x2a>
 8009724:	bd10      	pop	{r4, pc}
 8009726:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800972a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800972e:	e7f7      	b.n	8009720 <memmove+0x24>

08009730 <_sbrk_r>:
 8009730:	b538      	push	{r3, r4, r5, lr}
 8009732:	4d06      	ldr	r5, [pc, #24]	@ (800974c <_sbrk_r+0x1c>)
 8009734:	2300      	movs	r3, #0
 8009736:	4604      	mov	r4, r0
 8009738:	4608      	mov	r0, r1
 800973a:	602b      	str	r3, [r5, #0]
 800973c:	f7f7 fd78 	bl	8001230 <_sbrk>
 8009740:	1c43      	adds	r3, r0, #1
 8009742:	d102      	bne.n	800974a <_sbrk_r+0x1a>
 8009744:	682b      	ldr	r3, [r5, #0]
 8009746:	b103      	cbz	r3, 800974a <_sbrk_r+0x1a>
 8009748:	6023      	str	r3, [r4, #0]
 800974a:	bd38      	pop	{r3, r4, r5, pc}
 800974c:	20000620 	.word	0x20000620

08009750 <memcpy>:
 8009750:	440a      	add	r2, r1
 8009752:	4291      	cmp	r1, r2
 8009754:	f100 33ff 	add.w	r3, r0, #4294967295
 8009758:	d100      	bne.n	800975c <memcpy+0xc>
 800975a:	4770      	bx	lr
 800975c:	b510      	push	{r4, lr}
 800975e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009762:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009766:	4291      	cmp	r1, r2
 8009768:	d1f9      	bne.n	800975e <memcpy+0xe>
 800976a:	bd10      	pop	{r4, pc}

0800976c <abort>:
 800976c:	b508      	push	{r3, lr}
 800976e:	2006      	movs	r0, #6
 8009770:	f000 fa2e 	bl	8009bd0 <raise>
 8009774:	2001      	movs	r0, #1
 8009776:	f7f7 fce3 	bl	8001140 <_exit>

0800977a <_realloc_r>:
 800977a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800977e:	4680      	mov	r8, r0
 8009780:	4615      	mov	r5, r2
 8009782:	460c      	mov	r4, r1
 8009784:	b921      	cbnz	r1, 8009790 <_realloc_r+0x16>
 8009786:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800978a:	4611      	mov	r1, r2
 800978c:	f7ff bb86 	b.w	8008e9c <_malloc_r>
 8009790:	b92a      	cbnz	r2, 800979e <_realloc_r+0x24>
 8009792:	f7ff fb0f 	bl	8008db4 <_free_r>
 8009796:	2400      	movs	r4, #0
 8009798:	4620      	mov	r0, r4
 800979a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800979e:	f000 fa33 	bl	8009c08 <_malloc_usable_size_r>
 80097a2:	4285      	cmp	r5, r0
 80097a4:	4606      	mov	r6, r0
 80097a6:	d802      	bhi.n	80097ae <_realloc_r+0x34>
 80097a8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80097ac:	d8f4      	bhi.n	8009798 <_realloc_r+0x1e>
 80097ae:	4629      	mov	r1, r5
 80097b0:	4640      	mov	r0, r8
 80097b2:	f7ff fb73 	bl	8008e9c <_malloc_r>
 80097b6:	4607      	mov	r7, r0
 80097b8:	2800      	cmp	r0, #0
 80097ba:	d0ec      	beq.n	8009796 <_realloc_r+0x1c>
 80097bc:	42b5      	cmp	r5, r6
 80097be:	462a      	mov	r2, r5
 80097c0:	4621      	mov	r1, r4
 80097c2:	bf28      	it	cs
 80097c4:	4632      	movcs	r2, r6
 80097c6:	f7ff ffc3 	bl	8009750 <memcpy>
 80097ca:	4621      	mov	r1, r4
 80097cc:	4640      	mov	r0, r8
 80097ce:	f7ff faf1 	bl	8008db4 <_free_r>
 80097d2:	463c      	mov	r4, r7
 80097d4:	e7e0      	b.n	8009798 <_realloc_r+0x1e>

080097d6 <__sfputc_r>:
 80097d6:	6893      	ldr	r3, [r2, #8]
 80097d8:	3b01      	subs	r3, #1
 80097da:	2b00      	cmp	r3, #0
 80097dc:	b410      	push	{r4}
 80097de:	6093      	str	r3, [r2, #8]
 80097e0:	da08      	bge.n	80097f4 <__sfputc_r+0x1e>
 80097e2:	6994      	ldr	r4, [r2, #24]
 80097e4:	42a3      	cmp	r3, r4
 80097e6:	db01      	blt.n	80097ec <__sfputc_r+0x16>
 80097e8:	290a      	cmp	r1, #10
 80097ea:	d103      	bne.n	80097f4 <__sfputc_r+0x1e>
 80097ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097f0:	f000 b932 	b.w	8009a58 <__swbuf_r>
 80097f4:	6813      	ldr	r3, [r2, #0]
 80097f6:	1c58      	adds	r0, r3, #1
 80097f8:	6010      	str	r0, [r2, #0]
 80097fa:	7019      	strb	r1, [r3, #0]
 80097fc:	4608      	mov	r0, r1
 80097fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009802:	4770      	bx	lr

08009804 <__sfputs_r>:
 8009804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009806:	4606      	mov	r6, r0
 8009808:	460f      	mov	r7, r1
 800980a:	4614      	mov	r4, r2
 800980c:	18d5      	adds	r5, r2, r3
 800980e:	42ac      	cmp	r4, r5
 8009810:	d101      	bne.n	8009816 <__sfputs_r+0x12>
 8009812:	2000      	movs	r0, #0
 8009814:	e007      	b.n	8009826 <__sfputs_r+0x22>
 8009816:	f814 1b01 	ldrb.w	r1, [r4], #1
 800981a:	463a      	mov	r2, r7
 800981c:	4630      	mov	r0, r6
 800981e:	f7ff ffda 	bl	80097d6 <__sfputc_r>
 8009822:	1c43      	adds	r3, r0, #1
 8009824:	d1f3      	bne.n	800980e <__sfputs_r+0xa>
 8009826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009828 <_vfiprintf_r>:
 8009828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800982c:	460d      	mov	r5, r1
 800982e:	b09d      	sub	sp, #116	@ 0x74
 8009830:	4614      	mov	r4, r2
 8009832:	4698      	mov	r8, r3
 8009834:	4606      	mov	r6, r0
 8009836:	b118      	cbz	r0, 8009840 <_vfiprintf_r+0x18>
 8009838:	6a03      	ldr	r3, [r0, #32]
 800983a:	b90b      	cbnz	r3, 8009840 <_vfiprintf_r+0x18>
 800983c:	f7ff f916 	bl	8008a6c <__sinit>
 8009840:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009842:	07d9      	lsls	r1, r3, #31
 8009844:	d405      	bmi.n	8009852 <_vfiprintf_r+0x2a>
 8009846:	89ab      	ldrh	r3, [r5, #12]
 8009848:	059a      	lsls	r2, r3, #22
 800984a:	d402      	bmi.n	8009852 <_vfiprintf_r+0x2a>
 800984c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800984e:	f7ff fa90 	bl	8008d72 <__retarget_lock_acquire_recursive>
 8009852:	89ab      	ldrh	r3, [r5, #12]
 8009854:	071b      	lsls	r3, r3, #28
 8009856:	d501      	bpl.n	800985c <_vfiprintf_r+0x34>
 8009858:	692b      	ldr	r3, [r5, #16]
 800985a:	b99b      	cbnz	r3, 8009884 <_vfiprintf_r+0x5c>
 800985c:	4629      	mov	r1, r5
 800985e:	4630      	mov	r0, r6
 8009860:	f000 f938 	bl	8009ad4 <__swsetup_r>
 8009864:	b170      	cbz	r0, 8009884 <_vfiprintf_r+0x5c>
 8009866:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009868:	07dc      	lsls	r4, r3, #31
 800986a:	d504      	bpl.n	8009876 <_vfiprintf_r+0x4e>
 800986c:	f04f 30ff 	mov.w	r0, #4294967295
 8009870:	b01d      	add	sp, #116	@ 0x74
 8009872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009876:	89ab      	ldrh	r3, [r5, #12]
 8009878:	0598      	lsls	r0, r3, #22
 800987a:	d4f7      	bmi.n	800986c <_vfiprintf_r+0x44>
 800987c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800987e:	f7ff fa79 	bl	8008d74 <__retarget_lock_release_recursive>
 8009882:	e7f3      	b.n	800986c <_vfiprintf_r+0x44>
 8009884:	2300      	movs	r3, #0
 8009886:	9309      	str	r3, [sp, #36]	@ 0x24
 8009888:	2320      	movs	r3, #32
 800988a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800988e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009892:	2330      	movs	r3, #48	@ 0x30
 8009894:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009a44 <_vfiprintf_r+0x21c>
 8009898:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800989c:	f04f 0901 	mov.w	r9, #1
 80098a0:	4623      	mov	r3, r4
 80098a2:	469a      	mov	sl, r3
 80098a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098a8:	b10a      	cbz	r2, 80098ae <_vfiprintf_r+0x86>
 80098aa:	2a25      	cmp	r2, #37	@ 0x25
 80098ac:	d1f9      	bne.n	80098a2 <_vfiprintf_r+0x7a>
 80098ae:	ebba 0b04 	subs.w	fp, sl, r4
 80098b2:	d00b      	beq.n	80098cc <_vfiprintf_r+0xa4>
 80098b4:	465b      	mov	r3, fp
 80098b6:	4622      	mov	r2, r4
 80098b8:	4629      	mov	r1, r5
 80098ba:	4630      	mov	r0, r6
 80098bc:	f7ff ffa2 	bl	8009804 <__sfputs_r>
 80098c0:	3001      	adds	r0, #1
 80098c2:	f000 80a7 	beq.w	8009a14 <_vfiprintf_r+0x1ec>
 80098c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098c8:	445a      	add	r2, fp
 80098ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80098cc:	f89a 3000 	ldrb.w	r3, [sl]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	f000 809f 	beq.w	8009a14 <_vfiprintf_r+0x1ec>
 80098d6:	2300      	movs	r3, #0
 80098d8:	f04f 32ff 	mov.w	r2, #4294967295
 80098dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098e0:	f10a 0a01 	add.w	sl, sl, #1
 80098e4:	9304      	str	r3, [sp, #16]
 80098e6:	9307      	str	r3, [sp, #28]
 80098e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80098ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80098ee:	4654      	mov	r4, sl
 80098f0:	2205      	movs	r2, #5
 80098f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098f6:	4853      	ldr	r0, [pc, #332]	@ (8009a44 <_vfiprintf_r+0x21c>)
 80098f8:	f7f6 fcaa 	bl	8000250 <memchr>
 80098fc:	9a04      	ldr	r2, [sp, #16]
 80098fe:	b9d8      	cbnz	r0, 8009938 <_vfiprintf_r+0x110>
 8009900:	06d1      	lsls	r1, r2, #27
 8009902:	bf44      	itt	mi
 8009904:	2320      	movmi	r3, #32
 8009906:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800990a:	0713      	lsls	r3, r2, #28
 800990c:	bf44      	itt	mi
 800990e:	232b      	movmi	r3, #43	@ 0x2b
 8009910:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009914:	f89a 3000 	ldrb.w	r3, [sl]
 8009918:	2b2a      	cmp	r3, #42	@ 0x2a
 800991a:	d015      	beq.n	8009948 <_vfiprintf_r+0x120>
 800991c:	9a07      	ldr	r2, [sp, #28]
 800991e:	4654      	mov	r4, sl
 8009920:	2000      	movs	r0, #0
 8009922:	f04f 0c0a 	mov.w	ip, #10
 8009926:	4621      	mov	r1, r4
 8009928:	f811 3b01 	ldrb.w	r3, [r1], #1
 800992c:	3b30      	subs	r3, #48	@ 0x30
 800992e:	2b09      	cmp	r3, #9
 8009930:	d94b      	bls.n	80099ca <_vfiprintf_r+0x1a2>
 8009932:	b1b0      	cbz	r0, 8009962 <_vfiprintf_r+0x13a>
 8009934:	9207      	str	r2, [sp, #28]
 8009936:	e014      	b.n	8009962 <_vfiprintf_r+0x13a>
 8009938:	eba0 0308 	sub.w	r3, r0, r8
 800993c:	fa09 f303 	lsl.w	r3, r9, r3
 8009940:	4313      	orrs	r3, r2
 8009942:	9304      	str	r3, [sp, #16]
 8009944:	46a2      	mov	sl, r4
 8009946:	e7d2      	b.n	80098ee <_vfiprintf_r+0xc6>
 8009948:	9b03      	ldr	r3, [sp, #12]
 800994a:	1d19      	adds	r1, r3, #4
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	9103      	str	r1, [sp, #12]
 8009950:	2b00      	cmp	r3, #0
 8009952:	bfbb      	ittet	lt
 8009954:	425b      	neglt	r3, r3
 8009956:	f042 0202 	orrlt.w	r2, r2, #2
 800995a:	9307      	strge	r3, [sp, #28]
 800995c:	9307      	strlt	r3, [sp, #28]
 800995e:	bfb8      	it	lt
 8009960:	9204      	strlt	r2, [sp, #16]
 8009962:	7823      	ldrb	r3, [r4, #0]
 8009964:	2b2e      	cmp	r3, #46	@ 0x2e
 8009966:	d10a      	bne.n	800997e <_vfiprintf_r+0x156>
 8009968:	7863      	ldrb	r3, [r4, #1]
 800996a:	2b2a      	cmp	r3, #42	@ 0x2a
 800996c:	d132      	bne.n	80099d4 <_vfiprintf_r+0x1ac>
 800996e:	9b03      	ldr	r3, [sp, #12]
 8009970:	1d1a      	adds	r2, r3, #4
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	9203      	str	r2, [sp, #12]
 8009976:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800997a:	3402      	adds	r4, #2
 800997c:	9305      	str	r3, [sp, #20]
 800997e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009a54 <_vfiprintf_r+0x22c>
 8009982:	7821      	ldrb	r1, [r4, #0]
 8009984:	2203      	movs	r2, #3
 8009986:	4650      	mov	r0, sl
 8009988:	f7f6 fc62 	bl	8000250 <memchr>
 800998c:	b138      	cbz	r0, 800999e <_vfiprintf_r+0x176>
 800998e:	9b04      	ldr	r3, [sp, #16]
 8009990:	eba0 000a 	sub.w	r0, r0, sl
 8009994:	2240      	movs	r2, #64	@ 0x40
 8009996:	4082      	lsls	r2, r0
 8009998:	4313      	orrs	r3, r2
 800999a:	3401      	adds	r4, #1
 800999c:	9304      	str	r3, [sp, #16]
 800999e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099a2:	4829      	ldr	r0, [pc, #164]	@ (8009a48 <_vfiprintf_r+0x220>)
 80099a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80099a8:	2206      	movs	r2, #6
 80099aa:	f7f6 fc51 	bl	8000250 <memchr>
 80099ae:	2800      	cmp	r0, #0
 80099b0:	d03f      	beq.n	8009a32 <_vfiprintf_r+0x20a>
 80099b2:	4b26      	ldr	r3, [pc, #152]	@ (8009a4c <_vfiprintf_r+0x224>)
 80099b4:	bb1b      	cbnz	r3, 80099fe <_vfiprintf_r+0x1d6>
 80099b6:	9b03      	ldr	r3, [sp, #12]
 80099b8:	3307      	adds	r3, #7
 80099ba:	f023 0307 	bic.w	r3, r3, #7
 80099be:	3308      	adds	r3, #8
 80099c0:	9303      	str	r3, [sp, #12]
 80099c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099c4:	443b      	add	r3, r7
 80099c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80099c8:	e76a      	b.n	80098a0 <_vfiprintf_r+0x78>
 80099ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80099ce:	460c      	mov	r4, r1
 80099d0:	2001      	movs	r0, #1
 80099d2:	e7a8      	b.n	8009926 <_vfiprintf_r+0xfe>
 80099d4:	2300      	movs	r3, #0
 80099d6:	3401      	adds	r4, #1
 80099d8:	9305      	str	r3, [sp, #20]
 80099da:	4619      	mov	r1, r3
 80099dc:	f04f 0c0a 	mov.w	ip, #10
 80099e0:	4620      	mov	r0, r4
 80099e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099e6:	3a30      	subs	r2, #48	@ 0x30
 80099e8:	2a09      	cmp	r2, #9
 80099ea:	d903      	bls.n	80099f4 <_vfiprintf_r+0x1cc>
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d0c6      	beq.n	800997e <_vfiprintf_r+0x156>
 80099f0:	9105      	str	r1, [sp, #20]
 80099f2:	e7c4      	b.n	800997e <_vfiprintf_r+0x156>
 80099f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80099f8:	4604      	mov	r4, r0
 80099fa:	2301      	movs	r3, #1
 80099fc:	e7f0      	b.n	80099e0 <_vfiprintf_r+0x1b8>
 80099fe:	ab03      	add	r3, sp, #12
 8009a00:	9300      	str	r3, [sp, #0]
 8009a02:	462a      	mov	r2, r5
 8009a04:	4b12      	ldr	r3, [pc, #72]	@ (8009a50 <_vfiprintf_r+0x228>)
 8009a06:	a904      	add	r1, sp, #16
 8009a08:	4630      	mov	r0, r6
 8009a0a:	f3af 8000 	nop.w
 8009a0e:	4607      	mov	r7, r0
 8009a10:	1c78      	adds	r0, r7, #1
 8009a12:	d1d6      	bne.n	80099c2 <_vfiprintf_r+0x19a>
 8009a14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a16:	07d9      	lsls	r1, r3, #31
 8009a18:	d405      	bmi.n	8009a26 <_vfiprintf_r+0x1fe>
 8009a1a:	89ab      	ldrh	r3, [r5, #12]
 8009a1c:	059a      	lsls	r2, r3, #22
 8009a1e:	d402      	bmi.n	8009a26 <_vfiprintf_r+0x1fe>
 8009a20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a22:	f7ff f9a7 	bl	8008d74 <__retarget_lock_release_recursive>
 8009a26:	89ab      	ldrh	r3, [r5, #12]
 8009a28:	065b      	lsls	r3, r3, #25
 8009a2a:	f53f af1f 	bmi.w	800986c <_vfiprintf_r+0x44>
 8009a2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a30:	e71e      	b.n	8009870 <_vfiprintf_r+0x48>
 8009a32:	ab03      	add	r3, sp, #12
 8009a34:	9300      	str	r3, [sp, #0]
 8009a36:	462a      	mov	r2, r5
 8009a38:	4b05      	ldr	r3, [pc, #20]	@ (8009a50 <_vfiprintf_r+0x228>)
 8009a3a:	a904      	add	r1, sp, #16
 8009a3c:	4630      	mov	r0, r6
 8009a3e:	f7ff fc7f 	bl	8009340 <_printf_i>
 8009a42:	e7e4      	b.n	8009a0e <_vfiprintf_r+0x1e6>
 8009a44:	08009fde 	.word	0x08009fde
 8009a48:	08009fe8 	.word	0x08009fe8
 8009a4c:	00000000 	.word	0x00000000
 8009a50:	08009805 	.word	0x08009805
 8009a54:	08009fe4 	.word	0x08009fe4

08009a58 <__swbuf_r>:
 8009a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a5a:	460e      	mov	r6, r1
 8009a5c:	4614      	mov	r4, r2
 8009a5e:	4605      	mov	r5, r0
 8009a60:	b118      	cbz	r0, 8009a6a <__swbuf_r+0x12>
 8009a62:	6a03      	ldr	r3, [r0, #32]
 8009a64:	b90b      	cbnz	r3, 8009a6a <__swbuf_r+0x12>
 8009a66:	f7ff f801 	bl	8008a6c <__sinit>
 8009a6a:	69a3      	ldr	r3, [r4, #24]
 8009a6c:	60a3      	str	r3, [r4, #8]
 8009a6e:	89a3      	ldrh	r3, [r4, #12]
 8009a70:	071a      	lsls	r2, r3, #28
 8009a72:	d501      	bpl.n	8009a78 <__swbuf_r+0x20>
 8009a74:	6923      	ldr	r3, [r4, #16]
 8009a76:	b943      	cbnz	r3, 8009a8a <__swbuf_r+0x32>
 8009a78:	4621      	mov	r1, r4
 8009a7a:	4628      	mov	r0, r5
 8009a7c:	f000 f82a 	bl	8009ad4 <__swsetup_r>
 8009a80:	b118      	cbz	r0, 8009a8a <__swbuf_r+0x32>
 8009a82:	f04f 37ff 	mov.w	r7, #4294967295
 8009a86:	4638      	mov	r0, r7
 8009a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a8a:	6823      	ldr	r3, [r4, #0]
 8009a8c:	6922      	ldr	r2, [r4, #16]
 8009a8e:	1a98      	subs	r0, r3, r2
 8009a90:	6963      	ldr	r3, [r4, #20]
 8009a92:	b2f6      	uxtb	r6, r6
 8009a94:	4283      	cmp	r3, r0
 8009a96:	4637      	mov	r7, r6
 8009a98:	dc05      	bgt.n	8009aa6 <__swbuf_r+0x4e>
 8009a9a:	4621      	mov	r1, r4
 8009a9c:	4628      	mov	r0, r5
 8009a9e:	f7ff fdf3 	bl	8009688 <_fflush_r>
 8009aa2:	2800      	cmp	r0, #0
 8009aa4:	d1ed      	bne.n	8009a82 <__swbuf_r+0x2a>
 8009aa6:	68a3      	ldr	r3, [r4, #8]
 8009aa8:	3b01      	subs	r3, #1
 8009aaa:	60a3      	str	r3, [r4, #8]
 8009aac:	6823      	ldr	r3, [r4, #0]
 8009aae:	1c5a      	adds	r2, r3, #1
 8009ab0:	6022      	str	r2, [r4, #0]
 8009ab2:	701e      	strb	r6, [r3, #0]
 8009ab4:	6962      	ldr	r2, [r4, #20]
 8009ab6:	1c43      	adds	r3, r0, #1
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	d004      	beq.n	8009ac6 <__swbuf_r+0x6e>
 8009abc:	89a3      	ldrh	r3, [r4, #12]
 8009abe:	07db      	lsls	r3, r3, #31
 8009ac0:	d5e1      	bpl.n	8009a86 <__swbuf_r+0x2e>
 8009ac2:	2e0a      	cmp	r6, #10
 8009ac4:	d1df      	bne.n	8009a86 <__swbuf_r+0x2e>
 8009ac6:	4621      	mov	r1, r4
 8009ac8:	4628      	mov	r0, r5
 8009aca:	f7ff fddd 	bl	8009688 <_fflush_r>
 8009ace:	2800      	cmp	r0, #0
 8009ad0:	d0d9      	beq.n	8009a86 <__swbuf_r+0x2e>
 8009ad2:	e7d6      	b.n	8009a82 <__swbuf_r+0x2a>

08009ad4 <__swsetup_r>:
 8009ad4:	b538      	push	{r3, r4, r5, lr}
 8009ad6:	4b29      	ldr	r3, [pc, #164]	@ (8009b7c <__swsetup_r+0xa8>)
 8009ad8:	4605      	mov	r5, r0
 8009ada:	6818      	ldr	r0, [r3, #0]
 8009adc:	460c      	mov	r4, r1
 8009ade:	b118      	cbz	r0, 8009ae8 <__swsetup_r+0x14>
 8009ae0:	6a03      	ldr	r3, [r0, #32]
 8009ae2:	b90b      	cbnz	r3, 8009ae8 <__swsetup_r+0x14>
 8009ae4:	f7fe ffc2 	bl	8008a6c <__sinit>
 8009ae8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009aec:	0719      	lsls	r1, r3, #28
 8009aee:	d422      	bmi.n	8009b36 <__swsetup_r+0x62>
 8009af0:	06da      	lsls	r2, r3, #27
 8009af2:	d407      	bmi.n	8009b04 <__swsetup_r+0x30>
 8009af4:	2209      	movs	r2, #9
 8009af6:	602a      	str	r2, [r5, #0]
 8009af8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009afc:	81a3      	strh	r3, [r4, #12]
 8009afe:	f04f 30ff 	mov.w	r0, #4294967295
 8009b02:	e033      	b.n	8009b6c <__swsetup_r+0x98>
 8009b04:	0758      	lsls	r0, r3, #29
 8009b06:	d512      	bpl.n	8009b2e <__swsetup_r+0x5a>
 8009b08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b0a:	b141      	cbz	r1, 8009b1e <__swsetup_r+0x4a>
 8009b0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009b10:	4299      	cmp	r1, r3
 8009b12:	d002      	beq.n	8009b1a <__swsetup_r+0x46>
 8009b14:	4628      	mov	r0, r5
 8009b16:	f7ff f94d 	bl	8008db4 <_free_r>
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	6363      	str	r3, [r4, #52]	@ 0x34
 8009b1e:	89a3      	ldrh	r3, [r4, #12]
 8009b20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009b24:	81a3      	strh	r3, [r4, #12]
 8009b26:	2300      	movs	r3, #0
 8009b28:	6063      	str	r3, [r4, #4]
 8009b2a:	6923      	ldr	r3, [r4, #16]
 8009b2c:	6023      	str	r3, [r4, #0]
 8009b2e:	89a3      	ldrh	r3, [r4, #12]
 8009b30:	f043 0308 	orr.w	r3, r3, #8
 8009b34:	81a3      	strh	r3, [r4, #12]
 8009b36:	6923      	ldr	r3, [r4, #16]
 8009b38:	b94b      	cbnz	r3, 8009b4e <__swsetup_r+0x7a>
 8009b3a:	89a3      	ldrh	r3, [r4, #12]
 8009b3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009b40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b44:	d003      	beq.n	8009b4e <__swsetup_r+0x7a>
 8009b46:	4621      	mov	r1, r4
 8009b48:	4628      	mov	r0, r5
 8009b4a:	f000 f88b 	bl	8009c64 <__smakebuf_r>
 8009b4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b52:	f013 0201 	ands.w	r2, r3, #1
 8009b56:	d00a      	beq.n	8009b6e <__swsetup_r+0x9a>
 8009b58:	2200      	movs	r2, #0
 8009b5a:	60a2      	str	r2, [r4, #8]
 8009b5c:	6962      	ldr	r2, [r4, #20]
 8009b5e:	4252      	negs	r2, r2
 8009b60:	61a2      	str	r2, [r4, #24]
 8009b62:	6922      	ldr	r2, [r4, #16]
 8009b64:	b942      	cbnz	r2, 8009b78 <__swsetup_r+0xa4>
 8009b66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009b6a:	d1c5      	bne.n	8009af8 <__swsetup_r+0x24>
 8009b6c:	bd38      	pop	{r3, r4, r5, pc}
 8009b6e:	0799      	lsls	r1, r3, #30
 8009b70:	bf58      	it	pl
 8009b72:	6962      	ldrpl	r2, [r4, #20]
 8009b74:	60a2      	str	r2, [r4, #8]
 8009b76:	e7f4      	b.n	8009b62 <__swsetup_r+0x8e>
 8009b78:	2000      	movs	r0, #0
 8009b7a:	e7f7      	b.n	8009b6c <__swsetup_r+0x98>
 8009b7c:	200000d4 	.word	0x200000d4

08009b80 <_raise_r>:
 8009b80:	291f      	cmp	r1, #31
 8009b82:	b538      	push	{r3, r4, r5, lr}
 8009b84:	4605      	mov	r5, r0
 8009b86:	460c      	mov	r4, r1
 8009b88:	d904      	bls.n	8009b94 <_raise_r+0x14>
 8009b8a:	2316      	movs	r3, #22
 8009b8c:	6003      	str	r3, [r0, #0]
 8009b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b92:	bd38      	pop	{r3, r4, r5, pc}
 8009b94:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009b96:	b112      	cbz	r2, 8009b9e <_raise_r+0x1e>
 8009b98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b9c:	b94b      	cbnz	r3, 8009bb2 <_raise_r+0x32>
 8009b9e:	4628      	mov	r0, r5
 8009ba0:	f000 f830 	bl	8009c04 <_getpid_r>
 8009ba4:	4622      	mov	r2, r4
 8009ba6:	4601      	mov	r1, r0
 8009ba8:	4628      	mov	r0, r5
 8009baa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bae:	f000 b817 	b.w	8009be0 <_kill_r>
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	d00a      	beq.n	8009bcc <_raise_r+0x4c>
 8009bb6:	1c59      	adds	r1, r3, #1
 8009bb8:	d103      	bne.n	8009bc2 <_raise_r+0x42>
 8009bba:	2316      	movs	r3, #22
 8009bbc:	6003      	str	r3, [r0, #0]
 8009bbe:	2001      	movs	r0, #1
 8009bc0:	e7e7      	b.n	8009b92 <_raise_r+0x12>
 8009bc2:	2100      	movs	r1, #0
 8009bc4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009bc8:	4620      	mov	r0, r4
 8009bca:	4798      	blx	r3
 8009bcc:	2000      	movs	r0, #0
 8009bce:	e7e0      	b.n	8009b92 <_raise_r+0x12>

08009bd0 <raise>:
 8009bd0:	4b02      	ldr	r3, [pc, #8]	@ (8009bdc <raise+0xc>)
 8009bd2:	4601      	mov	r1, r0
 8009bd4:	6818      	ldr	r0, [r3, #0]
 8009bd6:	f7ff bfd3 	b.w	8009b80 <_raise_r>
 8009bda:	bf00      	nop
 8009bdc:	200000d4 	.word	0x200000d4

08009be0 <_kill_r>:
 8009be0:	b538      	push	{r3, r4, r5, lr}
 8009be2:	4d07      	ldr	r5, [pc, #28]	@ (8009c00 <_kill_r+0x20>)
 8009be4:	2300      	movs	r3, #0
 8009be6:	4604      	mov	r4, r0
 8009be8:	4608      	mov	r0, r1
 8009bea:	4611      	mov	r1, r2
 8009bec:	602b      	str	r3, [r5, #0]
 8009bee:	f7f7 fa97 	bl	8001120 <_kill>
 8009bf2:	1c43      	adds	r3, r0, #1
 8009bf4:	d102      	bne.n	8009bfc <_kill_r+0x1c>
 8009bf6:	682b      	ldr	r3, [r5, #0]
 8009bf8:	b103      	cbz	r3, 8009bfc <_kill_r+0x1c>
 8009bfa:	6023      	str	r3, [r4, #0]
 8009bfc:	bd38      	pop	{r3, r4, r5, pc}
 8009bfe:	bf00      	nop
 8009c00:	20000620 	.word	0x20000620

08009c04 <_getpid_r>:
 8009c04:	f7f7 ba84 	b.w	8001110 <_getpid>

08009c08 <_malloc_usable_size_r>:
 8009c08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c0c:	1f18      	subs	r0, r3, #4
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	bfbc      	itt	lt
 8009c12:	580b      	ldrlt	r3, [r1, r0]
 8009c14:	18c0      	addlt	r0, r0, r3
 8009c16:	4770      	bx	lr

08009c18 <__swhatbuf_r>:
 8009c18:	b570      	push	{r4, r5, r6, lr}
 8009c1a:	460c      	mov	r4, r1
 8009c1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c20:	2900      	cmp	r1, #0
 8009c22:	b096      	sub	sp, #88	@ 0x58
 8009c24:	4615      	mov	r5, r2
 8009c26:	461e      	mov	r6, r3
 8009c28:	da0d      	bge.n	8009c46 <__swhatbuf_r+0x2e>
 8009c2a:	89a3      	ldrh	r3, [r4, #12]
 8009c2c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009c30:	f04f 0100 	mov.w	r1, #0
 8009c34:	bf14      	ite	ne
 8009c36:	2340      	movne	r3, #64	@ 0x40
 8009c38:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009c3c:	2000      	movs	r0, #0
 8009c3e:	6031      	str	r1, [r6, #0]
 8009c40:	602b      	str	r3, [r5, #0]
 8009c42:	b016      	add	sp, #88	@ 0x58
 8009c44:	bd70      	pop	{r4, r5, r6, pc}
 8009c46:	466a      	mov	r2, sp
 8009c48:	f000 f848 	bl	8009cdc <_fstat_r>
 8009c4c:	2800      	cmp	r0, #0
 8009c4e:	dbec      	blt.n	8009c2a <__swhatbuf_r+0x12>
 8009c50:	9901      	ldr	r1, [sp, #4]
 8009c52:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009c56:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009c5a:	4259      	negs	r1, r3
 8009c5c:	4159      	adcs	r1, r3
 8009c5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c62:	e7eb      	b.n	8009c3c <__swhatbuf_r+0x24>

08009c64 <__smakebuf_r>:
 8009c64:	898b      	ldrh	r3, [r1, #12]
 8009c66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c68:	079d      	lsls	r5, r3, #30
 8009c6a:	4606      	mov	r6, r0
 8009c6c:	460c      	mov	r4, r1
 8009c6e:	d507      	bpl.n	8009c80 <__smakebuf_r+0x1c>
 8009c70:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009c74:	6023      	str	r3, [r4, #0]
 8009c76:	6123      	str	r3, [r4, #16]
 8009c78:	2301      	movs	r3, #1
 8009c7a:	6163      	str	r3, [r4, #20]
 8009c7c:	b003      	add	sp, #12
 8009c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c80:	ab01      	add	r3, sp, #4
 8009c82:	466a      	mov	r2, sp
 8009c84:	f7ff ffc8 	bl	8009c18 <__swhatbuf_r>
 8009c88:	9f00      	ldr	r7, [sp, #0]
 8009c8a:	4605      	mov	r5, r0
 8009c8c:	4639      	mov	r1, r7
 8009c8e:	4630      	mov	r0, r6
 8009c90:	f7ff f904 	bl	8008e9c <_malloc_r>
 8009c94:	b948      	cbnz	r0, 8009caa <__smakebuf_r+0x46>
 8009c96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c9a:	059a      	lsls	r2, r3, #22
 8009c9c:	d4ee      	bmi.n	8009c7c <__smakebuf_r+0x18>
 8009c9e:	f023 0303 	bic.w	r3, r3, #3
 8009ca2:	f043 0302 	orr.w	r3, r3, #2
 8009ca6:	81a3      	strh	r3, [r4, #12]
 8009ca8:	e7e2      	b.n	8009c70 <__smakebuf_r+0xc>
 8009caa:	89a3      	ldrh	r3, [r4, #12]
 8009cac:	6020      	str	r0, [r4, #0]
 8009cae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cb2:	81a3      	strh	r3, [r4, #12]
 8009cb4:	9b01      	ldr	r3, [sp, #4]
 8009cb6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009cba:	b15b      	cbz	r3, 8009cd4 <__smakebuf_r+0x70>
 8009cbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cc0:	4630      	mov	r0, r6
 8009cc2:	f000 f81d 	bl	8009d00 <_isatty_r>
 8009cc6:	b128      	cbz	r0, 8009cd4 <__smakebuf_r+0x70>
 8009cc8:	89a3      	ldrh	r3, [r4, #12]
 8009cca:	f023 0303 	bic.w	r3, r3, #3
 8009cce:	f043 0301 	orr.w	r3, r3, #1
 8009cd2:	81a3      	strh	r3, [r4, #12]
 8009cd4:	89a3      	ldrh	r3, [r4, #12]
 8009cd6:	431d      	orrs	r5, r3
 8009cd8:	81a5      	strh	r5, [r4, #12]
 8009cda:	e7cf      	b.n	8009c7c <__smakebuf_r+0x18>

08009cdc <_fstat_r>:
 8009cdc:	b538      	push	{r3, r4, r5, lr}
 8009cde:	4d07      	ldr	r5, [pc, #28]	@ (8009cfc <_fstat_r+0x20>)
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	4604      	mov	r4, r0
 8009ce4:	4608      	mov	r0, r1
 8009ce6:	4611      	mov	r1, r2
 8009ce8:	602b      	str	r3, [r5, #0]
 8009cea:	f7f7 fa79 	bl	80011e0 <_fstat>
 8009cee:	1c43      	adds	r3, r0, #1
 8009cf0:	d102      	bne.n	8009cf8 <_fstat_r+0x1c>
 8009cf2:	682b      	ldr	r3, [r5, #0]
 8009cf4:	b103      	cbz	r3, 8009cf8 <_fstat_r+0x1c>
 8009cf6:	6023      	str	r3, [r4, #0]
 8009cf8:	bd38      	pop	{r3, r4, r5, pc}
 8009cfa:	bf00      	nop
 8009cfc:	20000620 	.word	0x20000620

08009d00 <_isatty_r>:
 8009d00:	b538      	push	{r3, r4, r5, lr}
 8009d02:	4d06      	ldr	r5, [pc, #24]	@ (8009d1c <_isatty_r+0x1c>)
 8009d04:	2300      	movs	r3, #0
 8009d06:	4604      	mov	r4, r0
 8009d08:	4608      	mov	r0, r1
 8009d0a:	602b      	str	r3, [r5, #0]
 8009d0c:	f7f7 fa78 	bl	8001200 <_isatty>
 8009d10:	1c43      	adds	r3, r0, #1
 8009d12:	d102      	bne.n	8009d1a <_isatty_r+0x1a>
 8009d14:	682b      	ldr	r3, [r5, #0]
 8009d16:	b103      	cbz	r3, 8009d1a <_isatty_r+0x1a>
 8009d18:	6023      	str	r3, [r4, #0]
 8009d1a:	bd38      	pop	{r3, r4, r5, pc}
 8009d1c:	20000620 	.word	0x20000620

08009d20 <_init>:
 8009d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d22:	bf00      	nop
 8009d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d26:	bc08      	pop	{r3}
 8009d28:	469e      	mov	lr, r3
 8009d2a:	4770      	bx	lr

08009d2c <_fini>:
 8009d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d2e:	bf00      	nop
 8009d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d32:	bc08      	pop	{r3}
 8009d34:	469e      	mov	lr, r3
 8009d36:	4770      	bx	lr
